
MCU_OVER_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000412  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00000412  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000c0  008000c0  00000506  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000104e  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082f  00000000  00000000  000016ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a2f  00000000  00000000  00001ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bf  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000936  00000000  00000000  0000307f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000039b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3c       	cpi	r26, 0xC0	; 192
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ec       	ldi	r26, 0xC0	; 192
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3c       	cpi	r26, 0xC1	; 193
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
  8a:	0c 94 07 02 	jmp	0x40e	; 0x40e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <StringCompare>:
const static uint8_t * gu8_InvalidMessageReply = "Invalid Command \r";

/*- LOCAL FUNCTIONS IMPLEMENTATION
------------------------*/
static uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
  92:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
  94:	40 e0       	ldi	r20, 0x00	; 0
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
  96:	0a c0       	rjmp	.+20     	; 0xac <StringCompare+0x1a>
   {
      if(str1[u8_counter] != str2[u8_counter])
  98:	fb 01       	movw	r30, r22
  9a:	e2 0f       	add	r30, r18
  9c:	f3 1f       	adc	r31, r19
  9e:	20 81       	ld	r18, Z
  a0:	92 17       	cp	r25, r18
  a2:	19 f0       	breq	.+6      	; 0xaa <StringCompare+0x18>
      {
         u8_isEqual = FALSE;
         u8_counter++;
  a4:	4f 5f       	subi	r20, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
  a6:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
  a8:	0e c0       	rjmp	.+28     	; 0xc6 <StringCompare+0x34>
      }
      u8_counter++;
  aa:	4f 5f       	subi	r20, 0xFF	; 255
static uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
  ac:	24 2f       	mov	r18, r20
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	fd 01       	movw	r30, r26
  b2:	e2 0f       	add	r30, r18
  b4:	f3 1f       	adc	r31, r19
  b6:	90 81       	ld	r25, Z
  b8:	99 23       	and	r25, r25
  ba:	21 f0       	breq	.+8      	; 0xc4 <StringCompare+0x32>
  bc:	9d 30       	cpi	r25, 0x0D	; 13
  be:	61 f7       	brne	.-40     	; 0x98 <StringCompare+0x6>
/*- LOCAL FUNCTIONS IMPLEMENTATION
------------------------*/
static uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <StringCompare+0x34>
  c4:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
  c6:	fb 01       	movw	r30, r22
  c8:	e4 0f       	add	r30, r20
  ca:	f1 1d       	adc	r31, r1
  cc:	90 81       	ld	r25, Z
  ce:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
  d0:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
}
  d2:	08 95       	ret

000000d4 <Traffic_init>:

/*- APIs IMPLEMENTATION
-----------------------------------*/
void Traffic_init(void)
{
   LED_Init(LED_CH_1);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LED_Init>
   LED_Init(LED_CH_2);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LED_Init>
   LED_Init(LED_CH_3);
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LED_Init>
   UART_init(CLK_8_MHZ_9600_BAUD);
  e6:	83 e3       	ldi	r24, 0x33	; 51
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 a2 01 	call	0x344	; 0x344 <UART_init>
  ee:	08 95       	ret

000000f0 <Traffic_update>:
}

void Traffic_update(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	c8 5c       	subi	r28, 0xC8	; 200
  fa:	d1 09       	sbc	r29, r1
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	f8 94       	cli
 100:	de bf       	out	0x3e, r29	; 62
 102:	0f be       	out	0x3f, r0	; 63
 104:	cd bf       	out	0x3d, r28	; 61
   uint8_t string[MAX_STRING_SIZE];
   UART_readString(string);
 106:	ce 01       	movw	r24, r28
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_readString>
   
   if(StringCompare(string,gu8_StartMessage) == TRUE)
 10e:	60 e6       	ldi	r22, 0x60	; 96
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	ce 01       	movw	r24, r28
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	0e 94 49 00 	call	0x92	; 0x92 <StringCompare>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	71 f4       	brne	.+28     	; 0x13a <Traffic_update+0x4a>
   {
      LED_Off(LED_CH_2);
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LED_Off>
      LED_Off(LED_CH_3);
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LED_Off>
      LED_On(LED_CH_1);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 16 01 	call	0x22c	; 0x22c <LED_On>
      UART_sendString(gu8_StartMessageReply);
 130:	86 e6       	ldi	r24, 0x66	; 102
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_sendString>
 138:	3b c0       	rjmp	.+118    	; 0x1b0 <Traffic_update+0xc0>
   }
   else if(StringCompare(string, gu8_WaitMessage) == TRUE)
 13a:	68 e7       	ldi	r22, 0x78	; 120
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 49 00 	call	0x92	; 0x92 <StringCompare>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	69 f4       	brne	.+26     	; 0x164 <Traffic_update+0x74>
   {
      LED_Off(LED_CH_1);
 14a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LED_Off>
      LED_Off(LED_CH_3);
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LED_Off>
      LED_On(LED_CH_2);
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	0e 94 16 01 	call	0x22c	; 0x22c <LED_On>
      UART_sendString(gu8_WaitMessageReply);
 15a:	8d e7       	ldi	r24, 0x7D	; 125
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_sendString>
 162:	26 c0       	rjmp	.+76     	; 0x1b0 <Traffic_update+0xc0>
   }
   else if(StringCompare(string, gu8_StopMessage) == TRUE)
 164:	60 e9       	ldi	r22, 0x90	; 144
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	0e 94 49 00 	call	0x92	; 0x92 <StringCompare>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	69 f4       	brne	.+26     	; 0x18e <Traffic_update+0x9e>
   {
      LED_Off(LED_CH_1);
 174:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LED_Off>
      LED_Off(LED_CH_2);
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LED_Off>
      LED_On(LED_CH_3);
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 16 01 	call	0x22c	; 0x22c <LED_On>
      UART_sendString(gu8_StopMessageReply);
 184:	85 e9       	ldi	r24, 0x95	; 149
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_sendString>
 18c:	11 c0       	rjmp	.+34     	; 0x1b0 <Traffic_update+0xc0>
   }
   else if(StringCompare(string, gu8_ATMessage) == TRUE)
 18e:	65 ea       	ldi	r22, 0xA5	; 165
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	ce 01       	movw	r24, r28
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	0e 94 49 00 	call	0x92	; 0x92 <StringCompare>
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	29 f4       	brne	.+10     	; 0x1a8 <Traffic_update+0xb8>
   {
      UART_sendString(gu8_ATMessageReply);
 19e:	88 ea       	ldi	r24, 0xA8	; 168
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_sendString>
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <Traffic_update+0xc0>
   }
   else
   {
      UART_sendString(gu8_InvalidMessageReply);
 1a8:	8d ea       	ldi	r24, 0xAD	; 173
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_sendString>
   }
 1b0:	c8 53       	subi	r28, 0x38	; 56
 1b2:	df 4f       	sbci	r29, 0xFF	; 255
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <LED_Init>:
/**
* @brief: This function toggles the led
*/
LED_ERROR_state_t LED_Init(uint8_t LED_ch)
{
   switch(LED_ch)
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	59 f0       	breq	.+22     	; 0x1de <LED_Init+0x1a>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	81 f0       	breq	.+32     	; 0x1ec <LED_Init+0x28>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	a9 f4       	brne	.+42     	; 0x1fa <LED_Init+0x36>
   {
      case LED_CH_1:
         DIO_SetPinDirection(LED_CH_1_PORT, LED_CH_1_PIN, OUTPUT);
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPinDirection>
         break;
      default:
         return E_LED_INVALID_CH_NO;
   }
   
   return E_LED_SUCCESS;
 1da:	80 e0       	ldi	r24, 0x00	; 0
{
   switch(LED_ch)
   {
      case LED_CH_1:
         DIO_SetPinDirection(LED_CH_1_PORT, LED_CH_1_PIN, OUTPUT);
         break;
 1dc:	08 95       	ret
      case LED_CH_2:
         DIO_SetPinDirection(LED_CH_2_PORT, LED_CH_2_PIN, OUTPUT);
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPinDirection>
         break;
      default:
         return E_LED_INVALID_CH_NO;
   }
   
   return E_LED_SUCCESS;
 1e8:	80 e0       	ldi	r24, 0x00	; 0
      case LED_CH_1:
         DIO_SetPinDirection(LED_CH_1_PORT, LED_CH_1_PIN, OUTPUT);
         break;
      case LED_CH_2:
         DIO_SetPinDirection(LED_CH_2_PORT, LED_CH_2_PIN, OUTPUT);
         break;
 1ea:	08 95       	ret
      case LED_CH_3:
         DIO_SetPinDirection(LED_CH_3_PORT, LED_CH_3_PIN, OUTPUT);
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 32 01 	call	0x264	; 0x264 <DIO_SetPinDirection>
         break;
      default:
         return E_LED_INVALID_CH_NO;
   }
   
   return E_LED_SUCCESS;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
      case LED_CH_2:
         DIO_SetPinDirection(LED_CH_2_PORT, LED_CH_2_PIN, OUTPUT);
         break;
      case LED_CH_3:
         DIO_SetPinDirection(LED_CH_3_PORT, LED_CH_3_PIN, OUTPUT);
         break;
 1f8:	08 95       	ret
      default:
         return E_LED_INVALID_CH_NO;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
   }
   
   return E_LED_SUCCESS;
}
 1fc:	08 95       	ret

000001fe <LED_Off>:
LED_ERROR_state_t LED_Off(uint8_t LED_ch)
{
   uint8_t u8_ChPort;
   uint8_t u8_ChPin;
   
   switch(LED_ch)
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	41 f0       	breq	.+16     	; 0x212 <LED_Off+0x14>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	21 f0       	breq	.+8      	; 0x20e <LED_Off+0x10>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	69 f4       	brne	.+26     	; 0x224 <LED_Off+0x26>
   {
      case LED_CH_1:
         u8_ChPort = LED_CH_1_PORT;
         u8_ChPin = LED_CH_1_PIN;
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	03 c0       	rjmp	.+6      	; 0x214 <LED_Off+0x16>
         u8_ChPort = LED_CH_2_PORT;
         u8_ChPin = LED_CH_2_PIN;
         break;
      case LED_CH_3:
         u8_ChPort = LED_CH_3_PORT;
         u8_ChPin = LED_CH_3_PIN;
 20e:	62 e0       	ldi	r22, 0x02	; 2
         break;
 210:	01 c0       	rjmp	.+2      	; 0x214 <LED_Off+0x16>
         u8_ChPort = LED_CH_1_PORT;
         u8_ChPin = LED_CH_1_PIN;
         break;   
      case LED_CH_2:
         u8_ChPort = LED_CH_2_PORT;
         u8_ChPin = LED_CH_2_PIN;
 212:	61 e0       	ldi	r22, 0x01	; 1
         return E_LED_INVALID_CH_NO;
   }
   
   DIO_ERROR_state_t DIOErrorState;
   
   DIOErrorState = DIO_WritePin(u8_ChPort, u8_ChPin, LOW);
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_WritePin>
   
   if(E_DIO_SUCCESS != DIOErrorState)
 21c:	88 23       	and	r24, r24
 21e:	21 f0       	breq	.+8      	; 0x228 <LED_Off+0x2a>
   {
      return E_LED_DIO_ERROR;
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	08 95       	ret
      case LED_CH_3:
         u8_ChPort = LED_CH_3_PORT;
         u8_ChPin = LED_CH_3_PIN;
         break;
      default:
         return E_LED_INVALID_CH_NO;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	08 95       	ret
   if(E_DIO_SUCCESS != DIOErrorState)
   {
      return E_LED_DIO_ERROR;
   }
   
   return E_LED_SUCCESS;
 228:	80 e0       	ldi	r24, 0x00	; 0
}
 22a:	08 95       	ret

0000022c <LED_On>:
LED_ERROR_state_t LED_On(uint8_t LED_ch)
{
   uint8_t u8_ChPort;
   uint8_t u8_ChPin;
   
   switch(LED_ch)
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	41 f0       	breq	.+16     	; 0x240 <LED_On+0x14>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	21 f0       	breq	.+8      	; 0x23c <LED_On+0x10>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	69 f4       	brne	.+26     	; 0x252 <LED_On+0x26>
   {
      case LED_CH_1:
         u8_ChPort = LED_CH_1_PORT;
         u8_ChPin = LED_CH_1_PIN;
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	03 c0       	rjmp	.+6      	; 0x242 <LED_On+0x16>
         u8_ChPort = LED_CH_2_PORT;
         u8_ChPin = LED_CH_2_PIN;
         break;
      case LED_CH_3:
         u8_ChPort = LED_CH_3_PORT;
         u8_ChPin = LED_CH_3_PIN;
 23c:	62 e0       	ldi	r22, 0x02	; 2
         break;
 23e:	01 c0       	rjmp	.+2      	; 0x242 <LED_On+0x16>
         u8_ChPort = LED_CH_1_PORT;
         u8_ChPin = LED_CH_1_PIN;
         break;
      case LED_CH_2:
         u8_ChPort = LED_CH_2_PORT;
         u8_ChPin = LED_CH_2_PIN;
 240:	61 e0       	ldi	r22, 0x01	; 1
         return E_LED_INVALID_CH_NO;
   }
   
   DIO_ERROR_state_t DIOErrorState;
   
   DIOErrorState = DIO_WritePin(u8_ChPort, u8_ChPin, HIGH);
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_WritePin>
   
   if(E_DIO_SUCCESS != DIOErrorState)
 24a:	88 23       	and	r24, r24
 24c:	21 f0       	breq	.+8      	; 0x256 <LED_On+0x2a>
   {
      return E_LED_DIO_ERROR;
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	08 95       	ret
      case LED_CH_3:
         u8_ChPort = LED_CH_3_PORT;
         u8_ChPin = LED_CH_3_PIN;
         break;
      default:
         return E_LED_INVALID_CH_NO;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	08 95       	ret
   if(E_DIO_SUCCESS != DIOErrorState)
   {
      return E_LED_DIO_ERROR;
   }
   
   return E_LED_SUCCESS;
 256:	80 e0       	ldi	r24, 0x00	; 0
}
 258:	08 95       	ret

0000025a <main>:
-----------------------------------------------*/
#include "App/TrafficSign/TrafficSign.h"

int main(void)
{
   Traffic_init();
 25a:	0e 94 6a 00 	call	0xd4	; 0xd4 <Traffic_init>
   while (1) 
   {
      Traffic_update();
 25e:	0e 94 78 00 	call	0xf0	; 0xf0 <Traffic_update>
 262:	fd cf       	rjmp	.-6      	; 0x25e <main+0x4>

00000264 <DIO_SetPinDirection>:
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
}
 264:	68 30       	cpi	r22, 0x08	; 8
 266:	80 f5       	brcc	.+96     	; 0x2c8 <DIO_SetPinDirection+0x64>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	79 f0       	breq	.+30     	; 0x28a <DIO_SetPinDirection+0x26>
 26c:	28 f0       	brcs	.+10     	; 0x278 <DIO_SetPinDirection+0x14>
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	31 f0       	breq	.+12     	; 0x27e <DIO_SetPinDirection+0x1a>
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	39 f0       	breq	.+14     	; 0x284 <DIO_SetPinDirection+0x20>
 276:	2a c0       	rjmp	.+84     	; 0x2cc <DIO_SetPinDirection+0x68>
 278:	ea e3       	ldi	r30, 0x3A	; 58
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	08 c0       	rjmp	.+16     	; 0x28e <DIO_SetPinDirection+0x2a>
 27e:	e4 e3       	ldi	r30, 0x34	; 52
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	05 c0       	rjmp	.+10     	; 0x28e <DIO_SetPinDirection+0x2a>
 284:	e1 e3       	ldi	r30, 0x31	; 49
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_SetPinDirection+0x2a>
 28a:	e7 e3       	ldi	r30, 0x37	; 55
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	41 30       	cpi	r20, 0x01	; 1
 290:	61 f4       	brne	.+24     	; 0x2aa <DIO_SetPinDirection+0x46>
 292:	20 81       	ld	r18, Z
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_SetPinDirection+0x3a>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_SetPinDirection+0x36>
 2a2:	82 2b       	or	r24, r18
 2a4:	80 83       	st	Z, r24
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	41 11       	cpse	r20, r1
 2ac:	11 c0       	rjmp	.+34     	; 0x2d0 <DIO_SetPinDirection+0x6c>
 2ae:	20 81       	ld	r18, Z
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_SetPinDirection+0x56>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_SetPinDirection+0x52>
 2be:	80 95       	com	r24
 2c0:	82 23       	and	r24, r18
 2c2:	80 83       	st	Z, r24
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	08 95       	ret
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	08 95       	ret
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret

000002d4 <DIO_WritePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 2d4:	68 30       	cpi	r22, 0x08	; 8
 2d6:	80 f5       	brcc	.+96     	; 0x338 <DIO_WritePin+0x64>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data pointer according to the required port. */
   switch(port)
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	79 f0       	breq	.+30     	; 0x2fa <DIO_WritePin+0x26>
 2dc:	28 f0       	brcs	.+10     	; 0x2e8 <DIO_WritePin+0x14>
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	31 f0       	breq	.+12     	; 0x2ee <DIO_WritePin+0x1a>
 2e2:	83 30       	cpi	r24, 0x03	; 3
 2e4:	39 f0       	breq	.+14     	; 0x2f4 <DIO_WritePin+0x20>
 2e6:	2a c0       	rjmp	.+84     	; 0x33c <DIO_WritePin+0x68>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 2e8:	eb e3       	ldi	r30, 0x3B	; 59
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	08 c0       	rjmp	.+16     	; 0x2fe <DIO_WritePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 2ee:	e5 e3       	ldi	r30, 0x35	; 53
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <DIO_WritePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 2f4:	e2 e3       	ldi	r30, 0x32	; 50
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_WritePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 2fa:	e8 e3       	ldi	r30, 0x38	; 56
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   /* set or clear value in the pin. */
   if(HIGH == data)
 2fe:	41 30       	cpi	r20, 0x01	; 1
 300:	61 f4       	brne	.+24     	; 0x31a <DIO_WritePin+0x46>
   {
      SET_BIT(*prt_port_data,pin);
 302:	20 81       	ld	r18, Z
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_WritePin+0x3a>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_WritePin+0x36>
 312:	82 2b       	or	r24, r18
 314:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret
   /* set or clear value in the pin. */
   if(HIGH == data)
   {
      SET_BIT(*prt_port_data,pin);
   }
   else if(LOW == data)
 31a:	41 11       	cpse	r20, r1
 31c:	11 c0       	rjmp	.+34     	; 0x340 <DIO_WritePin+0x6c>
   {
      CLEAR_BIT(*prt_port_data,pin);
 31e:	20 81       	ld	r18, Z
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_WritePin+0x56>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_WritePin+0x52>
 32e:	80 95       	com	r24
 330:	82 23       	and	r24, r18
 332:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	08 95       	ret
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	08 95       	ret
      CLEAR_BIT(*prt_port_data,pin);
   }
   /* if data is invalid. */
   else
   {
      return E_DIO_INVALID_WRITE_DATA;
 340:	84 e0       	ldi	r24, 0x04	; 4
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 342:	08 95       	ret

00000344 <UART_init>:
   /* Get and return received data from buffer */
   *character = UART_DATA_R;
   
   /* return success status */
   return E_UART_SUCCESS;
}
 344:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__data_end>
 348:	21 30       	cpi	r18, 0x01	; 1
 34a:	99 f0       	breq	.+38     	; 0x372 <UART_init+0x2e>
 34c:	8f 3f       	cpi	r24, 0xFF	; 255
 34e:	91 05       	cpc	r25, r1
 350:	09 f0       	breq	.+2      	; 0x354 <UART_init+0x10>
 352:	88 f4       	brcc	.+34     	; 0x376 <UART_init+0x32>
 354:	28 e1       	ldi	r18, 0x18	; 24
 356:	2a b9       	out	0x0a, r18	; 10
 358:	26 e8       	ldi	r18, 0x86	; 134
 35a:	20 bd       	out	0x20, r18	; 32
 35c:	89 b9       	out	0x09, r24	; 9
 35e:	8f 3f       	cpi	r24, 0xFF	; 255
 360:	91 05       	cpc	r25, r1
 362:	11 f0       	breq	.+4      	; 0x368 <UART_init+0x24>
 364:	08 f0       	brcs	.+2      	; 0x368 <UART_init+0x24>
 366:	90 bd       	out	0x20, r25	; 32
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__data_end>
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	08 95       	ret
 372:	85 e0       	ldi	r24, 0x05	; 5
 374:	08 95       	ret
 376:	87 e0       	ldi	r24, 0x07	; 7
 378:	08 95       	ret

0000037a <UART_sendString>:
* @param [in]  string  -  pointer to string to send through UART.
*
* @return function error state.
*/
UART_ERROR_state_t UART_sendString(uint8_t * string)
{
 37a:	9c 01       	movw	r18, r24
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure the driver was initialized before calling this function, 
      and an initialized pointer is sent to the function */
   if( NOT_INIT == gu8_is_UART_init)
 37c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_end>
 380:	88 23       	and	r24, r24
 382:	81 f0       	breq	.+32     	; 0x3a4 <UART_sendString+0x2a>
   {
      return E_UART_NOT_INIT;
   }
   else if(NULL_PTR == string)
 384:	21 15       	cp	r18, r1
 386:	31 05       	cpc	r19, r1
 388:	79 f0       	breq	.+30     	; 0x3a8 <UART_sendString+0x2e>
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	04 c0       	rjmp	.+8      	; 0x396 <UART_sendString+0x1c>
   
   /* keeps sending data until it finds an end of string character in the string */
   while(string[counter] != END_OF_STRING)
   {
      /* Wait for empty transmit buffer */
      while ( !( UART_STATUS_R & EMPTY_BUFFER_BIT) );
 38e:	5d 9b       	sbis	0x0b, 5	; 11
 390:	fe cf       	rjmp	.-4      	; 0x38e <UART_sendString+0x14>
      
      /* Put data into buffer, sends the data */
      UART_DATA_R = string[counter];
 392:	8c b9       	out	0x0c, r24	; 12
      counter++;
 394:	9f 5f       	subi	r25, 0xFF	; 255
   {
      /* do nothing */
   }
   
   /* keeps sending data until it finds an end of string character in the string */
   while(string[counter] != END_OF_STRING)
 396:	f9 01       	movw	r30, r18
 398:	e9 0f       	add	r30, r25
 39a:	f1 1d       	adc	r31, r1
 39c:	80 81       	ld	r24, Z
 39e:	81 11       	cpse	r24, r1
 3a0:	f6 cf       	rjmp	.-20     	; 0x38e <UART_sendString+0x14>
 3a2:	08 95       	ret
   
   /* making sure the driver was initialized before calling this function, 
      and an initialized pointer is sent to the function */
   if( NOT_INIT == gu8_is_UART_init)
   {
      return E_UART_NOT_INIT;
 3a4:	86 e0       	ldi	r24, 0x06	; 6
 3a6:	08 95       	ret
   }
   else if(NULL_PTR == string)
   {
      return E_UART_NULL_PTR;
 3a8:	84 e0       	ldi	r24, 0x04	; 4
      counter++;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 3aa:	08 95       	ret

000003ac <UART_readString>:
* @param [out]  string  -  pointer to string to save the string through UART.
*
* @return function error state.
*/
UART_ERROR_state_t UART_readString(uint8_t * string)
{
 3ac:	ac 01       	movw	r20, r24
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure the driver was initialized before calling this function, 
      and an initialized pointer is sent to the function */
   if( NOT_INIT == gu8_is_UART_init)
 3ae:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_end>
 3b2:	88 23       	and	r24, r24
 3b4:	41 f1       	breq	.+80     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
   {
      return E_UART_NOT_INIT;
   }
   else if(NULL_PTR == string)
 3b6:	41 15       	cp	r20, r1
 3b8:	51 05       	cpc	r21, r1
 3ba:	39 f1       	breq	.+78     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <UART_readString+0x18>
            counter -= STRING_RETURN_TO_PREV_CHAR;
         }
         /* return to the string start if the counter is still at first character */
         else
         {
            counter = STRING_COUNTER_START;
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	29 2f       	mov	r18, r25
   }
   
   while(1)
   {
      /* Wait for data to be received */
      while ( !(UART_STATUS_R & RECEIVE_COMPLETE_BIT) );
 3c4:	5f 9b       	sbis	0x0b, 7	; 11
 3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <UART_readString+0x18>
      /* Get and return received data from buffer */
      string[counter] = UART_DATA_R;
 3c8:	62 2f       	mov	r22, r18
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	fa 01       	movw	r30, r20
 3ce:	e6 0f       	add	r30, r22
 3d0:	f7 1f       	adc	r31, r23
 3d2:	9c b1       	in	r25, 0x0c	; 12
 3d4:	90 83       	st	Z, r25
      
      /* enters an end of string character and breaks from the loop on receiving
         a new line character */
      if(string[counter] == NEW_LINE)
 3d6:	9d 30       	cpi	r25, 0x0D	; 13
 3d8:	41 f4       	brne	.+16     	; 0x3ea <UART_readString+0x3e>
      {
         string[counter + 1] = END_OF_STRING;
 3da:	6f 5f       	subi	r22, 0xFF	; 255
 3dc:	7f 4f       	sbci	r23, 0xFF	; 255
 3de:	fa 01       	movw	r30, r20
 3e0:	e6 0f       	add	r30, r22
 3e2:	f7 1f       	adc	r31, r23
 3e4:	10 82       	st	Z, r1
         }
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	08 95       	ret
      if(string[counter] == NEW_LINE)
      {
         string[counter + 1] = END_OF_STRING;
         break;
      }
      counter++;
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	92 0f       	add	r25, r18
      
      /* return to the previous character to overwrite if the entered character 
         is backspace */
      if(string[counter - STRING_PREV_CHAR] == BACKSPACE)
 3ee:	fa 01       	movw	r30, r20
 3f0:	e9 0f       	add	r30, r25
 3f2:	f1 1d       	adc	r31, r1
 3f4:	31 97       	sbiw	r30, 0x01	; 1
 3f6:	80 81       	ld	r24, Z
 3f8:	88 30       	cpi	r24, 0x08	; 8
 3fa:	19 f7       	brne	.-58     	; 0x3c2 <UART_readString+0x16>
      {
         if (counter - STRING_PREV_CHAR != STRING_COUNTER_START)
 3fc:	91 30       	cpi	r25, 0x01	; 1
 3fe:	01 f3       	breq	.-64     	; 0x3c0 <UART_readString+0x14>
         {
            counter -= STRING_RETURN_TO_PREV_CHAR;
 400:	9f ef       	ldi	r25, 0xFF	; 255
 402:	92 0f       	add	r25, r18
 404:	de cf       	rjmp	.-68     	; 0x3c2 <UART_readString+0x16>
   
   /* making sure the driver was initialized before calling this function, 
      and an initialized pointer is sent to the function */
   if( NOT_INIT == gu8_is_UART_init)
   {
      return E_UART_NOT_INIT;
 406:	86 e0       	ldi	r24, 0x06	; 6
 408:	08 95       	ret
   }
   else if(NULL_PTR == string)
   {
      return E_UART_NULL_PTR;
 40a:	84 e0       	ldi	r24, 0x04	; 4
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
 40c:	08 95       	ret

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>
