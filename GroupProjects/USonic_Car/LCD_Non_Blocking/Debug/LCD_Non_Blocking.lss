
LCD_Non_Blocking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  000035a0  00003634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080017e  0080017e  00003752  2**0
                  ALLOC
  3 .stab         00003324  00000000  00000000  00003754  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001157  00000000  00000000  00006a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b5  00000000  00000000  00007d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d07  00000000  00000000  00007ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001011  00000000  00000000  00009beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000eca  00000000  00000000  0000abfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000bac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c7  00000000  00000000  0000bc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000082e  00000000  00000000  0000bf0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 1a 	call	0x3458	; 0x3458 <main>
      8a:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 2b 03 	call	0x656	; 0x656 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 2b 03 	call	0x656	; 0x656 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__divsf3+0x48>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__divsf3+0x144>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__divsf3+0x52>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__divsf3+0x14a>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__divsf3+0x62>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__divsf3+0x6e>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__divsf3+0x68>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__divsf3+0x144>
     4a6:	69 e6       	ldi	r22, 0x69	; 105
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__divsf3+0x14a>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__divsf3+0x80>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__divsf3+0x88>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__divsf3+0x8c>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__divsf3+0x14a>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__divsf3+0xc6>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__divsf3+0xf4>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__divsf3+0xda>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__divsf3+0x13c>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__divsf3+0x13c>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__divsf3+0x13c>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__epilogue_restores__+0x10>

00000596 <__nesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__nesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__nesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 94 05 	call	0xb28	; 0xb28 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__nesf2+0x58>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__epilogue_restores__+0x18>

000005f6 <__gesf2>:
     5f6:	a8 e1       	ldi	r26, 0x18	; 24
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__prologue_saves__+0x18>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	2d 83       	std	Y+5, r18	; 0x05
     60c:	3e 83       	std	Y+6, r19	; 0x06
     60e:	4f 83       	std	Y+7, r20	; 0x07
     610:	58 87       	std	Y+8, r21	; 0x08
     612:	89 e0       	ldi	r24, 0x09	; 9
     614:	e8 2e       	mov	r14, r24
     616:	f1 2c       	mov	r15, r1
     618:	ec 0e       	add	r14, r28
     61a:	fd 1e       	adc	r15, r29
     61c:	ce 01       	movw	r24, r28
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	b7 01       	movw	r22, r14
     622:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     626:	8e 01       	movw	r16, r28
     628:	0f 5e       	subi	r16, 0xEF	; 239
     62a:	1f 4f       	sbci	r17, 0xFF	; 255
     62c:	ce 01       	movw	r24, r28
     62e:	05 96       	adiw	r24, 0x05	; 5
     630:	b8 01       	movw	r22, r16
     632:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     636:	89 85       	ldd	r24, Y+9	; 0x09
     638:	82 30       	cpi	r24, 0x02	; 2
     63a:	40 f0       	brcs	.+16     	; 0x64c <__gesf2+0x56>
     63c:	89 89       	ldd	r24, Y+17	; 0x11
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	28 f0       	brcs	.+10     	; 0x64c <__gesf2+0x56>
     642:	c7 01       	movw	r24, r14
     644:	b8 01       	movw	r22, r16
     646:	0e 94 94 05 	call	0xb28	; 0xb28 <__fpcmp_parts_f>
     64a:	01 c0       	rjmp	.+2      	; 0x64e <__gesf2+0x58>
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	68 96       	adiw	r28, 0x18	; 24
     650:	e6 e0       	ldi	r30, 0x06	; 6
     652:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__epilogue_restores__+0x18>

00000656 <__fixsfsi>:
     656:	ac e0       	ldi	r26, 0x0C	; 12
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	e1 e3       	ldi	r30, 0x31	; 49
     65c:	f3 e0       	ldi	r31, 0x03	; 3
     65e:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__prologue_saves__+0x20>
     662:	69 83       	std	Y+1, r22	; 0x01
     664:	7a 83       	std	Y+2, r23	; 0x02
     666:	8b 83       	std	Y+3, r24	; 0x03
     668:	9c 83       	std	Y+4, r25	; 0x04
     66a:	ce 01       	movw	r24, r28
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	be 01       	movw	r22, r28
     670:	6b 5f       	subi	r22, 0xFB	; 251
     672:	7f 4f       	sbci	r23, 0xFF	; 255
     674:	0e 94 1c 05 	call	0xa38	; 0xa38 <__unpack_f>
     678:	8d 81       	ldd	r24, Y+5	; 0x05
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	61 f1       	breq	.+88     	; 0x6d6 <__fixsfsi+0x80>
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	50 f1       	brcs	.+84     	; 0x6d6 <__fixsfsi+0x80>
     682:	84 30       	cpi	r24, 0x04	; 4
     684:	21 f4       	brne	.+8      	; 0x68e <__fixsfsi+0x38>
     686:	8e 81       	ldd	r24, Y+6	; 0x06
     688:	88 23       	and	r24, r24
     68a:	51 f1       	breq	.+84     	; 0x6e0 <__fixsfsi+0x8a>
     68c:	2e c0       	rjmp	.+92     	; 0x6ea <__fixsfsi+0x94>
     68e:	2f 81       	ldd	r18, Y+7	; 0x07
     690:	38 85       	ldd	r19, Y+8	; 0x08
     692:	37 fd       	sbrc	r19, 7
     694:	20 c0       	rjmp	.+64     	; 0x6d6 <__fixsfsi+0x80>
     696:	6e 81       	ldd	r22, Y+6	; 0x06
     698:	2f 31       	cpi	r18, 0x1F	; 31
     69a:	31 05       	cpc	r19, r1
     69c:	1c f0       	brlt	.+6      	; 0x6a4 <__fixsfsi+0x4e>
     69e:	66 23       	and	r22, r22
     6a0:	f9 f0       	breq	.+62     	; 0x6e0 <__fixsfsi+0x8a>
     6a2:	23 c0       	rjmp	.+70     	; 0x6ea <__fixsfsi+0x94>
     6a4:	8e e1       	ldi	r24, 0x1E	; 30
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	82 1b       	sub	r24, r18
     6aa:	93 0b       	sbc	r25, r19
     6ac:	29 85       	ldd	r18, Y+9	; 0x09
     6ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     6b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     6b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <__fixsfsi+0x68>
     6b6:	56 95       	lsr	r21
     6b8:	47 95       	ror	r20
     6ba:	37 95       	ror	r19
     6bc:	27 95       	ror	r18
     6be:	8a 95       	dec	r24
     6c0:	d2 f7       	brpl	.-12     	; 0x6b6 <__fixsfsi+0x60>
     6c2:	66 23       	and	r22, r22
     6c4:	b1 f0       	breq	.+44     	; 0x6f2 <__fixsfsi+0x9c>
     6c6:	50 95       	com	r21
     6c8:	40 95       	com	r20
     6ca:	30 95       	com	r19
     6cc:	21 95       	neg	r18
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	4f 4f       	sbci	r20, 0xFF	; 255
     6d2:	5f 4f       	sbci	r21, 0xFF	; 255
     6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <__fixsfsi+0x9c>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	09 c0       	rjmp	.+18     	; 0x6f2 <__fixsfsi+0x9c>
     6e0:	2f ef       	ldi	r18, 0xFF	; 255
     6e2:	3f ef       	ldi	r19, 0xFF	; 255
     6e4:	4f ef       	ldi	r20, 0xFF	; 255
     6e6:	5f e7       	ldi	r21, 0x7F	; 127
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <__fixsfsi+0x9c>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	50 e8       	ldi	r21, 0x80	; 128
     6f2:	b9 01       	movw	r22, r18
     6f4:	ca 01       	movw	r24, r20
     6f6:	2c 96       	adiw	r28, 0x0c	; 12
     6f8:	e2 e0       	ldi	r30, 0x02	; 2
     6fa:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__epilogue_restores__+0x20>

000006fe <__floatunsisf>:
     6fe:	a8 e0       	ldi	r26, 0x08	; 8
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	e5 e8       	ldi	r30, 0x85	; 133
     704:	f3 e0       	ldi	r31, 0x03	; 3
     706:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__prologue_saves__+0x10>
     70a:	7b 01       	movw	r14, r22
     70c:	8c 01       	movw	r16, r24
     70e:	61 15       	cp	r22, r1
     710:	71 05       	cpc	r23, r1
     712:	81 05       	cpc	r24, r1
     714:	91 05       	cpc	r25, r1
     716:	19 f4       	brne	.+6      	; 0x71e <__floatunsisf+0x20>
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	89 83       	std	Y+1, r24	; 0x01
     71c:	60 c0       	rjmp	.+192    	; 0x7de <__floatunsisf+0xe0>
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	89 83       	std	Y+1, r24	; 0x01
     722:	8e e1       	ldi	r24, 0x1E	; 30
     724:	c8 2e       	mov	r12, r24
     726:	d1 2c       	mov	r13, r1
     728:	dc 82       	std	Y+4, r13	; 0x04
     72a:	cb 82       	std	Y+3, r12	; 0x03
     72c:	ed 82       	std	Y+5, r14	; 0x05
     72e:	fe 82       	std	Y+6, r15	; 0x06
     730:	0f 83       	std	Y+7, r16	; 0x07
     732:	18 87       	std	Y+8, r17	; 0x08
     734:	c8 01       	movw	r24, r16
     736:	b7 01       	movw	r22, r14
     738:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__clzsi2>
     73c:	fc 01       	movw	r30, r24
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	f7 ff       	sbrs	r31, 7
     742:	3b c0       	rjmp	.+118    	; 0x7ba <__floatunsisf+0xbc>
     744:	22 27       	eor	r18, r18
     746:	33 27       	eor	r19, r19
     748:	2e 1b       	sub	r18, r30
     74a:	3f 0b       	sbc	r19, r31
     74c:	57 01       	movw	r10, r14
     74e:	68 01       	movw	r12, r16
     750:	02 2e       	mov	r0, r18
     752:	04 c0       	rjmp	.+8      	; 0x75c <__floatunsisf+0x5e>
     754:	d6 94       	lsr	r13
     756:	c7 94       	ror	r12
     758:	b7 94       	ror	r11
     75a:	a7 94       	ror	r10
     75c:	0a 94       	dec	r0
     75e:	d2 f7       	brpl	.-12     	; 0x754 <__floatunsisf+0x56>
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	a0 e0       	ldi	r26, 0x00	; 0
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	04 c0       	rjmp	.+8      	; 0x77a <__floatunsisf+0x7c>
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	aa 1f       	adc	r26, r26
     778:	bb 1f       	adc	r27, r27
     77a:	2a 95       	dec	r18
     77c:	d2 f7       	brpl	.-12     	; 0x772 <__floatunsisf+0x74>
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	a1 09       	sbc	r26, r1
     782:	b1 09       	sbc	r27, r1
     784:	8e 21       	and	r24, r14
     786:	9f 21       	and	r25, r15
     788:	a0 23       	and	r26, r16
     78a:	b1 23       	and	r27, r17
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	a1 05       	cpc	r26, r1
     790:	b1 05       	cpc	r27, r1
     792:	21 f0       	breq	.+8      	; 0x79c <__floatunsisf+0x9e>
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	4a 29       	or	r20, r10
     79e:	5b 29       	or	r21, r11
     7a0:	6c 29       	or	r22, r12
     7a2:	7d 29       	or	r23, r13
     7a4:	4d 83       	std	Y+5, r20	; 0x05
     7a6:	5e 83       	std	Y+6, r21	; 0x06
     7a8:	6f 83       	std	Y+7, r22	; 0x07
     7aa:	78 87       	std	Y+8, r23	; 0x08
     7ac:	8e e1       	ldi	r24, 0x1E	; 30
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	8e 1b       	sub	r24, r30
     7b2:	9f 0b       	sbc	r25, r31
     7b4:	9c 83       	std	Y+4, r25	; 0x04
     7b6:	8b 83       	std	Y+3, r24	; 0x03
     7b8:	12 c0       	rjmp	.+36     	; 0x7de <__floatunsisf+0xe0>
     7ba:	30 97       	sbiw	r30, 0x00	; 0
     7bc:	81 f0       	breq	.+32     	; 0x7de <__floatunsisf+0xe0>
     7be:	0e 2e       	mov	r0, r30
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <__floatunsisf+0xcc>
     7c2:	ee 0c       	add	r14, r14
     7c4:	ff 1c       	adc	r15, r15
     7c6:	00 1f       	adc	r16, r16
     7c8:	11 1f       	adc	r17, r17
     7ca:	0a 94       	dec	r0
     7cc:	d2 f7       	brpl	.-12     	; 0x7c2 <__floatunsisf+0xc4>
     7ce:	ed 82       	std	Y+5, r14	; 0x05
     7d0:	fe 82       	std	Y+6, r15	; 0x06
     7d2:	0f 83       	std	Y+7, r16	; 0x07
     7d4:	18 87       	std	Y+8, r17	; 0x08
     7d6:	ce 1a       	sub	r12, r30
     7d8:	df 0a       	sbc	r13, r31
     7da:	dc 82       	std	Y+4, r13	; 0x04
     7dc:	cb 82       	std	Y+3, r12	; 0x03
     7de:	1a 82       	std	Y+2, r1	; 0x02
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 47 04 	call	0x88e	; 0x88e <__pack_f>
     7e8:	28 96       	adiw	r28, 0x08	; 8
     7ea:	ea e0       	ldi	r30, 0x0A	; 10
     7ec:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__epilogue_restores__+0x10>

000007f0 <__clzsi2>:
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	7b 01       	movw	r14, r22
     7fa:	8c 01       	movw	r16, r24
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	e8 16       	cp	r14, r24
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	f8 06       	cpc	r15, r24
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	08 07       	cpc	r16, r24
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	18 07       	cpc	r17, r24
     80c:	88 f4       	brcc	.+34     	; 0x830 <__clzsi2+0x40>
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	e8 16       	cp	r14, r24
     812:	f1 04       	cpc	r15, r1
     814:	01 05       	cpc	r16, r1
     816:	11 05       	cpc	r17, r1
     818:	31 f0       	breq	.+12     	; 0x826 <__clzsi2+0x36>
     81a:	28 f0       	brcs	.+10     	; 0x826 <__clzsi2+0x36>
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	a0 e0       	ldi	r26, 0x00	; 0
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	17 c0       	rjmp	.+46     	; 0x854 <__clzsi2+0x64>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	a0 e0       	ldi	r26, 0x00	; 0
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	12 c0       	rjmp	.+36     	; 0x854 <__clzsi2+0x64>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	e8 16       	cp	r14, r24
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	f8 06       	cpc	r15, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	08 07       	cpc	r16, r24
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	18 07       	cpc	r17, r24
     840:	28 f0       	brcs	.+10     	; 0x84c <__clzsi2+0x5c>
     842:	88 e1       	ldi	r24, 0x18	; 24
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	a0 e0       	ldi	r26, 0x00	; 0
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	04 c0       	rjmp	.+8      	; 0x854 <__clzsi2+0x64>
     84c:	80 e1       	ldi	r24, 0x10	; 16
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	a0 e0       	ldi	r26, 0x00	; 0
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	20 e2       	ldi	r18, 0x20	; 32
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	28 1b       	sub	r18, r24
     85e:	39 0b       	sbc	r19, r25
     860:	4a 0b       	sbc	r20, r26
     862:	5b 0b       	sbc	r21, r27
     864:	04 c0       	rjmp	.+8      	; 0x86e <__stack+0xf>
     866:	16 95       	lsr	r17
     868:	07 95       	ror	r16
     86a:	f7 94       	ror	r15
     86c:	e7 94       	ror	r14
     86e:	8a 95       	dec	r24
     870:	d2 f7       	brpl	.-12     	; 0x866 <__stack+0x7>
     872:	f7 01       	movw	r30, r14
     874:	ef 58       	subi	r30, 0x8F	; 143
     876:	ff 4f       	sbci	r31, 0xFF	; 255
     878:	80 81       	ld	r24, Z
     87a:	28 1b       	sub	r18, r24
     87c:	31 09       	sbc	r19, r1
     87e:	41 09       	sbc	r20, r1
     880:	51 09       	sbc	r21, r1
     882:	c9 01       	movw	r24, r18
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	08 95       	ret

0000088e <__pack_f>:
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	fc 01       	movw	r30, r24
     89a:	e4 80       	ldd	r14, Z+4	; 0x04
     89c:	f5 80       	ldd	r15, Z+5	; 0x05
     89e:	06 81       	ldd	r16, Z+6	; 0x06
     8a0:	17 81       	ldd	r17, Z+7	; 0x07
     8a2:	d1 80       	ldd	r13, Z+1	; 0x01
     8a4:	80 81       	ld	r24, Z
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	48 f4       	brcc	.+18     	; 0x8bc <__pack_f+0x2e>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	a0 e1       	ldi	r26, 0x10	; 16
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	e8 2a       	or	r14, r24
     8b4:	f9 2a       	or	r15, r25
     8b6:	0a 2b       	or	r16, r26
     8b8:	1b 2b       	or	r17, r27
     8ba:	a5 c0       	rjmp	.+330    	; 0xa06 <__pack_f+0x178>
     8bc:	84 30       	cpi	r24, 0x04	; 4
     8be:	09 f4       	brne	.+2      	; 0x8c2 <__pack_f+0x34>
     8c0:	9f c0       	rjmp	.+318    	; 0xa00 <__pack_f+0x172>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	21 f4       	brne	.+8      	; 0x8ce <__pack_f+0x40>
     8c6:	ee 24       	eor	r14, r14
     8c8:	ff 24       	eor	r15, r15
     8ca:	87 01       	movw	r16, r14
     8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <__pack_f+0x4a>
     8ce:	e1 14       	cp	r14, r1
     8d0:	f1 04       	cpc	r15, r1
     8d2:	01 05       	cpc	r16, r1
     8d4:	11 05       	cpc	r17, r1
     8d6:	19 f4       	brne	.+6      	; 0x8de <__pack_f+0x50>
     8d8:	e0 e0       	ldi	r30, 0x00	; 0
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	96 c0       	rjmp	.+300    	; 0xa0a <__pack_f+0x17c>
     8de:	62 81       	ldd	r22, Z+2	; 0x02
     8e0:	73 81       	ldd	r23, Z+3	; 0x03
     8e2:	9f ef       	ldi	r25, 0xFF	; 255
     8e4:	62 38       	cpi	r22, 0x82	; 130
     8e6:	79 07       	cpc	r23, r25
     8e8:	0c f0       	brlt	.+2      	; 0x8ec <__pack_f+0x5e>
     8ea:	5b c0       	rjmp	.+182    	; 0x9a2 <__pack_f+0x114>
     8ec:	22 e8       	ldi	r18, 0x82	; 130
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	26 1b       	sub	r18, r22
     8f2:	37 0b       	sbc	r19, r23
     8f4:	2a 31       	cpi	r18, 0x1A	; 26
     8f6:	31 05       	cpc	r19, r1
     8f8:	2c f0       	brlt	.+10     	; 0x904 <__pack_f+0x76>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	2a c0       	rjmp	.+84     	; 0x958 <__pack_f+0xca>
     904:	b8 01       	movw	r22, r16
     906:	a7 01       	movw	r20, r14
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__pack_f+0x86>
     90c:	76 95       	lsr	r23
     90e:	67 95       	ror	r22
     910:	57 95       	ror	r21
     912:	47 95       	ror	r20
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__pack_f+0x7e>
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	04 c0       	rjmp	.+8      	; 0x92a <__pack_f+0x9c>
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	aa 1f       	adc	r26, r26
     928:	bb 1f       	adc	r27, r27
     92a:	2a 95       	dec	r18
     92c:	d2 f7       	brpl	.-12     	; 0x922 <__pack_f+0x94>
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	a1 09       	sbc	r26, r1
     932:	b1 09       	sbc	r27, r1
     934:	8e 21       	and	r24, r14
     936:	9f 21       	and	r25, r15
     938:	a0 23       	and	r26, r16
     93a:	b1 23       	and	r27, r17
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	a1 05       	cpc	r26, r1
     940:	b1 05       	cpc	r27, r1
     942:	21 f0       	breq	.+8      	; 0x94c <__pack_f+0xbe>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	9a 01       	movw	r18, r20
     94e:	ab 01       	movw	r20, r22
     950:	28 2b       	or	r18, r24
     952:	39 2b       	or	r19, r25
     954:	4a 2b       	or	r20, r26
     956:	5b 2b       	or	r21, r27
     958:	da 01       	movw	r26, r20
     95a:	c9 01       	movw	r24, r18
     95c:	8f 77       	andi	r24, 0x7F	; 127
     95e:	90 70       	andi	r25, 0x00	; 0
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	80 34       	cpi	r24, 0x40	; 64
     966:	91 05       	cpc	r25, r1
     968:	a1 05       	cpc	r26, r1
     96a:	b1 05       	cpc	r27, r1
     96c:	39 f4       	brne	.+14     	; 0x97c <__pack_f+0xee>
     96e:	27 ff       	sbrs	r18, 7
     970:	09 c0       	rjmp	.+18     	; 0x984 <__pack_f+0xf6>
     972:	20 5c       	subi	r18, 0xC0	; 192
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	4f 4f       	sbci	r20, 0xFF	; 255
     978:	5f 4f       	sbci	r21, 0xFF	; 255
     97a:	04 c0       	rjmp	.+8      	; 0x984 <__pack_f+0xf6>
     97c:	21 5c       	subi	r18, 0xC1	; 193
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	4f 4f       	sbci	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	e0 e0       	ldi	r30, 0x00	; 0
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	20 30       	cpi	r18, 0x00	; 0
     98a:	a0 e0       	ldi	r26, 0x00	; 0
     98c:	3a 07       	cpc	r19, r26
     98e:	a0 e0       	ldi	r26, 0x00	; 0
     990:	4a 07       	cpc	r20, r26
     992:	a0 e4       	ldi	r26, 0x40	; 64
     994:	5a 07       	cpc	r21, r26
     996:	10 f0       	brcs	.+4      	; 0x99c <__pack_f+0x10e>
     998:	e1 e0       	ldi	r30, 0x01	; 1
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	79 01       	movw	r14, r18
     99e:	8a 01       	movw	r16, r20
     9a0:	27 c0       	rjmp	.+78     	; 0x9f0 <__pack_f+0x162>
     9a2:	60 38       	cpi	r22, 0x80	; 128
     9a4:	71 05       	cpc	r23, r1
     9a6:	64 f5       	brge	.+88     	; 0xa00 <__pack_f+0x172>
     9a8:	fb 01       	movw	r30, r22
     9aa:	e1 58       	subi	r30, 0x81	; 129
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
     9ae:	d8 01       	movw	r26, r16
     9b0:	c7 01       	movw	r24, r14
     9b2:	8f 77       	andi	r24, 0x7F	; 127
     9b4:	90 70       	andi	r25, 0x00	; 0
     9b6:	a0 70       	andi	r26, 0x00	; 0
     9b8:	b0 70       	andi	r27, 0x00	; 0
     9ba:	80 34       	cpi	r24, 0x40	; 64
     9bc:	91 05       	cpc	r25, r1
     9be:	a1 05       	cpc	r26, r1
     9c0:	b1 05       	cpc	r27, r1
     9c2:	39 f4       	brne	.+14     	; 0x9d2 <__pack_f+0x144>
     9c4:	e7 fe       	sbrs	r14, 7
     9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <__pack_f+0x154>
     9c8:	80 e4       	ldi	r24, 0x40	; 64
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	a0 e0       	ldi	r26, 0x00	; 0
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x14c>
     9d2:	8f e3       	ldi	r24, 0x3F	; 63
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	a0 e0       	ldi	r26, 0x00	; 0
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e8 0e       	add	r14, r24
     9dc:	f9 1e       	adc	r15, r25
     9de:	0a 1f       	adc	r16, r26
     9e0:	1b 1f       	adc	r17, r27
     9e2:	17 ff       	sbrs	r17, 7
     9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__pack_f+0x162>
     9e6:	16 95       	lsr	r17
     9e8:	07 95       	ror	r16
     9ea:	f7 94       	ror	r15
     9ec:	e7 94       	ror	r14
     9ee:	31 96       	adiw	r30, 0x01	; 1
     9f0:	87 e0       	ldi	r24, 0x07	; 7
     9f2:	16 95       	lsr	r17
     9f4:	07 95       	ror	r16
     9f6:	f7 94       	ror	r15
     9f8:	e7 94       	ror	r14
     9fa:	8a 95       	dec	r24
     9fc:	d1 f7       	brne	.-12     	; 0x9f2 <__pack_f+0x164>
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <__pack_f+0x17c>
     a00:	ee 24       	eor	r14, r14
     a02:	ff 24       	eor	r15, r15
     a04:	87 01       	movw	r16, r14
     a06:	ef ef       	ldi	r30, 0xFF	; 255
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	6e 2f       	mov	r22, r30
     a0c:	67 95       	ror	r22
     a0e:	66 27       	eor	r22, r22
     a10:	67 95       	ror	r22
     a12:	90 2f       	mov	r25, r16
     a14:	9f 77       	andi	r25, 0x7F	; 127
     a16:	d7 94       	ror	r13
     a18:	dd 24       	eor	r13, r13
     a1a:	d7 94       	ror	r13
     a1c:	8e 2f       	mov	r24, r30
     a1e:	86 95       	lsr	r24
     a20:	49 2f       	mov	r20, r25
     a22:	46 2b       	or	r20, r22
     a24:	58 2f       	mov	r21, r24
     a26:	5d 29       	or	r21, r13
     a28:	b7 01       	movw	r22, r14
     a2a:	ca 01       	movw	r24, r20
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	08 95       	ret

00000a38 <__unpack_f>:
     a38:	fc 01       	movw	r30, r24
     a3a:	db 01       	movw	r26, r22
     a3c:	40 81       	ld	r20, Z
     a3e:	51 81       	ldd	r21, Z+1	; 0x01
     a40:	22 81       	ldd	r18, Z+2	; 0x02
     a42:	62 2f       	mov	r22, r18
     a44:	6f 77       	andi	r22, 0x7F	; 127
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	22 1f       	adc	r18, r18
     a4a:	22 27       	eor	r18, r18
     a4c:	22 1f       	adc	r18, r18
     a4e:	93 81       	ldd	r25, Z+3	; 0x03
     a50:	89 2f       	mov	r24, r25
     a52:	88 0f       	add	r24, r24
     a54:	82 2b       	or	r24, r18
     a56:	28 2f       	mov	r18, r24
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	99 1f       	adc	r25, r25
     a5c:	99 27       	eor	r25, r25
     a5e:	99 1f       	adc	r25, r25
     a60:	11 96       	adiw	r26, 0x01	; 1
     a62:	9c 93       	st	X, r25
     a64:	11 97       	sbiw	r26, 0x01	; 1
     a66:	21 15       	cp	r18, r1
     a68:	31 05       	cpc	r19, r1
     a6a:	a9 f5       	brne	.+106    	; 0xad6 <__unpack_f+0x9e>
     a6c:	41 15       	cp	r20, r1
     a6e:	51 05       	cpc	r21, r1
     a70:	61 05       	cpc	r22, r1
     a72:	71 05       	cpc	r23, r1
     a74:	11 f4       	brne	.+4      	; 0xa7a <__unpack_f+0x42>
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	37 c0       	rjmp	.+110    	; 0xae8 <__unpack_f+0xb0>
     a7a:	82 e8       	ldi	r24, 0x82	; 130
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
     a7e:	13 96       	adiw	r26, 0x03	; 3
     a80:	9c 93       	st	X, r25
     a82:	8e 93       	st	-X, r24
     a84:	12 97       	sbiw	r26, 0x02	; 2
     a86:	9a 01       	movw	r18, r20
     a88:	ab 01       	movw	r20, r22
     a8a:	67 e0       	ldi	r22, 0x07	; 7
     a8c:	22 0f       	add	r18, r18
     a8e:	33 1f       	adc	r19, r19
     a90:	44 1f       	adc	r20, r20
     a92:	55 1f       	adc	r21, r21
     a94:	6a 95       	dec	r22
     a96:	d1 f7       	brne	.-12     	; 0xa8c <__unpack_f+0x54>
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	8c 93       	st	X, r24
     a9c:	0d c0       	rjmp	.+26     	; 0xab8 <__unpack_f+0x80>
     a9e:	22 0f       	add	r18, r18
     aa0:	33 1f       	adc	r19, r19
     aa2:	44 1f       	adc	r20, r20
     aa4:	55 1f       	adc	r21, r21
     aa6:	12 96       	adiw	r26, 0x02	; 2
     aa8:	8d 91       	ld	r24, X+
     aaa:	9c 91       	ld	r25, X
     aac:	13 97       	sbiw	r26, 0x03	; 3
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	13 96       	adiw	r26, 0x03	; 3
     ab2:	9c 93       	st	X, r25
     ab4:	8e 93       	st	-X, r24
     ab6:	12 97       	sbiw	r26, 0x02	; 2
     ab8:	20 30       	cpi	r18, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	38 07       	cpc	r19, r24
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	48 07       	cpc	r20, r24
     ac2:	80 e4       	ldi	r24, 0x40	; 64
     ac4:	58 07       	cpc	r21, r24
     ac6:	58 f3       	brcs	.-42     	; 0xa9e <__unpack_f+0x66>
     ac8:	14 96       	adiw	r26, 0x04	; 4
     aca:	2d 93       	st	X+, r18
     acc:	3d 93       	st	X+, r19
     ace:	4d 93       	st	X+, r20
     ad0:	5c 93       	st	X, r21
     ad2:	17 97       	sbiw	r26, 0x07	; 7
     ad4:	08 95       	ret
     ad6:	2f 3f       	cpi	r18, 0xFF	; 255
     ad8:	31 05       	cpc	r19, r1
     ada:	79 f4       	brne	.+30     	; 0xafa <__unpack_f+0xc2>
     adc:	41 15       	cp	r20, r1
     ade:	51 05       	cpc	r21, r1
     ae0:	61 05       	cpc	r22, r1
     ae2:	71 05       	cpc	r23, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__unpack_f+0xb4>
     ae6:	84 e0       	ldi	r24, 0x04	; 4
     ae8:	8c 93       	st	X, r24
     aea:	08 95       	ret
     aec:	64 ff       	sbrs	r22, 4
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <__unpack_f+0xbe>
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	8c 93       	st	X, r24
     af4:	12 c0       	rjmp	.+36     	; 0xb1a <__unpack_f+0xe2>
     af6:	1c 92       	st	X, r1
     af8:	10 c0       	rjmp	.+32     	; 0xb1a <__unpack_f+0xe2>
     afa:	2f 57       	subi	r18, 0x7F	; 127
     afc:	30 40       	sbci	r19, 0x00	; 0
     afe:	13 96       	adiw	r26, 0x03	; 3
     b00:	3c 93       	st	X, r19
     b02:	2e 93       	st	-X, r18
     b04:	12 97       	sbiw	r26, 0x02	; 2
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	8c 93       	st	X, r24
     b0a:	87 e0       	ldi	r24, 0x07	; 7
     b0c:	44 0f       	add	r20, r20
     b0e:	55 1f       	adc	r21, r21
     b10:	66 1f       	adc	r22, r22
     b12:	77 1f       	adc	r23, r23
     b14:	8a 95       	dec	r24
     b16:	d1 f7       	brne	.-12     	; 0xb0c <__unpack_f+0xd4>
     b18:	70 64       	ori	r23, 0x40	; 64
     b1a:	14 96       	adiw	r26, 0x04	; 4
     b1c:	4d 93       	st	X+, r20
     b1e:	5d 93       	st	X+, r21
     b20:	6d 93       	st	X+, r22
     b22:	7c 93       	st	X, r23
     b24:	17 97       	sbiw	r26, 0x07	; 7
     b26:	08 95       	ret

00000b28 <__fpcmp_parts_f>:
     b28:	1f 93       	push	r17
     b2a:	dc 01       	movw	r26, r24
     b2c:	fb 01       	movw	r30, r22
     b2e:	9c 91       	ld	r25, X
     b30:	92 30       	cpi	r25, 0x02	; 2
     b32:	08 f4       	brcc	.+2      	; 0xb36 <__fpcmp_parts_f+0xe>
     b34:	47 c0       	rjmp	.+142    	; 0xbc4 <__fpcmp_parts_f+0x9c>
     b36:	80 81       	ld	r24, Z
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	08 f4       	brcc	.+2      	; 0xb3e <__fpcmp_parts_f+0x16>
     b3c:	43 c0       	rjmp	.+134    	; 0xbc4 <__fpcmp_parts_f+0x9c>
     b3e:	94 30       	cpi	r25, 0x04	; 4
     b40:	51 f4       	brne	.+20     	; 0xb56 <__fpcmp_parts_f+0x2e>
     b42:	11 96       	adiw	r26, 0x01	; 1
     b44:	1c 91       	ld	r17, X
     b46:	84 30       	cpi	r24, 0x04	; 4
     b48:	99 f5       	brne	.+102    	; 0xbb0 <__fpcmp_parts_f+0x88>
     b4a:	81 81       	ldd	r24, Z+1	; 0x01
     b4c:	68 2f       	mov	r22, r24
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	61 1b       	sub	r22, r17
     b52:	71 09       	sbc	r23, r1
     b54:	3f c0       	rjmp	.+126    	; 0xbd4 <__fpcmp_parts_f+0xac>
     b56:	84 30       	cpi	r24, 0x04	; 4
     b58:	21 f0       	breq	.+8      	; 0xb62 <__fpcmp_parts_f+0x3a>
     b5a:	92 30       	cpi	r25, 0x02	; 2
     b5c:	31 f4       	brne	.+12     	; 0xb6a <__fpcmp_parts_f+0x42>
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	b9 f1       	breq	.+110    	; 0xbd0 <__fpcmp_parts_f+0xa8>
     b62:	81 81       	ldd	r24, Z+1	; 0x01
     b64:	88 23       	and	r24, r24
     b66:	89 f1       	breq	.+98     	; 0xbca <__fpcmp_parts_f+0xa2>
     b68:	2d c0       	rjmp	.+90     	; 0xbc4 <__fpcmp_parts_f+0x9c>
     b6a:	11 96       	adiw	r26, 0x01	; 1
     b6c:	1c 91       	ld	r17, X
     b6e:	11 97       	sbiw	r26, 0x01	; 1
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	f1 f0       	breq	.+60     	; 0xbb0 <__fpcmp_parts_f+0x88>
     b74:	81 81       	ldd	r24, Z+1	; 0x01
     b76:	18 17       	cp	r17, r24
     b78:	d9 f4       	brne	.+54     	; 0xbb0 <__fpcmp_parts_f+0x88>
     b7a:	12 96       	adiw	r26, 0x02	; 2
     b7c:	2d 91       	ld	r18, X+
     b7e:	3c 91       	ld	r19, X
     b80:	13 97       	sbiw	r26, 0x03	; 3
     b82:	82 81       	ldd	r24, Z+2	; 0x02
     b84:	93 81       	ldd	r25, Z+3	; 0x03
     b86:	82 17       	cp	r24, r18
     b88:	93 07       	cpc	r25, r19
     b8a:	94 f0       	brlt	.+36     	; 0xbb0 <__fpcmp_parts_f+0x88>
     b8c:	28 17       	cp	r18, r24
     b8e:	39 07       	cpc	r19, r25
     b90:	bc f0       	brlt	.+46     	; 0xbc0 <__fpcmp_parts_f+0x98>
     b92:	14 96       	adiw	r26, 0x04	; 4
     b94:	8d 91       	ld	r24, X+
     b96:	9d 91       	ld	r25, X+
     b98:	0d 90       	ld	r0, X+
     b9a:	bc 91       	ld	r27, X
     b9c:	a0 2d       	mov	r26, r0
     b9e:	24 81       	ldd	r18, Z+4	; 0x04
     ba0:	35 81       	ldd	r19, Z+5	; 0x05
     ba2:	46 81       	ldd	r20, Z+6	; 0x06
     ba4:	57 81       	ldd	r21, Z+7	; 0x07
     ba6:	28 17       	cp	r18, r24
     ba8:	39 07       	cpc	r19, r25
     baa:	4a 07       	cpc	r20, r26
     bac:	5b 07       	cpc	r21, r27
     bae:	18 f4       	brcc	.+6      	; 0xbb6 <__fpcmp_parts_f+0x8e>
     bb0:	11 23       	and	r17, r17
     bb2:	41 f0       	breq	.+16     	; 0xbc4 <__fpcmp_parts_f+0x9c>
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <__fpcmp_parts_f+0xa2>
     bb6:	82 17       	cp	r24, r18
     bb8:	93 07       	cpc	r25, r19
     bba:	a4 07       	cpc	r26, r20
     bbc:	b5 07       	cpc	r27, r21
     bbe:	40 f4       	brcc	.+16     	; 0xbd0 <__fpcmp_parts_f+0xa8>
     bc0:	11 23       	and	r17, r17
     bc2:	19 f0       	breq	.+6      	; 0xbca <__fpcmp_parts_f+0xa2>
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <__fpcmp_parts_f+0xac>
     bca:	6f ef       	ldi	r22, 0xFF	; 255
     bcc:	7f ef       	ldi	r23, 0xFF	; 255
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <__fpcmp_parts_f+0xac>
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	cb 01       	movw	r24, r22
     bd6:	1f 91       	pop	r17
     bd8:	08 95       	ret

00000bda <GetFreqPrescaleRatio>:
* @param [in]  Ratio       -  Ratio between CPU clock frequency and Prescalar values.
*
* @return function error state.
*/
static TIMER_ERROR_state_t GetFreqPrescaleRatio(TIM_CH_t TIM_channel, float32_t * Ratio)
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	29 97       	sbiw	r28, 0x09	; 9
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	7b 83       	std	Y+3, r23	; 0x03
     bf2:	6a 83       	std	Y+2, r22	; 0x02
   /* For Timer 0 and 1 */
   if(TIMER_0 == TIM_channel || TIMER_1 == TIM_channel)
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	88 23       	and	r24, r24
     bf8:	21 f0       	breq	.+8      	; 0xc02 <GetFreqPrescaleRatio+0x28>
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	09 f0       	breq	.+2      	; 0xc02 <GetFreqPrescaleRatio+0x28>
     c00:	6a c0       	rjmp	.+212    	; 0xcd6 <GetFreqPrescaleRatio+0xfc>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	c9 01       	movw	r24, r18
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	82 0f       	add	r24, r18
     c10:	93 1f       	adc	r25, r19
     c12:	fc 01       	movw	r30, r24
     c14:	ea 58       	subi	r30, 0x8A	; 138
     c16:	fe 4f       	sbci	r31, 0xFE	; 254
     c18:	80 81       	ld	r24, Z
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	38 87       	std	Y+8, r19	; 0x08
     c20:	2f 83       	std	Y+7, r18	; 0x07
     c22:	8f 81       	ldd	r24, Y+7	; 0x07
     c24:	98 85       	ldd	r25, Y+8	; 0x08
     c26:	83 30       	cpi	r24, 0x03	; 3
     c28:	91 05       	cpc	r25, r1
     c2a:	89 f1       	breq	.+98     	; 0xc8e <GetFreqPrescaleRatio+0xb4>
     c2c:	2f 81       	ldd	r18, Y+7	; 0x07
     c2e:	38 85       	ldd	r19, Y+8	; 0x08
     c30:	24 30       	cpi	r18, 0x04	; 4
     c32:	31 05       	cpc	r19, r1
     c34:	5c f4       	brge	.+22     	; 0xc4c <GetFreqPrescaleRatio+0x72>
     c36:	8f 81       	ldd	r24, Y+7	; 0x07
     c38:	98 85       	ldd	r25, Y+8	; 0x08
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	91 05       	cpc	r25, r1
     c3e:	89 f0       	breq	.+34     	; 0xc62 <GetFreqPrescaleRatio+0x88>
     c40:	2f 81       	ldd	r18, Y+7	; 0x07
     c42:	38 85       	ldd	r19, Y+8	; 0x08
     c44:	22 30       	cpi	r18, 0x02	; 2
     c46:	31 05       	cpc	r19, r1
     c48:	b9 f0       	breq	.+46     	; 0xc78 <GetFreqPrescaleRatio+0x9e>
     c4a:	42 c0       	rjmp	.+132    	; 0xcd0 <GetFreqPrescaleRatio+0xf6>
     c4c:	8f 81       	ldd	r24, Y+7	; 0x07
     c4e:	98 85       	ldd	r25, Y+8	; 0x08
     c50:	84 30       	cpi	r24, 0x04	; 4
     c52:	91 05       	cpc	r25, r1
     c54:	39 f1       	breq	.+78     	; 0xca4 <GetFreqPrescaleRatio+0xca>
     c56:	2f 81       	ldd	r18, Y+7	; 0x07
     c58:	38 85       	ldd	r19, Y+8	; 0x08
     c5a:	25 30       	cpi	r18, 0x05	; 5
     c5c:	31 05       	cpc	r19, r1
     c5e:	69 f1       	breq	.+90     	; 0xcba <GetFreqPrescaleRatio+0xe0>
     c60:	37 c0       	rjmp	.+110    	; 0xcd0 <GetFreqPrescaleRatio+0xf6>
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * 1000000 / F_CPU;
     c62:	ea 81       	ldd	r30, Y+2	; 0x02
     c64:	fb 81       	ldd	r31, Y+3	; 0x03
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e8       	ldi	r26, 0x80	; 128
     c6c:	bd e3       	ldi	r27, 0x3D	; 61
     c6e:	80 83       	st	Z, r24
     c70:	91 83       	std	Z+1, r25	; 0x01
     c72:	a2 83       	std	Z+2, r26	; 0x02
     c74:	b3 83       	std	Z+3, r27	; 0x03
     c76:	c0 c0       	rjmp	.+384    	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
            break;
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * 1000000 / F_CPU;
     c78:	ea 81       	ldd	r30, Y+2	; 0x02
     c7a:	fb 81       	ldd	r31, Y+3	; 0x03
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	bf e3       	ldi	r27, 0x3F	; 63
     c84:	80 83       	st	Z, r24
     c86:	91 83       	std	Z+1, r25	; 0x01
     c88:	a2 83       	std	Z+2, r26	; 0x02
     c8a:	b3 83       	std	Z+3, r27	; 0x03
     c8c:	b5 c0       	rjmp	.+362    	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
            break;
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * 1000000 / F_CPU;
     c8e:	ea 81       	ldd	r30, Y+2	; 0x02
     c90:	fb 81       	ldd	r31, Y+3	; 0x03
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e8       	ldi	r26, 0x80	; 128
     c98:	b0 e4       	ldi	r27, 0x40	; 64
     c9a:	80 83       	st	Z, r24
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	a2 83       	std	Z+2, r26	; 0x02
     ca0:	b3 83       	std	Z+3, r27	; 0x03
     ca2:	aa c0       	rjmp	.+340    	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
            break;
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * 1000000 / F_CPU;
     ca4:	ea 81       	ldd	r30, Y+2	; 0x02
     ca6:	fb 81       	ldd	r31, Y+3	; 0x03
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	a0 e8       	ldi	r26, 0x80	; 128
     cae:	b1 e4       	ldi	r27, 0x41	; 65
     cb0:	80 83       	st	Z, r24
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	a2 83       	std	Z+2, r26	; 0x02
     cb6:	b3 83       	std	Z+3, r27	; 0x03
     cb8:	9f c0       	rjmp	.+318    	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * 1000000 / F_CPU;
     cba:	ea 81       	ldd	r30, Y+2	; 0x02
     cbc:	fb 81       	ldd	r31, Y+3	; 0x03
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e8       	ldi	r26, 0x80	; 128
     cc4:	b2 e4       	ldi	r27, 0x42	; 66
     cc6:	80 83       	st	Z, r24
     cc8:	91 83       	std	Z+1, r25	; 0x01
     cca:	a2 83       	std	Z+2, r26	; 0x02
     ccc:	b3 83       	std	Z+3, r27	; 0x03
     cce:	94 c0       	rjmp	.+296    	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
            break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
     cd0:	3c ef       	ldi	r19, 0xFC	; 252
     cd2:	3e 83       	std	Y+6, r19	; 0x06
     cd4:	92 c0       	rjmp	.+292    	; 0xdfa <GetFreqPrescaleRatio+0x220>
      }
   }
   /* For Timer 2 */
   else if(TIMER_2 == TIM_channel)
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	09 f0       	breq	.+2      	; 0xcde <GetFreqPrescaleRatio+0x104>
     cdc:	8d c0       	rjmp	.+282    	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	c9 01       	movw	r24, r18
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	82 0f       	add	r24, r18
     cec:	93 1f       	adc	r25, r19
     cee:	fc 01       	movw	r30, r24
     cf0:	ea 58       	subi	r30, 0x8A	; 138
     cf2:	fe 4f       	sbci	r31, 0xFE	; 254
     cf4:	80 81       	ld	r24, Z
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	3d 83       	std	Y+5, r19	; 0x05
     cfc:	2c 83       	std	Y+4, r18	; 0x04
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	9d 81       	ldd	r25, Y+5	; 0x05
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	91 05       	cpc	r25, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <GetFreqPrescaleRatio+0x130>
     d08:	48 c0       	rjmp	.+144    	; 0xd9a <GetFreqPrescaleRatio+0x1c0>
     d0a:	2c 81       	ldd	r18, Y+4	; 0x04
     d0c:	3d 81       	ldd	r19, Y+5	; 0x05
     d0e:	25 30       	cpi	r18, 0x05	; 5
     d10:	31 05       	cpc	r19, r1
     d12:	84 f4       	brge	.+32     	; 0xd34 <GetFreqPrescaleRatio+0x15a>
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	9d 81       	ldd	r25, Y+5	; 0x05
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	91 05       	cpc	r25, r1
     d1c:	41 f1       	breq	.+80     	; 0xd6e <GetFreqPrescaleRatio+0x194>
     d1e:	2c 81       	ldd	r18, Y+4	; 0x04
     d20:	3d 81       	ldd	r19, Y+5	; 0x05
     d22:	23 30       	cpi	r18, 0x03	; 3
     d24:	31 05       	cpc	r19, r1
     d26:	74 f5       	brge	.+92     	; 0xd84 <GetFreqPrescaleRatio+0x1aa>
     d28:	8c 81       	ldd	r24, Y+4	; 0x04
     d2a:	9d 81       	ldd	r25, Y+5	; 0x05
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	91 05       	cpc	r25, r1
     d30:	99 f0       	breq	.+38     	; 0xd58 <GetFreqPrescaleRatio+0x17e>
     d32:	5f c0       	rjmp	.+190    	; 0xdf2 <GetFreqPrescaleRatio+0x218>
     d34:	2c 81       	ldd	r18, Y+4	; 0x04
     d36:	3d 81       	ldd	r19, Y+5	; 0x05
     d38:	26 30       	cpi	r18, 0x06	; 6
     d3a:	31 05       	cpc	r19, r1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <GetFreqPrescaleRatio+0x166>
     d3e:	43 c0       	rjmp	.+134    	; 0xdc6 <GetFreqPrescaleRatio+0x1ec>
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	9d 81       	ldd	r25, Y+5	; 0x05
     d44:	86 30       	cpi	r24, 0x06	; 6
     d46:	91 05       	cpc	r25, r1
     d48:	9c f1       	brlt	.+102    	; 0xdb0 <GetFreqPrescaleRatio+0x1d6>
     d4a:	2c 81       	ldd	r18, Y+4	; 0x04
     d4c:	3d 81       	ldd	r19, Y+5	; 0x05
     d4e:	27 30       	cpi	r18, 0x07	; 7
     d50:	31 05       	cpc	r19, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GetFreqPrescaleRatio+0x17c>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GetFreqPrescaleRatio+0x202>
     d56:	4d c0       	rjmp	.+154    	; 0xdf2 <GetFreqPrescaleRatio+0x218>
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * 1000000 / F_CPU;
     d58:	ea 81       	ldd	r30, Y+2	; 0x02
     d5a:	fb 81       	ldd	r31, Y+3	; 0x03
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	a0 e8       	ldi	r26, 0x80	; 128
     d62:	bd e3       	ldi	r27, 0x3D	; 61
     d64:	80 83       	st	Z, r24
     d66:	91 83       	std	Z+1, r25	; 0x01
     d68:	a2 83       	std	Z+2, r26	; 0x02
     d6a:	b3 83       	std	Z+3, r27	; 0x03
     d6c:	45 c0       	rjmp	.+138    	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
         break;
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * 1000000 / F_CPU;
     d6e:	ea 81       	ldd	r30, Y+2	; 0x02
     d70:	fb 81       	ldd	r31, Y+3	; 0x03
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	a0 e0       	ldi	r26, 0x00	; 0
     d78:	bf e3       	ldi	r27, 0x3F	; 63
     d7a:	80 83       	st	Z, r24
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	a2 83       	std	Z+2, r26	; 0x02
     d80:	b3 83       	std	Z+3, r27	; 0x03
     d82:	3a c0       	rjmp	.+116    	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
         break;
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * 1000000 / F_CPU;
     d84:	ea 81       	ldd	r30, Y+2	; 0x02
     d86:	fb 81       	ldd	r31, Y+3	; 0x03
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	a0 e0       	ldi	r26, 0x00	; 0
     d8e:	b0 e4       	ldi	r27, 0x40	; 64
     d90:	80 83       	st	Z, r24
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	a2 83       	std	Z+2, r26	; 0x02
     d96:	b3 83       	std	Z+3, r27	; 0x03
     d98:	2f c0       	rjmp	.+94     	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
         break;
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * 1000000 / F_CPU;
     d9a:	ea 81       	ldd	r30, Y+2	; 0x02
     d9c:	fb 81       	ldd	r31, Y+3	; 0x03
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	a0 e8       	ldi	r26, 0x80	; 128
     da4:	b0 e4       	ldi	r27, 0x40	; 64
     da6:	80 83       	st	Z, r24
     da8:	91 83       	std	Z+1, r25	; 0x01
     daa:	a2 83       	std	Z+2, r26	; 0x02
     dac:	b3 83       	std	Z+3, r27	; 0x03
     dae:	24 c0       	rjmp	.+72     	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
         break;
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * 1000000 / F_CPU;
     db0:	ea 81       	ldd	r30, Y+2	; 0x02
     db2:	fb 81       	ldd	r31, Y+3	; 0x03
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a0 e0       	ldi	r26, 0x00	; 0
     dba:	b1 e4       	ldi	r27, 0x41	; 65
     dbc:	80 83       	st	Z, r24
     dbe:	91 83       	std	Z+1, r25	; 0x01
     dc0:	a2 83       	std	Z+2, r26	; 0x02
     dc2:	b3 83       	std	Z+3, r27	; 0x03
     dc4:	19 c0       	rjmp	.+50     	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
         break;
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * 1000000 / F_CPU;
     dc6:	ea 81       	ldd	r30, Y+2	; 0x02
     dc8:	fb 81       	ldd	r31, Y+3	; 0x03
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a0 e8       	ldi	r26, 0x80	; 128
     dd0:	b1 e4       	ldi	r27, 0x41	; 65
     dd2:	80 83       	st	Z, r24
     dd4:	91 83       	std	Z+1, r25	; 0x01
     dd6:	a2 83       	std	Z+2, r26	; 0x02
     dd8:	b3 83       	std	Z+3, r27	; 0x03
     dda:	0e c0       	rjmp	.+28     	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * 1000000 / F_CPU;
     ddc:	ea 81       	ldd	r30, Y+2	; 0x02
     dde:	fb 81       	ldd	r31, Y+3	; 0x03
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	a0 e8       	ldi	r26, 0x80	; 128
     de6:	b2 e4       	ldi	r27, 0x42	; 66
     de8:	80 83       	st	Z, r24
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	a2 83       	std	Z+2, r26	; 0x02
     dee:	b3 83       	std	Z+3, r27	; 0x03
     df0:	03 c0       	rjmp	.+6      	; 0xdf8 <GetFreqPrescaleRatio+0x21e>
         break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
     df2:	3c ef       	ldi	r19, 0xFC	; 252
     df4:	3e 83       	std	Y+6, r19	; 0x06
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <GetFreqPrescaleRatio+0x220>
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <GetFreqPrescaleRatio+0x224>
      }
   }
}
     dfa:	8e 81       	ldd	r24, Y+6	; 0x06
     dfc:	89 87       	std	Y+9, r24	; 0x09
     dfe:	89 85       	ldd	r24, Y+9	; 0x09
     e00:	29 96       	adiw	r28, 0x09	; 9
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <TIM_Init>:
* @param [in]  TIM_channel -  Timer channel number.
*
* @return function error state.
*/
TIMER_ERROR_state_t TIM_Init(TIM_CH_t TIM_channel)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <TIM_Init+0x6>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <TIM_Init+0x8>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	89 83       	std	Y+1, r24	; 0x01
   switch(TIM_channel)
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	3c 83       	std	Y+4, r19	; 0x04
     e28:	2b 83       	std	Y+3, r18	; 0x03
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	9c 81       	ldd	r25, Y+4	; 0x04
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	91 05       	cpc	r25, r1
     e32:	a9 f1       	breq	.+106    	; 0xe9e <TIM_Init+0x8c>
     e34:	2b 81       	ldd	r18, Y+3	; 0x03
     e36:	3c 81       	ldd	r19, Y+4	; 0x04
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	09 f4       	brne	.+2      	; 0xe40 <TIM_Init+0x2e>
     e3e:	62 c0       	rjmp	.+196    	; 0xf04 <TIM_Init+0xf2>
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	9c 81       	ldd	r25, Y+4	; 0x04
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	09 f0       	breq	.+2      	; 0xe4a <TIM_Init+0x38>
     e48:	93 c0       	rjmp	.+294    	; 0xf70 <TIM_Init+0x15e>
   {
      case TIMER_0:
         /* Initialize Mode */
         TIMER_0_CONTROL = gastr_Timer_Config[TIM_channel].u8_mode;
     e4a:	a3 e5       	ldi	r26, 0x53	; 83
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	c9 01       	movw	r24, r18
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	82 0f       	add	r24, r18
     e5c:	93 1f       	adc	r25, r19
     e5e:	fc 01       	movw	r30, r24
     e60:	ec 58       	subi	r30, 0x8C	; 140
     e62:	fe 4f       	sbci	r31, 0xFE	; 254
     e64:	80 81       	ld	r24, Z
     e66:	8c 93       	st	X, r24
         /* Initialize Interrupt Mode */
         TIMER_INT_MASK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
     e68:	a9 e5       	ldi	r26, 0x59	; 89
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e9 e5       	ldi	r30, 0x59	; 89
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8c 7f       	andi	r24, 0xFC	; 252
     e74:	8c 93       	st	X, r24
         TIMER_INT_MASK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
     e76:	a9 e5       	ldi	r26, 0x59	; 89
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e9 e5       	ldi	r30, 0x59	; 89
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	40 81       	ld	r20, Z
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	c9 01       	movw	r24, r18
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	82 0f       	add	r24, r18
     e8e:	93 1f       	adc	r25, r19
     e90:	fc 01       	movw	r30, r24
     e92:	eb 58       	subi	r30, 0x8B	; 139
     e94:	fe 4f       	sbci	r31, 0xFE	; 254
     e96:	80 81       	ld	r24, Z
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	6c c0       	rjmp	.+216    	; 0xf76 <TIM_Init+0x164>
         break;
      case TIMER_1:
         /* Initialize Mode */
         TIMER_1B_CONTROL = gastr_Timer_Config[TIM_channel].u8_mode;
     e9e:	ae e4       	ldi	r26, 0x4E	; 78
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	c9 01       	movw	r24, r18
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	82 0f       	add	r24, r18
     eb0:	93 1f       	adc	r25, r19
     eb2:	fc 01       	movw	r30, r24
     eb4:	ec 58       	subi	r30, 0x8C	; 140
     eb6:	fe 4f       	sbci	r31, 0xFE	; 254
     eb8:	80 81       	ld	r24, Z
     eba:	8c 93       	st	X, r24
         /* Initialize Interrupt Mode */
         TIMER_INT_MASK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
     ebc:	a9 e5       	ldi	r26, 0x59	; 89
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e9 e5       	ldi	r30, 0x59	; 89
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	87 7e       	andi	r24, 0xE7	; 231
     ec8:	8c 93       	st	X, r24
         TIMER_INT_MASK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
     eca:	a9 e5       	ldi	r26, 0x59	; 89
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e9 e5       	ldi	r30, 0x59	; 89
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	c9 01       	movw	r24, r18
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	82 0f       	add	r24, r18
     ee4:	93 1f       	adc	r25, r19
     ee6:	fc 01       	movw	r30, r24
     ee8:	eb 58       	subi	r30, 0x8B	; 139
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	80 81       	ld	r24, Z
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	39 c0       	rjmp	.+114    	; 0xf76 <TIM_Init+0x164>
         break;
      case TIMER_2:
         /* Initialize Mode */
         TIMER_2_CONTROL = gastr_Timer_Config[TIM_channel].u8_mode;
     f04:	a5 e4       	ldi	r26, 0x45	; 69
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	c9 01       	movw	r24, r18
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	fc 01       	movw	r30, r24
     f1a:	ec 58       	subi	r30, 0x8C	; 140
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	80 81       	ld	r24, Z
     f20:	8c 93       	st	X, r24
         /* Initialize Interrupt Mode */
         TIMER_INT_MASK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
     f22:	a9 e5       	ldi	r26, 0x59	; 89
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e9 e5       	ldi	r30, 0x59	; 89
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8f 73       	andi	r24, 0x3F	; 63
     f2e:	8c 93       	st	X, r24
         TIMER_INT_MASK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
     f30:	a9 e5       	ldi	r26, 0x59	; 89
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e9 e5       	ldi	r30, 0x59	; 89
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	c9 01       	movw	r24, r18
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	82 0f       	add	r24, r18
     f4a:	93 1f       	adc	r25, r19
     f4c:	fc 01       	movw	r30, r24
     f4e:	eb 58       	subi	r30, 0x8B	; 139
     f50:	fe 4f       	sbci	r31, 0xFE	; 254
     f52:	80 81       	ld	r24, Z
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	00 24       	eor	r0, r0
     f5a:	96 95       	lsr	r25
     f5c:	87 95       	ror	r24
     f5e:	07 94       	ror	r0
     f60:	96 95       	lsr	r25
     f62:	87 95       	ror	r24
     f64:	07 94       	ror	r0
     f66:	98 2f       	mov	r25, r24
     f68:	80 2d       	mov	r24, r0
     f6a:	84 2b       	or	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <TIM_Init+0x164>
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
     f70:	9e ef       	ldi	r25, 0xFE	; 254
     f72:	9a 83       	std	Y+2, r25	; 0x02
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <TIM_Init+0x166>
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
     f76:	1a 82       	std	Y+2, r1	; 0x02
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <TIM_Start>:
* @param [in]  PreloadVal  -  number of ticks that the timer counts.
*
* @return function error state.
*/
TIMER_ERROR_state_t TIM_Start(TIM_CH_t TIM_channel, TIM_Preload_t PreloadVal)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	2a 97       	sbiw	r28, 0x0a	; 10
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	8d 83       	std	Y+5, r24	; 0x05
     f9e:	7f 83       	std	Y+7, r23	; 0x07
     fa0:	6e 83       	std	Y+6, r22	; 0x06
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
     fa2:	1c 82       	std	Y+4, r1	; 0x04
     fa4:	1b 82       	std	Y+3, r1	; 0x03
   volatile uint8_t * ptr_TimerData = NULL_PTR;
     fa6:	1a 82       	std	Y+2, r1	; 0x02
     fa8:	19 82       	std	Y+1, r1	; 0x01
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3a 87       	std	Y+10, r19	; 0x0a
     fb2:	29 87       	std	Y+9, r18	; 0x09
     fb4:	89 85       	ldd	r24, Y+9	; 0x09
     fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	91 05       	cpc	r25, r1
     fbc:	91 f0       	breq	.+36     	; 0xfe2 <TIM_Start+0x5a>
     fbe:	29 85       	ldd	r18, Y+9	; 0x09
     fc0:	3a 85       	ldd	r19, Y+10	; 0x0a
     fc2:	22 30       	cpi	r18, 0x02	; 2
     fc4:	31 05       	cpc	r19, r1
     fc6:	b1 f0       	breq	.+44     	; 0xff4 <TIM_Start+0x6c>
     fc8:	89 85       	ldd	r24, Y+9	; 0x09
     fca:	9a 85       	ldd	r25, Y+10	; 0x0a
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	d9 f4       	brne	.+54     	; 0x1006 <TIM_Start+0x7e>
   {
      case TIMER_0:
         ptr_TimerControl = &TIMER_0_CONTROL;
     fd0:	83 e5       	ldi	r24, 0x53	; 83
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 83       	std	Y+4, r25	; 0x04
     fd6:	8b 83       	std	Y+3, r24	; 0x03
         ptr_TimerData = &TIMER_0_DATA;
     fd8:	82 e5       	ldi	r24, 0x52	; 82
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	15 c0       	rjmp	.+42     	; 0x100c <TIM_Start+0x84>
         break;
      case TIMER_1:
         ptr_TimerControl = &TIMER_1B_CONTROL;
     fe2:	8e e4       	ldi	r24, 0x4E	; 78
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	8b 83       	std	Y+3, r24	; 0x03
         ptr_TimerData = &TIMER_1_DATA;
     fea:	8c e4       	ldi	r24, 0x4C	; 76
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	0c c0       	rjmp	.+24     	; 0x100c <TIM_Start+0x84>
         break;
      case TIMER_2:
         ptr_TimerControl = &TIMER_2_CONTROL;
     ff4:	85 e4       	ldi	r24, 0x45	; 69
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	8b 83       	std	Y+3, r24	; 0x03
         ptr_TimerData = &TIMER_2_DATA;
     ffc:	84 e4       	ldi	r24, 0x44	; 68
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	03 c0       	rjmp	.+6      	; 0x100c <TIM_Start+0x84>
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1006:	9e ef       	ldi	r25, 0xFE	; 254
    1008:	98 87       	std	Y+8, r25	; 0x08
    100a:	18 c0       	rjmp	.+48     	; 0x103c <TIM_Start+0xb4>
   }
   /* set timer ticks */
   *ptr_TimerData = PreloadVal;
    100c:	8e 81       	ldd	r24, Y+6	; 0x06
    100e:	e9 81       	ldd	r30, Y+1	; 0x01
    1010:	fa 81       	ldd	r31, Y+2	; 0x02
    1012:	80 83       	st	Z, r24
   
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
    1014:	eb 81       	ldd	r30, Y+3	; 0x03
    1016:	fc 81       	ldd	r31, Y+4	; 0x04
    1018:	40 81       	ld	r20, Z
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	c9 01       	movw	r24, r18
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	82 0f       	add	r24, r18
    1028:	93 1f       	adc	r25, r19
    102a:	fc 01       	movw	r30, r24
    102c:	ea 58       	subi	r30, 0x8A	; 138
    102e:	fe 4f       	sbci	r31, 0xFE	; 254
    1030:	80 81       	ld	r24, Z
    1032:	84 2b       	or	r24, r20
    1034:	eb 81       	ldd	r30, Y+3	; 0x03
    1036:	fc 81       	ldd	r31, Y+4	; 0x04
    1038:	80 83       	st	Z, r24
   
   /* return success message. */
   return TIMER_E_SUCCESS;
    103a:	18 86       	std	Y+8, r1	; 0x08
    103c:	88 85       	ldd	r24, Y+8	; 0x08
}
    103e:	2a 96       	adiw	r28, 0x0a	; 10
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <TIM_Stop>:
* @param [in]  TIM_channel -  timer channel number to stop.
*
* @return function error state.
*/
TIMER_ERROR_state_t TIM_Stop(TIM_CH_t TIM_channel)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <TIM_Stop+0x6>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <TIM_Stop+0x8>
    1058:	00 d0       	rcall	.+0      	; 0x105a <TIM_Stop+0xa>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	8b 83       	std	Y+3, r24	; 0x03
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
    1060:	1a 82       	std	Y+2, r1	; 0x02
    1062:	19 82       	std	Y+1, r1	; 0x01
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3e 83       	std	Y+6, r19	; 0x06
    106c:	2d 83       	std	Y+5, r18	; 0x05
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	71 f0       	breq	.+28     	; 0x1094 <TIM_Stop+0x44>
    1078:	2d 81       	ldd	r18, Y+5	; 0x05
    107a:	3e 81       	ldd	r19, Y+6	; 0x06
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	71 f0       	breq	.+28     	; 0x109e <TIM_Stop+0x4e>
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	79 f4       	brne	.+30     	; 0x10a8 <TIM_Stop+0x58>
   {
      case TIMER_0:
         ptr_TimerControl = &TIMER_0_CONTROL;
    108a:	83 e5       	ldi	r24, 0x53	; 83
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	0d c0       	rjmp	.+26     	; 0x10ae <TIM_Stop+0x5e>
         break;
      case TIMER_1:
         ptr_TimerControl = &TIMER_1B_CONTROL;
    1094:	8e e4       	ldi	r24, 0x4E	; 78
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	08 c0       	rjmp	.+16     	; 0x10ae <TIM_Stop+0x5e>
         break;
      case TIMER_2:
         ptr_TimerControl = &TIMER_2_CONTROL;
    109e:	85 e4       	ldi	r24, 0x45	; 69
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9a 83       	std	Y+2, r25	; 0x02
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <TIM_Stop+0x5e>
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    10a8:	9e ef       	ldi	r25, 0xFE	; 254
    10aa:	9c 83       	std	Y+4, r25	; 0x04
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <TIM_Stop+0x6e>
   }
   
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
    10ae:	e9 81       	ldd	r30, Y+1	; 0x01
    10b0:	fa 81       	ldd	r31, Y+2	; 0x02
    10b2:	80 81       	ld	r24, Z
    10b4:	88 7f       	andi	r24, 0xF8	; 248
    10b6:	e9 81       	ldd	r30, Y+1	; 0x01
    10b8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ba:	80 83       	st	Z, r24
   
   /* return success message. */
   return TIMER_E_SUCCESS;
    10bc:	1c 82       	std	Y+4, r1	; 0x04
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
}
    10c0:	26 96       	adiw	r28, 0x06	; 6
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <TIM_GetStatus>:
* @param [out] FlagStatus  -  pointer to the variable to save the timer status in it.
*
* @return function error state.
*/
TIMER_ERROR_state_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <TIM_GetStatus+0x6>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <TIM_GetStatus+0x8>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <TIM_GetStatus+0xa>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	7b 83       	std	Y+3, r23	; 0x03
    10e4:	6a 83       	std	Y+2, r22	; 0x02
   if(NULL_PTR == FlagStatus)
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	19 f4       	brne	.+6      	; 0x10f4 <TIM_GetStatus+0x22>
   {
      return TIMER_E_NULL_PTR;
    10ee:	2f ef       	ldi	r18, 0xFF	; 255
    10f0:	2e 83       	std	Y+6, r18	; 0x06
    10f2:	0e c1       	rjmp	.+540    	; 0x1310 <TIM_GetStatus+0x23e>
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3d 83       	std	Y+5, r19	; 0x05
    10fc:	2c 83       	std	Y+4, r18	; 0x04
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <TIM_GetStatus+0x38>
    1108:	57 c0       	rjmp	.+174    	; 0x11b8 <TIM_GetStatus+0xe6>
    110a:	2c 81       	ldd	r18, Y+4	; 0x04
    110c:	3d 81       	ldd	r19, Y+5	; 0x05
    110e:	22 30       	cpi	r18, 0x02	; 2
    1110:	31 05       	cpc	r19, r1
    1112:	09 f4       	brne	.+2      	; 0x1116 <TIM_GetStatus+0x44>
    1114:	b2 c0       	rjmp	.+356    	; 0x127a <TIM_GetStatus+0x1a8>
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <TIM_GetStatus+0x4e>
    111e:	f4 c0       	rjmp	.+488    	; 0x1308 <TIM_GetStatus+0x236>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	c9 01       	movw	r24, r18
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	82 0f       	add	r24, r18
    112e:	93 1f       	adc	r25, r19
    1130:	fc 01       	movw	r30, r24
    1132:	ec 58       	subi	r30, 0x8C	; 140
    1134:	fe 4f       	sbci	r31, 0xFE	; 254
    1136:	80 81       	ld	r24, Z
    1138:	88 23       	and	r24, r24
    113a:	b9 f4       	brne	.+46     	; 0x116a <TIM_GetStatus+0x98>
         {
            if( TIMER_INT_FLAG & TIMER_0_OVERFLOW_FLAG )
    113c:	e8 e5       	ldi	r30, 0x58	; 88
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	90 70       	andi	r25, 0x00	; 0
    114a:	88 23       	and	r24, r24
    114c:	59 f0       	breq	.+22     	; 0x1164 <TIM_GetStatus+0x92>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    114e:	ea 81       	ldd	r30, Y+2	; 0x02
    1150:	fb 81       	ldd	r31, Y+3	; 0x03
    1152:	10 82       	st	Z, r1
               TIMER_INT_FLAG |= TIMER_0_OVERFLOW_FLAG;
    1154:	a8 e5       	ldi	r26, 0x58	; 88
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e8 e5       	ldi	r30, 0x58	; 88
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	81 60       	ori	r24, 0x01	; 1
    1160:	8c 93       	st	X, r24
    1162:	d5 c0       	rjmp	.+426    	; 0x130e <TIM_GetStatus+0x23c>
            }
            else
            {
               return TIMER_E_PENDING;
    1164:	9d ef       	ldi	r25, 0xFD	; 253
    1166:	9e 83       	std	Y+6, r25	; 0x06
    1168:	d3 c0       	rjmp	.+422    	; 0x1310 <TIM_GetStatus+0x23e>
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	c9 01       	movw	r24, r18
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	82 0f       	add	r24, r18
    1178:	93 1f       	adc	r25, r19
    117a:	fc 01       	movw	r30, r24
    117c:	ec 58       	subi	r30, 0x8C	; 140
    117e:	fe 4f       	sbci	r31, 0xFE	; 254
    1180:	80 81       	ld	r24, Z
    1182:	88 30       	cpi	r24, 0x08	; 8
    1184:	09 f0       	breq	.+2      	; 0x1188 <TIM_GetStatus+0xb6>
    1186:	c3 c0       	rjmp	.+390    	; 0x130e <TIM_GetStatus+0x23c>
         {
            if(TIMER_INT_FLAG & TIMER_0_COMPARE_FLAG)
    1188:	e8 e5       	ldi	r30, 0x58	; 88
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	82 70       	andi	r24, 0x02	; 2
    1194:	90 70       	andi	r25, 0x00	; 0
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	61 f0       	breq	.+24     	; 0x11b2 <TIM_GetStatus+0xe0>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    119a:	ea 81       	ldd	r30, Y+2	; 0x02
    119c:	fb 81       	ldd	r31, Y+3	; 0x03
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 83       	st	Z, r24
               TIMER_INT_FLAG |= TIMER_0_COMPARE_FLAG;
    11a2:	a8 e5       	ldi	r26, 0x58	; 88
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e8 e5       	ldi	r30, 0x58	; 88
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	82 60       	ori	r24, 0x02	; 2
    11ae:	8c 93       	st	X, r24
    11b0:	ae c0       	rjmp	.+348    	; 0x130e <TIM_GetStatus+0x23c>
            }
            else
            {
               return TIMER_E_PENDING;
    11b2:	2d ef       	ldi	r18, 0xFD	; 253
    11b4:	2e 83       	std	Y+6, r18	; 0x06
    11b6:	ac c0       	rjmp	.+344    	; 0x1310 <TIM_GetStatus+0x23e>
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	c9 01       	movw	r24, r18
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	82 0f       	add	r24, r18
    11c6:	93 1f       	adc	r25, r19
    11c8:	fc 01       	movw	r30, r24
    11ca:	ec 58       	subi	r30, 0x8C	; 140
    11cc:	fe 4f       	sbci	r31, 0xFE	; 254
    11ce:	80 81       	ld	r24, Z
    11d0:	88 23       	and	r24, r24
    11d2:	b9 f4       	brne	.+46     	; 0x1202 <TIM_GetStatus+0x130>
         {
            if( TIMER_INT_FLAG & TIMER_1_OVERFLOW_FLAG )
    11d4:	e8 e5       	ldi	r30, 0x58	; 88
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	84 70       	andi	r24, 0x04	; 4
    11e0:	90 70       	andi	r25, 0x00	; 0
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	59 f0       	breq	.+22     	; 0x11fc <TIM_GetStatus+0x12a>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    11e6:	ea 81       	ldd	r30, Y+2	; 0x02
    11e8:	fb 81       	ldd	r31, Y+3	; 0x03
    11ea:	10 82       	st	Z, r1
               TIMER_INT_FLAG |= TIMER_1_OVERFLOW_FLAG;
    11ec:	a8 e5       	ldi	r26, 0x58	; 88
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e8 e5       	ldi	r30, 0x58	; 88
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	84 60       	ori	r24, 0x04	; 4
    11f8:	8c 93       	st	X, r24
    11fa:	89 c0       	rjmp	.+274    	; 0x130e <TIM_GetStatus+0x23c>
            }
            else
            {
               return TIMER_E_PENDING;
    11fc:	3d ef       	ldi	r19, 0xFD	; 253
    11fe:	3e 83       	std	Y+6, r19	; 0x06
    1200:	87 c0       	rjmp	.+270    	; 0x1310 <TIM_GetStatus+0x23e>
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	c9 01       	movw	r24, r18
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	82 0f       	add	r24, r18
    1210:	93 1f       	adc	r25, r19
    1212:	fc 01       	movw	r30, r24
    1214:	ec 58       	subi	r30, 0x8C	; 140
    1216:	fe 4f       	sbci	r31, 0xFE	; 254
    1218:	80 81       	ld	r24, Z
    121a:	88 30       	cpi	r24, 0x08	; 8
    121c:	09 f0       	breq	.+2      	; 0x1220 <TIM_GetStatus+0x14e>
    121e:	77 c0       	rjmp	.+238    	; 0x130e <TIM_GetStatus+0x23c>
         {
            if(TIMER_INT_FLAG & TIMER_1A_COMPARE_FLAG)
    1220:	e8 e5       	ldi	r30, 0x58	; 88
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 2f       	mov	r24, r24
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	80 71       	andi	r24, 0x10	; 16
    122c:	90 70       	andi	r25, 0x00	; 0
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	61 f0       	breq	.+24     	; 0x124a <TIM_GetStatus+0x178>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1232:	ea 81       	ldd	r30, Y+2	; 0x02
    1234:	fb 81       	ldd	r31, Y+3	; 0x03
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	80 83       	st	Z, r24
               TIMER_INT_FLAG |= TIMER_1A_COMPARE_FLAG;
    123a:	a8 e5       	ldi	r26, 0x58	; 88
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e8 e5       	ldi	r30, 0x58	; 88
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 61       	ori	r24, 0x10	; 16
    1246:	8c 93       	st	X, r24
    1248:	62 c0       	rjmp	.+196    	; 0x130e <TIM_GetStatus+0x23c>
            }
            else if(TIMER_INT_FLAG & TIMER_1B_COMPARE_FLAG)
    124a:	e8 e5       	ldi	r30, 0x58	; 88
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	88 70       	andi	r24, 0x08	; 8
    1256:	90 70       	andi	r25, 0x00	; 0
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	61 f0       	breq	.+24     	; 0x1274 <TIM_GetStatus+0x1a2>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    125c:	ea 81       	ldd	r30, Y+2	; 0x02
    125e:	fb 81       	ldd	r31, Y+3	; 0x03
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	80 83       	st	Z, r24
               TIMER_INT_FLAG |= TIMER_1B_COMPARE_FLAG;
    1264:	a8 e5       	ldi	r26, 0x58	; 88
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e8 e5       	ldi	r30, 0x58	; 88
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	88 60       	ori	r24, 0x08	; 8
    1270:	8c 93       	st	X, r24
    1272:	4d c0       	rjmp	.+154    	; 0x130e <TIM_GetStatus+0x23c>
            }
            else
            {
               return TIMER_E_PENDING;
    1274:	8d ef       	ldi	r24, 0xFD	; 253
    1276:	8e 83       	std	Y+6, r24	; 0x06
    1278:	4b c0       	rjmp	.+150    	; 0x1310 <TIM_GetStatus+0x23e>
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	c9 01       	movw	r24, r18
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	82 0f       	add	r24, r18
    1288:	93 1f       	adc	r25, r19
    128a:	fc 01       	movw	r30, r24
    128c:	ec 58       	subi	r30, 0x8C	; 140
    128e:	fe 4f       	sbci	r31, 0xFE	; 254
    1290:	80 81       	ld	r24, Z
    1292:	88 23       	and	r24, r24
    1294:	b9 f4       	brne	.+46     	; 0x12c4 <TIM_GetStatus+0x1f2>
         {
            if( TIMER_INT_FLAG & TIMER_2_OVERFLOW_FLAG )
    1296:	e8 e5       	ldi	r30, 0x58	; 88
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	80 74       	andi	r24, 0x40	; 64
    12a2:	90 70       	andi	r25, 0x00	; 0
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	59 f0       	breq	.+22     	; 0x12be <TIM_GetStatus+0x1ec>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    12a8:	ea 81       	ldd	r30, Y+2	; 0x02
    12aa:	fb 81       	ldd	r31, Y+3	; 0x03
    12ac:	10 82       	st	Z, r1
               TIMER_INT_FLAG |= TIMER_2_OVERFLOW_FLAG;
    12ae:	a8 e5       	ldi	r26, 0x58	; 88
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e8 e5       	ldi	r30, 0x58	; 88
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	80 64       	ori	r24, 0x40	; 64
    12ba:	8c 93       	st	X, r24
    12bc:	28 c0       	rjmp	.+80     	; 0x130e <TIM_GetStatus+0x23c>
            }
            else
            {
               return TIMER_E_PENDING;
    12be:	9d ef       	ldi	r25, 0xFD	; 253
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	26 c0       	rjmp	.+76     	; 0x1310 <TIM_GetStatus+0x23e>
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	c9 01       	movw	r24, r18
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	82 0f       	add	r24, r18
    12d2:	93 1f       	adc	r25, r19
    12d4:	fc 01       	movw	r30, r24
    12d6:	ec 58       	subi	r30, 0x8C	; 140
    12d8:	fe 4f       	sbci	r31, 0xFE	; 254
    12da:	80 81       	ld	r24, Z
    12dc:	88 30       	cpi	r24, 0x08	; 8
    12de:	b9 f4       	brne	.+46     	; 0x130e <TIM_GetStatus+0x23c>
         {
            if(TIMER_INT_FLAG & TIMER_2_COMPARE_FLAG)
    12e0:	e8 e5       	ldi	r30, 0x58	; 88
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	88 23       	and	r24, r24
    12e8:	64 f4       	brge	.+24     	; 0x1302 <TIM_GetStatus+0x230>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    12ea:	ea 81       	ldd	r30, Y+2	; 0x02
    12ec:	fb 81       	ldd	r31, Y+3	; 0x03
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	80 83       	st	Z, r24
               TIMER_INT_FLAG |= TIMER_2_COMPARE_FLAG;
    12f2:	a8 e5       	ldi	r26, 0x58	; 88
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e8 e5       	ldi	r30, 0x58	; 88
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	80 68       	ori	r24, 0x80	; 128
    12fe:	8c 93       	st	X, r24
    1300:	06 c0       	rjmp	.+12     	; 0x130e <TIM_GetStatus+0x23c>
            }
            else
            {
               return TIMER_E_PENDING;
    1302:	2d ef       	ldi	r18, 0xFD	; 253
    1304:	2e 83       	std	Y+6, r18	; 0x06
    1306:	04 c0       	rjmp	.+8      	; 0x1310 <TIM_GetStatus+0x23e>
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1308:	3e ef       	ldi	r19, 0xFE	; 254
    130a:	3e 83       	std	Y+6, r19	; 0x06
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <TIM_GetStatus+0x23e>
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
    130e:	1e 82       	std	Y+6, r1	; 0x06
    1310:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1312:	26 96       	adiw	r28, 0x06	; 6
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
TIMER_ERROR_state_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	2d 97       	sbiw	r28, 0x0d	; 13
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	8f 83       	std	Y+7, r24	; 0x07
    133a:	48 87       	std	Y+8, r20	; 0x08
    133c:	59 87       	std	Y+9, r21	; 0x09
    133e:	6a 87       	std	Y+10, r22	; 0x0a
    1340:	7b 87       	std	Y+11, r23	; 0x0b
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1342:	8f 81       	ldd	r24, Y+7	; 0x07
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	18 f0       	brcs	.+6      	; 0x134e <TIM_DelayUs+0x2a>
   {
      return TIMER_E_INVALID_CH_NUM;
    1348:	8e ef       	ldi	r24, 0xFE	; 254
    134a:	8c 87       	std	Y+12, r24	; 0x0c
    134c:	c1 c0       	rjmp	.+386    	; 0x14d0 <TIM_DelayUs+0x1ac>
   static uint8_t u8_Remindar = 0;
   static Enu_DelayStateMachine Enu_State = Ready;
   TIMER_ERROR_state_t Timer_state;
   
   /* Ready state */
   if(Ready == Enu_State)
    134e:	80 91 7e 01 	lds	r24, 0x017E
    1352:	88 23       	and	r24, r24
    1354:	09 f0       	breq	.+2      	; 0x1358 <TIM_DelayUs+0x34>
    1356:	6e c0       	rjmp	.+220    	; 0x1434 <TIM_DelayUs+0x110>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    1358:	9e 01       	movw	r18, r28
    135a:	2e 5f       	subi	r18, 0xFE	; 254
    135c:	3f 4f       	sbci	r19, 0xFF	; 255
    135e:	8f 81       	ldd	r24, Y+7	; 0x07
    1360:	b9 01       	movw	r22, r18
    1362:	0e 94 ed 05 	call	0xbda	; 0xbda <GetFreqPrescaleRatio>
    1366:	89 83       	std	Y+1, r24	; 0x01
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	8c 3f       	cpi	r24, 0xFC	; 252
    136c:	19 f4       	brne	.+6      	; 0x1374 <TIM_DelayUs+0x50>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    136e:	8c ef       	ldi	r24, 0xFC	; 252
    1370:	8c 87       	std	Y+12, r24	; 0x0c
    1372:	ae c0       	rjmp	.+348    	; 0x14d0 <TIM_DelayUs+0x1ac>
      }
      
      if(f32_FreqRatio != 0)
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	ac 81       	ldd	r26, Y+4	; 0x04
    137a:	bd 81       	ldd	r27, Y+5	; 0x05
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	0e 94 cb 02 	call	0x596	; 0x596 <__nesf2>
    138c:	88 23       	and	r24, r24
    138e:	e1 f0       	breq	.+56     	; 0x13c8 <TIM_DelayUs+0xa4>
      {
         TIM_Delay /= f32_FreqRatio;
    1390:	68 85       	ldd	r22, Y+8	; 0x08
    1392:	79 85       	ldd	r23, Y+9	; 0x09
    1394:	8a 85       	ldd	r24, Y+10	; 0x0a
    1396:	9b 85       	ldd	r25, Y+11	; 0x0b
    1398:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	2a 81       	ldd	r18, Y+2	; 0x02
    13a2:	3b 81       	ldd	r19, Y+3	; 0x03
    13a4:	4c 81       	ldd	r20, Y+4	; 0x04
    13a6:	5d 81       	ldd	r21, Y+5	; 0x05
    13a8:	bc 01       	movw	r22, r24
    13aa:	cd 01       	movw	r24, r26
    13ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	88 87       	std	Y+8, r24	; 0x08
    13c2:	99 87       	std	Y+9, r25	; 0x09
    13c4:	aa 87       	std	Y+10, r26	; 0x0a
    13c6:	bb 87       	std	Y+11, r27	; 0x0b
      }
      
      /* Calculate how many overflows needed */
      u32_Overflows = TIM_Delay / 256;
    13c8:	88 85       	ldd	r24, Y+8	; 0x08
    13ca:	99 85       	ldd	r25, Y+9	; 0x09
    13cc:	aa 85       	ldd	r26, Y+10	; 0x0a
    13ce:	bb 85       	ldd	r27, Y+11	; 0x0b
    13d0:	89 2f       	mov	r24, r25
    13d2:	9a 2f       	mov	r25, r26
    13d4:	ab 2f       	mov	r26, r27
    13d6:	bb 27       	eor	r27, r27
    13d8:	80 93 81 01 	sts	0x0181, r24
    13dc:	90 93 82 01 	sts	0x0182, r25
    13e0:	a0 93 83 01 	sts	0x0183, r26
    13e4:	b0 93 84 01 	sts	0x0184, r27
      u8_Remindar = TIM_Delay % 256;
    13e8:	88 85       	ldd	r24, Y+8	; 0x08
    13ea:	80 93 7f 01 	sts	0x017F, r24
      
      if(u32_Overflows == 0)
    13ee:	80 91 81 01 	lds	r24, 0x0181
    13f2:	90 91 82 01 	lds	r25, 0x0182
    13f6:	a0 91 83 01 	lds	r26, 0x0183
    13fa:	b0 91 84 01 	lds	r27, 0x0184
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	a1 05       	cpc	r26, r1
    1402:	b1 05       	cpc	r27, r1
    1404:	61 f4       	brne	.+24     	; 0x141e <TIM_DelayUs+0xfa>
      {
         u8_OverflowsComplete = HIGH;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	80 93 80 01 	sts	0x0180, r24
         TIM_Start(TIM_channel, u8_Remindar);
    140c:	80 91 7f 01 	lds	r24, 0x017F
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	8f 81       	ldd	r24, Y+7	; 0x07
    1416:	b9 01       	movw	r22, r18
    1418:	0e 94 c4 07 	call	0xf88	; 0xf88 <TIM_Start>
    141c:	05 c0       	rjmp	.+10     	; 0x1428 <TIM_DelayUs+0x104>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, 255);
    141e:	8f 81       	ldd	r24, Y+7	; 0x07
    1420:	6f ef       	ldi	r22, 0xFF	; 255
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	0e 94 c4 07 	call	0xf88	; 0xf88 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      Enu_State = Pending;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	80 93 7e 01 	sts	0x017E, r24
      return TIMER_E_PENDING;
    142e:	8d ef       	ldi	r24, 0xFD	; 253
    1430:	8c 87       	std	Y+12, r24	; 0x0c
    1432:	4e c0       	rjmp	.+156    	; 0x14d0 <TIM_DelayUs+0x1ac>
   }
   /* Pending state */
   else if(Pending == Enu_State)
    1434:	80 91 7e 01 	lds	r24, 0x017E
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	09 f0       	breq	.+2      	; 0x143e <TIM_DelayUs+0x11a>
    143c:	48 c0       	rjmp	.+144    	; 0x14ce <TIM_DelayUs+0x1aa>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state = TIM_GetStatus(TIM_channel, &u8_FlagState);
    143e:	9e 01       	movw	r18, r28
    1440:	2a 5f       	subi	r18, 0xFA	; 250
    1442:	3f 4f       	sbci	r19, 0xFF	; 255
    1444:	8f 81       	ldd	r24, Y+7	; 0x07
    1446:	b9 01       	movw	r22, r18
    1448:	0e 94 69 08 	call	0x10d2	; 0x10d2 <TIM_GetStatus>
    144c:	89 83       	std	Y+1, r24	; 0x01
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	88 23       	and	r24, r24
    1452:	e9 f5       	brne	.+122    	; 0x14ce <TIM_DelayUs+0x1aa>
      {
         /* If all overflows are finished and reminder. */
         if(u8_OverflowsComplete == HIGH)
    1454:	80 91 80 01 	lds	r24, 0x0180
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	31 f4       	brne	.+12     	; 0x1468 <TIM_DelayUs+0x144>
         {
            /* Return to ready state */
            Enu_State = Ready;
    145c:	10 92 7e 01 	sts	0x017E, r1
            u8_OverflowsComplete = LOW;
    1460:	10 92 80 01 	sts	0x0180, r1
            /* return success message. */
            return TIMER_E_SUCCESS;
    1464:	1c 86       	std	Y+12, r1	; 0x0c
    1466:	34 c0       	rjmp	.+104    	; 0x14d0 <TIM_DelayUs+0x1ac>
         }
         
         /* Decrement overflows number */
         u32_Overflows--;
    1468:	80 91 81 01 	lds	r24, 0x0181
    146c:	90 91 82 01 	lds	r25, 0x0182
    1470:	a0 91 83 01 	lds	r26, 0x0183
    1474:	b0 91 84 01 	lds	r27, 0x0184
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	a1 09       	sbc	r26, r1
    147c:	b1 09       	sbc	r27, r1
    147e:	80 93 81 01 	sts	0x0181, r24
    1482:	90 93 82 01 	sts	0x0182, r25
    1486:	a0 93 83 01 	sts	0x0183, r26
    148a:	b0 93 84 01 	sts	0x0184, r27
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(u32_Overflows == 0)
    148e:	80 91 81 01 	lds	r24, 0x0181
    1492:	90 91 82 01 	lds	r25, 0x0182
    1496:	a0 91 83 01 	lds	r26, 0x0183
    149a:	b0 91 84 01 	lds	r27, 0x0184
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	a1 05       	cpc	r26, r1
    14a2:	b1 05       	cpc	r27, r1
    14a4:	61 f4       	brne	.+24     	; 0x14be <TIM_DelayUs+0x19a>
         {
            u8_OverflowsComplete = HIGH;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	80 93 80 01 	sts	0x0180, r24
            TIM_Start(TIM_channel, u8_Remindar);
    14ac:	80 91 7f 01 	lds	r24, 0x017F
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	8f 81       	ldd	r24, Y+7	; 0x07
    14b6:	b9 01       	movw	r22, r18
    14b8:	0e 94 c4 07 	call	0xf88	; 0xf88 <TIM_Start>
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <TIM_DelayUs+0x1a4>
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
    14be:	8f 81       	ldd	r24, Y+7	; 0x07
    14c0:	6f ef       	ldi	r22, 0xFF	; 255
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	0e 94 c4 07 	call	0xf88	; 0xf88 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    14c8:	8d ef       	ldi	r24, 0xFD	; 253
    14ca:	8c 87       	std	Y+12, r24	; 0x0c
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <TIM_DelayUs+0x1ac>
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <TIM_DelayUs+0x1b0>
      }         
   }            
}
    14d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d2:	8d 87       	std	Y+13, r24	; 0x0d
    14d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d6:	2d 96       	adiw	r28, 0x0d	; 13
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
TIMER_ERROR_state_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	2d 97       	sbiw	r28, 0x0d	; 13
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	8f 83       	std	Y+7, r24	; 0x07
    14fe:	48 87       	std	Y+8, r20	; 0x08
    1500:	59 87       	std	Y+9, r21	; 0x09
    1502:	6a 87       	std	Y+10, r22	; 0x0a
    1504:	7b 87       	std	Y+11, r23	; 0x0b
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1506:	8f 81       	ldd	r24, Y+7	; 0x07
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	18 f0       	brcs	.+6      	; 0x1512 <TIM_DelayMs+0x2a>
   {
      return TIMER_E_INVALID_CH_NUM;
    150c:	8e ef       	ldi	r24, 0xFE	; 254
    150e:	8c 87       	std	Y+12, r24	; 0x0c
    1510:	d8 c0       	rjmp	.+432    	; 0x16c2 <TIM_DelayMs+0x1da>
   static uint8_t u8_Remindar = 0;
   static Enu_DelayStateMachine Enu_State = Ready;
   TIMER_ERROR_state_t Timer_state;
   
   /* Ready state */
   if(Ready == Enu_State)
    1512:	80 91 85 01 	lds	r24, 0x0185
    1516:	88 23       	and	r24, r24
    1518:	09 f0       	breq	.+2      	; 0x151c <TIM_DelayMs+0x34>
    151a:	85 c0       	rjmp	.+266    	; 0x1626 <TIM_DelayMs+0x13e>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    151c:	9e 01       	movw	r18, r28
    151e:	2e 5f       	subi	r18, 0xFE	; 254
    1520:	3f 4f       	sbci	r19, 0xFF	; 255
    1522:	8f 81       	ldd	r24, Y+7	; 0x07
    1524:	b9 01       	movw	r22, r18
    1526:	0e 94 ed 05 	call	0xbda	; 0xbda <GetFreqPrescaleRatio>
    152a:	89 83       	std	Y+1, r24	; 0x01
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	8c 3f       	cpi	r24, 0xFC	; 252
    1530:	19 f4       	brne	.+6      	; 0x1538 <TIM_DelayMs+0x50>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1532:	8c ef       	ldi	r24, 0xFC	; 252
    1534:	8c 87       	std	Y+12, r24	; 0x0c
    1536:	c5 c0       	rjmp	.+394    	; 0x16c2 <TIM_DelayMs+0x1da>
      }
      
      if(f32_FreqRatio != 0)
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	9b 81       	ldd	r25, Y+3	; 0x03
    153c:	ac 81       	ldd	r26, Y+4	; 0x04
    153e:	bd 81       	ldd	r27, Y+5	; 0x05
    1540:	bc 01       	movw	r22, r24
    1542:	cd 01       	movw	r24, r26
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	0e 94 cb 02 	call	0x596	; 0x596 <__nesf2>
    1550:	88 23       	and	r24, r24
    1552:	e1 f0       	breq	.+56     	; 0x158c <TIM_DelayMs+0xa4>
      {
         TIM_Delay /= f32_FreqRatio;
    1554:	68 85       	ldd	r22, Y+8	; 0x08
    1556:	79 85       	ldd	r23, Y+9	; 0x09
    1558:	8a 85       	ldd	r24, Y+10	; 0x0a
    155a:	9b 85       	ldd	r25, Y+11	; 0x0b
    155c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	2a 81       	ldd	r18, Y+2	; 0x02
    1566:	3b 81       	ldd	r19, Y+3	; 0x03
    1568:	4c 81       	ldd	r20, Y+4	; 0x04
    156a:	5d 81       	ldd	r21, Y+5	; 0x05
    156c:	bc 01       	movw	r22, r24
    156e:	cd 01       	movw	r24, r26
    1570:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	88 87       	std	Y+8, r24	; 0x08
    1586:	99 87       	std	Y+9, r25	; 0x09
    1588:	aa 87       	std	Y+10, r26	; 0x0a
    158a:	bb 87       	std	Y+11, r27	; 0x0b
      }
      
      /* Calculate how many overflows needed */
      u32_Overflows = TIM_Delay*1000 / 256;
    158c:	88 85       	ldd	r24, Y+8	; 0x08
    158e:	99 85       	ldd	r25, Y+9	; 0x09
    1590:	aa 85       	ldd	r26, Y+10	; 0x0a
    1592:	bb 85       	ldd	r27, Y+11	; 0x0b
    1594:	28 ee       	ldi	r18, 0xE8	; 232
    1596:	33 e0       	ldi	r19, 0x03	; 3
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	0e 94 42 1a 	call	0x3484	; 0x3484 <__mulsi3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	89 2f       	mov	r24, r25
    15aa:	9a 2f       	mov	r25, r26
    15ac:	ab 2f       	mov	r26, r27
    15ae:	bb 27       	eor	r27, r27
    15b0:	80 93 88 01 	sts	0x0188, r24
    15b4:	90 93 89 01 	sts	0x0189, r25
    15b8:	a0 93 8a 01 	sts	0x018A, r26
    15bc:	b0 93 8b 01 	sts	0x018B, r27
      u8_Remindar = TIM_Delay*1000 % 256;
    15c0:	88 85       	ldd	r24, Y+8	; 0x08
    15c2:	99 85       	ldd	r25, Y+9	; 0x09
    15c4:	aa 85       	ldd	r26, Y+10	; 0x0a
    15c6:	bb 85       	ldd	r27, Y+11	; 0x0b
    15c8:	28 ee       	ldi	r18, 0xE8	; 232
    15ca:	33 e0       	ldi	r19, 0x03	; 3
    15cc:	40 e0       	ldi	r20, 0x00	; 0
    15ce:	50 e0       	ldi	r21, 0x00	; 0
    15d0:	bc 01       	movw	r22, r24
    15d2:	cd 01       	movw	r24, r26
    15d4:	0e 94 42 1a 	call	0x3484	; 0x3484 <__mulsi3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	80 93 86 01 	sts	0x0186, r24
      
      if(u32_Overflows == 0)
    15e0:	80 91 88 01 	lds	r24, 0x0188
    15e4:	90 91 89 01 	lds	r25, 0x0189
    15e8:	a0 91 8a 01 	lds	r26, 0x018A
    15ec:	b0 91 8b 01 	lds	r27, 0x018B
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	a1 05       	cpc	r26, r1
    15f4:	b1 05       	cpc	r27, r1
    15f6:	61 f4       	brne	.+24     	; 0x1610 <TIM_DelayMs+0x128>
      {
         u8_OverflowsComplete = HIGH;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	80 93 87 01 	sts	0x0187, r24
         TIM_Start(TIM_channel, u8_Remindar);
    15fe:	80 91 86 01 	lds	r24, 0x0186
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	8f 81       	ldd	r24, Y+7	; 0x07
    1608:	b9 01       	movw	r22, r18
    160a:	0e 94 c4 07 	call	0xf88	; 0xf88 <TIM_Start>
    160e:	05 c0       	rjmp	.+10     	; 0x161a <TIM_DelayMs+0x132>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, 255);
    1610:	8f 81       	ldd	r24, Y+7	; 0x07
    1612:	6f ef       	ldi	r22, 0xFF	; 255
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	0e 94 c4 07 	call	0xf88	; 0xf88 <TIM_Start>
      }
      /* Change to timer pending state */
      Enu_State= Pending;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	80 93 85 01 	sts	0x0185, r24
      return TIMER_E_PENDING;
    1620:	8d ef       	ldi	r24, 0xFD	; 253
    1622:	8c 87       	std	Y+12, r24	; 0x0c
    1624:	4e c0       	rjmp	.+156    	; 0x16c2 <TIM_DelayMs+0x1da>
   }
   /* Pending state */
   else if(Pending == Enu_State)
    1626:	80 91 85 01 	lds	r24, 0x0185
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	09 f0       	breq	.+2      	; 0x1630 <TIM_DelayMs+0x148>
    162e:	48 c0       	rjmp	.+144    	; 0x16c0 <TIM_DelayMs+0x1d8>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    1630:	9e 01       	movw	r18, r28
    1632:	2a 5f       	subi	r18, 0xFA	; 250
    1634:	3f 4f       	sbci	r19, 0xFF	; 255
    1636:	8f 81       	ldd	r24, Y+7	; 0x07
    1638:	b9 01       	movw	r22, r18
    163a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <TIM_GetStatus>
    163e:	89 83       	std	Y+1, r24	; 0x01
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	88 23       	and	r24, r24
    1644:	e9 f5       	brne	.+122    	; 0x16c0 <TIM_DelayMs+0x1d8>
      {
         /* If all overflows are finished and reminder. */
         if(u8_OverflowsComplete == HIGH)
    1646:	80 91 87 01 	lds	r24, 0x0187
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	31 f4       	brne	.+12     	; 0x165a <TIM_DelayMs+0x172>
         {
            /* Return to ready state */
            Enu_State = Ready;
    164e:	10 92 85 01 	sts	0x0185, r1
            u8_OverflowsComplete = LOW;
    1652:	10 92 87 01 	sts	0x0187, r1
            /* return success message. */
            return TIMER_E_SUCCESS;
    1656:	1c 86       	std	Y+12, r1	; 0x0c
    1658:	34 c0       	rjmp	.+104    	; 0x16c2 <TIM_DelayMs+0x1da>
         }
         
         /* Decrement overflows number */
         u32_Overflows--;
    165a:	80 91 88 01 	lds	r24, 0x0188
    165e:	90 91 89 01 	lds	r25, 0x0189
    1662:	a0 91 8a 01 	lds	r26, 0x018A
    1666:	b0 91 8b 01 	lds	r27, 0x018B
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	a1 09       	sbc	r26, r1
    166e:	b1 09       	sbc	r27, r1
    1670:	80 93 88 01 	sts	0x0188, r24
    1674:	90 93 89 01 	sts	0x0189, r25
    1678:	a0 93 8a 01 	sts	0x018A, r26
    167c:	b0 93 8b 01 	sts	0x018B, r27
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(u32_Overflows == 0)
    1680:	80 91 88 01 	lds	r24, 0x0188
    1684:	90 91 89 01 	lds	r25, 0x0189
    1688:	a0 91 8a 01 	lds	r26, 0x018A
    168c:	b0 91 8b 01 	lds	r27, 0x018B
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	a1 05       	cpc	r26, r1
    1694:	b1 05       	cpc	r27, r1
    1696:	61 f4       	brne	.+24     	; 0x16b0 <TIM_DelayMs+0x1c8>
         {
            u8_OverflowsComplete = HIGH;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 87 01 	sts	0x0187, r24
            TIM_Start(TIM_channel, u8_Remindar);
    169e:	80 91 86 01 	lds	r24, 0x0186
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	8f 81       	ldd	r24, Y+7	; 0x07
    16a8:	b9 01       	movw	r22, r18
    16aa:	0e 94 c4 07 	call	0xf88	; 0xf88 <TIM_Start>
    16ae:	05 c0       	rjmp	.+10     	; 0x16ba <TIM_DelayMs+0x1d2>
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
    16b0:	8f 81       	ldd	r24, Y+7	; 0x07
    16b2:	6f ef       	ldi	r22, 0xFF	; 255
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	0e 94 c4 07 	call	0xf88	; 0xf88 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    16ba:	8d ef       	ldi	r24, 0xFD	; 253
    16bc:	8c 87       	std	Y+12, r24	; 0x0c
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <TIM_DelayMs+0x1da>
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <TIM_DelayMs+0x1de>
      }
   }
}
    16c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    16c4:	8d 87       	std	Y+13, r24	; 0x0d
    16c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c8:	2d 96       	adiw	r28, 0x0d	; 13
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <DIO_PortInit>:
#include "../../Infrastructure/infrastructure.h"
#include "../DIO/DIO_DRIVER.h"
#include "../DIO/DIO_DRIVER_Priv.h"

DIO_ERROR_RETVAL_t DIO_PortInit(DIO_PORT_ID_t DIO_port,
		DIO_DIRECTION_t DIO_direction) {
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <DIO_PortInit+0x6>
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <DIO_PortInit+0x8>
    16e2:	0f 92       	push	r0
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	8a 83       	std	Y+2, r24	; 0x02
    16ea:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    16ec:	19 82       	std	Y+1, r1	; 0x01

	if ((DIO_port <= PORTD)
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	85 30       	cpi	r24, 0x05	; 5
    16f2:	08 f0       	brcs	.+2      	; 0x16f6 <DIO_PortInit+0x1c>
    16f4:	3d c0       	rjmp	.+122    	; 0x1770 <DIO_PortInit+0x96>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	88 23       	and	r24, r24
    16fa:	19 f0       	breq	.+6      	; 0x1702 <DIO_PortInit+0x28>
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1700:	b9 f5       	brne	.+110    	; 0x1770 <DIO_PortInit+0x96>
			&& (DIO_direction == PORT_INPUT || DIO_direction == PORT_OUTPUT)) {
		switch (DIO_port) {
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	3d 83       	std	Y+5, r19	; 0x05
    170a:	2c 83       	std	Y+4, r18	; 0x04
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	9d 81       	ldd	r25, Y+5	; 0x05
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	91 05       	cpc	r25, r1
    1714:	d9 f0       	breq	.+54     	; 0x174c <DIO_PortInit+0x72>
    1716:	2c 81       	ldd	r18, Y+4	; 0x04
    1718:	3d 81       	ldd	r19, Y+5	; 0x05
    171a:	23 30       	cpi	r18, 0x03	; 3
    171c:	31 05       	cpc	r19, r1
    171e:	34 f4       	brge	.+12     	; 0x172c <DIO_PortInit+0x52>
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	9d 81       	ldd	r25, Y+5	; 0x05
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	91 05       	cpc	r25, r1
    1728:	61 f0       	breq	.+24     	; 0x1742 <DIO_PortInit+0x68>
    172a:	1f c0       	rjmp	.+62     	; 0x176a <DIO_PortInit+0x90>
    172c:	2c 81       	ldd	r18, Y+4	; 0x04
    172e:	3d 81       	ldd	r19, Y+5	; 0x05
    1730:	23 30       	cpi	r18, 0x03	; 3
    1732:	31 05       	cpc	r19, r1
    1734:	81 f0       	breq	.+32     	; 0x1756 <DIO_PortInit+0x7c>
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	9d 81       	ldd	r25, Y+5	; 0x05
    173a:	84 30       	cpi	r24, 0x04	; 4
    173c:	91 05       	cpc	r25, r1
    173e:	81 f0       	breq	.+32     	; 0x1760 <DIO_PortInit+0x86>
    1740:	14 c0       	rjmp	.+40     	; 0x176a <DIO_PortInit+0x90>
		case PORTA:
			WRITE_REG(DDRA_Register, DIO_direction);
    1742:	ea e3       	ldi	r30, 0x3A	; 58
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	80 83       	st	Z, r24
    174a:	14 c0       	rjmp	.+40     	; 0x1774 <DIO_PortInit+0x9a>
			break;
		case PORTB:
			WRITE_REG(DDRB_Register, DIO_direction);
    174c:	e7 e3       	ldi	r30, 0x37	; 55
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	80 83       	st	Z, r24
    1754:	0f c0       	rjmp	.+30     	; 0x1774 <DIO_PortInit+0x9a>
			break;
		case PORTC:
			WRITE_REG(DDRC_Register, DIO_direction);
    1756:	e4 e3       	ldi	r30, 0x34	; 52
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	80 83       	st	Z, r24
    175e:	0a c0       	rjmp	.+20     	; 0x1774 <DIO_PortInit+0x9a>
			break;
		case PORTD:
			WRITE_REG(DDRD_Register, DIO_direction);
    1760:	e1 e3       	ldi	r30, 0x31	; 49
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	80 83       	st	Z, r24
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <DIO_PortInit+0x9a>
			break;
		default:
			ErrorValue = EXIT_FAILURE;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <DIO_PortInit+0x9a>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    1774:	89 81       	ldd	r24, Y+1	; 0x01
}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <DIO_SetPortVal>:
DIO_ERROR_RETVAL_t DIO_SetPortVal(DIO_PORT_ID_t DIO_port, uint8_t value) {
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <DIO_SetPortVal+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <DIO_SetPortVal+0x8>
    178e:	0f 92       	push	r0
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	8a 83       	std	Y+2, r24	; 0x02
    1796:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    1798:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	85 30       	cpi	r24, 0x05	; 5
    179e:	08 f0       	brcs	.+2      	; 0x17a2 <DIO_SetPortVal+0x1c>
    17a0:	57 c0       	rjmp	.+174    	; 0x1850 <DIO_SetPortVal+0xca>
		switch (DIO_port) {
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	3d 83       	std	Y+5, r19	; 0x05
    17aa:	2c 83       	std	Y+4, r18	; 0x04
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	9d 81       	ldd	r25, Y+5	; 0x05
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	91 05       	cpc	r25, r1
    17b4:	19 f1       	breq	.+70     	; 0x17fc <DIO_SetPortVal+0x76>
    17b6:	2c 81       	ldd	r18, Y+4	; 0x04
    17b8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ba:	23 30       	cpi	r18, 0x03	; 3
    17bc:	31 05       	cpc	r19, r1
    17be:	34 f4       	brge	.+12     	; 0x17cc <DIO_SetPortVal+0x46>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <DIO_SetPortVal+0x5c>
    17ca:	3f c0       	rjmp	.+126    	; 0x184a <DIO_SetPortVal+0xc4>
    17cc:	2c 81       	ldd	r18, Y+4	; 0x04
    17ce:	3d 81       	ldd	r19, Y+5	; 0x05
    17d0:	23 30       	cpi	r18, 0x03	; 3
    17d2:	31 05       	cpc	r19, r1
    17d4:	01 f1       	breq	.+64     	; 0x1816 <DIO_SetPortVal+0x90>
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	9d 81       	ldd	r25, Y+5	; 0x05
    17da:	84 30       	cpi	r24, 0x04	; 4
    17dc:	91 05       	cpc	r25, r1
    17de:	41 f1       	breq	.+80     	; 0x1830 <DIO_SetPortVal+0xaa>
    17e0:	34 c0       	rjmp	.+104    	; 0x184a <DIO_SetPortVal+0xc4>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, value);
    17e2:	ab e3       	ldi	r26, 0x3B	; 59
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	eb e3       	ldi	r30, 0x3B	; 59
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	98 2f       	mov	r25, r24
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	80 95       	com	r24
    17f2:	98 23       	and	r25, r24
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	89 2b       	or	r24, r25
    17f8:	8c 93       	st	X, r24
    17fa:	2c c0       	rjmp	.+88     	; 0x1854 <DIO_SetPortVal+0xce>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, value);
    17fc:	a8 e3       	ldi	r26, 0x38	; 56
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e8 e3       	ldi	r30, 0x38	; 56
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	98 2f       	mov	r25, r24
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	80 95       	com	r24
    180c:	98 23       	and	r25, r24
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	89 2b       	or	r24, r25
    1812:	8c 93       	st	X, r24
    1814:	1f c0       	rjmp	.+62     	; 0x1854 <DIO_SetPortVal+0xce>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, value);
    1816:	a5 e3       	ldi	r26, 0x35	; 53
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e5 e3       	ldi	r30, 0x35	; 53
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	98 2f       	mov	r25, r24
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	80 95       	com	r24
    1826:	98 23       	and	r25, r24
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	89 2b       	or	r24, r25
    182c:	8c 93       	st	X, r24
    182e:	12 c0       	rjmp	.+36     	; 0x1854 <DIO_SetPortVal+0xce>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, value);
    1830:	a2 e3       	ldi	r26, 0x32	; 50
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e2 e3       	ldi	r30, 0x32	; 50
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	98 2f       	mov	r25, r24
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	80 95       	com	r24
    1840:	98 23       	and	r25, r24
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	89 2b       	or	r24, r25
    1846:	8c 93       	st	X, r24
    1848:	05 c0       	rjmp	.+10     	; 0x1854 <DIO_SetPortVal+0xce>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_SetPortVal+0xce>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    1854:	89 81       	ldd	r24, Y+1	; 0x01
}
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <DIO_ClrPortVal>:
DIO_ERROR_RETVAL_t DIO_ClrPortVal(DIO_PORT_ID_t DIO_port, uint8_t value) {
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	29 97       	sbiw	r28, 0x09	; 9
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	8a 83       	std	Y+2, r24	; 0x02
    187c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    187e:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	85 30       	cpi	r24, 0x05	; 5
    1884:	08 f0       	brcs	.+2      	; 0x1888 <DIO_ClrPortVal+0x22>
    1886:	53 c0       	rjmp	.+166    	; 0x192e <DIO_ClrPortVal+0xc8>
		switch (DIO_port) {
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	39 87       	std	Y+9, r19	; 0x09
    1890:	28 87       	std	Y+8, r18	; 0x08
    1892:	88 85       	ldd	r24, Y+8	; 0x08
    1894:	99 85       	ldd	r25, Y+9	; 0x09
    1896:	82 30       	cpi	r24, 0x02	; 2
    1898:	91 05       	cpc	r25, r1
    189a:	11 f1       	breq	.+68     	; 0x18e0 <DIO_ClrPortVal+0x7a>
    189c:	28 85       	ldd	r18, Y+8	; 0x08
    189e:	39 85       	ldd	r19, Y+9	; 0x09
    18a0:	23 30       	cpi	r18, 0x03	; 3
    18a2:	31 05       	cpc	r19, r1
    18a4:	34 f4       	brge	.+12     	; 0x18b2 <DIO_ClrPortVal+0x4c>
    18a6:	88 85       	ldd	r24, Y+8	; 0x08
    18a8:	99 85       	ldd	r25, Y+9	; 0x09
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	91 05       	cpc	r25, r1
    18ae:	61 f0       	breq	.+24     	; 0x18c8 <DIO_ClrPortVal+0x62>
    18b0:	3b c0       	rjmp	.+118    	; 0x1928 <DIO_ClrPortVal+0xc2>
    18b2:	28 85       	ldd	r18, Y+8	; 0x08
    18b4:	39 85       	ldd	r19, Y+9	; 0x09
    18b6:	23 30       	cpi	r18, 0x03	; 3
    18b8:	31 05       	cpc	r19, r1
    18ba:	f1 f0       	breq	.+60     	; 0x18f8 <DIO_ClrPortVal+0x92>
    18bc:	88 85       	ldd	r24, Y+8	; 0x08
    18be:	99 85       	ldd	r25, Y+9	; 0x09
    18c0:	84 30       	cpi	r24, 0x04	; 4
    18c2:	91 05       	cpc	r25, r1
    18c4:	29 f1       	breq	.+74     	; 0x1910 <DIO_ClrPortVal+0xaa>
    18c6:	30 c0       	rjmp	.+96     	; 0x1928 <DIO_ClrPortVal+0xc2>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, ~value);
    18c8:	eb e3       	ldi	r30, 0x3B	; 59
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	90 81       	ld	r25, Z
    18ce:	eb e3       	ldi	r30, 0x3B	; 59
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	80 95       	com	r24
    18da:	90 95       	com	r25
    18dc:	80 83       	st	Z, r24
    18de:	29 c0       	rjmp	.+82     	; 0x1932 <DIO_ClrPortVal+0xcc>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, ~value);
    18e0:	e8 e3       	ldi	r30, 0x38	; 56
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	20 81       	ld	r18, Z
    18e6:	e8 e3       	ldi	r30, 0x38	; 56
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	80 95       	com	r24
    18f2:	90 95       	com	r25
    18f4:	80 83       	st	Z, r24
    18f6:	1d c0       	rjmp	.+58     	; 0x1932 <DIO_ClrPortVal+0xcc>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, ~value);
    18f8:	e5 e3       	ldi	r30, 0x35	; 53
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	30 81       	ld	r19, Z
    18fe:	e5 e3       	ldi	r30, 0x35	; 53
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	80 95       	com	r24
    190a:	90 95       	com	r25
    190c:	80 83       	st	Z, r24
    190e:	11 c0       	rjmp	.+34     	; 0x1932 <DIO_ClrPortVal+0xcc>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, ~value);
    1910:	e2 e3       	ldi	r30, 0x32	; 50
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	e2 e3       	ldi	r30, 0x32	; 50
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	80 95       	com	r24
    1922:	90 95       	com	r25
    1924:	80 83       	st	Z, r24
    1926:	05 c0       	rjmp	.+10     	; 0x1932 <DIO_ClrPortVal+0xcc>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <DIO_ClrPortVal+0xcc>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
}
    1934:	29 96       	adiw	r28, 0x09	; 9
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <DIO_GetPortVal>:
uint8_t DIO_GetPortVal(DIO_PORT_ID_t DIO_port) {
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <DIO_GetPortVal+0x6>
    194c:	00 d0       	rcall	.+0      	; 0x194e <DIO_GetPortVal+0x8>
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t RETVAL = EXIT_FAILURE;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_port <= PORTD)) {
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	85 30       	cpi	r24, 0x05	; 5
    195c:	b8 f5       	brcc	.+110    	; 0x19cc <DIO_GetPortVal+0x86>
		/* Check on the Required PORT Number */
		switch (DIO_port) {
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	3c 83       	std	Y+4, r19	; 0x04
    1966:	2b 83       	std	Y+3, r18	; 0x03
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	91 05       	cpc	r25, r1
    1970:	d9 f0       	breq	.+54     	; 0x19a8 <DIO_GetPortVal+0x62>
    1972:	2b 81       	ldd	r18, Y+3	; 0x03
    1974:	3c 81       	ldd	r19, Y+4	; 0x04
    1976:	23 30       	cpi	r18, 0x03	; 3
    1978:	31 05       	cpc	r19, r1
    197a:	34 f4       	brge	.+12     	; 0x1988 <DIO_GetPortVal+0x42>
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	91 05       	cpc	r25, r1
    1984:	61 f0       	breq	.+24     	; 0x199e <DIO_GetPortVal+0x58>
    1986:	1f c0       	rjmp	.+62     	; 0x19c6 <DIO_GetPortVal+0x80>
    1988:	2b 81       	ldd	r18, Y+3	; 0x03
    198a:	3c 81       	ldd	r19, Y+4	; 0x04
    198c:	23 30       	cpi	r18, 0x03	; 3
    198e:	31 05       	cpc	r19, r1
    1990:	81 f0       	breq	.+32     	; 0x19b2 <DIO_GetPortVal+0x6c>
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	84 30       	cpi	r24, 0x04	; 4
    1998:	91 05       	cpc	r25, r1
    199a:	81 f0       	breq	.+32     	; 0x19bc <DIO_GetPortVal+0x76>
    199c:	14 c0       	rjmp	.+40     	; 0x19c6 <DIO_GetPortVal+0x80>
		case PORTA:
			RETVAL = READ_REG(PINA_Register);
    199e:	e9 e3       	ldi	r30, 0x39	; 57
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	14 c0       	rjmp	.+40     	; 0x19d0 <DIO_GetPortVal+0x8a>
			break;
		case PORTB:
			RETVAL = READ_REG(PINB_Register);
    19a8:	e6 e3       	ldi	r30, 0x36	; 54
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	0f c0       	rjmp	.+30     	; 0x19d0 <DIO_GetPortVal+0x8a>
			break;
		case PORTC:
			RETVAL = READ_REG(PINC_Register);
    19b2:	e3 e3       	ldi	r30, 0x33	; 51
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	0a c0       	rjmp	.+20     	; 0x19d0 <DIO_GetPortVal+0x8a>
			break;
		case PORTD:
			RETVAL = READ_REG(PIND_Register);
    19bc:	e0 e3       	ldi	r30, 0x30	; 48
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <DIO_GetPortVal+0x8a>
			break;
		default:
			RETVAL = EXIT_FAILURE;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_GetPortVal+0x8a>
			break;
		}
	} else {
		RETVAL = EXIT_FAILURE;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	89 83       	std	Y+1, r24	; 0x01
	}
	return RETVAL;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <DIO_TogPortVal>:
DIO_ERROR_RETVAL_t DIO_TogPortVal(DIO_PORT_ID_t DIO_port, uint8_t value) {
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <DIO_TogPortVal+0x6>
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <DIO_TogPortVal+0x8>
    19e8:	0f 92       	push	r0
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	8a 83       	std	Y+2, r24	; 0x02
    19f0:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    19f2:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	85 30       	cpi	r24, 0x05	; 5
    19f8:	08 f0       	brcs	.+2      	; 0x19fc <DIO_TogPortVal+0x1c>
    19fa:	67 c0       	rjmp	.+206    	; 0x1aca <DIO_TogPortVal+0xea>
		switch (DIO_port) {
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	3d 83       	std	Y+5, r19	; 0x05
    1a04:	2c 83       	std	Y+4, r18	; 0x04
    1a06:	8c 81       	ldd	r24, Y+4	; 0x04
    1a08:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	39 f1       	breq	.+78     	; 0x1a5e <DIO_TogPortVal+0x7e>
    1a10:	2c 81       	ldd	r18, Y+4	; 0x04
    1a12:	3d 81       	ldd	r19, Y+5	; 0x05
    1a14:	23 30       	cpi	r18, 0x03	; 3
    1a16:	31 05       	cpc	r19, r1
    1a18:	34 f4       	brge	.+12     	; 0x1a26 <DIO_TogPortVal+0x46>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	91 05       	cpc	r25, r1
    1a22:	61 f0       	breq	.+24     	; 0x1a3c <DIO_TogPortVal+0x5c>
    1a24:	4f c0       	rjmp	.+158    	; 0x1ac4 <DIO_TogPortVal+0xe4>
    1a26:	2c 81       	ldd	r18, Y+4	; 0x04
    1a28:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2a:	23 30       	cpi	r18, 0x03	; 3
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	41 f1       	breq	.+80     	; 0x1a80 <DIO_TogPortVal+0xa0>
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	84 30       	cpi	r24, 0x04	; 4
    1a36:	91 05       	cpc	r25, r1
    1a38:	a1 f1       	breq	.+104    	; 0x1aa2 <DIO_TogPortVal+0xc2>
    1a3a:	44 c0       	rjmp	.+136    	; 0x1ac4 <DIO_TogPortVal+0xe4>
		case PORTA:
			if (READ_REG(DDRA_Register) == PORT_OUTPUT) {
    1a3c:	ea e3       	ldi	r30, 0x3A	; 58
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8f 3f       	cpi	r24, 0xFF	; 255
    1a44:	49 f4       	brne	.+18     	; 0x1a58 <DIO_TogPortVal+0x78>
				TOG_REG(PORTA_Register, value);
    1a46:	ab e3       	ldi	r26, 0x3B	; 59
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	eb e3       	ldi	r30, 0x3B	; 59
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	90 81       	ld	r25, Z
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	89 27       	eor	r24, r25
    1a54:	8c 93       	st	X, r24
    1a56:	3b c0       	rjmp	.+118    	; 0x1ace <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	38 c0       	rjmp	.+112    	; 0x1ace <DIO_TogPortVal+0xee>
			}
			break;
		case PORTB:
			if (READ_REG(DDRB_Register) == PORT_OUTPUT) {
    1a5e:	e7 e3       	ldi	r30, 0x37	; 55
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	8f 3f       	cpi	r24, 0xFF	; 255
    1a66:	49 f4       	brne	.+18     	; 0x1a7a <DIO_TogPortVal+0x9a>
				TOG_REG(PORTB_Register, value);
    1a68:	a8 e3       	ldi	r26, 0x38	; 56
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e8 e3       	ldi	r30, 0x38	; 56
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	90 81       	ld	r25, Z
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	89 27       	eor	r24, r25
    1a76:	8c 93       	st	X, r24
    1a78:	2a c0       	rjmp	.+84     	; 0x1ace <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	27 c0       	rjmp	.+78     	; 0x1ace <DIO_TogPortVal+0xee>
			}
			break;
		case PORTC:
			if (READ_REG(DDRC_Register) == PORT_OUTPUT) {
    1a80:	e4 e3       	ldi	r30, 0x34	; 52
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8f 3f       	cpi	r24, 0xFF	; 255
    1a88:	49 f4       	brne	.+18     	; 0x1a9c <DIO_TogPortVal+0xbc>
				TOG_REG(PORTC_Register, value);
    1a8a:	a5 e3       	ldi	r26, 0x35	; 53
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e3       	ldi	r30, 0x35	; 53
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	90 81       	ld	r25, Z
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	89 27       	eor	r24, r25
    1a98:	8c 93       	st	X, r24
    1a9a:	19 c0       	rjmp	.+50     	; 0x1ace <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	16 c0       	rjmp	.+44     	; 0x1ace <DIO_TogPortVal+0xee>
			}
			break;
		case PORTD:
			if (READ_REG(DDRD_Register) == PORT_OUTPUT) {
    1aa2:	e1 e3       	ldi	r30, 0x31	; 49
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aaa:	49 f4       	brne	.+18     	; 0x1abe <DIO_TogPortVal+0xde>
				TOG_REG(PORTD_Register, value);
    1aac:	a2 e3       	ldi	r26, 0x32	; 50
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e2 e3       	ldi	r30, 0x32	; 50
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	90 81       	ld	r25, Z
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	89 27       	eor	r24, r25
    1aba:	8c 93       	st	X, r24
    1abc:	08 c0       	rjmp	.+16     	; 0x1ace <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	05 c0       	rjmp	.+10     	; 0x1ace <DIO_TogPortVal+0xee>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <DIO_TogPortVal+0xee>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <DIO_SetPinDirection>:
/*main APIs*/
uint8_t DIO_SetPinDirection(uint8_t PortName, uint8_t PinNo,
		uint8_t PinDirection) {
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	28 97       	sbiw	r28, 0x08	; 8
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	8a 83       	std	Y+2, r24	; 0x02
    1af6:	6b 83       	std	Y+3, r22	; 0x03
    1af8:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    1afa:	19 82       	std	Y+1, r1	; 0x01

	if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	85 30       	cpi	r24, 0x05	; 5
    1b00:	08 f0       	brcs	.+2      	; 0x1b04 <DIO_SetPinDirection+0x24>
    1b02:	fa c0       	rjmp	.+500    	; 0x1cf8 <DIO_SetPinDirection+0x218>
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	88 30       	cpi	r24, 0x08	; 8
    1b08:	08 f0       	brcs	.+2      	; 0x1b0c <DIO_SetPinDirection+0x2c>
    1b0a:	f6 c0       	rjmp	.+492    	; 0x1cf8 <DIO_SetPinDirection+0x218>
		if (PinDirection == PIN_OUTPUT) {
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	09 f0       	breq	.+2      	; 0x1b14 <DIO_SetPinDirection+0x34>
    1b12:	73 c0       	rjmp	.+230    	; 0x1bfa <DIO_SetPinDirection+0x11a>

			switch (PortName) {
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	38 87       	std	Y+8, r19	; 0x08
    1b1c:	2f 83       	std	Y+7, r18	; 0x07
    1b1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b20:	98 85       	ldd	r25, Y+8	; 0x08
    1b22:	82 30       	cpi	r24, 0x02	; 2
    1b24:	91 05       	cpc	r25, r1
    1b26:	51 f1       	breq	.+84     	; 0x1b7c <DIO_SetPinDirection+0x9c>
    1b28:	2f 81       	ldd	r18, Y+7	; 0x07
    1b2a:	38 85       	ldd	r19, Y+8	; 0x08
    1b2c:	23 30       	cpi	r18, 0x03	; 3
    1b2e:	31 05       	cpc	r19, r1
    1b30:	34 f4       	brge	.+12     	; 0x1b3e <DIO_SetPinDirection+0x5e>
    1b32:	8f 81       	ldd	r24, Y+7	; 0x07
    1b34:	98 85       	ldd	r25, Y+8	; 0x08
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	91 05       	cpc	r25, r1
    1b3a:	61 f0       	breq	.+24     	; 0x1b54 <DIO_SetPinDirection+0x74>
    1b3c:	5b c0       	rjmp	.+182    	; 0x1bf4 <DIO_SetPinDirection+0x114>
    1b3e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b40:	38 85       	ldd	r19, Y+8	; 0x08
    1b42:	23 30       	cpi	r18, 0x03	; 3
    1b44:	31 05       	cpc	r19, r1
    1b46:	71 f1       	breq	.+92     	; 0x1ba4 <DIO_SetPinDirection+0xc4>
    1b48:	8f 81       	ldd	r24, Y+7	; 0x07
    1b4a:	98 85       	ldd	r25, Y+8	; 0x08
    1b4c:	84 30       	cpi	r24, 0x04	; 4
    1b4e:	91 05       	cpc	r25, r1
    1b50:	e9 f1       	breq	.+122    	; 0x1bcc <DIO_SetPinDirection+0xec>
    1b52:	50 c0       	rjmp	.+160    	; 0x1bf4 <DIO_SetPinDirection+0x114>
			case PORTA:
				SET_BIT(DDRA_Register, PinNo);
    1b54:	aa e3       	ldi	r26, 0x3A	; 58
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	ea e3       	ldi	r30, 0x3A	; 58
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <DIO_SetPinDirection+0x92>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <DIO_SetPinDirection+0x8e>
    1b76:	84 2b       	or	r24, r20
    1b78:	8c 93       	st	X, r24
    1b7a:	c0 c0       	rjmp	.+384    	; 0x1cfc <DIO_SetPinDirection+0x21c>
				break;
			case PORTB:
				SET_BIT(DDRB_Register, PinNo);
    1b7c:	a7 e3       	ldi	r26, 0x37	; 55
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e7 e3       	ldi	r30, 0x37	; 55
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	48 2f       	mov	r20, r24
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	02 2e       	mov	r0, r18
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <DIO_SetPinDirection+0xba>
    1b96:	88 0f       	add	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	0a 94       	dec	r0
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <DIO_SetPinDirection+0xb6>
    1b9e:	84 2b       	or	r24, r20
    1ba0:	8c 93       	st	X, r24
    1ba2:	ac c0       	rjmp	.+344    	; 0x1cfc <DIO_SetPinDirection+0x21c>
				break;
			case PORTC:
				SET_BIT(DDRC_Register, PinNo);
    1ba4:	a4 e3       	ldi	r26, 0x34	; 52
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e4 e3       	ldi	r30, 0x34	; 52
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	48 2f       	mov	r20, r24
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	02 2e       	mov	r0, r18
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <DIO_SetPinDirection+0xe2>
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	0a 94       	dec	r0
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <DIO_SetPinDirection+0xde>
    1bc6:	84 2b       	or	r24, r20
    1bc8:	8c 93       	st	X, r24
    1bca:	98 c0       	rjmp	.+304    	; 0x1cfc <DIO_SetPinDirection+0x21c>
				break;
			case PORTD:
				SET_BIT(DDRD_Register, PinNo);
    1bcc:	a1 e3       	ldi	r26, 0x31	; 49
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e1 e3       	ldi	r30, 0x31	; 49
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 2e       	mov	r0, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <DIO_SetPinDirection+0x10a>
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	0a 94       	dec	r0
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <DIO_SetPinDirection+0x106>
    1bee:	84 2b       	or	r24, r20
    1bf0:	8c 93       	st	X, r24
    1bf2:	84 c0       	rjmp	.+264    	; 0x1cfc <DIO_SetPinDirection+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	81 c0       	rjmp	.+258    	; 0x1cfc <DIO_SetPinDirection+0x21c>
				break;
			}
		} else if (PinDirection == PIN_INPUT) {
    1bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfc:	88 23       	and	r24, r24
    1bfe:	09 f0       	breq	.+2      	; 0x1c02 <DIO_SetPinDirection+0x122>
    1c00:	78 c0       	rjmp	.+240    	; 0x1cf2 <DIO_SetPinDirection+0x212>

			switch (PortName) {
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	3e 83       	std	Y+6, r19	; 0x06
    1c0a:	2d 83       	std	Y+5, r18	; 0x05
    1c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c10:	82 30       	cpi	r24, 0x02	; 2
    1c12:	91 05       	cpc	r25, r1
    1c14:	61 f1       	breq	.+88     	; 0x1c6e <DIO_SetPinDirection+0x18e>
    1c16:	2d 81       	ldd	r18, Y+5	; 0x05
    1c18:	3e 81       	ldd	r19, Y+6	; 0x06
    1c1a:	23 30       	cpi	r18, 0x03	; 3
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	34 f4       	brge	.+12     	; 0x1c2c <DIO_SetPinDirection+0x14c>
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	91 05       	cpc	r25, r1
    1c28:	69 f0       	breq	.+26     	; 0x1c44 <DIO_SetPinDirection+0x164>
    1c2a:	60 c0       	rjmp	.+192    	; 0x1cec <DIO_SetPinDirection+0x20c>
    1c2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c30:	23 30       	cpi	r18, 0x03	; 3
    1c32:	31 05       	cpc	r19, r1
    1c34:	89 f1       	breq	.+98     	; 0x1c98 <DIO_SetPinDirection+0x1b8>
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3a:	84 30       	cpi	r24, 0x04	; 4
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <DIO_SetPinDirection+0x162>
    1c40:	40 c0       	rjmp	.+128    	; 0x1cc2 <DIO_SetPinDirection+0x1e2>
    1c42:	54 c0       	rjmp	.+168    	; 0x1cec <DIO_SetPinDirection+0x20c>
			case PORTA:
				CLEAR_BIT(DDRA_Register, PinNo);
    1c44:	aa e3       	ldi	r26, 0x3A	; 58
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	ea e3       	ldi	r30, 0x3A	; 58
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	48 2f       	mov	r20, r24
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	02 2e       	mov	r0, r18
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <DIO_SetPinDirection+0x182>
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	0a 94       	dec	r0
    1c64:	e2 f7       	brpl	.-8      	; 0x1c5e <DIO_SetPinDirection+0x17e>
    1c66:	80 95       	com	r24
    1c68:	84 23       	and	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	47 c0       	rjmp	.+142    	; 0x1cfc <DIO_SetPinDirection+0x21c>
				break;
			case PORTB:
				CLEAR_BIT(DDRB_Register, PinNo);
    1c6e:	a7 e3       	ldi	r26, 0x37	; 55
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e7 e3       	ldi	r30, 0x37	; 55
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <DIO_SetPinDirection+0x1ac>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <DIO_SetPinDirection+0x1a8>
    1c90:	80 95       	com	r24
    1c92:	84 23       	and	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	32 c0       	rjmp	.+100    	; 0x1cfc <DIO_SetPinDirection+0x21c>
				break;
			case PORTC:
				CLEAR_BIT(DDRC_Register, PinNo);
    1c98:	a4 e3       	ldi	r26, 0x34	; 52
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e4 e3       	ldi	r30, 0x34	; 52
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <DIO_SetPinDirection+0x1d6>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <DIO_SetPinDirection+0x1d2>
    1cba:	80 95       	com	r24
    1cbc:	84 23       	and	r24, r20
    1cbe:	8c 93       	st	X, r24
    1cc0:	1d c0       	rjmp	.+58     	; 0x1cfc <DIO_SetPinDirection+0x21c>
				break;
			case PORTD:
				CLEAR_BIT(DDRD_Register, PinNo);
    1cc2:	a1 e3       	ldi	r26, 0x31	; 49
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e1 e3       	ldi	r30, 0x31	; 49
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	48 2f       	mov	r20, r24
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	02 2e       	mov	r0, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <DIO_SetPinDirection+0x200>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	0a 94       	dec	r0
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <DIO_SetPinDirection+0x1fc>
    1ce4:	80 95       	com	r24
    1ce6:	84 23       	and	r24, r20
    1ce8:	8c 93       	st	X, r24
    1cea:	08 c0       	rjmp	.+16     	; 0x1cfc <DIO_SetPinDirection+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	05 c0       	rjmp	.+10     	; 0x1cfc <DIO_SetPinDirection+0x21c>
				break;
			}
		}

		else {
			ErrorValue = EXIT_FAILURE;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <DIO_SetPinDirection+0x21c>
		}
	}

	else {
		ErrorValue = EXIT_FAILURE;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfe:	28 96       	adiw	r28, 0x08	; 8
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <DIO_WritePin>:
uint8_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	28 97       	sbiw	r28, 0x08	; 8
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	8a 83       	std	Y+2, r24	; 0x02
    1d26:	6b 83       	std	Y+3, r22	; 0x03
    1d28:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    1d2a:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	85 30       	cpi	r24, 0x05	; 5
    1d30:	08 f0       	brcs	.+2      	; 0x1d34 <DIO_WritePin+0x24>
    1d32:	0f c2       	rjmp	.+1054   	; 0x2152 <DIO_WritePin+0x442>
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	88 30       	cpi	r24, 0x08	; 8
    1d38:	08 f0       	brcs	.+2      	; 0x1d3c <DIO_WritePin+0x2c>
    1d3a:	0b c2       	rjmp	.+1046   	; 0x2152 <DIO_WritePin+0x442>
			if (PinValue == PIN_HIGH) {
    1d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <DIO_WritePin+0x34>
    1d42:	fe c0       	rjmp	.+508    	; 0x1f40 <DIO_WritePin+0x230>

				switch (PortName) {
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	38 87       	std	Y+8, r19	; 0x08
    1d4c:	2f 83       	std	Y+7, r18	; 0x07
    1d4e:	4f 81       	ldd	r20, Y+7	; 0x07
    1d50:	58 85       	ldd	r21, Y+8	; 0x08
    1d52:	42 30       	cpi	r20, 0x02	; 2
    1d54:	51 05       	cpc	r21, r1
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <DIO_WritePin+0x4a>
    1d58:	4e c0       	rjmp	.+156    	; 0x1df6 <DIO_WritePin+0xe6>
    1d5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d5c:	98 85       	ldd	r25, Y+8	; 0x08
    1d5e:	83 30       	cpi	r24, 0x03	; 3
    1d60:	91 05       	cpc	r25, r1
    1d62:	34 f4       	brge	.+12     	; 0x1d70 <DIO_WritePin+0x60>
    1d64:	2f 81       	ldd	r18, Y+7	; 0x07
    1d66:	38 85       	ldd	r19, Y+8	; 0x08
    1d68:	21 30       	cpi	r18, 0x01	; 1
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	71 f0       	breq	.+28     	; 0x1d8a <DIO_WritePin+0x7a>
    1d6e:	e5 c0       	rjmp	.+458    	; 0x1f3a <DIO_WritePin+0x22a>
    1d70:	4f 81       	ldd	r20, Y+7	; 0x07
    1d72:	58 85       	ldd	r21, Y+8	; 0x08
    1d74:	43 30       	cpi	r20, 0x03	; 3
    1d76:	51 05       	cpc	r21, r1
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <DIO_WritePin+0x6c>
    1d7a:	73 c0       	rjmp	.+230    	; 0x1e62 <DIO_WritePin+0x152>
    1d7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d7e:	98 85       	ldd	r25, Y+8	; 0x08
    1d80:	84 30       	cpi	r24, 0x04	; 4
    1d82:	91 05       	cpc	r25, r1
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <DIO_WritePin+0x78>
    1d86:	a3 c0       	rjmp	.+326    	; 0x1ece <DIO_WritePin+0x1be>
    1d88:	d8 c0       	rjmp	.+432    	; 0x1f3a <DIO_WritePin+0x22a>
				case PORTA:
					if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
    1d8a:	ea e3       	ldi	r30, 0x3A	; 58
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	48 2f       	mov	r20, r24
    1d92:	50 e0       	ldi	r21, 0x00	; 0
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <DIO_WritePin+0x94>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	2a 95       	dec	r18
    1da6:	e2 f7       	brpl	.-8      	; 0x1da0 <DIO_WritePin+0x90>
    1da8:	9a 01       	movw	r18, r20
    1daa:	28 23       	and	r18, r24
    1dac:	39 23       	and	r19, r25
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a9 01       	movw	r20, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <DIO_WritePin+0xac>
    1db8:	55 95       	asr	r21
    1dba:	47 95       	ror	r20
    1dbc:	8a 95       	dec	r24
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <DIO_WritePin+0xa8>
    1dc0:	ca 01       	movw	r24, r20
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	a1 f4       	brne	.+40     	; 0x1df0 <DIO_WritePin+0xe0>
						SET_BIT(PORTA_Register, PinNo);
    1dc8:	ab e3       	ldi	r26, 0x3B	; 59
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	eb e3       	ldi	r30, 0x3B	; 59
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 2e       	mov	r0, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <DIO_WritePin+0xd6>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <DIO_WritePin+0xd2>
    1dea:	84 2b       	or	r24, r20
    1dec:	8c 93       	st	X, r24
    1dee:	b3 c1       	rjmp	.+870    	; 0x2156 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	b0 c1       	rjmp	.+864    	; 0x2156 <DIO_WritePin+0x446>
					}
					break;
				case PORTB:
					if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
    1df6:	e7 e3       	ldi	r30, 0x37	; 55
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <DIO_WritePin+0x100>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	2a 95       	dec	r18
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <DIO_WritePin+0xfc>
    1e14:	9a 01       	movw	r18, r20
    1e16:	28 23       	and	r18, r24
    1e18:	39 23       	and	r19, r25
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a9 01       	movw	r20, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <DIO_WritePin+0x118>
    1e24:	55 95       	asr	r21
    1e26:	47 95       	ror	r20
    1e28:	8a 95       	dec	r24
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <DIO_WritePin+0x114>
    1e2c:	ca 01       	movw	r24, r20
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	91 05       	cpc	r25, r1
    1e32:	a1 f4       	brne	.+40     	; 0x1e5c <DIO_WritePin+0x14c>
						SET_BIT(PORTB_Register, PinNo);
    1e34:	a8 e3       	ldi	r26, 0x38	; 56
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e8 e3       	ldi	r30, 0x38	; 56
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	48 2f       	mov	r20, r24
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	02 2e       	mov	r0, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <DIO_WritePin+0x142>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	0a 94       	dec	r0
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <DIO_WritePin+0x13e>
    1e56:	84 2b       	or	r24, r20
    1e58:	8c 93       	st	X, r24
    1e5a:	7d c1       	rjmp	.+762    	; 0x2156 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	7a c1       	rjmp	.+756    	; 0x2156 <DIO_WritePin+0x446>
					}
					break;
				case PORTC:
					if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
    1e62:	e4 e3       	ldi	r30, 0x34	; 52
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	48 2f       	mov	r20, r24
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <DIO_WritePin+0x16c>
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	2a 95       	dec	r18
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <DIO_WritePin+0x168>
    1e80:	9a 01       	movw	r18, r20
    1e82:	28 23       	and	r18, r24
    1e84:	39 23       	and	r19, r25
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	a9 01       	movw	r20, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <DIO_WritePin+0x184>
    1e90:	55 95       	asr	r21
    1e92:	47 95       	ror	r20
    1e94:	8a 95       	dec	r24
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <DIO_WritePin+0x180>
    1e98:	ca 01       	movw	r24, r20
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	a1 f4       	brne	.+40     	; 0x1ec8 <DIO_WritePin+0x1b8>
						SET_BIT(PORTC_Register, PinNo);
    1ea0:	a5 e3       	ldi	r26, 0x35	; 53
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e5 e3       	ldi	r30, 0x35	; 53
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	48 2f       	mov	r20, r24
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 2e       	mov	r0, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <DIO_WritePin+0x1ae>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <DIO_WritePin+0x1aa>
    1ec2:	84 2b       	or	r24, r20
    1ec4:	8c 93       	st	X, r24
    1ec6:	47 c1       	rjmp	.+654    	; 0x2156 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	44 c1       	rjmp	.+648    	; 0x2156 <DIO_WritePin+0x446>
					}
					break;
				case PORTD:
					if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    1ece:	e1 e3       	ldi	r30, 0x31	; 49
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	48 2f       	mov	r20, r24
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <DIO_WritePin+0x1d8>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	2a 95       	dec	r18
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <DIO_WritePin+0x1d4>
    1eec:	9a 01       	movw	r18, r20
    1eee:	28 23       	and	r18, r24
    1ef0:	39 23       	and	r19, r25
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	88 2f       	mov	r24, r24
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	a9 01       	movw	r20, r18
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <DIO_WritePin+0x1f0>
    1efc:	55 95       	asr	r21
    1efe:	47 95       	ror	r20
    1f00:	8a 95       	dec	r24
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <DIO_WritePin+0x1ec>
    1f04:	ca 01       	movw	r24, r20
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	91 05       	cpc	r25, r1
    1f0a:	a1 f4       	brne	.+40     	; 0x1f34 <DIO_WritePin+0x224>
						SET_BIT(PORTD_Register, PinNo);
    1f0c:	a2 e3       	ldi	r26, 0x32	; 50
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e2 e3       	ldi	r30, 0x32	; 50
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	48 2f       	mov	r20, r24
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	02 2e       	mov	r0, r18
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <DIO_WritePin+0x21a>
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	0a 94       	dec	r0
    1f2c:	e2 f7       	brpl	.-8      	; 0x1f26 <DIO_WritePin+0x216>
    1f2e:	84 2b       	or	r24, r20
    1f30:	8c 93       	st	X, r24
    1f32:	11 c1       	rjmp	.+546    	; 0x2156 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	0e c1       	rjmp	.+540    	; 0x2156 <DIO_WritePin+0x446>
					}
					break;
				default:
					ErrorValue = EXIT_FAILURE;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	0b c1       	rjmp	.+534    	; 0x2156 <DIO_WritePin+0x446>
					break;
				}
			} else if (PinValue == PIN_LOW) {
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	88 23       	and	r24, r24
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <DIO_WritePin+0x238>
    1f46:	02 c1       	rjmp	.+516    	; 0x214c <DIO_WritePin+0x43c>

				switch (PortName) {
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	3e 83       	std	Y+6, r19	; 0x06
    1f50:	2d 83       	std	Y+5, r18	; 0x05
    1f52:	4d 81       	ldd	r20, Y+5	; 0x05
    1f54:	5e 81       	ldd	r21, Y+6	; 0x06
    1f56:	42 30       	cpi	r20, 0x02	; 2
    1f58:	51 05       	cpc	r21, r1
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <DIO_WritePin+0x24e>
    1f5c:	4f c0       	rjmp	.+158    	; 0x1ffc <DIO_WritePin+0x2ec>
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	9e 81       	ldd	r25, Y+6	; 0x06
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	91 05       	cpc	r25, r1
    1f66:	34 f4       	brge	.+12     	; 0x1f74 <DIO_WritePin+0x264>
    1f68:	2d 81       	ldd	r18, Y+5	; 0x05
    1f6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f6c:	21 30       	cpi	r18, 0x01	; 1
    1f6e:	31 05       	cpc	r19, r1
    1f70:	71 f0       	breq	.+28     	; 0x1f8e <DIO_WritePin+0x27e>
    1f72:	e9 c0       	rjmp	.+466    	; 0x2146 <DIO_WritePin+0x436>
    1f74:	4d 81       	ldd	r20, Y+5	; 0x05
    1f76:	5e 81       	ldd	r21, Y+6	; 0x06
    1f78:	43 30       	cpi	r20, 0x03	; 3
    1f7a:	51 05       	cpc	r21, r1
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <DIO_WritePin+0x270>
    1f7e:	75 c0       	rjmp	.+234    	; 0x206a <DIO_WritePin+0x35a>
    1f80:	8d 81       	ldd	r24, Y+5	; 0x05
    1f82:	9e 81       	ldd	r25, Y+6	; 0x06
    1f84:	84 30       	cpi	r24, 0x04	; 4
    1f86:	91 05       	cpc	r25, r1
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <DIO_WritePin+0x27c>
    1f8a:	a6 c0       	rjmp	.+332    	; 0x20d8 <DIO_WritePin+0x3c8>
    1f8c:	dc c0       	rjmp	.+440    	; 0x2146 <DIO_WritePin+0x436>
				case PORTA:
					if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
    1f8e:	ea e3       	ldi	r30, 0x3A	; 58
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	48 2f       	mov	r20, r24
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <DIO_WritePin+0x298>
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	2a 95       	dec	r18
    1faa:	e2 f7       	brpl	.-8      	; 0x1fa4 <DIO_WritePin+0x294>
    1fac:	9a 01       	movw	r18, r20
    1fae:	28 23       	and	r18, r24
    1fb0:	39 23       	and	r19, r25
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a9 01       	movw	r20, r18
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <DIO_WritePin+0x2b0>
    1fbc:	55 95       	asr	r21
    1fbe:	47 95       	ror	r20
    1fc0:	8a 95       	dec	r24
    1fc2:	e2 f7       	brpl	.-8      	; 0x1fbc <DIO_WritePin+0x2ac>
    1fc4:	ca 01       	movw	r24, r20
    1fc6:	81 30       	cpi	r24, 0x01	; 1
    1fc8:	91 05       	cpc	r25, r1
    1fca:	a9 f4       	brne	.+42     	; 0x1ff6 <DIO_WritePin+0x2e6>
						CLEAR_BIT(PORTA_Register, PinNo);
    1fcc:	ab e3       	ldi	r26, 0x3B	; 59
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	eb e3       	ldi	r30, 0x3B	; 59
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <DIO_WritePin+0x2da>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	0a 94       	dec	r0
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <DIO_WritePin+0x2d6>
    1fee:	80 95       	com	r24
    1ff0:	84 23       	and	r24, r20
    1ff2:	8c 93       	st	X, r24
    1ff4:	b0 c0       	rjmp	.+352    	; 0x2156 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	ad c0       	rjmp	.+346    	; 0x2156 <DIO_WritePin+0x446>
					}
					break;
				case PORTB:
					if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
    1ffc:	e7 e3       	ldi	r30, 0x37	; 55
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	48 2f       	mov	r20, r24
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <DIO_WritePin+0x306>
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	2a 95       	dec	r18
    2018:	e2 f7       	brpl	.-8      	; 0x2012 <DIO_WritePin+0x302>
    201a:	9a 01       	movw	r18, r20
    201c:	28 23       	and	r18, r24
    201e:	39 23       	and	r19, r25
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a9 01       	movw	r20, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <DIO_WritePin+0x31e>
    202a:	55 95       	asr	r21
    202c:	47 95       	ror	r20
    202e:	8a 95       	dec	r24
    2030:	e2 f7       	brpl	.-8      	; 0x202a <DIO_WritePin+0x31a>
    2032:	ca 01       	movw	r24, r20
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	91 05       	cpc	r25, r1
    2038:	a9 f4       	brne	.+42     	; 0x2064 <DIO_WritePin+0x354>
						CLEAR_BIT(PORTB_Register, PinNo);
    203a:	a8 e3       	ldi	r26, 0x38	; 56
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e8 e3       	ldi	r30, 0x38	; 56
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	48 2f       	mov	r20, r24
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	02 2e       	mov	r0, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <DIO_WritePin+0x348>
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <DIO_WritePin+0x344>
    205c:	80 95       	com	r24
    205e:	84 23       	and	r24, r20
    2060:	8c 93       	st	X, r24
    2062:	79 c0       	rjmp	.+242    	; 0x2156 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	76 c0       	rjmp	.+236    	; 0x2156 <DIO_WritePin+0x446>
					}
					break;
				case PORTC:
					if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
    206a:	e4 e3       	ldi	r30, 0x34	; 52
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	48 2f       	mov	r20, r24
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <DIO_WritePin+0x374>
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	2a 95       	dec	r18
    2086:	e2 f7       	brpl	.-8      	; 0x2080 <DIO_WritePin+0x370>
    2088:	9a 01       	movw	r18, r20
    208a:	28 23       	and	r18, r24
    208c:	39 23       	and	r19, r25
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a9 01       	movw	r20, r18
    2096:	02 c0       	rjmp	.+4      	; 0x209c <DIO_WritePin+0x38c>
    2098:	55 95       	asr	r21
    209a:	47 95       	ror	r20
    209c:	8a 95       	dec	r24
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <DIO_WritePin+0x388>
    20a0:	ca 01       	movw	r24, r20
    20a2:	81 30       	cpi	r24, 0x01	; 1
    20a4:	91 05       	cpc	r25, r1
    20a6:	a9 f4       	brne	.+42     	; 0x20d2 <DIO_WritePin+0x3c2>
						CLEAR_BIT(PORTC_Register, PinNo);
    20a8:	a5 e3       	ldi	r26, 0x35	; 53
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e5 e3       	ldi	r30, 0x35	; 53
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	48 2f       	mov	r20, r24
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	02 2e       	mov	r0, r18
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <DIO_WritePin+0x3b6>
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	0a 94       	dec	r0
    20c8:	e2 f7       	brpl	.-8      	; 0x20c2 <DIO_WritePin+0x3b2>
    20ca:	80 95       	com	r24
    20cc:	84 23       	and	r24, r20
    20ce:	8c 93       	st	X, r24
    20d0:	42 c0       	rjmp	.+132    	; 0x2156 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	3f c0       	rjmp	.+126    	; 0x2156 <DIO_WritePin+0x446>
					}
					break;
				case PORTD:
					if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    20d8:	e1 e3       	ldi	r30, 0x31	; 49
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	48 2f       	mov	r20, r24
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <DIO_WritePin+0x3e2>
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	2a 95       	dec	r18
    20f4:	e2 f7       	brpl	.-8      	; 0x20ee <DIO_WritePin+0x3de>
    20f6:	9a 01       	movw	r18, r20
    20f8:	28 23       	and	r18, r24
    20fa:	39 23       	and	r19, r25
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a9 01       	movw	r20, r18
    2104:	02 c0       	rjmp	.+4      	; 0x210a <DIO_WritePin+0x3fa>
    2106:	55 95       	asr	r21
    2108:	47 95       	ror	r20
    210a:	8a 95       	dec	r24
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <DIO_WritePin+0x3f6>
    210e:	ca 01       	movw	r24, r20
    2110:	81 30       	cpi	r24, 0x01	; 1
    2112:	91 05       	cpc	r25, r1
    2114:	a9 f4       	brne	.+42     	; 0x2140 <DIO_WritePin+0x430>
						CLEAR_BIT(PORTD_Register, PinNo);
    2116:	a2 e3       	ldi	r26, 0x32	; 50
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e2 e3       	ldi	r30, 0x32	; 50
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	48 2f       	mov	r20, r24
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	02 2e       	mov	r0, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <DIO_WritePin+0x424>
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	0a 94       	dec	r0
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <DIO_WritePin+0x420>
    2138:	80 95       	com	r24
    213a:	84 23       	and	r24, r20
    213c:	8c 93       	st	X, r24
    213e:	0b c0       	rjmp	.+22     	; 0x2156 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	08 c0       	rjmp	.+16     	; 0x2156 <DIO_WritePin+0x446>
					}
					break;
				default:
					ErrorValue = EXIT_FAILURE;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	05 c0       	rjmp	.+10     	; 0x2156 <DIO_WritePin+0x446>
					break;
				}
			} else {
				ErrorValue = EXIT_FAILURE;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <DIO_WritePin+0x446>
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    2156:	89 81       	ldd	r24, Y+1	; 0x01
}
    2158:	28 96       	adiw	r28, 0x08	; 8
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <DIO_TogglePin>:
uint8_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <DIO_TogglePin+0x6>
    2170:	00 d0       	rcall	.+0      	; 0x2172 <DIO_TogglePin+0x8>
    2172:	0f 92       	push	r0
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	8a 83       	std	Y+2, r24	; 0x02
    217a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    217c:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	85 30       	cpi	r24, 0x05	; 5
    2182:	08 f0       	brcs	.+2      	; 0x2186 <DIO_TogglePin+0x1c>
    2184:	02 c1       	rjmp	.+516    	; 0x238a <DIO_TogglePin+0x220>
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	88 30       	cpi	r24, 0x08	; 8
    218a:	08 f0       	brcs	.+2      	; 0x218e <DIO_TogglePin+0x24>
    218c:	fe c0       	rjmp	.+508    	; 0x238a <DIO_TogglePin+0x220>
			switch (PortName) {
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	3d 83       	std	Y+5, r19	; 0x05
    2196:	2c 83       	std	Y+4, r18	; 0x04
    2198:	4c 81       	ldd	r20, Y+4	; 0x04
    219a:	5d 81       	ldd	r21, Y+5	; 0x05
    219c:	42 30       	cpi	r20, 0x02	; 2
    219e:	51 05       	cpc	r21, r1
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <DIO_TogglePin+0x3a>
    21a2:	4e c0       	rjmp	.+156    	; 0x2240 <DIO_TogglePin+0xd6>
    21a4:	8c 81       	ldd	r24, Y+4	; 0x04
    21a6:	9d 81       	ldd	r25, Y+5	; 0x05
    21a8:	83 30       	cpi	r24, 0x03	; 3
    21aa:	91 05       	cpc	r25, r1
    21ac:	34 f4       	brge	.+12     	; 0x21ba <DIO_TogglePin+0x50>
    21ae:	2c 81       	ldd	r18, Y+4	; 0x04
    21b0:	3d 81       	ldd	r19, Y+5	; 0x05
    21b2:	21 30       	cpi	r18, 0x01	; 1
    21b4:	31 05       	cpc	r19, r1
    21b6:	71 f0       	breq	.+28     	; 0x21d4 <DIO_TogglePin+0x6a>
    21b8:	e5 c0       	rjmp	.+458    	; 0x2384 <DIO_TogglePin+0x21a>
    21ba:	4c 81       	ldd	r20, Y+4	; 0x04
    21bc:	5d 81       	ldd	r21, Y+5	; 0x05
    21be:	43 30       	cpi	r20, 0x03	; 3
    21c0:	51 05       	cpc	r21, r1
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <DIO_TogglePin+0x5c>
    21c4:	73 c0       	rjmp	.+230    	; 0x22ac <DIO_TogglePin+0x142>
    21c6:	8c 81       	ldd	r24, Y+4	; 0x04
    21c8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ca:	84 30       	cpi	r24, 0x04	; 4
    21cc:	91 05       	cpc	r25, r1
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <DIO_TogglePin+0x68>
    21d0:	a3 c0       	rjmp	.+326    	; 0x2318 <DIO_TogglePin+0x1ae>
    21d2:	d8 c0       	rjmp	.+432    	; 0x2384 <DIO_TogglePin+0x21a>
			case PORTA:
				if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
    21d4:	ea e3       	ldi	r30, 0x3A	; 58
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	48 2f       	mov	r20, r24
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <DIO_TogglePin+0x84>
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	2a 95       	dec	r18
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <DIO_TogglePin+0x80>
    21f2:	9a 01       	movw	r18, r20
    21f4:	28 23       	and	r18, r24
    21f6:	39 23       	and	r19, r25
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	88 2f       	mov	r24, r24
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	a9 01       	movw	r20, r18
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <DIO_TogglePin+0x9c>
    2202:	55 95       	asr	r21
    2204:	47 95       	ror	r20
    2206:	8a 95       	dec	r24
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <DIO_TogglePin+0x98>
    220a:	ca 01       	movw	r24, r20
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	91 05       	cpc	r25, r1
    2210:	a1 f4       	brne	.+40     	; 0x223a <DIO_TogglePin+0xd0>
					TOG_BIT(PORTA_Register, PinNo);
    2212:	ab e3       	ldi	r26, 0x3B	; 59
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	eb e3       	ldi	r30, 0x3B	; 59
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	48 2f       	mov	r20, r24
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	02 2e       	mov	r0, r18
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <DIO_TogglePin+0xc6>
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	0a 94       	dec	r0
    2232:	e2 f7       	brpl	.-8      	; 0x222c <DIO_TogglePin+0xc2>
    2234:	84 27       	eor	r24, r20
    2236:	8c 93       	st	X, r24
    2238:	aa c0       	rjmp	.+340    	; 0x238e <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	a7 c0       	rjmp	.+334    	; 0x238e <DIO_TogglePin+0x224>
				}
				break;
			case PORTB:
				if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
    2240:	e7 e3       	ldi	r30, 0x37	; 55
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	48 2f       	mov	r20, r24
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	02 c0       	rjmp	.+4      	; 0x225a <DIO_TogglePin+0xf0>
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	2a 95       	dec	r18
    225c:	e2 f7       	brpl	.-8      	; 0x2256 <DIO_TogglePin+0xec>
    225e:	9a 01       	movw	r18, r20
    2260:	28 23       	and	r18, r24
    2262:	39 23       	and	r19, r25
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a9 01       	movw	r20, r18
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <DIO_TogglePin+0x108>
    226e:	55 95       	asr	r21
    2270:	47 95       	ror	r20
    2272:	8a 95       	dec	r24
    2274:	e2 f7       	brpl	.-8      	; 0x226e <DIO_TogglePin+0x104>
    2276:	ca 01       	movw	r24, r20
    2278:	81 30       	cpi	r24, 0x01	; 1
    227a:	91 05       	cpc	r25, r1
    227c:	a1 f4       	brne	.+40     	; 0x22a6 <DIO_TogglePin+0x13c>
					TOG_BIT(PORTB_Register, PinNo);
    227e:	a8 e3       	ldi	r26, 0x38	; 56
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	e8 e3       	ldi	r30, 0x38	; 56
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	48 2f       	mov	r20, r24
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	02 2e       	mov	r0, r18
    2296:	02 c0       	rjmp	.+4      	; 0x229c <DIO_TogglePin+0x132>
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	0a 94       	dec	r0
    229e:	e2 f7       	brpl	.-8      	; 0x2298 <DIO_TogglePin+0x12e>
    22a0:	84 27       	eor	r24, r20
    22a2:	8c 93       	st	X, r24
    22a4:	74 c0       	rjmp	.+232    	; 0x238e <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	89 83       	std	Y+1, r24	; 0x01
    22aa:	71 c0       	rjmp	.+226    	; 0x238e <DIO_TogglePin+0x224>
				}
				break;
			case PORTC:
				if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
    22ac:	e4 e3       	ldi	r30, 0x34	; 52
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	48 2f       	mov	r20, r24
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <DIO_TogglePin+0x15c>
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	2a 95       	dec	r18
    22c8:	e2 f7       	brpl	.-8      	; 0x22c2 <DIO_TogglePin+0x158>
    22ca:	9a 01       	movw	r18, r20
    22cc:	28 23       	and	r18, r24
    22ce:	39 23       	and	r19, r25
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a9 01       	movw	r20, r18
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <DIO_TogglePin+0x174>
    22da:	55 95       	asr	r21
    22dc:	47 95       	ror	r20
    22de:	8a 95       	dec	r24
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <DIO_TogglePin+0x170>
    22e2:	ca 01       	movw	r24, r20
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	91 05       	cpc	r25, r1
    22e8:	a1 f4       	brne	.+40     	; 0x2312 <DIO_TogglePin+0x1a8>
					TOG_BIT(PORTC_Register, PinNo);
    22ea:	a5 e3       	ldi	r26, 0x35	; 53
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e5 e3       	ldi	r30, 0x35	; 53
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	48 2f       	mov	r20, r24
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	02 2e       	mov	r0, r18
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <DIO_TogglePin+0x19e>
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	0a 94       	dec	r0
    230a:	e2 f7       	brpl	.-8      	; 0x2304 <DIO_TogglePin+0x19a>
    230c:	84 27       	eor	r24, r20
    230e:	8c 93       	st	X, r24
    2310:	3e c0       	rjmp	.+124    	; 0x238e <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	3b c0       	rjmp	.+118    	; 0x238e <DIO_TogglePin+0x224>
				}
				break;
			case PORTD:
				if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    2318:	e1 e3       	ldi	r30, 0x31	; 49
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	48 2f       	mov	r20, r24
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <DIO_TogglePin+0x1c8>
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	2a 95       	dec	r18
    2334:	e2 f7       	brpl	.-8      	; 0x232e <DIO_TogglePin+0x1c4>
    2336:	9a 01       	movw	r18, r20
    2338:	28 23       	and	r18, r24
    233a:	39 23       	and	r19, r25
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a9 01       	movw	r20, r18
    2344:	02 c0       	rjmp	.+4      	; 0x234a <DIO_TogglePin+0x1e0>
    2346:	55 95       	asr	r21
    2348:	47 95       	ror	r20
    234a:	8a 95       	dec	r24
    234c:	e2 f7       	brpl	.-8      	; 0x2346 <DIO_TogglePin+0x1dc>
    234e:	ca 01       	movw	r24, r20
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	91 05       	cpc	r25, r1
    2354:	a1 f4       	brne	.+40     	; 0x237e <DIO_TogglePin+0x214>
					TOG_BIT(PORTD_Register, PinNo);
    2356:	a2 e3       	ldi	r26, 0x32	; 50
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e2 e3       	ldi	r30, 0x32	; 50
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	48 2f       	mov	r20, r24
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	02 2e       	mov	r0, r18
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <DIO_TogglePin+0x20a>
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	0a 94       	dec	r0
    2376:	e2 f7       	brpl	.-8      	; 0x2370 <DIO_TogglePin+0x206>
    2378:	84 27       	eor	r24, r20
    237a:	8c 93       	st	X, r24
    237c:	08 c0       	rjmp	.+16     	; 0x238e <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	05 c0       	rjmp	.+10     	; 0x238e <DIO_TogglePin+0x224>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	02 c0       	rjmp	.+4      	; 0x238e <DIO_TogglePin+0x224>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    238e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <DIO_ReadPin>:
uint8_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	27 97       	sbiw	r28, 0x07	; 7
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	8a 83       	std	Y+2, r24	; 0x02
    23b6:	6b 83       	std	Y+3, r22	; 0x03
    23b8:	5d 83       	std	Y+5, r21	; 0x05
    23ba:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t RETVAL = EXIT_SUCCESFUL;
    23bc:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	85 30       	cpi	r24, 0x05	; 5
    23c2:	08 f0       	brcs	.+2      	; 0x23c6 <DIO_ReadPin+0x26>
    23c4:	a9 c0       	rjmp	.+338    	; 0x2518 <DIO_ReadPin+0x178>
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	88 30       	cpi	r24, 0x08	; 8
    23ca:	08 f0       	brcs	.+2      	; 0x23ce <DIO_ReadPin+0x2e>
    23cc:	a5 c0       	rjmp	.+330    	; 0x2518 <DIO_ReadPin+0x178>

			switch (PortName) {
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	3f 83       	std	Y+7, r19	; 0x07
    23d6:	2e 83       	std	Y+6, r18	; 0x06
    23d8:	4e 81       	ldd	r20, Y+6	; 0x06
    23da:	5f 81       	ldd	r21, Y+7	; 0x07
    23dc:	42 30       	cpi	r20, 0x02	; 2
    23de:	51 05       	cpc	r21, r1
    23e0:	c1 f1       	breq	.+112    	; 0x2452 <DIO_ReadPin+0xb2>
    23e2:	8e 81       	ldd	r24, Y+6	; 0x06
    23e4:	9f 81       	ldd	r25, Y+7	; 0x07
    23e6:	83 30       	cpi	r24, 0x03	; 3
    23e8:	91 05       	cpc	r25, r1
    23ea:	34 f4       	brge	.+12     	; 0x23f8 <DIO_ReadPin+0x58>
    23ec:	2e 81       	ldd	r18, Y+6	; 0x06
    23ee:	3f 81       	ldd	r19, Y+7	; 0x07
    23f0:	21 30       	cpi	r18, 0x01	; 1
    23f2:	31 05       	cpc	r19, r1
    23f4:	71 f0       	breq	.+28     	; 0x2412 <DIO_ReadPin+0x72>
    23f6:	8d c0       	rjmp	.+282    	; 0x2512 <DIO_ReadPin+0x172>
    23f8:	4e 81       	ldd	r20, Y+6	; 0x06
    23fa:	5f 81       	ldd	r21, Y+7	; 0x07
    23fc:	43 30       	cpi	r20, 0x03	; 3
    23fe:	51 05       	cpc	r21, r1
    2400:	09 f4       	brne	.+2      	; 0x2404 <DIO_ReadPin+0x64>
    2402:	47 c0       	rjmp	.+142    	; 0x2492 <DIO_ReadPin+0xf2>
    2404:	8e 81       	ldd	r24, Y+6	; 0x06
    2406:	9f 81       	ldd	r25, Y+7	; 0x07
    2408:	84 30       	cpi	r24, 0x04	; 4
    240a:	91 05       	cpc	r25, r1
    240c:	09 f4       	brne	.+2      	; 0x2410 <DIO_ReadPin+0x70>
    240e:	61 c0       	rjmp	.+194    	; 0x24d2 <DIO_ReadPin+0x132>
    2410:	80 c0       	rjmp	.+256    	; 0x2512 <DIO_ReadPin+0x172>
			case PORTA:
				*PinData = READ_BIT(PINA_Register, PinNo);
    2412:	e9 e3       	ldi	r30, 0x39	; 57
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	48 2f       	mov	r20, r24
    241a:	50 e0       	ldi	r21, 0x00	; 0
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	02 c0       	rjmp	.+4      	; 0x242c <DIO_ReadPin+0x8c>
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	2a 95       	dec	r18
    242e:	e2 f7       	brpl	.-8      	; 0x2428 <DIO_ReadPin+0x88>
    2430:	9a 01       	movw	r18, r20
    2432:	28 23       	and	r18, r24
    2434:	39 23       	and	r19, r25
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	88 2f       	mov	r24, r24
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a9 01       	movw	r20, r18
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <DIO_ReadPin+0xa4>
    2440:	55 95       	asr	r21
    2442:	47 95       	ror	r20
    2444:	8a 95       	dec	r24
    2446:	e2 f7       	brpl	.-8      	; 0x2440 <DIO_ReadPin+0xa0>
    2448:	ca 01       	movw	r24, r20
    244a:	ec 81       	ldd	r30, Y+4	; 0x04
    244c:	fd 81       	ldd	r31, Y+5	; 0x05
    244e:	80 83       	st	Z, r24
    2450:	65 c0       	rjmp	.+202    	; 0x251c <DIO_ReadPin+0x17c>
				break;
			case PORTB:
				*PinData = READ_BIT(PINB_Register, PinNo);
    2452:	e6 e3       	ldi	r30, 0x36	; 54
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	48 2f       	mov	r20, r24
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	02 c0       	rjmp	.+4      	; 0x246c <DIO_ReadPin+0xcc>
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	2a 95       	dec	r18
    246e:	e2 f7       	brpl	.-8      	; 0x2468 <DIO_ReadPin+0xc8>
    2470:	9a 01       	movw	r18, r20
    2472:	28 23       	and	r18, r24
    2474:	39 23       	and	r19, r25
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	88 2f       	mov	r24, r24
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a9 01       	movw	r20, r18
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <DIO_ReadPin+0xe4>
    2480:	55 95       	asr	r21
    2482:	47 95       	ror	r20
    2484:	8a 95       	dec	r24
    2486:	e2 f7       	brpl	.-8      	; 0x2480 <DIO_ReadPin+0xe0>
    2488:	ca 01       	movw	r24, r20
    248a:	ec 81       	ldd	r30, Y+4	; 0x04
    248c:	fd 81       	ldd	r31, Y+5	; 0x05
    248e:	80 83       	st	Z, r24
    2490:	45 c0       	rjmp	.+138    	; 0x251c <DIO_ReadPin+0x17c>
				break;
			case PORTC:
				*PinData = READ_BIT(PINC_Register, PinNo);
    2492:	e3 e3       	ldi	r30, 0x33	; 51
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	48 2f       	mov	r20, r24
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <DIO_ReadPin+0x10c>
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	2a 95       	dec	r18
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <DIO_ReadPin+0x108>
    24b0:	9a 01       	movw	r18, r20
    24b2:	28 23       	and	r18, r24
    24b4:	39 23       	and	r19, r25
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a9 01       	movw	r20, r18
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <DIO_ReadPin+0x124>
    24c0:	55 95       	asr	r21
    24c2:	47 95       	ror	r20
    24c4:	8a 95       	dec	r24
    24c6:	e2 f7       	brpl	.-8      	; 0x24c0 <DIO_ReadPin+0x120>
    24c8:	ca 01       	movw	r24, r20
    24ca:	ec 81       	ldd	r30, Y+4	; 0x04
    24cc:	fd 81       	ldd	r31, Y+5	; 0x05
    24ce:	80 83       	st	Z, r24
    24d0:	25 c0       	rjmp	.+74     	; 0x251c <DIO_ReadPin+0x17c>
				break;
			case PORTD:
				*PinData = READ_BIT(PIND_Register, PinNo);
    24d2:	e0 e3       	ldi	r30, 0x30	; 48
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	48 2f       	mov	r20, r24
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <DIO_ReadPin+0x14c>
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	2a 95       	dec	r18
    24ee:	e2 f7       	brpl	.-8      	; 0x24e8 <DIO_ReadPin+0x148>
    24f0:	9a 01       	movw	r18, r20
    24f2:	28 23       	and	r18, r24
    24f4:	39 23       	and	r19, r25
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	88 2f       	mov	r24, r24
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a9 01       	movw	r20, r18
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <DIO_ReadPin+0x164>
    2500:	55 95       	asr	r21
    2502:	47 95       	ror	r20
    2504:	8a 95       	dec	r24
    2506:	e2 f7       	brpl	.-8      	; 0x2500 <DIO_ReadPin+0x160>
    2508:	ca 01       	movw	r24, r20
    250a:	ec 81       	ldd	r30, Y+4	; 0x04
    250c:	fd 81       	ldd	r31, Y+5	; 0x05
    250e:	80 83       	st	Z, r24
    2510:	05 c0       	rjmp	.+10     	; 0x251c <DIO_ReadPin+0x17c>
				break;
			default:
				RETVAL = EXIT_FAILURE;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	02 c0       	rjmp	.+4      	; 0x251c <DIO_ReadPin+0x17c>
			}
		} else {
			RETVAL = EXIT_FAILURE;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	89 83       	std	Y+1, r24	; 0x01
		}

		return RETVAL;
    251c:	89 81       	ldd	r24, Y+1	; 0x01
}
    251e:	27 96       	adiw	r28, 0x07	; 7
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <DIO_EnablePinPullup>:
uint8_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	00 d0       	rcall	.+0      	; 0x2536 <DIO_EnablePinPullup+0x6>
    2536:	00 d0       	rcall	.+0      	; 0x2538 <DIO_EnablePinPullup+0x8>
    2538:	0f 92       	push	r0
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	8a 83       	std	Y+2, r24	; 0x02
    2540:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    2542:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	85 30       	cpi	r24, 0x05	; 5
    2548:	08 f0       	brcs	.+2      	; 0x254c <DIO_EnablePinPullup+0x1c>
    254a:	99 c0       	rjmp	.+306    	; 0x267e <DIO_EnablePinPullup+0x14e>
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	88 30       	cpi	r24, 0x08	; 8
    2550:	08 f0       	brcs	.+2      	; 0x2554 <DIO_EnablePinPullup+0x24>
    2552:	95 c0       	rjmp	.+298    	; 0x267e <DIO_EnablePinPullup+0x14e>
			/* Check on the Required PORT Number */
			switch (PortName) {
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	3d 83       	std	Y+5, r19	; 0x05
    255c:	2c 83       	std	Y+4, r18	; 0x04
    255e:	8c 81       	ldd	r24, Y+4	; 0x04
    2560:	9d 81       	ldd	r25, Y+5	; 0x05
    2562:	82 30       	cpi	r24, 0x02	; 2
    2564:	91 05       	cpc	r25, r1
    2566:	a1 f1       	breq	.+104    	; 0x25d0 <DIO_EnablePinPullup+0xa0>
    2568:	2c 81       	ldd	r18, Y+4	; 0x04
    256a:	3d 81       	ldd	r19, Y+5	; 0x05
    256c:	23 30       	cpi	r18, 0x03	; 3
    256e:	31 05       	cpc	r19, r1
    2570:	34 f4       	brge	.+12     	; 0x257e <DIO_EnablePinPullup+0x4e>
    2572:	8c 81       	ldd	r24, Y+4	; 0x04
    2574:	9d 81       	ldd	r25, Y+5	; 0x05
    2576:	81 30       	cpi	r24, 0x01	; 1
    2578:	91 05       	cpc	r25, r1
    257a:	71 f0       	breq	.+28     	; 0x2598 <DIO_EnablePinPullup+0x68>
    257c:	7d c0       	rjmp	.+250    	; 0x2678 <DIO_EnablePinPullup+0x148>
    257e:	2c 81       	ldd	r18, Y+4	; 0x04
    2580:	3d 81       	ldd	r19, Y+5	; 0x05
    2582:	23 30       	cpi	r18, 0x03	; 3
    2584:	31 05       	cpc	r19, r1
    2586:	09 f4       	brne	.+2      	; 0x258a <DIO_EnablePinPullup+0x5a>
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <DIO_EnablePinPullup+0xd8>
    258a:	8c 81       	ldd	r24, Y+4	; 0x04
    258c:	9d 81       	ldd	r25, Y+5	; 0x05
    258e:	84 30       	cpi	r24, 0x04	; 4
    2590:	91 05       	cpc	r25, r1
    2592:	09 f4       	brne	.+2      	; 0x2596 <DIO_EnablePinPullup+0x66>
    2594:	55 c0       	rjmp	.+170    	; 0x2640 <DIO_EnablePinPullup+0x110>
    2596:	70 c0       	rjmp	.+224    	; 0x2678 <DIO_EnablePinPullup+0x148>
			case PORTA:
				if (READ_REG(DDRA_Register) == PIN_INPUT) {
    2598:	ea e3       	ldi	r30, 0x3A	; 58
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	88 23       	and	r24, r24
    25a0:	a1 f4       	brne	.+40     	; 0x25ca <DIO_EnablePinPullup+0x9a>
					SET_BIT(PORTA_Register, PinNo);
    25a2:	ab e3       	ldi	r26, 0x3B	; 59
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	eb e3       	ldi	r30, 0x3B	; 59
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	48 2f       	mov	r20, r24
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	02 2e       	mov	r0, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <DIO_EnablePinPullup+0x90>
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	0a 94       	dec	r0
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <DIO_EnablePinPullup+0x8c>
    25c4:	84 2b       	or	r24, r20
    25c6:	8c 93       	st	X, r24
    25c8:	5c c0       	rjmp	.+184    	; 0x2682 <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	59 c0       	rjmp	.+178    	; 0x2682 <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTB:
				if (READ_REG(DDRB_Register) == PIN_INPUT) {
    25d0:	e7 e3       	ldi	r30, 0x37	; 55
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	88 23       	and	r24, r24
    25d8:	a1 f4       	brne	.+40     	; 0x2602 <DIO_EnablePinPullup+0xd2>
					SET_BIT(PORTB_Register, PinNo);
    25da:	a8 e3       	ldi	r26, 0x38	; 56
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e8 e3       	ldi	r30, 0x38	; 56
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	48 2f       	mov	r20, r24
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	02 2e       	mov	r0, r18
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <DIO_EnablePinPullup+0xc8>
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	0a 94       	dec	r0
    25fa:	e2 f7       	brpl	.-8      	; 0x25f4 <DIO_EnablePinPullup+0xc4>
    25fc:	84 2b       	or	r24, r20
    25fe:	8c 93       	st	X, r24
    2600:	40 c0       	rjmp	.+128    	; 0x2682 <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	3d c0       	rjmp	.+122    	; 0x2682 <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTC:
				if (READ_REG(DDRC_Register) == PIN_INPUT) {
    2608:	e4 e3       	ldi	r30, 0x34	; 52
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	88 23       	and	r24, r24
    2610:	a1 f4       	brne	.+40     	; 0x263a <DIO_EnablePinPullup+0x10a>
					SET_BIT(PORTC_Register, PinNo);
    2612:	a5 e3       	ldi	r26, 0x35	; 53
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e5 e3       	ldi	r30, 0x35	; 53
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	48 2f       	mov	r20, r24
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	02 2e       	mov	r0, r18
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <DIO_EnablePinPullup+0x100>
    262c:	88 0f       	add	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	0a 94       	dec	r0
    2632:	e2 f7       	brpl	.-8      	; 0x262c <DIO_EnablePinPullup+0xfc>
    2634:	84 2b       	or	r24, r20
    2636:	8c 93       	st	X, r24
    2638:	24 c0       	rjmp	.+72     	; 0x2682 <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	21 c0       	rjmp	.+66     	; 0x2682 <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTD:
				if (READ_REG(DDRD_Register) == PIN_INPUT) {
    2640:	e1 e3       	ldi	r30, 0x31	; 49
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	88 23       	and	r24, r24
    2648:	a1 f4       	brne	.+40     	; 0x2672 <DIO_EnablePinPullup+0x142>
					SET_BIT(PORTD_Register, PinNo);
    264a:	a2 e3       	ldi	r26, 0x32	; 50
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e2 e3       	ldi	r30, 0x32	; 50
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	48 2f       	mov	r20, r24
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	02 2e       	mov	r0, r18
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <DIO_EnablePinPullup+0x138>
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	0a 94       	dec	r0
    266a:	e2 f7       	brpl	.-8      	; 0x2664 <DIO_EnablePinPullup+0x134>
    266c:	84 2b       	or	r24, r20
    266e:	8c 93       	st	X, r24
    2670:	08 c0       	rjmp	.+16     	; 0x2682 <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	05 c0       	rjmp	.+10     	; 0x2682 <DIO_EnablePinPullup+0x152>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <DIO_EnablePinPullup+0x152>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    2682:	89 81       	ldd	r24, Y+1	; 0x01
}
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	00 d0       	rcall	.+0      	; 0x269a <dummy_delay+0x6>
    269a:	00 d0       	rcall	.+0      	; 0x269c <dummy_delay+0x8>
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
    26a0:	1a 82       	std	Y+2, r1	; 0x02
    26a2:	19 82       	std	Y+1, r1	; 0x01
    26a4:	15 c0       	rjmp	.+42     	; 0x26d0 <dummy_delay+0x3c>
   {
      for(volatile uint8_t j=0; j<32; j++)
    26a6:	1b 82       	std	Y+3, r1	; 0x03
    26a8:	0b c0       	rjmp	.+22     	; 0x26c0 <dummy_delay+0x2c>
      {
         for(volatile uint8_t k=0; k<2; k++)
    26aa:	1c 82       	std	Y+4, r1	; 0x04
    26ac:	03 c0       	rjmp	.+6      	; 0x26b4 <dummy_delay+0x20>
    26ae:	8c 81       	ldd	r24, Y+4	; 0x04
    26b0:	8f 5f       	subi	r24, 0xFF	; 255
    26b2:	8c 83       	std	Y+4, r24	; 0x04
    26b4:	8c 81       	ldd	r24, Y+4	; 0x04
    26b6:	82 30       	cpi	r24, 0x02	; 2
    26b8:	d0 f3       	brcs	.-12     	; 0x26ae <dummy_delay+0x1a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	8f 5f       	subi	r24, 0xFF	; 255
    26be:	8b 83       	std	Y+3, r24	; 0x03
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	80 32       	cpi	r24, 0x20	; 32
    26c4:	90 f3       	brcs	.-28     	; 0x26aa <dummy_delay+0x16>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ca:	01 96       	adiw	r24, 0x01	; 1
    26cc:	9a 83       	std	Y+2, r25	; 0x02
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	84 36       	cpi	r24, 0x64	; 100
    26d6:	91 05       	cpc	r25, r1
    26d8:	30 f3       	brcs	.-52     	; 0x26a6 <dummy_delay+0x12>
         {
            
         }
      }
   }
}
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <StringCompare>:
* @param [in]  str2   -  pointer to the second string.
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <StringCompare+0x6>
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <StringCompare+0x8>
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <StringCompare+0xa>
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
    26fa:	7e 83       	std	Y+6, r23	; 0x06
    26fc:	6d 83       	std	Y+5, r22	; 0x05
   uint8_t u8_counter = 0;
    26fe:	1a 82       	std	Y+2, r1	; 0x02
   uint8_t u8_isEqual = TRUE;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	1c c0       	rjmp	.+56     	; 0x273e <StringCompare+0x56>
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	fc 01       	movw	r30, r24
    2712:	e2 0f       	add	r30, r18
    2714:	f3 1f       	adc	r31, r19
    2716:	40 81       	ld	r20, Z
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	9e 81       	ldd	r25, Y+6	; 0x06
    2722:	fc 01       	movw	r30, r24
    2724:	e2 0f       	add	r30, r18
    2726:	f3 1f       	adc	r31, r19
    2728:	80 81       	ld	r24, Z
    272a:	48 17       	cp	r20, r24
    272c:	29 f0       	breq	.+10     	; 0x2738 <StringCompare+0x50>
      {
         u8_isEqual = FALSE;
    272e:	19 82       	std	Y+1, r1	; 0x01
         u8_counter++;
    2730:	8a 81       	ldd	r24, Y+2	; 0x02
    2732:	8f 5f       	subi	r24, 0xFF	; 255
    2734:	8a 83       	std	Y+2, r24	; 0x02
    2736:	19 c0       	rjmp	.+50     	; 0x276a <StringCompare+0x82>
         break;
      }
      u8_counter++;
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	8f 5f       	subi	r24, 0xFF	; 255
    273c:	8a 83       	std	Y+2, r24	; 0x02
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	9c 81       	ldd	r25, Y+4	; 0x04
    2748:	fc 01       	movw	r30, r24
    274a:	e2 0f       	add	r30, r18
    274c:	f3 1f       	adc	r31, r19
    274e:	80 81       	ld	r24, Z
    2750:	88 23       	and	r24, r24
    2752:	59 f0       	breq	.+22     	; 0x276a <StringCompare+0x82>
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	fc 01       	movw	r30, r24
    2760:	e2 0f       	add	r30, r18
    2762:	f3 1f       	adc	r31, r19
    2764:	80 81       	ld	r24, Z
    2766:	8d 30       	cpi	r24, 0x0D	; 13
    2768:	71 f6       	brne	.-100    	; 0x2706 <StringCompare+0x1e>
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	8d 81       	ldd	r24, Y+5	; 0x05
    2772:	9e 81       	ldd	r25, Y+6	; 0x06
    2774:	fc 01       	movw	r30, r24
    2776:	e2 0f       	add	r30, r18
    2778:	f3 1f       	adc	r31, r19
    277a:	80 81       	ld	r24, Z
    277c:	88 23       	and	r24, r24
    277e:	09 f0       	breq	.+2      	; 0x2782 <StringCompare+0x9a>
   {
      u8_isEqual = FALSE;
    2780:	19 82       	std	Y+1, r1	; 0x01
   }
   return u8_isEqual;
    2782:	89 81       	ldd	r24, Y+1	; 0x01
}
    2784:	26 96       	adiw	r28, 0x06	; 6
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <STR_Length>:
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	00 d0       	rcall	.+0      	; 0x279c <STR_Length+0x6>
    279c:	00 d0       	rcall	.+0      	; 0x279e <STR_Length+0x8>
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	9a 83       	std	Y+2, r25	; 0x02
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	7c 83       	std	Y+4, r23	; 0x04
    27a8:	6b 83       	std	Y+3, r22	; 0x03
	*StringLength = 0;
    27aa:	eb 81       	ldd	r30, Y+3	; 0x03
    27ac:	fc 81       	ldd	r31, Y+4	; 0x04
    27ae:	11 82       	std	Z+1, r1	; 0x01
    27b0:	10 82       	st	Z, r1
    27b2:	0e c0       	rjmp	.+28     	; 0x27d0 <STR_Length+0x3a>
	while(*String!='\0')
	{
		(*StringLength)++;
    27b4:	eb 81       	ldd	r30, Y+3	; 0x03
    27b6:	fc 81       	ldd	r31, Y+4	; 0x04
    27b8:	80 81       	ld	r24, Z
    27ba:	91 81       	ldd	r25, Z+1	; 0x01
    27bc:	01 96       	adiw	r24, 0x01	; 1
    27be:	eb 81       	ldd	r30, Y+3	; 0x03
    27c0:	fc 81       	ldd	r31, Y+4	; 0x04
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
		String++;
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	01 96       	adiw	r24, 0x01	; 1
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
	*StringLength = 0;
	while(*String!='\0')
    27d0:	e9 81       	ldd	r30, Y+1	; 0x01
    27d2:	fa 81       	ldd	r31, Y+2	; 0x02
    27d4:	80 81       	ld	r24, Z
    27d6:	88 23       	and	r24, r24
    27d8:	69 f7       	brne	.-38     	; 0x27b4 <STR_Length+0x1e>
	{
		(*StringLength)++;
		String++;
	}
	return 0;
    27da:	80 e0       	ldi	r24, 0x00	; 0
}
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <STR_CharIsNumeric>:
uint8_t STR_CharIsNumeric(uint8_t Character, uint8_t* Result)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <STR_CharIsNumeric+0x6>
    27f0:	0f 92       	push	r0
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	89 83       	std	Y+1, r24	; 0x01
    27f8:	7b 83       	std	Y+3, r23	; 0x03
    27fa:	6a 83       	std	Y+2, r22	; 0x02
	if(Character>=48 && Character<=57)
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	80 33       	cpi	r24, 0x30	; 48
    2800:	40 f0       	brcs	.+16     	; 0x2812 <STR_CharIsNumeric+0x28>
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	8a 33       	cpi	r24, 0x3A	; 58
    2806:	28 f4       	brcc	.+10     	; 0x2812 <STR_CharIsNumeric+0x28>
	{
		*Result=1;
    2808:	ea 81       	ldd	r30, Y+2	; 0x02
    280a:	fb 81       	ldd	r31, Y+3	; 0x03
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	80 83       	st	Z, r24
    2810:	03 c0       	rjmp	.+6      	; 0x2818 <STR_CharIsNumeric+0x2e>
	}
	else
	{
		*Result=0;
    2812:	ea 81       	ldd	r30, Y+2	; 0x02
    2814:	fb 81       	ldd	r31, Y+3	; 0x03
    2816:	10 82       	st	Z, r1
	}
	return 0;
    2818:	80 e0       	ldi	r24, 0x00	; 0
}
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <STR_StringIsNumeric>:
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	00 d0       	rcall	.+0      	; 0x282c <STR_StringIsNumeric+0x6>
    282c:	00 d0       	rcall	.+0      	; 0x282e <STR_StringIsNumeric+0x8>
    282e:	0f 92       	push	r0
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	9b 83       	std	Y+3, r25	; 0x03
    2836:	8a 83       	std	Y+2, r24	; 0x02
    2838:	7d 83       	std	Y+5, r23	; 0x05
    283a:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t FunRetVal = 0;
    283c:	19 82       	std	Y+1, r1	; 0x01
    283e:	19 c0       	rjmp	.+50     	; 0x2872 <STR_StringIsNumeric+0x4c>
	while(*String!='\0')
	{
		STR_CharIsNumeric(*String,&FunRetVal);
    2840:	ea 81       	ldd	r30, Y+2	; 0x02
    2842:	fb 81       	ldd	r31, Y+3	; 0x03
    2844:	80 81       	ld	r24, Z
    2846:	9e 01       	movw	r18, r28
    2848:	2f 5f       	subi	r18, 0xFF	; 255
    284a:	3f 4f       	sbci	r19, 0xFF	; 255
    284c:	b9 01       	movw	r22, r18
    284e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <STR_CharIsNumeric>
		if(!FunRetVal)
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	88 23       	and	r24, r24
    2856:	21 f4       	brne	.+8      	; 0x2860 <STR_StringIsNumeric+0x3a>
		{
			*Result = 0;
    2858:	ec 81       	ldd	r30, Y+4	; 0x04
    285a:	fd 81       	ldd	r31, Y+5	; 0x05
    285c:	10 82       	st	Z, r1
    285e:	0e c0       	rjmp	.+28     	; 0x287c <STR_StringIsNumeric+0x56>
			break;
		}
		else
		{
			*Result = 1;
    2860:	ec 81       	ldd	r30, Y+4	; 0x04
    2862:	fd 81       	ldd	r31, Y+5	; 0x05
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	80 83       	st	Z, r24
			String++;
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	9b 81       	ldd	r25, Y+3	; 0x03
    286c:	01 96       	adiw	r24, 0x01	; 1
    286e:	9b 83       	std	Y+3, r25	; 0x03
    2870:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
    2872:	ea 81       	ldd	r30, Y+2	; 0x02
    2874:	fb 81       	ldd	r31, Y+3	; 0x03
    2876:	80 81       	ld	r24, Z
    2878:	88 23       	and	r24, r24
    287a:	11 f7       	brne	.-60     	; 0x2840 <STR_StringIsNumeric+0x1a>
			*Result = 1;
			String++;
			continue;
		}
	}
	return 0;
    287c:	80 e0       	ldi	r24, 0x00	; 0
}
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <STR_CompareString>:
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	00 d0       	rcall	.+0      	; 0x2894 <STR_CompareString+0x6>
    2894:	00 d0       	rcall	.+0      	; 0x2896 <STR_CompareString+0x8>
    2896:	00 d0       	rcall	.+0      	; 0x2898 <STR_CompareString+0xa>
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	9a 83       	std	Y+2, r25	; 0x02
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	7c 83       	std	Y+4, r23	; 0x04
    28a2:	6b 83       	std	Y+3, r22	; 0x03
    28a4:	5e 83       	std	Y+6, r21	; 0x06
    28a6:	4d 83       	std	Y+5, r20	; 0x05
	while(1)
	{
		if(*String_1==*String_2)
    28a8:	e9 81       	ldd	r30, Y+1	; 0x01
    28aa:	fa 81       	ldd	r31, Y+2	; 0x02
    28ac:	90 81       	ld	r25, Z
    28ae:	eb 81       	ldd	r30, Y+3	; 0x03
    28b0:	fc 81       	ldd	r31, Y+4	; 0x04
    28b2:	80 81       	ld	r24, Z
    28b4:	98 17       	cp	r25, r24
    28b6:	c9 f4       	brne	.+50     	; 0x28ea <STR_CompareString+0x5c>
		{
			*Result = 1;
    28b8:	ed 81       	ldd	r30, Y+5	; 0x05
    28ba:	fe 81       	ldd	r31, Y+6	; 0x06
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	80 83       	st	Z, r24
			String_1++;
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	9a 81       	ldd	r25, Y+2	; 0x02
    28c4:	01 96       	adiw	r24, 0x01	; 1
    28c6:	9a 83       	std	Y+2, r25	; 0x02
    28c8:	89 83       	std	Y+1, r24	; 0x01
			String_2++;
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	9c 81       	ldd	r25, Y+4	; 0x04
    28ce:	01 96       	adiw	r24, 0x01	; 1
    28d0:	9c 83       	std	Y+4, r25	; 0x04
    28d2:	8b 83       	std	Y+3, r24	; 0x03
			if(*String_1=='\0'&&*String_2=='\0')
    28d4:	e9 81       	ldd	r30, Y+1	; 0x01
    28d6:	fa 81       	ldd	r31, Y+2	; 0x02
    28d8:	80 81       	ld	r24, Z
    28da:	88 23       	and	r24, r24
    28dc:	29 f7       	brne	.-54     	; 0x28a8 <STR_CompareString+0x1a>
    28de:	eb 81       	ldd	r30, Y+3	; 0x03
    28e0:	fc 81       	ldd	r31, Y+4	; 0x04
    28e2:	80 81       	ld	r24, Z
    28e4:	88 23       	and	r24, r24
    28e6:	99 f0       	breq	.+38     	; 0x290e <STR_CompareString+0x80>
    28e8:	df cf       	rjmp	.-66     	; 0x28a8 <STR_CompareString+0x1a>
				break;
			continue;
		}
		else if(*String_1=='\0'&&*String_2=='\0')
    28ea:	e9 81       	ldd	r30, Y+1	; 0x01
    28ec:	fa 81       	ldd	r31, Y+2	; 0x02
    28ee:	80 81       	ld	r24, Z
    28f0:	88 23       	and	r24, r24
    28f2:	51 f4       	brne	.+20     	; 0x2908 <STR_CompareString+0x7a>
    28f4:	eb 81       	ldd	r30, Y+3	; 0x03
    28f6:	fc 81       	ldd	r31, Y+4	; 0x04
    28f8:	80 81       	ld	r24, Z
    28fa:	88 23       	and	r24, r24
    28fc:	29 f4       	brne	.+10     	; 0x2908 <STR_CompareString+0x7a>
		{
			*Result = 1;
    28fe:	ed 81       	ldd	r30, Y+5	; 0x05
    2900:	fe 81       	ldd	r31, Y+6	; 0x06
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	80 83       	st	Z, r24
    2906:	03 c0       	rjmp	.+6      	; 0x290e <STR_CompareString+0x80>
			break;
		}
		else
		{
			*Result = 0;
    2908:	ed 81       	ldd	r30, Y+5	; 0x05
    290a:	fe 81       	ldd	r31, Y+6	; 0x06
    290c:	10 82       	st	Z, r1
			break;
		}
	}
	return 0;
    290e:	80 e0       	ldi	r24, 0x00	; 0
}
    2910:	26 96       	adiw	r28, 0x06	; 6
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <STR_String2Number>:
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
    2922:	0f 93       	push	r16
    2924:	1f 93       	push	r17
    2926:	df 93       	push	r29
    2928:	cf 93       	push	r28
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	2a 97       	sbiw	r28, 0x0a	; 10
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	98 87       	std	Y+8, r25	; 0x08
    293c:	8f 83       	std	Y+7, r24	; 0x07
    293e:	7a 87       	std	Y+10, r23	; 0x0a
    2940:	69 87       	std	Y+9, r22	; 0x09
	uint32_t Multiplier=1;
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	a0 e0       	ldi	r26, 0x00	; 0
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	8b 83       	std	Y+3, r24	; 0x03
    294c:	9c 83       	std	Y+4, r25	; 0x04
    294e:	ad 83       	std	Y+5, r26	; 0x05
    2950:	be 83       	std	Y+6, r27	; 0x06
	uint8_t* StartOfString=String;
    2952:	8f 81       	ldd	r24, Y+7	; 0x07
    2954:	98 85       	ldd	r25, Y+8	; 0x08
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
	*Number=0;
    295a:	e9 85       	ldd	r30, Y+9	; 0x09
    295c:	fa 85       	ldd	r31, Y+10	; 0x0a
    295e:	11 82       	std	Z+1, r1	; 0x01
    2960:	10 82       	st	Z, r1
    2962:	05 c0       	rjmp	.+10     	; 0x296e <STR_String2Number+0x4c>
	while(*String!='\0')
	{
		String++;
    2964:	8f 81       	ldd	r24, Y+7	; 0x07
    2966:	98 85       	ldd	r25, Y+8	; 0x08
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	98 87       	std	Y+8, r25	; 0x08
    296c:	8f 83       	std	Y+7, r24	; 0x07
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
    296e:	ef 81       	ldd	r30, Y+7	; 0x07
    2970:	f8 85       	ldd	r31, Y+8	; 0x08
    2972:	80 81       	ld	r24, Z
    2974:	88 23       	and	r24, r24
    2976:	b1 f7       	brne	.-20     	; 0x2964 <STR_String2Number+0x42>
		String++;
	}

	do
	{
		String--;
    2978:	8f 81       	ldd	r24, Y+7	; 0x07
    297a:	98 85       	ldd	r25, Y+8	; 0x08
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	98 87       	std	Y+8, r25	; 0x08
    2980:	8f 83       	std	Y+7, r24	; 0x07
		(*Number)+=((*String-48)*Multiplier);
    2982:	e9 85       	ldd	r30, Y+9	; 0x09
    2984:	fa 85       	ldd	r31, Y+10	; 0x0a
    2986:	00 81       	ld	r16, Z
    2988:	11 81       	ldd	r17, Z+1	; 0x01
    298a:	ef 81       	ldd	r30, Y+7	; 0x07
    298c:	f8 85       	ldd	r31, Y+8	; 0x08
    298e:	80 81       	ld	r24, Z
    2990:	88 2f       	mov	r24, r24
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	c0 97       	sbiw	r24, 0x30	; 48
    2996:	aa 27       	eor	r26, r26
    2998:	97 fd       	sbrc	r25, 7
    299a:	a0 95       	com	r26
    299c:	ba 2f       	mov	r27, r26
    299e:	2b 81       	ldd	r18, Y+3	; 0x03
    29a0:	3c 81       	ldd	r19, Y+4	; 0x04
    29a2:	4d 81       	ldd	r20, Y+5	; 0x05
    29a4:	5e 81       	ldd	r21, Y+6	; 0x06
    29a6:	bc 01       	movw	r22, r24
    29a8:	cd 01       	movw	r24, r26
    29aa:	0e 94 42 1a 	call	0x3484	; 0x3484 <__mulsi3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	80 0f       	add	r24, r16
    29b4:	91 1f       	adc	r25, r17
    29b6:	e9 85       	ldd	r30, Y+9	; 0x09
    29b8:	fa 85       	ldd	r31, Y+10	; 0x0a
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	80 83       	st	Z, r24
		Multiplier*=10;
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	9c 81       	ldd	r25, Y+4	; 0x04
    29c2:	ad 81       	ldd	r26, Y+5	; 0x05
    29c4:	be 81       	ldd	r27, Y+6	; 0x06
    29c6:	2a e0       	ldi	r18, 0x0A	; 10
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e0       	ldi	r20, 0x00	; 0
    29cc:	50 e0       	ldi	r21, 0x00	; 0
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 42 1a 	call	0x3484	; 0x3484 <__mulsi3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8b 83       	std	Y+3, r24	; 0x03
    29dc:	9c 83       	std	Y+4, r25	; 0x04
    29de:	ad 83       	std	Y+5, r26	; 0x05
    29e0:	be 83       	std	Y+6, r27	; 0x06
	}while(String!=StartOfString);
    29e2:	2f 81       	ldd	r18, Y+7	; 0x07
    29e4:	38 85       	ldd	r19, Y+8	; 0x08
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ea:	28 17       	cp	r18, r24
    29ec:	39 07       	cpc	r19, r25
    29ee:	21 f6       	brne	.-120    	; 0x2978 <STR_String2Number+0x56>
	return 0;
    29f0:	80 e0       	ldi	r24, 0x00	; 0
}
    29f2:	2a 96       	adiw	r28, 0x0a	; 10
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	1f 91       	pop	r17
    2a04:	0f 91       	pop	r16
    2a06:	08 95       	ret

00002a08 <STR_Number2String>:
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	28 97       	sbiw	r28, 0x08	; 8
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	6b 83       	std	Y+3, r22	; 0x03
    2a1e:	7c 83       	std	Y+4, r23	; 0x04
    2a20:	8d 83       	std	Y+5, r24	; 0x05
    2a22:	9e 83       	std	Y+6, r25	; 0x06
    2a24:	58 87       	std	Y+8, r21	; 0x08
    2a26:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t* SringCpy = String;
    2a28:	8f 81       	ldd	r24, Y+7	; 0x07
    2a2a:	98 85       	ldd	r25, Y+8	; 0x08
    2a2c:	9a 83       	std	Y+2, r25	; 0x02
    2a2e:	89 83       	std	Y+1, r24	; 0x01
	if(Number==0)
    2a30:	8b 81       	ldd	r24, Y+3	; 0x03
    2a32:	9c 81       	ldd	r25, Y+4	; 0x04
    2a34:	ad 81       	ldd	r26, Y+5	; 0x05
    2a36:	be 81       	ldd	r27, Y+6	; 0x06
    2a38:	00 97       	sbiw	r24, 0x00	; 0
    2a3a:	a1 05       	cpc	r26, r1
    2a3c:	b1 05       	cpc	r27, r1
    2a3e:	29 f4       	brne	.+10     	; 0x2a4a <STR_Number2String+0x42>
	{
		*String='0';
    2a40:	ef 81       	ldd	r30, Y+7	; 0x07
    2a42:	f8 85       	ldd	r31, Y+8	; 0x08
    2a44:	80 e3       	ldi	r24, 0x30	; 48
    2a46:	80 83       	st	Z, r24
    2a48:	34 c0       	rjmp	.+104    	; 0x2ab2 <STR_Number2String+0xaa>
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4e:	ad 81       	ldd	r26, Y+5	; 0x05
    2a50:	be 81       	ldd	r27, Y+6	; 0x06
    2a52:	2a e0       	ldi	r18, 0x0A	; 10
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e0       	ldi	r20, 0x00	; 0
    2a58:	50 e0       	ldi	r21, 0x00	; 0
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__udivmodsi4>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	80 5d       	subi	r24, 0xD0	; 208
    2a68:	ef 81       	ldd	r30, Y+7	; 0x07
    2a6a:	f8 85       	ldd	r31, Y+8	; 0x08
    2a6c:	80 83       	st	Z, r24
			String++;
    2a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a70:	98 85       	ldd	r25, Y+8	; 0x08
    2a72:	01 96       	adiw	r24, 0x01	; 1
    2a74:	98 87       	std	Y+8, r25	; 0x08
    2a76:	8f 83       	std	Y+7, r24	; 0x07
			Number/=10;
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7c:	ad 81       	ldd	r26, Y+5	; 0x05
    2a7e:	be 81       	ldd	r27, Y+6	; 0x06
    2a80:	2a e0       	ldi	r18, 0x0A	; 10
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	50 e0       	ldi	r21, 0x00	; 0
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__udivmodsi4>
    2a90:	da 01       	movw	r26, r20
    2a92:	c9 01       	movw	r24, r18
    2a94:	8b 83       	std	Y+3, r24	; 0x03
    2a96:	9c 83       	std	Y+4, r25	; 0x04
    2a98:	ad 83       	std	Y+5, r26	; 0x05
    2a9a:	be 83       	std	Y+6, r27	; 0x06
		}while(Number);
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa0:	ad 81       	ldd	r26, Y+5	; 0x05
    2aa2:	be 81       	ldd	r27, Y+6	; 0x06
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	a1 05       	cpc	r26, r1
    2aa8:	b1 05       	cpc	r27, r1
    2aaa:	79 f6       	brne	.-98     	; 0x2a4a <STR_Number2String+0x42>
		*String = NULL_TERMINATOR;
    2aac:	ef 81       	ldd	r30, Y+7	; 0x07
    2aae:	f8 85       	ldd	r31, Y+8	; 0x08
    2ab0:	10 82       	st	Z, r1
	}
	STR_StringReverse(SringCpy);
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab6:	0e 94 67 15 	call	0x2ace	; 0x2ace <STR_StringReverse>
	return 0;
    2aba:	80 e0       	ldi	r24, 0x00	; 0
}
    2abc:	28 96       	adiw	r28, 0x08	; 8
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <STR_StringReverse>:
uint8_t STR_StringReverse(uint8_t* String)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	27 97       	sbiw	r28, 0x07	; 7
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	9f 83       	std	Y+7, r25	; 0x07
    2ae4:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t* A = String;
    2ae6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae8:	9f 81       	ldd	r25, Y+7	; 0x07
    2aea:	9d 83       	std	Y+5, r25	; 0x05
    2aec:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t* B = String;
    2aee:	8e 81       	ldd	r24, Y+6	; 0x06
    2af0:	9f 81       	ldd	r25, Y+7	; 0x07
    2af2:	9b 83       	std	Y+3, r25	; 0x03
    2af4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Temp = 0;
    2af6:	19 82       	std	Y+1, r1	; 0x01
    2af8:	05 c0       	rjmp	.+10     	; 0x2b04 <STR_StringReverse+0x36>
	while(*B != '\0')
	{
		B++;
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	9b 81       	ldd	r25, Y+3	; 0x03
    2afe:	01 96       	adiw	r24, 0x01	; 1
    2b00:	9b 83       	std	Y+3, r25	; 0x03
    2b02:	8a 83       	std	Y+2, r24	; 0x02
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    2b04:	ea 81       	ldd	r30, Y+2	; 0x02
    2b06:	fb 81       	ldd	r31, Y+3	; 0x03
    2b08:	80 81       	ld	r24, Z
    2b0a:	88 23       	and	r24, r24
    2b0c:	b1 f7       	brne	.-20     	; 0x2afa <STR_StringReverse+0x2c>
	{
		B++;
	}
	B--;
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	9b 81       	ldd	r25, Y+3	; 0x03
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	9b 83       	std	Y+3, r25	; 0x03
    2b16:	8a 83       	std	Y+2, r24	; 0x02
    2b18:	18 c0       	rjmp	.+48     	; 0x2b4a <STR_StringReverse+0x7c>
	while(A<B)
	{
		//swap
		Temp=*A;
    2b1a:	ec 81       	ldd	r30, Y+4	; 0x04
    2b1c:	fd 81       	ldd	r31, Y+5	; 0x05
    2b1e:	80 81       	ld	r24, Z
    2b20:	89 83       	std	Y+1, r24	; 0x01
		*A=*B;
    2b22:	ea 81       	ldd	r30, Y+2	; 0x02
    2b24:	fb 81       	ldd	r31, Y+3	; 0x03
    2b26:	80 81       	ld	r24, Z
    2b28:	ec 81       	ldd	r30, Y+4	; 0x04
    2b2a:	fd 81       	ldd	r31, Y+5	; 0x05
    2b2c:	80 83       	st	Z, r24
		*B=Temp;
    2b2e:	ea 81       	ldd	r30, Y+2	; 0x02
    2b30:	fb 81       	ldd	r31, Y+3	; 0x03
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	80 83       	st	Z, r24
		A++;B--;
    2b36:	8c 81       	ldd	r24, Y+4	; 0x04
    2b38:	9d 81       	ldd	r25, Y+5	; 0x05
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	9d 83       	std	Y+5, r25	; 0x05
    2b3e:	8c 83       	std	Y+4, r24	; 0x04
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	9b 81       	ldd	r25, Y+3	; 0x03
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	9b 83       	std	Y+3, r25	; 0x03
    2b48:	8a 83       	std	Y+2, r24	; 0x02
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
    2b4a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b4c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	9b 81       	ldd	r25, Y+3	; 0x03
    2b52:	28 17       	cp	r18, r24
    2b54:	39 07       	cpc	r19, r25
    2b56:	08 f3       	brcs	.-62     	; 0x2b1a <STR_StringReverse+0x4c>
		Temp=*A;
		*A=*B;
		*B=Temp;
		A++;B--;
	}
	return 0;
    2b58:	80 e0       	ldi	r24, 0x00	; 0
}
    2b5a:	27 96       	adiw	r28, 0x07	; 7
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <LCD_SendCommand>:
#include "../../MCAL/DIO/DIO_DRIVER.h"
#include "../../MCAL/Timer/Timer.h"
#include "LCD.h"

uint8_t LCD_SendCommand(uint8_t CMD)
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <LCD_SendCommand+0x6>
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <LCD_SendCommand+0x8>
    2b74:	0f 92       	push	r0
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	8b 83       	std	Y+3, r24	; 0x03
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    2b7c:	8f ef       	ldi	r24, 0xFF	; 255
    2b7e:	8a 83       	std	Y+2, r24	; 0x02
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	89 83       	std	Y+1, r24	; 0x01
	switch(State)
    2b84:	80 91 71 01 	lds	r24, 0x0171
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	3d 83       	std	Y+5, r19	; 0x05
    2b8e:	2c 83       	std	Y+4, r18	; 0x04
    2b90:	8c 81       	ldd	r24, Y+4	; 0x04
    2b92:	9d 81       	ldd	r25, Y+5	; 0x05
    2b94:	83 30       	cpi	r24, 0x03	; 3
    2b96:	91 05       	cpc	r25, r1
    2b98:	09 f4       	brne	.+2      	; 0x2b9c <LCD_SendCommand+0x30>
    2b9a:	d3 c0       	rjmp	.+422    	; 0x2d42 <LCD_SendCommand+0x1d6>
    2b9c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b9e:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba0:	24 30       	cpi	r18, 0x04	; 4
    2ba2:	31 05       	cpc	r19, r1
    2ba4:	6c f4       	brge	.+26     	; 0x2bc0 <LCD_SendCommand+0x54>
    2ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    2baa:	81 30       	cpi	r24, 0x01	; 1
    2bac:	91 05       	cpc	r25, r1
    2bae:	09 f4       	brne	.+2      	; 0x2bb2 <LCD_SendCommand+0x46>
    2bb0:	6b c0       	rjmp	.+214    	; 0x2c88 <LCD_SendCommand+0x11c>
    2bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb6:	22 30       	cpi	r18, 0x02	; 2
    2bb8:	31 05       	cpc	r19, r1
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <LCD_SendCommand+0x52>
    2bbc:	7a c0       	rjmp	.+244    	; 0x2cb2 <LCD_SendCommand+0x146>
    2bbe:	e5 c0       	rjmp	.+458    	; 0x2d8a <LCD_SendCommand+0x21e>
    2bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc4:	84 30       	cpi	r24, 0x04	; 4
    2bc6:	91 05       	cpc	r25, r1
    2bc8:	09 f4       	brne	.+2      	; 0x2bcc <LCD_SendCommand+0x60>
    2bca:	cf c0       	rjmp	.+414    	; 0x2d6a <LCD_SendCommand+0x1fe>
    2bcc:	2c 81       	ldd	r18, Y+4	; 0x04
    2bce:	3d 81       	ldd	r19, Y+5	; 0x05
    2bd0:	2f 3f       	cpi	r18, 0xFF	; 255
    2bd2:	31 05       	cpc	r19, r1
    2bd4:	09 f0       	breq	.+2      	; 0x2bd8 <LCD_SendCommand+0x6c>
    2bd6:	d9 c0       	rjmp	.+434    	; 0x2d8a <LCD_SendCommand+0x21e>
	{
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(LCD_PORT, LCD_RS, PIN_LOW);
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	61 e0       	ldi	r22, 0x01	; 1
    2bdc:	40 e0       	ldi	r20, 0x00	; 0
    2bde:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_RW, PIN_LOW);
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	62 e0       	ldi	r22, 0x02	; 2
    2be6:	40 e0       	ldi	r20, 0x00	; 0
    2be8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>

		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(LCD_PORT, LCD_D4, READ_BIT(CMD, 4));
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	88 2f       	mov	r24, r24
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	80 71       	andi	r24, 0x10	; 16
    2bf4:	90 70       	andi	r25, 0x00	; 0
    2bf6:	95 95       	asr	r25
    2bf8:	87 95       	ror	r24
    2bfa:	95 95       	asr	r25
    2bfc:	87 95       	ror	r24
    2bfe:	95 95       	asr	r25
    2c00:	87 95       	ror	r24
    2c02:	95 95       	asr	r25
    2c04:	87 95       	ror	r24
    2c06:	98 2f       	mov	r25, r24
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	64 e0       	ldi	r22, 0x04	; 4
    2c0c:	49 2f       	mov	r20, r25
    2c0e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D5, READ_BIT(CMD, 5));
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	88 2f       	mov	r24, r24
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	80 72       	andi	r24, 0x20	; 32
    2c1a:	90 70       	andi	r25, 0x00	; 0
    2c1c:	95 95       	asr	r25
    2c1e:	87 95       	ror	r24
    2c20:	95 95       	asr	r25
    2c22:	87 95       	ror	r24
    2c24:	95 95       	asr	r25
    2c26:	87 95       	ror	r24
    2c28:	95 95       	asr	r25
    2c2a:	87 95       	ror	r24
    2c2c:	95 95       	asr	r25
    2c2e:	87 95       	ror	r24
    2c30:	98 2f       	mov	r25, r24
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	65 e0       	ldi	r22, 0x05	; 5
    2c36:	49 2f       	mov	r20, r25
    2c38:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D6, READ_BIT(CMD, 6));
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	88 2f       	mov	r24, r24
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	80 74       	andi	r24, 0x40	; 64
    2c44:	90 70       	andi	r25, 0x00	; 0
    2c46:	08 2e       	mov	r0, r24
    2c48:	89 2f       	mov	r24, r25
    2c4a:	00 0c       	add	r0, r0
    2c4c:	88 1f       	adc	r24, r24
    2c4e:	99 0b       	sbc	r25, r25
    2c50:	00 0c       	add	r0, r0
    2c52:	88 1f       	adc	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	98 2f       	mov	r25, r24
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	66 e0       	ldi	r22, 0x06	; 6
    2c5c:	49 2f       	mov	r20, r25
    2c5e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D7, READ_BIT(CMD, 7));
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	98 2f       	mov	r25, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	99 27       	eor	r25, r25
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	67 e0       	ldi	r22, 0x07	; 7
    2c70:	49 2f       	mov	r20, r25
    2c72:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>


		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(LCD_PORT, LCD_EN, PIN_HIGH);
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	63 e0       	ldi	r22, 0x03	; 3
    2c7a:	41 e0       	ldi	r20, 0x01	; 1
    2c7c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	80 93 71 01 	sts	0x0171, r24
    2c86:	83 c0       	rjmp	.+262    	; 0x2d8e <LCD_SendCommand+0x222>
		break;
	case Sending_First_Nibble:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayUs(TIMER_2,3);//1
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	43 e0       	ldi	r20, 0x03	; 3
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	60 e0       	ldi	r22, 0x00	; 0
    2c90:	70 e0       	ldi	r23, 0x00	; 0
    2c92:	0e 94 92 09 	call	0x1324	; 0x1324 <TIM_DelayUs>
    2c96:	89 83       	std	Y+1, r24	; 0x01
		if(TimerRetVal == TIMER_E_SUCCESS)
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	88 23       	and	r24, r24
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <LCD_SendCommand+0x134>
    2c9e:	77 c0       	rjmp	.+238    	; 0x2d8e <LCD_SendCommand+0x222>
		{
			/*if timer delay function finished correctly pull enable pin low*/
			DIO_WritePin(LCD_PORT, LCD_EN, PIN_LOW);
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	63 e0       	ldi	r22, 0x03	; 3
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
			/*update the function's state*/
			State = First_Nibble_Sent;
    2caa:	82 e0       	ldi	r24, 0x02	; 2
    2cac:	80 93 71 01 	sts	0x0171, r24
    2cb0:	6e c0       	rjmp	.+220    	; 0x2d8e <LCD_SendCommand+0x222>
		}
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(LCD_PORT,LCD_RS,PIN_LOW);
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	61 e0       	ldi	r22, 0x01	; 1
    2cb6:	40 e0       	ldi	r20, 0x00	; 0
    2cb8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT,LCD_RW,PIN_LOW);
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	62 e0       	ldi	r22, 0x02	; 2
    2cc0:	40 e0       	ldi	r20, 0x00	; 0
    2cc2:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>

		/*copying lower nibble of the command to the pins*/

		DIO_WritePin(LCD_PORT,LCD_D4,READ_BIT(CMD,0));
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	98 2f       	mov	r25, r24
    2cca:	91 70       	andi	r25, 0x01	; 1
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	64 e0       	ldi	r22, 0x04	; 4
    2cd0:	49 2f       	mov	r20, r25
    2cd2:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT,LCD_D5,READ_BIT(CMD,1));
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	88 2f       	mov	r24, r24
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	82 70       	andi	r24, 0x02	; 2
    2cde:	90 70       	andi	r25, 0x00	; 0
    2ce0:	95 95       	asr	r25
    2ce2:	87 95       	ror	r24
    2ce4:	98 2f       	mov	r25, r24
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	65 e0       	ldi	r22, 0x05	; 5
    2cea:	49 2f       	mov	r20, r25
    2cec:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT,LCD_D6,READ_BIT(CMD,2));
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	88 2f       	mov	r24, r24
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	84 70       	andi	r24, 0x04	; 4
    2cf8:	90 70       	andi	r25, 0x00	; 0
    2cfa:	95 95       	asr	r25
    2cfc:	87 95       	ror	r24
    2cfe:	95 95       	asr	r25
    2d00:	87 95       	ror	r24
    2d02:	98 2f       	mov	r25, r24
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	66 e0       	ldi	r22, 0x06	; 6
    2d08:	49 2f       	mov	r20, r25
    2d0a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT,LCD_D7,READ_BIT(CMD,3));
    2d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d10:	88 2f       	mov	r24, r24
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	88 70       	andi	r24, 0x08	; 8
    2d16:	90 70       	andi	r25, 0x00	; 0
    2d18:	95 95       	asr	r25
    2d1a:	87 95       	ror	r24
    2d1c:	95 95       	asr	r25
    2d1e:	87 95       	ror	r24
    2d20:	95 95       	asr	r25
    2d22:	87 95       	ror	r24
    2d24:	98 2f       	mov	r25, r24
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	67 e0       	ldi	r22, 0x07	; 7
    2d2a:	49 2f       	mov	r20, r25
    2d2c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(LCD_PORT,LCD_EN,PIN_HIGH);
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	63 e0       	ldi	r22, 0x03	; 3
    2d34:	41 e0       	ldi	r20, 0x01	; 1
    2d36:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
    2d3a:	83 e0       	ldi	r24, 0x03	; 3
    2d3c:	80 93 71 01 	sts	0x0171, r24
    2d40:	26 c0       	rjmp	.+76     	; 0x2d8e <LCD_SendCommand+0x222>
		break;
	case Sending_Second_Nibble:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayUs(TIMER_2,3);//1
    2d42:	82 e0       	ldi	r24, 0x02	; 2
    2d44:	43 e0       	ldi	r20, 0x03	; 3
    2d46:	50 e0       	ldi	r21, 0x00	; 0
    2d48:	60 e0       	ldi	r22, 0x00	; 0
    2d4a:	70 e0       	ldi	r23, 0x00	; 0
    2d4c:	0e 94 92 09 	call	0x1324	; 0x1324 <TIM_DelayUs>
    2d50:	89 83       	std	Y+1, r24	; 0x01
		if(TimerRetVal == ((uint8_t)TIMER_E_SUCCESS))
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	88 23       	and	r24, r24
    2d56:	d9 f4       	brne	.+54     	; 0x2d8e <LCD_SendCommand+0x222>
		{
			/*if timer delay function finished correctly pull enable pin low*/
			DIO_WritePin(LCD_PORT,LCD_EN,PIN_LOW);
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	63 e0       	ldi	r22, 0x03	; 3
    2d5c:	40 e0       	ldi	r20, 0x00	; 0
    2d5e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
			/*reset the function's state*/
			State = Second_Nibble_Sent;
    2d62:	84 e0       	ldi	r24, 0x04	; 4
    2d64:	80 93 71 01 	sts	0x0171, r24
    2d68:	12 c0       	rjmp	.+36     	; 0x2d8e <LCD_SendCommand+0x222>
		}
		break;
	case Second_Nibble_Sent:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayMs(TIMER_2,5);//2
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	45 e0       	ldi	r20, 0x05	; 5
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	60 e0       	ldi	r22, 0x00	; 0
    2d72:	70 e0       	ldi	r23, 0x00	; 0
    2d74:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TIM_DelayMs>
    2d78:	89 83       	std	Y+1, r24	; 0x01
		if(TimerRetVal == ((uint8_t)TIMER_E_SUCCESS))
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	88 23       	and	r24, r24
    2d7e:	39 f4       	brne	.+14     	; 0x2d8e <LCD_SendCommand+0x222>
		{
			/*reset the function's state*/
			State = OperationStarted;
    2d80:	8f ef       	ldi	r24, 0xFF	; 255
    2d82:	80 93 71 01 	sts	0x0171, r24
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
    2d86:	1a 82       	std	Y+2, r1	; 0x02
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <LCD_SendCommand+0x222>
		}
		break;
	default:
		ErrRetVal = OperationFail;
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*return from function*/
return ErrRetVal;
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	cf 91       	pop	r28
    2d9c:	df 91       	pop	r29
    2d9e:	08 95       	ret

00002da0 <LCD_SendData>:
uint8_t LCD_SendData(uint8_t Character)
{
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	00 d0       	rcall	.+0      	; 0x2da6 <LCD_SendData+0x6>
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <LCD_SendData+0x8>
    2da8:	0f 92       	push	r0
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	8b 83       	std	Y+3, r24	; 0x03
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    2db0:	8f ef       	ldi	r24, 0xFF	; 255
    2db2:	8a 83       	std	Y+2, r24	; 0x02
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	89 83       	std	Y+1, r24	; 0x01
	switch (State) {
    2db8:	80 91 72 01 	lds	r24, 0x0172
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	3d 83       	std	Y+5, r19	; 0x05
    2dc2:	2c 83       	std	Y+4, r18	; 0x04
    2dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc8:	83 30       	cpi	r24, 0x03	; 3
    2dca:	91 05       	cpc	r25, r1
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <LCD_SendData+0x30>
    2dce:	d3 c0       	rjmp	.+422    	; 0x2f76 <LCD_SendData+0x1d6>
    2dd0:	2c 81       	ldd	r18, Y+4	; 0x04
    2dd2:	3d 81       	ldd	r19, Y+5	; 0x05
    2dd4:	24 30       	cpi	r18, 0x04	; 4
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	6c f4       	brge	.+26     	; 0x2df4 <LCD_SendData+0x54>
    2dda:	8c 81       	ldd	r24, Y+4	; 0x04
    2ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dde:	81 30       	cpi	r24, 0x01	; 1
    2de0:	91 05       	cpc	r25, r1
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <LCD_SendData+0x46>
    2de4:	6b c0       	rjmp	.+214    	; 0x2ebc <LCD_SendData+0x11c>
    2de6:	2c 81       	ldd	r18, Y+4	; 0x04
    2de8:	3d 81       	ldd	r19, Y+5	; 0x05
    2dea:	22 30       	cpi	r18, 0x02	; 2
    2dec:	31 05       	cpc	r19, r1
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <LCD_SendData+0x52>
    2df0:	7a c0       	rjmp	.+244    	; 0x2ee6 <LCD_SendData+0x146>
    2df2:	e5 c0       	rjmp	.+458    	; 0x2fbe <LCD_SendData+0x21e>
    2df4:	8c 81       	ldd	r24, Y+4	; 0x04
    2df6:	9d 81       	ldd	r25, Y+5	; 0x05
    2df8:	84 30       	cpi	r24, 0x04	; 4
    2dfa:	91 05       	cpc	r25, r1
    2dfc:	09 f4       	brne	.+2      	; 0x2e00 <LCD_SendData+0x60>
    2dfe:	cf c0       	rjmp	.+414    	; 0x2f9e <LCD_SendData+0x1fe>
    2e00:	2c 81       	ldd	r18, Y+4	; 0x04
    2e02:	3d 81       	ldd	r19, Y+5	; 0x05
    2e04:	2f 3f       	cpi	r18, 0xFF	; 255
    2e06:	31 05       	cpc	r19, r1
    2e08:	09 f0       	breq	.+2      	; 0x2e0c <LCD_SendData+0x6c>
    2e0a:	d9 c0       	rjmp	.+434    	; 0x2fbe <LCD_SendData+0x21e>
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(LCD_PORT, LCD_RS, PIN_HIGH);
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	61 e0       	ldi	r22, 0x01	; 1
    2e10:	41 e0       	ldi	r20, 0x01	; 1
    2e12:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_RW, PIN_LOW);
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	62 e0       	ldi	r22, 0x02	; 2
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(LCD_PORT, LCD_D7, READ_BIT(Character, 7));
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	98 2f       	mov	r25, r24
    2e24:	99 1f       	adc	r25, r25
    2e26:	99 27       	eor	r25, r25
    2e28:	99 1f       	adc	r25, r25
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	67 e0       	ldi	r22, 0x07	; 7
    2e2e:	49 2f       	mov	r20, r25
    2e30:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D6, READ_BIT(Character, 6));
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	88 2f       	mov	r24, r24
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	80 74       	andi	r24, 0x40	; 64
    2e3c:	90 70       	andi	r25, 0x00	; 0
    2e3e:	08 2e       	mov	r0, r24
    2e40:	89 2f       	mov	r24, r25
    2e42:	00 0c       	add	r0, r0
    2e44:	88 1f       	adc	r24, r24
    2e46:	99 0b       	sbc	r25, r25
    2e48:	00 0c       	add	r0, r0
    2e4a:	88 1f       	adc	r24, r24
    2e4c:	99 1f       	adc	r25, r25
    2e4e:	98 2f       	mov	r25, r24
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	66 e0       	ldi	r22, 0x06	; 6
    2e54:	49 2f       	mov	r20, r25
    2e56:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D5, READ_BIT(Character, 5));
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	88 2f       	mov	r24, r24
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	80 72       	andi	r24, 0x20	; 32
    2e62:	90 70       	andi	r25, 0x00	; 0
    2e64:	95 95       	asr	r25
    2e66:	87 95       	ror	r24
    2e68:	95 95       	asr	r25
    2e6a:	87 95       	ror	r24
    2e6c:	95 95       	asr	r25
    2e6e:	87 95       	ror	r24
    2e70:	95 95       	asr	r25
    2e72:	87 95       	ror	r24
    2e74:	95 95       	asr	r25
    2e76:	87 95       	ror	r24
    2e78:	98 2f       	mov	r25, r24
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	65 e0       	ldi	r22, 0x05	; 5
    2e7e:	49 2f       	mov	r20, r25
    2e80:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D4, READ_BIT(Character, 4));
    2e84:	8b 81       	ldd	r24, Y+3	; 0x03
    2e86:	88 2f       	mov	r24, r24
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	80 71       	andi	r24, 0x10	; 16
    2e8c:	90 70       	andi	r25, 0x00	; 0
    2e8e:	95 95       	asr	r25
    2e90:	87 95       	ror	r24
    2e92:	95 95       	asr	r25
    2e94:	87 95       	ror	r24
    2e96:	95 95       	asr	r25
    2e98:	87 95       	ror	r24
    2e9a:	95 95       	asr	r25
    2e9c:	87 95       	ror	r24
    2e9e:	98 2f       	mov	r25, r24
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	64 e0       	ldi	r22, 0x04	; 4
    2ea4:	49 2f       	mov	r20, r25
    2ea6:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(LCD_PORT, LCD_EN, PIN_HIGH);
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	63 e0       	ldi	r22, 0x03	; 3
    2eae:	41 e0       	ldi	r20, 0x01	; 1
    2eb0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	80 93 72 01 	sts	0x0172, r24
    2eba:	83 c0       	rjmp	.+262    	; 0x2fc2 <LCD_SendData+0x222>
		break;
	case Sending_First_Nibble:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayUs(TIMER_2, 3);//1
    2ebc:	82 e0       	ldi	r24, 0x02	; 2
    2ebe:	43 e0       	ldi	r20, 0x03	; 3
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	60 e0       	ldi	r22, 0x00	; 0
    2ec4:	70 e0       	ldi	r23, 0x00	; 0
    2ec6:	0e 94 92 09 	call	0x1324	; 0x1324 <TIM_DelayUs>
    2eca:	89 83       	std	Y+1, r24	; 0x01
		if (TimerRetVal == TIMER_E_SUCCESS) {
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	88 23       	and	r24, r24
    2ed0:	09 f0       	breq	.+2      	; 0x2ed4 <LCD_SendData+0x134>
    2ed2:	77 c0       	rjmp	.+238    	; 0x2fc2 <LCD_SendData+0x222>
			DIO_WritePin(LCD_PORT, LCD_EN, PIN_LOW);
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	63 e0       	ldi	r22, 0x03	; 3
    2ed8:	40 e0       	ldi	r20, 0x00	; 0
    2eda:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
			/*update the function's state*/
			State = First_Nibble_Sent;
    2ede:	82 e0       	ldi	r24, 0x02	; 2
    2ee0:	80 93 72 01 	sts	0x0172, r24
    2ee4:	6e c0       	rjmp	.+220    	; 0x2fc2 <LCD_SendData+0x222>
		}
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(LCD_PORT, LCD_RS, PIN_HIGH);
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	61 e0       	ldi	r22, 0x01	; 1
    2eea:	41 e0       	ldi	r20, 0x01	; 1
    2eec:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_RW, PIN_LOW);
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	62 e0       	ldi	r22, 0x02	; 2
    2ef4:	40 e0       	ldi	r20, 0x00	; 0
    2ef6:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(LCD_PORT, LCD_D7, READ_BIT(Character, 3));
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	88 2f       	mov	r24, r24
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	88 70       	andi	r24, 0x08	; 8
    2f02:	90 70       	andi	r25, 0x00	; 0
    2f04:	95 95       	asr	r25
    2f06:	87 95       	ror	r24
    2f08:	95 95       	asr	r25
    2f0a:	87 95       	ror	r24
    2f0c:	95 95       	asr	r25
    2f0e:	87 95       	ror	r24
    2f10:	98 2f       	mov	r25, r24
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	67 e0       	ldi	r22, 0x07	; 7
    2f16:	49 2f       	mov	r20, r25
    2f18:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D6, READ_BIT(Character, 2));
    2f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1e:	88 2f       	mov	r24, r24
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	84 70       	andi	r24, 0x04	; 4
    2f24:	90 70       	andi	r25, 0x00	; 0
    2f26:	95 95       	asr	r25
    2f28:	87 95       	ror	r24
    2f2a:	95 95       	asr	r25
    2f2c:	87 95       	ror	r24
    2f2e:	98 2f       	mov	r25, r24
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	66 e0       	ldi	r22, 0x06	; 6
    2f34:	49 2f       	mov	r20, r25
    2f36:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D5, READ_BIT(Character, 1));
    2f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3c:	88 2f       	mov	r24, r24
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	82 70       	andi	r24, 0x02	; 2
    2f42:	90 70       	andi	r25, 0x00	; 0
    2f44:	95 95       	asr	r25
    2f46:	87 95       	ror	r24
    2f48:	98 2f       	mov	r25, r24
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	65 e0       	ldi	r22, 0x05	; 5
    2f4e:	49 2f       	mov	r20, r25
    2f50:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D4, READ_BIT(Character, 0));
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	98 2f       	mov	r25, r24
    2f58:	91 70       	andi	r25, 0x01	; 1
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	64 e0       	ldi	r22, 0x04	; 4
    2f5e:	49 2f       	mov	r20, r25
    2f60:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(LCD_PORT, LCD_EN, PIN_HIGH);
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	63 e0       	ldi	r22, 0x03	; 3
    2f68:	41 e0       	ldi	r20, 0x01	; 1
    2f6a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
    2f6e:	83 e0       	ldi	r24, 0x03	; 3
    2f70:	80 93 72 01 	sts	0x0172, r24
    2f74:	26 c0       	rjmp	.+76     	; 0x2fc2 <LCD_SendData+0x222>
		break;
	case Sending_Second_Nibble:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayUs(TIMER_2, 3);//1
    2f76:	82 e0       	ldi	r24, 0x02	; 2
    2f78:	43 e0       	ldi	r20, 0x03	; 3
    2f7a:	50 e0       	ldi	r21, 0x00	; 0
    2f7c:	60 e0       	ldi	r22, 0x00	; 0
    2f7e:	70 e0       	ldi	r23, 0x00	; 0
    2f80:	0e 94 92 09 	call	0x1324	; 0x1324 <TIM_DelayUs>
    2f84:	89 83       	std	Y+1, r24	; 0x01
		if (TimerRetVal == ((uint8_t) TIMER_E_SUCCESS )) {
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	88 23       	and	r24, r24
    2f8a:	d9 f4       	brne	.+54     	; 0x2fc2 <LCD_SendData+0x222>
			/*if timer delay function finished correctly pull enable pin low*/
			DIO_WritePin(LCD_PORT, LCD_EN, PIN_LOW);
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	63 e0       	ldi	r22, 0x03	; 3
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
			/*set the function's state*/
			State = Second_Nibble_Sent;
    2f96:	84 e0       	ldi	r24, 0x04	; 4
    2f98:	80 93 72 01 	sts	0x0172, r24
    2f9c:	12 c0       	rjmp	.+36     	; 0x2fc2 <LCD_SendData+0x222>
		}
		break;
	case Second_Nibble_Sent:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayMs(TIMER_2, 0);
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	40 e0       	ldi	r20, 0x00	; 0
    2fa2:	50 e0       	ldi	r21, 0x00	; 0
    2fa4:	60 e0       	ldi	r22, 0x00	; 0
    2fa6:	70 e0       	ldi	r23, 0x00	; 0
    2fa8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TIM_DelayMs>
    2fac:	89 83       	std	Y+1, r24	; 0x01
		if (TimerRetVal == ((uint8_t) TIMER_E_SUCCESS )) {
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	88 23       	and	r24, r24
    2fb2:	39 f4       	brne	.+14     	; 0x2fc2 <LCD_SendData+0x222>
			/*reset the function's state*/
			State = OperationStarted;
    2fb4:	8f ef       	ldi	r24, 0xFF	; 255
    2fb6:	80 93 72 01 	sts	0x0172, r24
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
    2fba:	1a 82       	std	Y+2, r1	; 0x02
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <LCD_SendData+0x222>
		}
		break;
	default:
		ErrRetVal = OperationFail;
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*return from function*/
	return ErrRetVal;
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <LCD_Init>:
uint8_t LCD_Init()
{
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <LCD_Init+0x6>
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <LCD_Init+0x8>
    2fdc:	0f 92       	push	r0
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    2fe2:	8f ef       	ldi	r24, 0xFF	; 255
    2fe4:	8b 83       	std	Y+3, r24	; 0x03
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t LCD_SendCommandRetVal = OperationStarted;
    2fea:	8f ef       	ldi	r24, 0xFF	; 255
    2fec:	89 83       	std	Y+1, r24	; 0x01
	switch (State) {
    2fee:	80 91 73 01 	lds	r24, 0x0173
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	3d 83       	std	Y+5, r19	; 0x05
    2ff8:	2c 83       	std	Y+4, r18	; 0x04
    2ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffe:	8a 30       	cpi	r24, 0x0A	; 10
    3000:	91 05       	cpc	r25, r1
    3002:	09 f4       	brne	.+2      	; 0x3006 <LCD_Init+0x32>
    3004:	d2 c0       	rjmp	.+420    	; 0x31aa <LCD_Init+0x1d6>
    3006:	2c 81       	ldd	r18, Y+4	; 0x04
    3008:	3d 81       	ldd	r19, Y+5	; 0x05
    300a:	2b 30       	cpi	r18, 0x0B	; 11
    300c:	31 05       	cpc	r19, r1
    300e:	2c f5       	brge	.+74     	; 0x305a <LCD_Init+0x86>
    3010:	8c 81       	ldd	r24, Y+4	; 0x04
    3012:	9d 81       	ldd	r25, Y+5	; 0x05
    3014:	87 30       	cpi	r24, 0x07	; 7
    3016:	91 05       	cpc	r25, r1
    3018:	09 f4       	brne	.+2      	; 0x301c <LCD_Init+0x48>
    301a:	00 c1       	rjmp	.+512    	; 0x321c <LCD_Init+0x248>
    301c:	2c 81       	ldd	r18, Y+4	; 0x04
    301e:	3d 81       	ldd	r19, Y+5	; 0x05
    3020:	28 30       	cpi	r18, 0x08	; 8
    3022:	31 05       	cpc	r19, r1
    3024:	6c f4       	brge	.+26     	; 0x3040 <LCD_Init+0x6c>
    3026:	8c 81       	ldd	r24, Y+4	; 0x04
    3028:	9d 81       	ldd	r25, Y+5	; 0x05
    302a:	85 30       	cpi	r24, 0x05	; 5
    302c:	91 05       	cpc	r25, r1
    302e:	09 f4       	brne	.+2      	; 0x3032 <LCD_Init+0x5e>
    3030:	88 c0       	rjmp	.+272    	; 0x3142 <LCD_Init+0x16e>
    3032:	2c 81       	ldd	r18, Y+4	; 0x04
    3034:	3d 81       	ldd	r19, Y+5	; 0x05
    3036:	26 30       	cpi	r18, 0x06	; 6
    3038:	31 05       	cpc	r19, r1
    303a:	09 f4       	brne	.+2      	; 0x303e <LCD_Init+0x6a>
    303c:	92 c0       	rjmp	.+292    	; 0x3162 <LCD_Init+0x18e>
    303e:	09 c1       	rjmp	.+530    	; 0x3252 <LCD_Init+0x27e>
    3040:	8c 81       	ldd	r24, Y+4	; 0x04
    3042:	9d 81       	ldd	r25, Y+5	; 0x05
    3044:	88 30       	cpi	r24, 0x08	; 8
    3046:	91 05       	cpc	r25, r1
    3048:	09 f4       	brne	.+2      	; 0x304c <LCD_Init+0x78>
    304a:	97 c0       	rjmp	.+302    	; 0x317a <LCD_Init+0x1a6>
    304c:	2c 81       	ldd	r18, Y+4	; 0x04
    304e:	3d 81       	ldd	r19, Y+5	; 0x05
    3050:	29 30       	cpi	r18, 0x09	; 9
    3052:	31 05       	cpc	r19, r1
    3054:	09 f4       	brne	.+2      	; 0x3058 <LCD_Init+0x84>
    3056:	9d c0       	rjmp	.+314    	; 0x3192 <LCD_Init+0x1be>
    3058:	fc c0       	rjmp	.+504    	; 0x3252 <LCD_Init+0x27e>
    305a:	8c 81       	ldd	r24, Y+4	; 0x04
    305c:	9d 81       	ldd	r25, Y+5	; 0x05
    305e:	8d 30       	cpi	r24, 0x0D	; 13
    3060:	91 05       	cpc	r25, r1
    3062:	09 f4       	brne	.+2      	; 0x3066 <LCD_Init+0x92>
    3064:	c5 c0       	rjmp	.+394    	; 0x31f0 <LCD_Init+0x21c>
    3066:	2c 81       	ldd	r18, Y+4	; 0x04
    3068:	3d 81       	ldd	r19, Y+5	; 0x05
    306a:	2e 30       	cpi	r18, 0x0E	; 14
    306c:	31 05       	cpc	r19, r1
    306e:	6c f4       	brge	.+26     	; 0x308a <LCD_Init+0xb6>
    3070:	8c 81       	ldd	r24, Y+4	; 0x04
    3072:	9d 81       	ldd	r25, Y+5	; 0x05
    3074:	8b 30       	cpi	r24, 0x0B	; 11
    3076:	91 05       	cpc	r25, r1
    3078:	09 f4       	brne	.+2      	; 0x307c <LCD_Init+0xa8>
    307a:	a3 c0       	rjmp	.+326    	; 0x31c2 <LCD_Init+0x1ee>
    307c:	2c 81       	ldd	r18, Y+4	; 0x04
    307e:	3d 81       	ldd	r19, Y+5	; 0x05
    3080:	2c 30       	cpi	r18, 0x0C	; 12
    3082:	31 05       	cpc	r19, r1
    3084:	09 f4       	brne	.+2      	; 0x3088 <LCD_Init+0xb4>
    3086:	a9 c0       	rjmp	.+338    	; 0x31da <LCD_Init+0x206>
    3088:	e4 c0       	rjmp	.+456    	; 0x3252 <LCD_Init+0x27e>
    308a:	8c 81       	ldd	r24, Y+4	; 0x04
    308c:	9d 81       	ldd	r25, Y+5	; 0x05
    308e:	8f 30       	cpi	r24, 0x0F	; 15
    3090:	91 05       	cpc	r25, r1
    3092:	09 f4       	brne	.+2      	; 0x3096 <LCD_Init+0xc2>
    3094:	d2 c0       	rjmp	.+420    	; 0x323a <LCD_Init+0x266>
    3096:	2c 81       	ldd	r18, Y+4	; 0x04
    3098:	3d 81       	ldd	r19, Y+5	; 0x05
    309a:	2f 30       	cpi	r18, 0x0F	; 15
    309c:	31 05       	cpc	r19, r1
    309e:	0c f4       	brge	.+2      	; 0x30a2 <LCD_Init+0xce>
    30a0:	b2 c0       	rjmp	.+356    	; 0x3206 <LCD_Init+0x232>
    30a2:	8c 81       	ldd	r24, Y+4	; 0x04
    30a4:	9d 81       	ldd	r25, Y+5	; 0x05
    30a6:	8f 3f       	cpi	r24, 0xFF	; 255
    30a8:	91 05       	cpc	r25, r1
    30aa:	09 f0       	breq	.+2      	; 0x30ae <LCD_Init+0xda>
    30ac:	d2 c0       	rjmp	.+420    	; 0x3252 <LCD_Init+0x27e>
	case OperationStarted:
		/*Dio Initialize for the*/
		DIO_SetPinDirection(LCD_PORT, LCD_D7, PIN_OUTPUT);
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	67 e0       	ldi	r22, 0x07	; 7
    30b2:	41 e0       	ldi	r20, 0x01	; 1
    30b4:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_PORT, LCD_D6, PIN_OUTPUT);
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	66 e0       	ldi	r22, 0x06	; 6
    30bc:	41 e0       	ldi	r20, 0x01	; 1
    30be:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_PORT, LCD_D5, PIN_OUTPUT);
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	65 e0       	ldi	r22, 0x05	; 5
    30c6:	41 e0       	ldi	r20, 0x01	; 1
    30c8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_PORT, LCD_D4, PIN_OUTPUT);
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	64 e0       	ldi	r22, 0x04	; 4
    30d0:	41 e0       	ldi	r20, 0x01	; 1
    30d2:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_PORT, LCD_RS, PIN_OUTPUT);
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	61 e0       	ldi	r22, 0x01	; 1
    30da:	41 e0       	ldi	r20, 0x01	; 1
    30dc:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_PORT, LCD_RW, PIN_OUTPUT);
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	62 e0       	ldi	r22, 0x02	; 2
    30e4:	41 e0       	ldi	r20, 0x01	; 1
    30e6:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_PORT, LCD_EN, PIN_OUTPUT);
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	63 e0       	ldi	r22, 0x03	; 3
    30ee:	41 e0       	ldi	r20, 0x01	; 1
    30f0:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(LCD_PORT, LCD_D7, PIN_LOW);
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	67 e0       	ldi	r22, 0x07	; 7
    30f8:	40 e0       	ldi	r20, 0x00	; 0
    30fa:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D6, PIN_LOW);
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	66 e0       	ldi	r22, 0x06	; 6
    3102:	40 e0       	ldi	r20, 0x00	; 0
    3104:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D5, PIN_LOW);
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	65 e0       	ldi	r22, 0x05	; 5
    310c:	40 e0       	ldi	r20, 0x00	; 0
    310e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D4, PIN_LOW);
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	64 e0       	ldi	r22, 0x04	; 4
    3116:	40 e0       	ldi	r20, 0x00	; 0
    3118:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_RS, PIN_LOW);
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	61 e0       	ldi	r22, 0x01	; 1
    3120:	40 e0       	ldi	r20, 0x00	; 0
    3122:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_RW, PIN_LOW);
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	62 e0       	ldi	r22, 0x02	; 2
    312a:	40 e0       	ldi	r20, 0x00	; 0
    312c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_EN, PIN_LOW);
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	63 e0       	ldi	r22, 0x03	; 3
    3134:	40 e0       	ldi	r20, 0x00	; 0
    3136:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DIO_WritePin>
		/*set status of the function*/
		State = LCD_Pin_Initializing;
    313a:	85 e0       	ldi	r24, 0x05	; 5
    313c:	80 93 73 01 	sts	0x0173, r24
    3140:	8a c0       	rjmp	.+276    	; 0x3256 <LCD_Init+0x282>
		break;
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayMs(TIMER_2, 45);
    3142:	82 e0       	ldi	r24, 0x02	; 2
    3144:	4d e2       	ldi	r20, 0x2D	; 45
    3146:	50 e0       	ldi	r21, 0x00	; 0
    3148:	60 e0       	ldi	r22, 0x00	; 0
    314a:	70 e0       	ldi	r23, 0x00	; 0
    314c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TIM_DelayMs>
    3150:	8a 83       	std	Y+2, r24	; 0x02
		if (TimerRetVal == ((uint8_t) TIMER_E_SUCCESS )) {
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	88 23       	and	r24, r24
    3156:	09 f0       	breq	.+2      	; 0x315a <LCD_Init+0x186>
    3158:	7e c0       	rjmp	.+252    	; 0x3256 <LCD_Init+0x282>
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
    315a:	86 e0       	ldi	r24, 0x06	; 6
    315c:	80 93 73 01 	sts	0x0173, r24
    3160:	7a c0       	rjmp	.+244    	; 0x3256 <LCD_Init+0x282>
		}
		break;
	case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
    3162:	83 e0       	ldi	r24, 0x03	; 3
    3164:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_SendCommand>
    3168:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	88 23       	and	r24, r24
    316e:	09 f0       	breq	.+2      	; 0x3172 <LCD_Init+0x19e>
    3170:	72 c0       	rjmp	.+228    	; 0x3256 <LCD_Init+0x282>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
    3172:	88 e0       	ldi	r24, 0x08	; 8
    3174:	80 93 73 01 	sts	0x0173, r24
    3178:	6e c0       	rjmp	.+220    	; 0x3256 <LCD_Init+0x282>
		}
		break;
	case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
    317a:	83 e0       	ldi	r24, 0x03	; 3
    317c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_SendCommand>
    3180:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	88 23       	and	r24, r24
    3186:	09 f0       	breq	.+2      	; 0x318a <LCD_Init+0x1b6>
    3188:	66 c0       	rjmp	.+204    	; 0x3256 <LCD_Init+0x282>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
    318a:	89 e0       	ldi	r24, 0x09	; 9
    318c:	80 93 73 01 	sts	0x0173, r24
    3190:	62 c0       	rjmp	.+196    	; 0x3256 <LCD_Init+0x282>
		}
		break;
	case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
    3192:	83 e0       	ldi	r24, 0x03	; 3
    3194:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_SendCommand>
    3198:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	88 23       	and	r24, r24
    319e:	09 f0       	breq	.+2      	; 0x31a2 <LCD_Init+0x1ce>
    31a0:	5a c0       	rjmp	.+180    	; 0x3256 <LCD_Init+0x282>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
    31a2:	8a e0       	ldi	r24, 0x0A	; 10
    31a4:	80 93 73 01 	sts	0x0173, r24
    31a8:	56 c0       	rjmp	.+172    	; 0x3256 <LCD_Init+0x282>
		}
		break;
	case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
    31aa:	82 e0       	ldi	r24, 0x02	; 2
    31ac:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_SendCommand>
    31b0:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	88 23       	and	r24, r24
    31b6:	09 f0       	breq	.+2      	; 0x31ba <LCD_Init+0x1e6>
    31b8:	4e c0       	rjmp	.+156    	; 0x3256 <LCD_Init+0x282>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
    31ba:	8b e0       	ldi	r24, 0x0B	; 11
    31bc:	80 93 73 01 	sts	0x0173, r24
    31c0:	4a c0       	rjmp	.+148    	; 0x3256 <LCD_Init+0x282>
		}
		break;
	case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);//LCD_FUNCSET_6//LCD_FUNCSET_2
    31c2:	88 e2       	ldi	r24, 0x28	; 40
    31c4:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_SendCommand>
    31c8:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	88 23       	and	r24, r24
    31ce:	09 f0       	breq	.+2      	; 0x31d2 <LCD_Init+0x1fe>
    31d0:	42 c0       	rjmp	.+132    	; 0x3256 <LCD_Init+0x282>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
    31d2:	8c e0       	ldi	r24, 0x0C	; 12
    31d4:	80 93 73 01 	sts	0x0173, r24
    31d8:	3e c0       	rjmp	.+124    	; 0x3256 <LCD_Init+0x282>
		}
		break;
	case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSBLINK);//LCD_DISPON_CURSOFF
    31da:	8f e0       	ldi	r24, 0x0F	; 15
    31dc:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_SendCommand>
    31e0:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	88 23       	and	r24, r24
    31e6:	b9 f5       	brne	.+110    	; 0x3256 <LCD_Init+0x282>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
    31e8:	8d e0       	ldi	r24, 0x0D	; 13
    31ea:	80 93 73 01 	sts	0x0173, r24
    31ee:	33 c0       	rjmp	.+102    	; 0x3256 <LCD_Init+0x282>
		}
		break;
	case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);
    31f0:	86 e0       	ldi	r24, 0x06	; 6
    31f2:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_SendCommand>
    31f6:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	88 23       	and	r24, r24
    31fc:	61 f5       	brne	.+88     	; 0x3256 <LCD_Init+0x282>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
    31fe:	8e e0       	ldi	r24, 0x0E	; 14
    3200:	80 93 73 01 	sts	0x0173, r24
    3204:	28 c0       	rjmp	.+80     	; 0x3256 <LCD_Init+0x282>
		}
		break;
	case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);//LCD_CLR
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_SendCommand>
    320c:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	88 23       	and	r24, r24
    3212:	09 f5       	brne	.+66     	; 0x3256 <LCD_Init+0x282>
		{
			State = LCD_Sent_Initialization_Sequence;
    3214:	87 e0       	ldi	r24, 0x07	; 7
    3216:	80 93 73 01 	sts	0x0173, r24
    321a:	1d c0       	rjmp	.+58     	; 0x3256 <LCD_Init+0x282>
		}
		break;
	case LCD_Sent_Initialization_Sequence:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayMs(TIMER_2, 3);
    321c:	82 e0       	ldi	r24, 0x02	; 2
    321e:	43 e0       	ldi	r20, 0x03	; 3
    3220:	50 e0       	ldi	r21, 0x00	; 0
    3222:	60 e0       	ldi	r22, 0x00	; 0
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <TIM_DelayMs>
    322a:	8a 83       	std	Y+2, r24	; 0x02
		if (TimerRetVal == ((uint8_t) TIMER_E_SUCCESS )) {
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	88 23       	and	r24, r24
    3230:	91 f4       	brne	.+36     	; 0x3256 <LCD_Init+0x282>
			/*if timer delay function finished correctly Start the initialization sequence*/
//			LCD_SendCommand(LCD_CURS_Position0);
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
    3232:	8f e0       	ldi	r24, 0x0F	; 15
    3234:	80 93 73 01 	sts	0x0173, r24
    3238:	0e c0       	rjmp	.+28     	; 0x3256 <LCD_Init+0x282>
//			ErrRetVal = OperationSuccess;
		}
		break;
	case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
    323a:	80 e8       	ldi	r24, 0x80	; 128
    323c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_SendCommand>
    3240:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	88 23       	and	r24, r24
    3246:	39 f4       	brne	.+14     	; 0x3256 <LCD_Init+0x282>
		{
			State = OperationStarted;
    3248:	8f ef       	ldi	r24, 0xFF	; 255
    324a:	80 93 73 01 	sts	0x0173, r24
			ErrRetVal = OperationSuccess;
    324e:	1b 82       	std	Y+3, r1	; 0x03
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <LCD_Init+0x282>
		}
		break;
	default:
		ErrRetVal = OperationFail;
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	8b 83       	std	Y+3, r24	; 0x03
	}
	return ErrRetVal;
    3256:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	cf 91       	pop	r28
    3264:	df 91       	pop	r29
    3266:	08 95       	ret

00003268 <LCD_SendString>:
uint8_t LCD_SendString(ptr_int8_t String)
{
    3268:	df 93       	push	r29
    326a:	cf 93       	push	r28
    326c:	00 d0       	rcall	.+0      	; 0x326e <LCD_SendString+0x6>
    326e:	00 d0       	rcall	.+0      	; 0x3270 <LCD_SendString+0x8>
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	9c 83       	std	Y+4, r25	; 0x04
    3276:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t ErrRetVal = OperationStarted;
    3278:	8f ef       	ldi	r24, 0xFF	; 255
    327a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t LCD_SendDataRetVal = OperationStarted;
    327c:	8f ef       	ldi	r24, 0xFF	; 255
    327e:	89 83       	std	Y+1, r24	; 0x01
	if (String != NULL_PTR) {
    3280:	8b 81       	ldd	r24, Y+3	; 0x03
    3282:	9c 81       	ldd	r25, Y+4	; 0x04
    3284:	00 97       	sbiw	r24, 0x00	; 0
    3286:	c1 f0       	breq	.+48     	; 0x32b8 <LCD_SendString+0x50>
    3288:	10 c0       	rjmp	.+32     	; 0x32aa <LCD_SendString+0x42>
		while (*String != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
    328a:	82 e0       	ldi	r24, 0x02	; 2
    328c:	8a 83       	std	Y+2, r24	; 0x02
			LCD_SendDataRetVal = LCD_SendData(*String);
    328e:	eb 81       	ldd	r30, Y+3	; 0x03
    3290:	fc 81       	ldd	r31, Y+4	; 0x04
    3292:	80 81       	ld	r24, Z
    3294:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <LCD_SendData>
    3298:	89 83       	std	Y+1, r24	; 0x01
			if(LCD_SendDataRetVal == OperationSuccess)
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	88 23       	and	r24, r24
    329e:	29 f4       	brne	.+10     	; 0x32aa <LCD_SendString+0x42>
				String++;
    32a0:	8b 81       	ldd	r24, Y+3	; 0x03
    32a2:	9c 81       	ldd	r25, Y+4	; 0x04
    32a4:	01 96       	adiw	r24, 0x01	; 1
    32a6:	9c 83       	std	Y+4, r25	; 0x04
    32a8:	8b 83       	std	Y+3, r24	; 0x03
uint8_t LCD_SendString(ptr_int8_t String)
{
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	if (String != NULL_PTR) {
		while (*String != NULL_TERMINATOR ) {
    32aa:	eb 81       	ldd	r30, Y+3	; 0x03
    32ac:	fc 81       	ldd	r31, Y+4	; 0x04
    32ae:	80 81       	ld	r24, Z
    32b0:	88 23       	and	r24, r24
    32b2:	59 f7       	brne	.-42     	; 0x328a <LCD_SendString+0x22>
			if(LCD_SendDataRetVal == OperationSuccess)
				String++;
			else
				continue;
		}
		ErrRetVal = OperationSuccess;
    32b4:	1a 82       	std	Y+2, r1	; 0x02
    32b6:	02 c0       	rjmp	.+4      	; 0x32bc <LCD_SendString+0x54>
	} else {
		ErrRetVal = OperationFail;
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ErrRetVal;
    32bc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <LCD_SendNumber>:
uint8_t LCD_SendNumber(uint32_t Number)
{
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
    32d4:	c4 50       	subi	r28, 0x04	; 4
    32d6:	d1 40       	sbci	r29, 0x01	; 1
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	f8 94       	cli
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	cd bf       	out	0x3d, r28	; 61
    32e2:	fe 01       	movw	r30, r28
    32e4:	ef 5f       	subi	r30, 0xFF	; 255
    32e6:	fe 4f       	sbci	r31, 0xFE	; 254
    32e8:	60 83       	st	Z, r22
    32ea:	71 83       	std	Z+1, r23	; 0x01
    32ec:	82 83       	std	Z+2, r24	; 0x02
    32ee:	93 83       	std	Z+3, r25	; 0x03
	uint8_t ErrRetVal = OperationStarted;
    32f0:	8f ef       	ldi	r24, 0xFF	; 255
    32f2:	89 83       	std	Y+1, r24	; 0x01
	uint8_t String[255];
	STR_Number2String((uint32_t)Number,String);
    32f4:	fe 01       	movw	r30, r28
    32f6:	ef 5f       	subi	r30, 0xFF	; 255
    32f8:	fe 4f       	sbci	r31, 0xFE	; 254
    32fa:	80 81       	ld	r24, Z
    32fc:	91 81       	ldd	r25, Z+1	; 0x01
    32fe:	a2 81       	ldd	r26, Z+2	; 0x02
    3300:	b3 81       	ldd	r27, Z+3	; 0x03
    3302:	9e 01       	movw	r18, r28
    3304:	2e 5f       	subi	r18, 0xFE	; 254
    3306:	3f 4f       	sbci	r19, 0xFF	; 255
    3308:	bc 01       	movw	r22, r24
    330a:	cd 01       	movw	r24, r26
    330c:	a9 01       	movw	r20, r18
    330e:	0e 94 04 15 	call	0x2a08	; 0x2a08 <STR_Number2String>
//	LCD_NumberToString(Number,String);
	LCD_SendString((int8_t*)String);
    3312:	ce 01       	movw	r24, r28
    3314:	02 96       	adiw	r24, 0x02	; 2
    3316:	0e 94 34 19 	call	0x3268	; 0x3268 <LCD_SendString>
	ErrRetVal = OperationSuccess;
    331a:	19 82       	std	Y+1, r1	; 0x01
	return ErrRetVal;
    331c:	89 81       	ldd	r24, Y+1	; 0x01
}
    331e:	cc 5f       	subi	r28, 0xFC	; 252
    3320:	de 4f       	sbci	r29, 0xFE	; 254
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <LCD_NumberToString>:

void LCD_NumberToString(uint16_t Number, uint8_t* String)
{
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
    333a:	27 97       	sbiw	r28, 0x07	; 7
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	f8 94       	cli
    3340:	de bf       	out	0x3e, r29	; 62
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	cd bf       	out	0x3d, r28	; 61
    3346:	9d 83       	std	Y+5, r25	; 0x05
    3348:	8c 83       	std	Y+4, r24	; 0x04
    334a:	7f 83       	std	Y+7, r23	; 0x07
    334c:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t NumberOfDigits = 0;
    334e:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t* StartOfString = String;
    3350:	8e 81       	ldd	r24, Y+6	; 0x06
    3352:	9f 81       	ldd	r25, Y+7	; 0x07
    3354:	9a 83       	std	Y+2, r25	; 0x02
    3356:	89 83       	std	Y+1, r24	; 0x01
	if(Number==0)
    3358:	8c 81       	ldd	r24, Y+4	; 0x04
    335a:	9d 81       	ldd	r25, Y+5	; 0x05
    335c:	00 97       	sbiw	r24, 0x00	; 0
    335e:	e9 f4       	brne	.+58     	; 0x339a <LCD_NumberToString+0x68>
	{
		NumberOfDigits=1;
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	8b 83       	std	Y+3, r24	; 0x03
    3364:	1e c0       	rjmp	.+60     	; 0x33a2 <LCD_NumberToString+0x70>
	}
	else
	{
		while(Number)
		{
			*String=Number%10+48;
    3366:	8c 81       	ldd	r24, Y+4	; 0x04
    3368:	9d 81       	ldd	r25, Y+5	; 0x05
    336a:	2a e0       	ldi	r18, 0x0A	; 10
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	b9 01       	movw	r22, r18
    3370:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__udivmodhi4>
    3374:	80 5d       	subi	r24, 0xD0	; 208
    3376:	ee 81       	ldd	r30, Y+6	; 0x06
    3378:	ff 81       	ldd	r31, Y+7	; 0x07
    337a:	80 83       	st	Z, r24
			String++;
    337c:	8e 81       	ldd	r24, Y+6	; 0x06
    337e:	9f 81       	ldd	r25, Y+7	; 0x07
    3380:	01 96       	adiw	r24, 0x01	; 1
    3382:	9f 83       	std	Y+7, r25	; 0x07
    3384:	8e 83       	std	Y+6, r24	; 0x06
			Number/=10;
    3386:	8c 81       	ldd	r24, Y+4	; 0x04
    3388:	9d 81       	ldd	r25, Y+5	; 0x05
    338a:	2a e0       	ldi	r18, 0x0A	; 10
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	b9 01       	movw	r22, r18
    3390:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__udivmodhi4>
    3394:	cb 01       	movw	r24, r22
    3396:	9d 83       	std	Y+5, r25	; 0x05
    3398:	8c 83       	std	Y+4, r24	; 0x04
	{
		NumberOfDigits=1;
	}
	else
	{
		while(Number)
    339a:	8c 81       	ldd	r24, Y+4	; 0x04
    339c:	9d 81       	ldd	r25, Y+5	; 0x05
    339e:	00 97       	sbiw	r24, 0x00	; 0
    33a0:	11 f7       	brne	.-60     	; 0x3366 <LCD_NumberToString+0x34>
			*String=Number%10+48;
			String++;
			Number/=10;
		}
	}
	LCD_StringReverse(StartOfString);
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	9a 81       	ldd	r25, Y+2	; 0x02
    33a6:	0e 94 de 19 	call	0x33bc	; 0x33bc <LCD_StringReverse>
}
    33aa:	27 96       	adiw	r28, 0x07	; 7
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <LCD_StringReverse>:
void LCD_StringReverse(uint8_t* String)
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	27 97       	sbiw	r28, 0x07	; 7
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	9f 83       	std	Y+7, r25	; 0x07
    33d2:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t* A = String;
    33d4:	8e 81       	ldd	r24, Y+6	; 0x06
    33d6:	9f 81       	ldd	r25, Y+7	; 0x07
    33d8:	9d 83       	std	Y+5, r25	; 0x05
    33da:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t* B = String;
    33dc:	8e 81       	ldd	r24, Y+6	; 0x06
    33de:	9f 81       	ldd	r25, Y+7	; 0x07
    33e0:	9b 83       	std	Y+3, r25	; 0x03
    33e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Temp = 0;
    33e4:	19 82       	std	Y+1, r1	; 0x01
    33e6:	05 c0       	rjmp	.+10     	; 0x33f2 <LCD_StringReverse+0x36>
	while(*B != '\0')
	{
		B++;
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	9b 81       	ldd	r25, Y+3	; 0x03
    33ec:	01 96       	adiw	r24, 0x01	; 1
    33ee:	9b 83       	std	Y+3, r25	; 0x03
    33f0:	8a 83       	std	Y+2, r24	; 0x02
void LCD_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    33f2:	ea 81       	ldd	r30, Y+2	; 0x02
    33f4:	fb 81       	ldd	r31, Y+3	; 0x03
    33f6:	80 81       	ld	r24, Z
    33f8:	88 23       	and	r24, r24
    33fa:	b1 f7       	brne	.-20     	; 0x33e8 <LCD_StringReverse+0x2c>
	{
		B++;
	}
	B--;
    33fc:	8a 81       	ldd	r24, Y+2	; 0x02
    33fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3400:	01 97       	sbiw	r24, 0x01	; 1
    3402:	9b 83       	std	Y+3, r25	; 0x03
    3404:	8a 83       	std	Y+2, r24	; 0x02
    3406:	18 c0       	rjmp	.+48     	; 0x3438 <LCD_StringReverse+0x7c>
	while(A<B)
	{
		//swap
		Temp=*A;
    3408:	ec 81       	ldd	r30, Y+4	; 0x04
    340a:	fd 81       	ldd	r31, Y+5	; 0x05
    340c:	80 81       	ld	r24, Z
    340e:	89 83       	std	Y+1, r24	; 0x01
		*A=*B;
    3410:	ea 81       	ldd	r30, Y+2	; 0x02
    3412:	fb 81       	ldd	r31, Y+3	; 0x03
    3414:	80 81       	ld	r24, Z
    3416:	ec 81       	ldd	r30, Y+4	; 0x04
    3418:	fd 81       	ldd	r31, Y+5	; 0x05
    341a:	80 83       	st	Z, r24
		*B=Temp;
    341c:	ea 81       	ldd	r30, Y+2	; 0x02
    341e:	fb 81       	ldd	r31, Y+3	; 0x03
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	80 83       	st	Z, r24
		A++;B--;
    3424:	8c 81       	ldd	r24, Y+4	; 0x04
    3426:	9d 81       	ldd	r25, Y+5	; 0x05
    3428:	01 96       	adiw	r24, 0x01	; 1
    342a:	9d 83       	std	Y+5, r25	; 0x05
    342c:	8c 83       	std	Y+4, r24	; 0x04
    342e:	8a 81       	ldd	r24, Y+2	; 0x02
    3430:	9b 81       	ldd	r25, Y+3	; 0x03
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	9b 83       	std	Y+3, r25	; 0x03
    3436:	8a 83       	std	Y+2, r24	; 0x02
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
    3438:	2c 81       	ldd	r18, Y+4	; 0x04
    343a:	3d 81       	ldd	r19, Y+5	; 0x05
    343c:	8a 81       	ldd	r24, Y+2	; 0x02
    343e:	9b 81       	ldd	r25, Y+3	; 0x03
    3440:	28 17       	cp	r18, r24
    3442:	39 07       	cpc	r19, r25
    3444:	08 f3       	brcs	.-62     	; 0x3408 <LCD_StringReverse+0x4c>
		*A=*B;
		*B=Temp;
		A++;B--;
	}

}
    3446:	27 96       	adiw	r28, 0x07	; 7
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <main>:
#include "Infrastructure/infrastructure.h"
#include "MCAL/DIO/DIO_DRIVER.h"
#include "MCAL/Timer/Timer.h"
#include "HAL/LCD/LCD.h"
int main()
{
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
	TIM_Init(TIMER_2);
    3460:	82 e0       	ldi	r24, 0x02	; 2
    3462:	0e 94 09 07 	call	0xe12	; 0xe12 <TIM_Init>
	while(LCD_Init() != OperationSuccess);
    3466:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <LCD_Init>
    346a:	88 23       	and	r24, r24
    346c:	e1 f7       	brne	.-8      	; 0x3466 <main+0xe>
//	while(LCD_SendString("AMR_TEAM") != OperationSuccess);
//	while(LCD_SendData('A') != OperationSuccess);
	LCD_SendString("AMR_TEAM");
    346e:	80 e6       	ldi	r24, 0x60	; 96
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	0e 94 34 19 	call	0x3268	; 0x3268 <LCD_SendString>
	LCD_SendNumber(5792);
    3476:	60 ea       	ldi	r22, 0xA0	; 160
    3478:	76 e1       	ldi	r23, 0x16	; 22
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_SendNumber>
    3482:	ff cf       	rjmp	.-2      	; 0x3482 <main+0x2a>

00003484 <__mulsi3>:
    3484:	62 9f       	mul	r22, r18
    3486:	d0 01       	movw	r26, r0
    3488:	73 9f       	mul	r23, r19
    348a:	f0 01       	movw	r30, r0
    348c:	82 9f       	mul	r24, r18
    348e:	e0 0d       	add	r30, r0
    3490:	f1 1d       	adc	r31, r1
    3492:	64 9f       	mul	r22, r20
    3494:	e0 0d       	add	r30, r0
    3496:	f1 1d       	adc	r31, r1
    3498:	92 9f       	mul	r25, r18
    349a:	f0 0d       	add	r31, r0
    349c:	83 9f       	mul	r24, r19
    349e:	f0 0d       	add	r31, r0
    34a0:	74 9f       	mul	r23, r20
    34a2:	f0 0d       	add	r31, r0
    34a4:	65 9f       	mul	r22, r21
    34a6:	f0 0d       	add	r31, r0
    34a8:	99 27       	eor	r25, r25
    34aa:	72 9f       	mul	r23, r18
    34ac:	b0 0d       	add	r27, r0
    34ae:	e1 1d       	adc	r30, r1
    34b0:	f9 1f       	adc	r31, r25
    34b2:	63 9f       	mul	r22, r19
    34b4:	b0 0d       	add	r27, r0
    34b6:	e1 1d       	adc	r30, r1
    34b8:	f9 1f       	adc	r31, r25
    34ba:	bd 01       	movw	r22, r26
    34bc:	cf 01       	movw	r24, r30
    34be:	11 24       	eor	r1, r1
    34c0:	08 95       	ret

000034c2 <__udivmodhi4>:
    34c2:	aa 1b       	sub	r26, r26
    34c4:	bb 1b       	sub	r27, r27
    34c6:	51 e1       	ldi	r21, 0x11	; 17
    34c8:	07 c0       	rjmp	.+14     	; 0x34d8 <__udivmodhi4_ep>

000034ca <__udivmodhi4_loop>:
    34ca:	aa 1f       	adc	r26, r26
    34cc:	bb 1f       	adc	r27, r27
    34ce:	a6 17       	cp	r26, r22
    34d0:	b7 07       	cpc	r27, r23
    34d2:	10 f0       	brcs	.+4      	; 0x34d8 <__udivmodhi4_ep>
    34d4:	a6 1b       	sub	r26, r22
    34d6:	b7 0b       	sbc	r27, r23

000034d8 <__udivmodhi4_ep>:
    34d8:	88 1f       	adc	r24, r24
    34da:	99 1f       	adc	r25, r25
    34dc:	5a 95       	dec	r21
    34de:	a9 f7       	brne	.-22     	; 0x34ca <__udivmodhi4_loop>
    34e0:	80 95       	com	r24
    34e2:	90 95       	com	r25
    34e4:	bc 01       	movw	r22, r24
    34e6:	cd 01       	movw	r24, r26
    34e8:	08 95       	ret

000034ea <__udivmodsi4>:
    34ea:	a1 e2       	ldi	r26, 0x21	; 33
    34ec:	1a 2e       	mov	r1, r26
    34ee:	aa 1b       	sub	r26, r26
    34f0:	bb 1b       	sub	r27, r27
    34f2:	fd 01       	movw	r30, r26
    34f4:	0d c0       	rjmp	.+26     	; 0x3510 <__udivmodsi4_ep>

000034f6 <__udivmodsi4_loop>:
    34f6:	aa 1f       	adc	r26, r26
    34f8:	bb 1f       	adc	r27, r27
    34fa:	ee 1f       	adc	r30, r30
    34fc:	ff 1f       	adc	r31, r31
    34fe:	a2 17       	cp	r26, r18
    3500:	b3 07       	cpc	r27, r19
    3502:	e4 07       	cpc	r30, r20
    3504:	f5 07       	cpc	r31, r21
    3506:	20 f0       	brcs	.+8      	; 0x3510 <__udivmodsi4_ep>
    3508:	a2 1b       	sub	r26, r18
    350a:	b3 0b       	sbc	r27, r19
    350c:	e4 0b       	sbc	r30, r20
    350e:	f5 0b       	sbc	r31, r21

00003510 <__udivmodsi4_ep>:
    3510:	66 1f       	adc	r22, r22
    3512:	77 1f       	adc	r23, r23
    3514:	88 1f       	adc	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	1a 94       	dec	r1
    351a:	69 f7       	brne	.-38     	; 0x34f6 <__udivmodsi4_loop>
    351c:	60 95       	com	r22
    351e:	70 95       	com	r23
    3520:	80 95       	com	r24
    3522:	90 95       	com	r25
    3524:	9b 01       	movw	r18, r22
    3526:	ac 01       	movw	r20, r24
    3528:	bd 01       	movw	r22, r26
    352a:	cf 01       	movw	r24, r30
    352c:	08 95       	ret

0000352e <__prologue_saves__>:
    352e:	2f 92       	push	r2
    3530:	3f 92       	push	r3
    3532:	4f 92       	push	r4
    3534:	5f 92       	push	r5
    3536:	6f 92       	push	r6
    3538:	7f 92       	push	r7
    353a:	8f 92       	push	r8
    353c:	9f 92       	push	r9
    353e:	af 92       	push	r10
    3540:	bf 92       	push	r11
    3542:	cf 92       	push	r12
    3544:	df 92       	push	r13
    3546:	ef 92       	push	r14
    3548:	ff 92       	push	r15
    354a:	0f 93       	push	r16
    354c:	1f 93       	push	r17
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	ca 1b       	sub	r28, r26
    3558:	db 0b       	sbc	r29, r27
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	de bf       	out	0x3e, r29	; 62
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	cd bf       	out	0x3d, r28	; 61
    3564:	09 94       	ijmp

00003566 <__epilogue_restores__>:
    3566:	2a 88       	ldd	r2, Y+18	; 0x12
    3568:	39 88       	ldd	r3, Y+17	; 0x11
    356a:	48 88       	ldd	r4, Y+16	; 0x10
    356c:	5f 84       	ldd	r5, Y+15	; 0x0f
    356e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3570:	7d 84       	ldd	r7, Y+13	; 0x0d
    3572:	8c 84       	ldd	r8, Y+12	; 0x0c
    3574:	9b 84       	ldd	r9, Y+11	; 0x0b
    3576:	aa 84       	ldd	r10, Y+10	; 0x0a
    3578:	b9 84       	ldd	r11, Y+9	; 0x09
    357a:	c8 84       	ldd	r12, Y+8	; 0x08
    357c:	df 80       	ldd	r13, Y+7	; 0x07
    357e:	ee 80       	ldd	r14, Y+6	; 0x06
    3580:	fd 80       	ldd	r15, Y+5	; 0x05
    3582:	0c 81       	ldd	r16, Y+4	; 0x04
    3584:	1b 81       	ldd	r17, Y+3	; 0x03
    3586:	aa 81       	ldd	r26, Y+2	; 0x02
    3588:	b9 81       	ldd	r27, Y+1	; 0x01
    358a:	ce 0f       	add	r28, r30
    358c:	d1 1d       	adc	r29, r1
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	f8 94       	cli
    3592:	de bf       	out	0x3e, r29	; 62
    3594:	0f be       	out	0x3f, r0	; 63
    3596:	cd bf       	out	0x3d, r28	; 61
    3598:	ed 01       	movw	r28, r26
    359a:	08 95       	ret

0000359c <_exit>:
    359c:	f8 94       	cli

0000359e <__stop_program>:
    359e:	ff cf       	rjmp	.-2      	; 0x359e <__stop_program>
