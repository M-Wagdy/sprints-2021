
USonic_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001880  00001914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080006e  0080006e  00001922  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001922  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001954  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d66  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6c  00000000  00000000  0000494e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a32  00000000  00000000  000057ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f8  00000000  00000000  000071ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c14  00000000  00000000  000076e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b24  00000000  00000000  000082f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00009e1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	4f 07       	cpc	r20, r31
      56:	59 07       	cpc	r21, r25
      58:	63 07       	cpc	r22, r19
      5a:	6d 07       	cpc	r22, r29
      5c:	77 07       	cpc	r23, r23
      5e:	81 07       	cpc	r24, r17
      60:	8b 07       	cpc	r24, r27

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e0 e8       	ldi	r30, 0x80	; 128
      76:	f8 e1       	ldi	r31, 0x18	; 24
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ae 36       	cpi	r26, 0x6E	; 110
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	ae e6       	ldi	r26, 0x6E	; 110
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a6 38       	cpi	r26, 0x86	; 134
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <main>
      98:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <LCD_SendCommand>:
#include "../../Mcal/DIO/DIO.h"
#include "../../MCAL/Timer/Timer.h"
#include "LCD.h"

uint8_t LCD_SendCommand(uint8_t CMD)
{
      a0:	cf 93       	push	r28
      a2:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch(State)
      a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <State.1700>
      a8:	83 30       	cpi	r24, 0x03	; 3
      aa:	09 f4       	brne	.+2      	; 0xae <LCD_SendCommand+0xe>
      ac:	a6 c0       	rjmp	.+332    	; 0x1fa <LCD_SendCommand+0x15a>
      ae:	38 f4       	brcc	.+14     	; 0xbe <LCD_SendCommand+0x1e>
      b0:	81 30       	cpi	r24, 0x01	; 1
      b2:	09 f4       	brne	.+2      	; 0xb6 <LCD_SendCommand+0x16>
      b4:	55 c0       	rjmp	.+170    	; 0x160 <LCD_SendCommand+0xc0>
      b6:	82 30       	cpi	r24, 0x02	; 2
      b8:	09 f4       	brne	.+2      	; 0xbc <LCD_SendCommand+0x1c>
      ba:	64 c0       	rjmp	.+200    	; 0x184 <LCD_SendCommand+0xe4>
      bc:	be c0       	rjmp	.+380    	; 0x23a <LCD_SendCommand+0x19a>
      be:	84 30       	cpi	r24, 0x04	; 4
      c0:	09 f4       	brne	.+2      	; 0xc4 <LCD_SendCommand+0x24>
      c2:	ad c0       	rjmp	.+346    	; 0x21e <LCD_SendCommand+0x17e>
      c4:	8f 3f       	cpi	r24, 0xFF	; 255
      c6:	09 f0       	breq	.+2      	; 0xca <LCD_SendCommand+0x2a>
      c8:	b8 c0       	rjmp	.+368    	; 0x23a <LCD_SendCommand+0x19a>
	{
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(LCD_PORT, LCD_RS, PIN_LOW);
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	61 e0       	ldi	r22, 0x01	; 1
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_RW, PIN_LOW);
      d4:	40 e0       	ldi	r20, 0x00	; 0
      d6:	62 e0       	ldi	r22, 0x02	; 2
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>

		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(LCD_PORT, LCD_D4, READ_BIT(CMD, 4));
      de:	4c 2f       	mov	r20, r28
      e0:	40 71       	andi	r20, 0x10	; 16
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	55 95       	asr	r21
      e6:	47 95       	ror	r20
      e8:	55 95       	asr	r21
      ea:	47 95       	ror	r20
      ec:	55 95       	asr	r21
      ee:	47 95       	ror	r20
      f0:	55 95       	asr	r21
      f2:	47 95       	ror	r20
      f4:	64 e0       	ldi	r22, 0x04	; 4
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D5, READ_BIT(CMD, 5));
      fc:	4c 2f       	mov	r20, r28
      fe:	40 72       	andi	r20, 0x20	; 32
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	55 95       	asr	r21
     104:	47 95       	ror	r20
     106:	55 95       	asr	r21
     108:	47 95       	ror	r20
     10a:	55 95       	asr	r21
     10c:	47 95       	ror	r20
     10e:	55 95       	asr	r21
     110:	47 95       	ror	r20
     112:	55 95       	asr	r21
     114:	47 95       	ror	r20
     116:	65 e0       	ldi	r22, 0x05	; 5
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D6, READ_BIT(CMD, 6));
     11e:	4c 2f       	mov	r20, r28
     120:	40 74       	andi	r20, 0x40	; 64
     122:	50 e0       	ldi	r21, 0x00	; 0
     124:	04 2e       	mov	r0, r20
     126:	45 2f       	mov	r20, r21
     128:	00 0c       	add	r0, r0
     12a:	44 1f       	adc	r20, r20
     12c:	55 0b       	sbc	r21, r21
     12e:	00 0c       	add	r0, r0
     130:	44 1f       	adc	r20, r20
     132:	55 1f       	adc	r21, r21
     134:	66 e0       	ldi	r22, 0x06	; 6
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D7, READ_BIT(CMD, 7));
     13c:	4c 2f       	mov	r20, r28
     13e:	44 1f       	adc	r20, r20
     140:	44 27       	eor	r20, r20
     142:	44 1f       	adc	r20, r20
     144:	67 e0       	ldi	r22, 0x07	; 7
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>


		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(LCD_PORT, LCD_EN, PIN_HIGH);
     14c:	41 e0       	ldi	r20, 0x01	; 1
     14e:	63 e0       	ldi	r22, 0x03	; 3
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1700>
#include "LCD.h"

uint8_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     15c:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(LCD_PORT, LCD_EN, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     15e:	74 c0       	rjmp	.+232    	; 0x248 <LCD_SendCommand+0x1a8>
	case Sending_First_Nibble:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayUs(TIMER_2,3);//1
     160:	43 e0       	ldi	r20, 0x03	; 3
     162:	50 e0       	ldi	r21, 0x00	; 0
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <TIM_DelayUs>
		if(TimerRetVal == TIMER_E_SUCCESS)
     16e:	81 11       	cpse	r24, r1
     170:	66 c0       	rjmp	.+204    	; 0x23e <LCD_SendCommand+0x19e>
		{
			/*if timer delay function finished correctly pull enable pin low*/
			DIO_WritePin(LCD_PORT, LCD_EN, PIN_LOW);
     172:	40 e0       	ldi	r20, 0x00	; 0
     174:	63 e0       	ldi	r22, 0x03	; 3
     176:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
			/*update the function's state*/
			State = First_Nibble_Sent;
     17a:	82 e0       	ldi	r24, 0x02	; 2
     17c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1700>
#include "LCD.h"

uint8_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	62 c0       	rjmp	.+196    	; 0x248 <LCD_SendCommand+0x1a8>
			State = First_Nibble_Sent;
		}
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(LCD_PORT,LCD_RS,PIN_LOW);
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT,LCD_RW,PIN_LOW);
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	62 e0       	ldi	r22, 0x02	; 2
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>

		/*copying lower nibble of the command to the pins*/

		DIO_WritePin(LCD_PORT,LCD_D4,READ_BIT(CMD,0));
     198:	4c 2f       	mov	r20, r28
     19a:	41 70       	andi	r20, 0x01	; 1
     19c:	64 e0       	ldi	r22, 0x04	; 4
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT,LCD_D5,READ_BIT(CMD,1));
     1a4:	4c 2f       	mov	r20, r28
     1a6:	42 70       	andi	r20, 0x02	; 2
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	55 95       	asr	r21
     1ac:	47 95       	ror	r20
     1ae:	65 e0       	ldi	r22, 0x05	; 5
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT,LCD_D6,READ_BIT(CMD,2));
     1b6:	4c 2f       	mov	r20, r28
     1b8:	44 70       	andi	r20, 0x04	; 4
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	55 95       	asr	r21
     1be:	47 95       	ror	r20
     1c0:	55 95       	asr	r21
     1c2:	47 95       	ror	r20
     1c4:	66 e0       	ldi	r22, 0x06	; 6
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT,LCD_D7,READ_BIT(CMD,3));
     1cc:	c8 70       	andi	r28, 0x08	; 8
     1ce:	4c 2f       	mov	r20, r28
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	55 95       	asr	r21
     1d4:	47 95       	ror	r20
     1d6:	55 95       	asr	r21
     1d8:	47 95       	ror	r20
     1da:	55 95       	asr	r21
     1dc:	47 95       	ror	r20
     1de:	67 e0       	ldi	r22, 0x07	; 7
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(LCD_PORT,LCD_EN,PIN_HIGH);
     1e6:	41 e0       	ldi	r20, 0x01	; 1
     1e8:	63 e0       	ldi	r22, 0x03	; 3
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     1f0:	83 e0       	ldi	r24, 0x03	; 3
     1f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1700>
#include "LCD.h"

uint8_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(LCD_PORT,LCD_D7,READ_BIT(CMD,3));
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(LCD_PORT,LCD_EN,PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <LCD_SendCommand+0x1a8>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayUs(TIMER_2,3);//1
     1fa:	43 e0       	ldi	r20, 0x03	; 3
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	82 e0       	ldi	r24, 0x02	; 2
     204:	0e 94 52 08 	call	0x10a4	; 0x10a4 <TIM_DelayUs>
		if(TimerRetVal == ((uint8_t)TIMER_E_SUCCESS))
     208:	81 11       	cpse	r24, r1
     20a:	1b c0       	rjmp	.+54     	; 0x242 <LCD_SendCommand+0x1a2>
		{
			/*if timer delay function finished correctly pull enable pin low*/
			DIO_WritePin(LCD_PORT,LCD_EN,PIN_LOW);
     20c:	40 e0       	ldi	r20, 0x00	; 0
     20e:	63 e0       	ldi	r22, 0x03	; 3
     210:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
			/*reset the function's state*/
			State = Second_Nibble_Sent;
     214:	84 e0       	ldi	r24, 0x04	; 4
     216:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1700>
#include "LCD.h"

uint8_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	15 c0       	rjmp	.+42     	; 0x248 <LCD_SendCommand+0x1a8>
			State = Second_Nibble_Sent;
		}
		break;
	case Second_Nibble_Sent:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayMs(TIMER_2,5);//2
     21e:	45 e0       	ldi	r20, 0x05	; 5
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	0e 94 02 09 	call	0x1204	; 0x1204 <TIM_DelayMs>
		if(TimerRetVal == ((uint8_t)TIMER_E_SUCCESS))
     22c:	81 11       	cpse	r24, r1
     22e:	0b c0       	rjmp	.+22     	; 0x246 <LCD_SendCommand+0x1a6>
		{
			/*reset the function's state*/
			State = OperationStarted;
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <State.1700>
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	07 c0       	rjmp	.+14     	; 0x248 <LCD_SendCommand+0x1a8>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	05 c0       	rjmp	.+10     	; 0x248 <LCD_SendCommand+0x1a8>
#include "LCD.h"

uint8_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     23e:	8f ef       	ldi	r24, 0xFF	; 255
     240:	03 c0       	rjmp	.+6      	; 0x248 <LCD_SendCommand+0x1a8>
     242:	8f ef       	ldi	r24, 0xFF	; 255
     244:	01 c0       	rjmp	.+2      	; 0x248 <LCD_SendCommand+0x1a8>
     246:	8f ef       	ldi	r24, 0xFF	; 255
	default:
		ErrRetVal = OperationFail;
	}
	/*return from function*/
return ErrRetVal;
}
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <LCD_SendData>:
uint8_t LCD_SendData(uint8_t Character)
{
     24c:	cf 93       	push	r28
     24e:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch (State) {
     250:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <State.1713>
     254:	83 30       	cpi	r24, 0x03	; 3
     256:	09 f4       	brne	.+2      	; 0x25a <LCD_SendData+0xe>
     258:	a6 c0       	rjmp	.+332    	; 0x3a6 <LCD_SendData+0x15a>
     25a:	38 f4       	brcc	.+14     	; 0x26a <LCD_SendData+0x1e>
     25c:	81 30       	cpi	r24, 0x01	; 1
     25e:	09 f4       	brne	.+2      	; 0x262 <LCD_SendData+0x16>
     260:	55 c0       	rjmp	.+170    	; 0x30c <LCD_SendData+0xc0>
     262:	82 30       	cpi	r24, 0x02	; 2
     264:	09 f4       	brne	.+2      	; 0x268 <LCD_SendData+0x1c>
     266:	64 c0       	rjmp	.+200    	; 0x330 <LCD_SendData+0xe4>
     268:	bd c0       	rjmp	.+378    	; 0x3e4 <LCD_SendData+0x198>
     26a:	84 30       	cpi	r24, 0x04	; 4
     26c:	09 f4       	brne	.+2      	; 0x270 <LCD_SendData+0x24>
     26e:	ad c0       	rjmp	.+346    	; 0x3ca <LCD_SendData+0x17e>
     270:	8f 3f       	cpi	r24, 0xFF	; 255
     272:	09 f0       	breq	.+2      	; 0x276 <LCD_SendData+0x2a>
     274:	b7 c0       	rjmp	.+366    	; 0x3e4 <LCD_SendData+0x198>
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(LCD_PORT, LCD_RS, PIN_HIGH);
     276:	41 e0       	ldi	r20, 0x01	; 1
     278:	61 e0       	ldi	r22, 0x01	; 1
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_RW, PIN_LOW);
     280:	40 e0       	ldi	r20, 0x00	; 0
     282:	62 e0       	ldi	r22, 0x02	; 2
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(LCD_PORT, LCD_D7, READ_BIT(Character, 7));
     28a:	4c 2f       	mov	r20, r28
     28c:	44 1f       	adc	r20, r20
     28e:	44 27       	eor	r20, r20
     290:	44 1f       	adc	r20, r20
     292:	67 e0       	ldi	r22, 0x07	; 7
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D6, READ_BIT(Character, 6));
     29a:	4c 2f       	mov	r20, r28
     29c:	40 74       	andi	r20, 0x40	; 64
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	04 2e       	mov	r0, r20
     2a2:	45 2f       	mov	r20, r21
     2a4:	00 0c       	add	r0, r0
     2a6:	44 1f       	adc	r20, r20
     2a8:	55 0b       	sbc	r21, r21
     2aa:	00 0c       	add	r0, r0
     2ac:	44 1f       	adc	r20, r20
     2ae:	55 1f       	adc	r21, r21
     2b0:	66 e0       	ldi	r22, 0x06	; 6
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D5, READ_BIT(Character, 5));
     2b8:	4c 2f       	mov	r20, r28
     2ba:	40 72       	andi	r20, 0x20	; 32
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	55 95       	asr	r21
     2c0:	47 95       	ror	r20
     2c2:	55 95       	asr	r21
     2c4:	47 95       	ror	r20
     2c6:	55 95       	asr	r21
     2c8:	47 95       	ror	r20
     2ca:	55 95       	asr	r21
     2cc:	47 95       	ror	r20
     2ce:	55 95       	asr	r21
     2d0:	47 95       	ror	r20
     2d2:	65 e0       	ldi	r22, 0x05	; 5
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D4, READ_BIT(Character, 4));
     2da:	4c 2f       	mov	r20, r28
     2dc:	40 71       	andi	r20, 0x10	; 16
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	55 95       	asr	r21
     2e2:	47 95       	ror	r20
     2e4:	55 95       	asr	r21
     2e6:	47 95       	ror	r20
     2e8:	55 95       	asr	r21
     2ea:	47 95       	ror	r20
     2ec:	55 95       	asr	r21
     2ee:	47 95       	ror	r20
     2f0:	64 e0       	ldi	r22, 0x04	; 4
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(LCD_PORT, LCD_EN, PIN_HIGH);
     2f8:	41 e0       	ldi	r20, 0x01	; 1
     2fa:	63 e0       	ldi	r22, 0x03	; 3
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1713>
return ErrRetVal;
}
uint8_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     308:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(LCD_PORT, LCD_EN, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     30a:	73 c0       	rjmp	.+230    	; 0x3f2 <LCD_SendData+0x1a6>
	case Sending_First_Nibble:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayUs(TIMER_2, 3);//1
     30c:	43 e0       	ldi	r20, 0x03	; 3
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	82 e0       	ldi	r24, 0x02	; 2
     316:	0e 94 52 08 	call	0x10a4	; 0x10a4 <TIM_DelayUs>
		if (TimerRetVal == TIMER_E_SUCCESS) {
     31a:	81 11       	cpse	r24, r1
     31c:	65 c0       	rjmp	.+202    	; 0x3e8 <LCD_SendData+0x19c>
			DIO_WritePin(LCD_PORT, LCD_EN, PIN_LOW);
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	63 e0       	ldi	r22, 0x03	; 3
     322:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
			/*update the function's state*/
			State = First_Nibble_Sent;
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1713>
return ErrRetVal;
}
uint8_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	61 c0       	rjmp	.+194    	; 0x3f2 <LCD_SendData+0x1a6>
			State = First_Nibble_Sent;
		}
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(LCD_PORT, LCD_RS, PIN_HIGH);
     330:	41 e0       	ldi	r20, 0x01	; 1
     332:	61 e0       	ldi	r22, 0x01	; 1
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_RW, PIN_LOW);
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	62 e0       	ldi	r22, 0x02	; 2
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(LCD_PORT, LCD_D7, READ_BIT(Character, 3));
     344:	4c 2f       	mov	r20, r28
     346:	48 70       	andi	r20, 0x08	; 8
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	55 95       	asr	r21
     34c:	47 95       	ror	r20
     34e:	55 95       	asr	r21
     350:	47 95       	ror	r20
     352:	55 95       	asr	r21
     354:	47 95       	ror	r20
     356:	67 e0       	ldi	r22, 0x07	; 7
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D6, READ_BIT(Character, 2));
     35e:	4c 2f       	mov	r20, r28
     360:	44 70       	andi	r20, 0x04	; 4
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	55 95       	asr	r21
     366:	47 95       	ror	r20
     368:	55 95       	asr	r21
     36a:	47 95       	ror	r20
     36c:	66 e0       	ldi	r22, 0x06	; 6
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D5, READ_BIT(Character, 1));
     374:	4c 2f       	mov	r20, r28
     376:	42 70       	andi	r20, 0x02	; 2
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	55 95       	asr	r21
     37c:	47 95       	ror	r20
     37e:	65 e0       	ldi	r22, 0x05	; 5
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D4, READ_BIT(Character, 0));
     386:	4c 2f       	mov	r20, r28
     388:	41 70       	andi	r20, 0x01	; 1
     38a:	64 e0       	ldi	r22, 0x04	; 4
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(LCD_PORT, LCD_EN, PIN_HIGH);
     392:	41 e0       	ldi	r20, 0x01	; 1
     394:	63 e0       	ldi	r22, 0x03	; 3
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1713>
return ErrRetVal;
}
uint8_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     3a2:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(LCD_PORT, LCD_EN, PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     3a4:	26 c0       	rjmp	.+76     	; 0x3f2 <LCD_SendData+0x1a6>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayUs(TIMER_2, 3);//1
     3a6:	43 e0       	ldi	r20, 0x03	; 3
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <TIM_DelayUs>
		if (TimerRetVal == ((uint8_t) TIMER_E_SUCCESS )) {
     3b4:	81 11       	cpse	r24, r1
     3b6:	1a c0       	rjmp	.+52     	; 0x3ec <LCD_SendData+0x1a0>
			/*if timer delay function finished correctly pull enable pin low*/
			DIO_WritePin(LCD_PORT, LCD_EN, PIN_LOW);
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	63 e0       	ldi	r22, 0x03	; 3
     3bc:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
			/*set the function's state*/
			State = Second_Nibble_Sent;
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1713>
return ErrRetVal;
}
uint8_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     3c6:	8f ef       	ldi	r24, 0xFF	; 255
     3c8:	14 c0       	rjmp	.+40     	; 0x3f2 <LCD_SendData+0x1a6>
			State = Second_Nibble_Sent;
		}
		break;
	case Second_Nibble_Sent:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayMs(TIMER_2, 0);
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	50 e0       	ldi	r21, 0x00	; 0
     3ce:	ba 01       	movw	r22, r20
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	0e 94 02 09 	call	0x1204	; 0x1204 <TIM_DelayMs>
		if (TimerRetVal == ((uint8_t) TIMER_E_SUCCESS )) {
     3d6:	81 11       	cpse	r24, r1
     3d8:	0b c0       	rjmp	.+22     	; 0x3f0 <LCD_SendData+0x1a4>
			/*reset the function's state*/
			State = OperationStarted;
     3da:	8f ef       	ldi	r24, 0xFF	; 255
     3dc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <State.1713>
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	07 c0       	rjmp	.+14     	; 0x3f2 <LCD_SendData+0x1a6>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <LCD_SendData+0x1a6>
return ErrRetVal;
}
uint8_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <LCD_SendData+0x1a6>
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <LCD_SendData+0x1a6>
     3f0:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
	}
	/*return from function*/
	return ErrRetVal;

}
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <LCD_Init>:
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	uint8_t LCD_SendCommandRetVal = OperationStarted;
	switch (State) {
     3f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3fa:	8a 30       	cpi	r24, 0x0A	; 10
     3fc:	09 f4       	brne	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	9d c0       	rjmp	.+314    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     400:	90 f4       	brcc	.+36     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     402:	87 30       	cpi	r24, 0x07	; 7
     404:	09 f4       	brne	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     406:	cb c0       	rjmp	.+406    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
     408:	38 f4       	brcc	.+14     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     40a:	85 30       	cpi	r24, 0x05	; 5
     40c:	09 f4       	brne	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40e:	69 c0       	rjmp	.+210    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
     410:	86 30       	cpi	r24, 0x06	; 6
     412:	09 f4       	brne	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     414:	74 c0       	rjmp	.+232    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
     416:	db c0       	rjmp	.+438    	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
     418:	88 30       	cpi	r24, 0x08	; 8
     41a:	09 f4       	brne	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     41c:	7a c0       	rjmp	.+244    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
     41e:	89 30       	cpi	r24, 0x09	; 9
     420:	09 f4       	brne	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     422:	81 c0       	rjmp	.+258    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
     424:	d4 c0       	rjmp	.+424    	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
     426:	8d 30       	cpi	r24, 0x0D	; 13
     428:	09 f4       	brne	.+2      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     42a:	a5 c0       	rjmp	.+330    	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
     42c:	38 f4       	brcc	.+14     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     42e:	8b 30       	cpi	r24, 0x0B	; 11
     430:	09 f4       	brne	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     432:	8d c0       	rjmp	.+282    	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
     434:	8c 30       	cpi	r24, 0x0C	; 12
     436:	09 f4       	brne	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     438:	94 c0       	rjmp	.+296    	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
     43a:	c9 c0       	rjmp	.+402    	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
     43c:	8f 30       	cpi	r24, 0x0F	; 15
     43e:	09 f4       	brne	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     440:	bc c0       	rjmp	.+376    	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
     442:	08 f4       	brcc	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     444:	a2 c0       	rjmp	.+324    	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
     446:	8f 3f       	cpi	r24, 0xFF	; 255
     448:	09 f0       	breq	.+2      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     44a:	c1 c0       	rjmp	.+386    	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
	case OperationStarted:
		/*Dio Initialize for the*/
		DIO_SetPinDirection(LCD_PORT, LCD_D7, PIN_OUTPUT);
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	67 e0       	ldi	r22, 0x07	; 7
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_PORT, LCD_D6, PIN_OUTPUT);
     456:	41 e0       	ldi	r20, 0x01	; 1
     458:	66 e0       	ldi	r22, 0x06	; 6
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_PORT, LCD_D5, PIN_OUTPUT);
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	65 e0       	ldi	r22, 0x05	; 5
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_PORT, LCD_D4, PIN_OUTPUT);
     46a:	41 e0       	ldi	r20, 0x01	; 1
     46c:	64 e0       	ldi	r22, 0x04	; 4
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_PORT, LCD_RS, PIN_OUTPUT);
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_PORT, LCD_RW, PIN_OUTPUT);
     47e:	41 e0       	ldi	r20, 0x01	; 1
     480:	62 e0       	ldi	r22, 0x02	; 2
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_PORT, LCD_EN, PIN_OUTPUT);
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	63 e0       	ldi	r22, 0x03	; 3
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(LCD_PORT, LCD_D7, PIN_LOW);
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	67 e0       	ldi	r22, 0x07	; 7
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D6, PIN_LOW);
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	66 e0       	ldi	r22, 0x06	; 6
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D5, PIN_LOW);
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	65 e0       	ldi	r22, 0x05	; 5
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_D4, PIN_LOW);
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	64 e0       	ldi	r22, 0x04	; 4
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_RS, PIN_LOW);
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_RW, PIN_LOW);
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	62 e0       	ldi	r22, 0x02	; 2
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_EN, PIN_LOW);
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	63 e0       	ldi	r22, 0x03	; 3
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
		/*set status of the function*/
		State = LCD_Pin_Initializing;
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
uint8_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     4de:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(LCD_PORT, LCD_RS, PIN_LOW);
		DIO_WritePin(LCD_PORT, LCD_RW, PIN_LOW);
		DIO_WritePin(LCD_PORT, LCD_EN, PIN_LOW);
		/*set status of the function*/
		State = LCD_Pin_Initializing;
		break;
     4e0:	08 95       	ret
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayMs(TIMER_2, 45);
     4e2:	4d e2       	ldi	r20, 0x2D	; 45
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	0e 94 02 09 	call	0x1204	; 0x1204 <TIM_DelayMs>
		if (TimerRetVal == ((uint8_t) TIMER_E_SUCCESS )) {
     4f0:	81 11       	cpse	r24, r1
     4f2:	6f c0       	rjmp	.+222    	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
     4f4:	86 e0       	ldi	r24, 0x06	; 6
     4f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
uint8_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	08 95       	ret
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
	case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     4fe:	83 e0       	ldi	r24, 0x03	; 3
     500:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     504:	81 11       	cpse	r24, r1
     506:	67 c0       	rjmp	.+206    	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     508:	88 e0       	ldi	r24, 0x08	; 8
     50a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
uint8_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     50e:	8f ef       	ldi	r24, 0xFF	; 255
     510:	08 95       	ret
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     518:	81 11       	cpse	r24, r1
     51a:	5f c0       	rjmp	.+190    	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     51c:	89 e0       	ldi	r24, 0x09	; 9
     51e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
uint8_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	08 95       	ret
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     52c:	81 11       	cpse	r24, r1
     52e:	57 c0       	rjmp	.+174    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     530:	8a e0       	ldi	r24, 0x0A	; 10
     532:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
uint8_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	08 95       	ret
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     540:	81 11       	cpse	r24, r1
     542:	4f c0       	rjmp	.+158    	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     544:	8b e0       	ldi	r24, 0x0B	; 11
     546:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
uint8_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     54a:	8f ef       	ldi	r24, 0xFF	; 255
     54c:	08 95       	ret
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);//LCD_FUNCSET_6//LCD_FUNCSET_2
     54e:	88 e2       	ldi	r24, 0x28	; 40
     550:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     554:	81 11       	cpse	r24, r1
     556:	47 c0       	rjmp	.+142    	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     558:	8c e0       	ldi	r24, 0x0C	; 12
     55a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
uint8_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     55e:	8f ef       	ldi	r24, 0xFF	; 255
     560:	08 95       	ret
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);//LCD_DISPON_CURSOFF
     562:	8c e0       	ldi	r24, 0x0C	; 12
     564:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     568:	81 11       	cpse	r24, r1
     56a:	3f c0       	rjmp	.+126    	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     56c:	8d e0       	ldi	r24, 0x0D	; 13
     56e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
uint8_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     572:	8f ef       	ldi	r24, 0xFF	; 255
     574:	08 95       	ret
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);
     576:	86 e0       	ldi	r24, 0x06	; 6
     578:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     57c:	81 11       	cpse	r24, r1
     57e:	37 c0       	rjmp	.+110    	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     580:	8e e0       	ldi	r24, 0x0E	; 14
     582:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
uint8_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	08 95       	ret
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);//LCD_CLR
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     590:	81 11       	cpse	r24, r1
     592:	2f c0       	rjmp	.+94     	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
		{
			State = LCD_Sent_Initialization_Sequence;
     594:	87 e0       	ldi	r24, 0x07	; 7
     596:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
uint8_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	08 95       	ret
			State = LCD_Sent_Initialization_Sequence;
		}
		break;
	case LCD_Sent_Initialization_Sequence:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayMs(TIMER_2, 3);
     59e:	43 e0       	ldi	r20, 0x03	; 3
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	0e 94 02 09 	call	0x1204	; 0x1204 <TIM_DelayMs>
		if (TimerRetVal == ((uint8_t) TIMER_E_SUCCESS )) {
     5ac:	81 11       	cpse	r24, r1
     5ae:	23 c0       	rjmp	.+70     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
			/*if timer delay function finished correctly Start the initialization sequence*/
//			LCD_SendCommand(LCD_CURS_Position0);
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     5b0:	8f e0       	ldi	r24, 0x0F	; 15
     5b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

}
uint8_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	08 95       	ret
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
//			ErrRetVal = OperationSuccess;
		}
		break;
	case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     5ba:	80 e8       	ldi	r24, 0x80	; 128
     5bc:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     5c0:	81 11       	cpse	r24, r1
     5c2:	1b c0       	rjmp	.+54     	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
		{
			State = OperationStarted;
     5c4:	8f ef       	ldi	r24, 0xFF	; 255
     5c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			ErrRetVal = OperationSuccess;
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	08 95       	ret
		}
		break;
	default:
		ErrRetVal = OperationFail;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	08 95       	ret

}
uint8_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     5d2:	8f ef       	ldi	r24, 0xFF	; 255
     5d4:	08 95       	ret
     5d6:	8f ef       	ldi	r24, 0xFF	; 255
     5d8:	08 95       	ret
     5da:	8f ef       	ldi	r24, 0xFF	; 255
     5dc:	08 95       	ret
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	08 95       	ret
     5e2:	8f ef       	ldi	r24, 0xFF	; 255
     5e4:	08 95       	ret
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	08 95       	ret
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	08 95       	ret
     5ee:	8f ef       	ldi	r24, 0xFF	; 255
     5f0:	08 95       	ret
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	08 95       	ret
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	08 95       	ret
     5fa:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	default:
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     5fc:	08 95       	ret

000005fe <LCD_SendString>:
uint8_t LCD_SendString(ptr_int8_t String)
{
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	ec 01       	movw	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	if (String != NULL_PTR) {
     604:	89 2b       	or	r24, r25
     606:	39 f4       	brne	.+14     	; 0x616 <LCD_SendString+0x18>
			else
				continue;
		}
		ErrRetVal = OperationSuccess;
	} else {
		ErrRetVal = OperationFail;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	08 c0       	rjmp	.+16     	; 0x61c <LCD_SendString+0x1e>
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	if (String != NULL_PTR) {
		while (*String != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
			LCD_SendDataRetVal = LCD_SendData(*String);
     60c:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_SendData>
			if(LCD_SendDataRetVal == OperationSuccess)
     610:	81 11       	cpse	r24, r1
     612:	01 c0       	rjmp	.+2      	; 0x616 <LCD_SendString+0x18>
				String++;
     614:	21 96       	adiw	r28, 0x01	; 1
uint8_t LCD_SendString(ptr_int8_t String)
{
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	if (String != NULL_PTR) {
		while (*String != NULL_TERMINATOR ) {
     616:	88 81       	ld	r24, Y
     618:	81 11       	cpse	r24, r1
     61a:	f8 cf       	rjmp	.-16     	; 0x60c <LCD_SendString+0xe>
		ErrRetVal = OperationSuccess;
	} else {
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <LCD_SendNumber>:
uint8_t LCD_SendNumber(uint32_t Number)
{
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	cf 5f       	subi	r28, 0xFF	; 255
     62c:	d1 09       	sbc	r29, r1
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrRetVal = OperationStarted;
	uint8_t String[255];
	STR_Number2String((uint32_t)Number,String);
     638:	ae 01       	movw	r20, r28
     63a:	4f 5f       	subi	r20, 0xFF	; 255
     63c:	5f 4f       	sbci	r21, 0xFF	; 255
     63e:	0e 94 ae 04 	call	0x95c	; 0x95c <STR_Number2String>
//	LCD_NumberToString(Number,String);
	LCD_SendString((int8_t*)String);
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_SendString>
	ErrRetVal = OperationSuccess;
	return ErrRetVal;
}
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	c1 50       	subi	r28, 0x01	; 1
     64e:	df 4f       	sbci	r29, 0xFF	; 255
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <MOTOR_init>:
	default:
	gu8_ERROR_STAT=MOTOR_INVALID_CH;
		break;
	}
	return gu8_ERROR_STAT ;
}
     660:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	21 f4       	brne	.+8      	; 0x670 <MOTOR_init+0x10>
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gu8_ERROR_STAT>
     66e:	25 c0       	rjmp	.+74     	; 0x6ba <MOTOR_init+0x5a>
     670:	81 11       	cpse	r24, r1
     672:	23 c0       	rjmp	.+70     	; 0x6ba <MOTOR_init+0x5a>
     674:	0e 94 b9 06 	call	0xd72	; 0xd72 <PwmInit>
     678:	41 e0       	ldi	r20, 0x01	; 1
     67a:	63 e0       	ldi	r22, 0x03	; 3
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
     682:	41 e0       	ldi	r20, 0x01	; 1
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
     68c:	41 e0       	ldi	r20, 0x01	; 1
     68e:	62 e0       	ldi	r22, 0x02	; 2
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
     696:	41 e0       	ldi	r20, 0x01	; 1
     698:	64 e0       	ldi	r22, 0x04	; 4
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
     6a0:	41 e0       	ldi	r20, 0x01	; 1
     6a2:	65 e0       	ldi	r22, 0x05	; 5
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	0e 94 bf 06 	call	0xd7e	; 0xd7e <PwmStart>
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
     6b6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <gu8_ERROR_STAT>
     6ba:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gu8_ERROR_STAT>
     6be:	08 95       	ret

000006c0 <MOTOR_start>:
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__data_end>
     6c8:	91 11       	cpse	r25, r1
     6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <MOTOR_start+0x14>
     6cc:	8e ef       	ldi	r24, 0xFE	; 254
     6ce:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gu8_ERROR_STAT>
     6d2:	4f c0       	rjmp	.+158    	; 0x772 <MOTOR_start+0xb2>
     6d4:	91 30       	cpi	r25, 0x01	; 1
     6d6:	09 f0       	breq	.+2      	; 0x6da <MOTOR_start+0x1a>
     6d8:	4c c0       	rjmp	.+152    	; 0x772 <MOTOR_start+0xb2>
     6da:	d4 2f       	mov	r29, r20
     6dc:	c8 2f       	mov	r28, r24
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <PwmSetDuty>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <PwmConnect>
     6ea:	cc 23       	and	r28, r28
     6ec:	19 f0       	breq	.+6      	; 0x6f4 <MOTOR_start+0x34>
     6ee:	c1 30       	cpi	r28, 0x01	; 1
     6f0:	f9 f0       	breq	.+62     	; 0x730 <MOTOR_start+0x70>
     6f2:	3c c0       	rjmp	.+120    	; 0x76c <MOTOR_start+0xac>
     6f4:	dd 23       	and	r29, r29
     6f6:	69 f0       	breq	.+26     	; 0x712 <MOTOR_start+0x52>
     6f8:	d1 30       	cpi	r29, 0x01	; 1
     6fa:	b1 f4       	brne	.+44     	; 0x728 <MOTOR_start+0x68>
     6fc:	41 e0       	ldi	r20, 0x01	; 1
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	62 e0       	ldi	r22, 0x02	; 2
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
     710:	30 c0       	rjmp	.+96     	; 0x772 <MOTOR_start+0xb2>
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	62 e0       	ldi	r22, 0x02	; 2
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
     726:	25 c0       	rjmp	.+74     	; 0x772 <MOTOR_start+0xb2>
     728:	8d ef       	ldi	r24, 0xFD	; 253
     72a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gu8_ERROR_STAT>
     72e:	21 c0       	rjmp	.+66     	; 0x772 <MOTOR_start+0xb2>
     730:	dd 23       	and	r29, r29
     732:	69 f0       	breq	.+26     	; 0x74e <MOTOR_start+0x8e>
     734:	d1 30       	cpi	r29, 0x01	; 1
     736:	b1 f4       	brne	.+44     	; 0x764 <MOTOR_start+0xa4>
     738:	41 e0       	ldi	r20, 0x01	; 1
     73a:	64 e0       	ldi	r22, 0x04	; 4
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	65 e0       	ldi	r22, 0x05	; 5
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
     74c:	12 c0       	rjmp	.+36     	; 0x772 <MOTOR_start+0xb2>
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	64 e0       	ldi	r22, 0x04	; 4
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
     758:	41 e0       	ldi	r20, 0x01	; 1
     75a:	65 e0       	ldi	r22, 0x05	; 5
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
     762:	07 c0       	rjmp	.+14     	; 0x772 <MOTOR_start+0xb2>
     764:	8d ef       	ldi	r24, 0xFD	; 253
     766:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gu8_ERROR_STAT>
     76a:	03 c0       	rjmp	.+6      	; 0x772 <MOTOR_start+0xb2>
     76c:	8c ef       	ldi	r24, 0xFC	; 252
     76e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gu8_ERROR_STAT>
     772:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gu8_ERROR_STAT>
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <MOTOR_Update_dir>:
MOTOR_ERROR_state_t MOTOR_Update_dir(uint8_t motor_no, uint8_t dir) {
	switch (motor_no) {
     77c:	88 23       	and	r24, r24
     77e:	19 f0       	breq	.+6      	; 0x786 <MOTOR_Update_dir+0xa>
     780:	81 30       	cpi	r24, 0x01	; 1
     782:	f1 f0       	breq	.+60     	; 0x7c0 <MOTOR_Update_dir+0x44>
     784:	3b c0       	rjmp	.+118    	; 0x7fc <MOTOR_Update_dir+0x80>
		case MOTOR1 :
			switch (dir) {
     786:	66 23       	and	r22, r22
     788:	61 f0       	breq	.+24     	; 0x7a2 <MOTOR_Update_dir+0x26>
     78a:	61 30       	cpi	r22, 0x01	; 1
     78c:	a9 f4       	brne	.+42     	; 0x7b8 <MOTOR_Update_dir+0x3c>
			case MOTOR_FORWARD :
				DIO_WritePin(MOTOR1_PORT, MOTOR1_PIN1,PIN_HIGH);
     78e:	41 e0       	ldi	r20, 0x01	; 1
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
				DIO_WritePin(MOTOR1_PORT, MOTOR1_PIN2,PIN_LOW);
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	62 e0       	ldi	r22, 0x02	; 2
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
				break;
     7a0:	30 c0       	rjmp	.+96     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			case MOTOR_BACKWARD :
				DIO_WritePin(MOTOR1_PORT, MOTOR1_PIN1,PIN_LOW);
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
				DIO_WritePin(MOTOR1_PORT, MOTOR1_PIN2,PIN_HIGH);
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
				break;
     7b6:	25 c0       	rjmp	.+74     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			default:
			gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     7b8:	8d ef       	ldi	r24, 0xFD	; 253
     7ba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gu8_ERROR_STAT>
				break;
     7be:	21 c0       	rjmp	.+66     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			}
			break;
		case MOTOR2 :
			switch (dir) {
     7c0:	66 23       	and	r22, r22
     7c2:	69 f0       	breq	.+26     	; 0x7de <MOTOR_Update_dir+0x62>
     7c4:	61 30       	cpi	r22, 0x01	; 1
     7c6:	b1 f4       	brne	.+44     	; 0x7f4 <MOTOR_Update_dir+0x78>
			case MOTOR_FORWARD :
			DIO_WritePin(MOTOR2_PORT, MOTOR2_PIN1,PIN_HIGH);
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	64 e0       	ldi	r22, 0x04	; 4
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
			DIO_WritePin(MOTOR2_PORT, MOTOR2_PIN2,PIN_LOW);
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	65 e0       	ldi	r22, 0x05	; 5
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
				break;
     7dc:	12 c0       	rjmp	.+36     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			case MOTOR_BACKWARD :
			DIO_WritePin(MOTOR2_PORT, MOTOR2_PIN1,PIN_LOW);
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	64 e0       	ldi	r22, 0x04	; 4
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
			DIO_WritePin(MOTOR2_PORT, MOTOR2_PIN2,PIN_HIGH);
     7e8:	41 e0       	ldi	r20, 0x01	; 1
     7ea:	65 e0       	ldi	r22, 0x05	; 5
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
				break;
     7f2:	07 c0       	rjmp	.+14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			default:
			gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     7f4:	8d ef       	ldi	r24, 0xFD	; 253
     7f6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gu8_ERROR_STAT>
				break;
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			}
			break;
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_CH;
     7fc:	8c ef       	ldi	r24, 0xFC	; 252
     7fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gu8_ERROR_STAT>
			break;
		}
		return gu8_ERROR_STAT ;
}
     802:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gu8_ERROR_STAT>
     806:	08 95       	ret

00000808 <USONIC_Init>:
/*
 * THIS API INITIALIZE THE ULTRASONIC
 * */
USONIC_ERROR_state_t USONIC_Init(void) {
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) {//IF ULTRA SONIC IS INITIALIZED
     808:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <gu8_InitFlag>
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	21 f4       	brne	.+8      	; 0x818 <USONIC_Init+0x10>
		gu8_ERROR_STAT = USONIC_SEC_INIT;//STORE SEC INIT IN ERRROR STAT
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <gu8_ERROR_STAT>
     816:	0f c0       	rjmp	.+30     	; 0x836 <USONIC_Init+0x2e>
	} else if (NOT_INIT == gu8_InitFlag) {//IF ULTRA SONIC IS NOT INITIALIZED
     818:	81 11       	cpse	r24, r1
     81a:	0d c0       	rjmp	.+26     	; 0x836 <USONIC_Init+0x2e>
		DIO_SetPinDirection(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_OUTPUT); //SET THE TRIGGER PIN AS AN OUTPUT
     81c:	41 e0       	ldi	r20, 0x01	; 1
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	83 e0       	ldi	r24, 0x03	; 3
     822:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
		ICU_Init(ICU_1); //INIT THE ICU CH 1
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	0e 94 5f 06 	call	0xcbe	; 0xcbe <ICU_Init>
		gu8_InitFlag = INIT;
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <gu8_InitFlag>
		gu8_ERROR_STAT=USONIC_SUCCESS;
     832:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <gu8_ERROR_STAT>
	} else {
		//DO NOTHING
	}
	return gu8_ERROR_STAT ;
}
     836:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <gu8_ERROR_STAT>
     83a:	08 95       	ret

0000083c <USONIC_GetDistance>:
/*
 * THIS API GET THE DISTANCE
 * */
USONIC_ERROR_state_t USONIC_GetDistance(ptr_double64_t distance) {
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	00 d0       	rcall	.+0      	; 0x846 <USONIC_GetDistance+0xa>
     846:	00 d0       	rcall	.+0      	; 0x848 <USONIC_GetDistance+0xc>
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	9c 01       	movw	r18, r24
	static uint8_t ICU_STAT = START_STATE;
	double64_t au64_TIME = 0;
     84e:	19 82       	std	Y+1, r1	; 0x01
     850:	1a 82       	std	Y+2, r1	; 0x02
     852:	1b 82       	std	Y+3, r1	; 0x03
     854:	1c 82       	std	Y+4, r1	; 0x04
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (NOT_INIT == gu8_InitFlag) { //IF ULTRA SONIC IS NOT INITIALIZED
     856:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gu8_InitFlag>
     85a:	91 11       	cpse	r25, r1
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
		gu8_ERROR_STAT = USONIC_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     85e:	8e ef       	ldi	r24, 0xFE	; 254
     860:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <gu8_ERROR_STAT>
     864:	5d c0       	rjmp	.+186    	; 0x920 <__stack+0xc1>
	} else if (INIT == gu8_InitFlag) { //IF ULTRA SONIC IS INITIALIZED
     866:	91 30       	cpi	r25, 0x01	; 1
     868:	09 f0       	breq	.+2      	; 0x86c <__stack+0xd>
     86a:	5a c0       	rjmp	.+180    	; 0x920 <__stack+0xc1>
		/*CHECK IF ptr_float32_t distance EUALS NULL */
		if (NULL_PTR == distance) {
     86c:	21 15       	cp	r18, r1
     86e:	31 05       	cpc	r19, r1
     870:	21 f4       	brne	.+8      	; 0x87a <__stack+0x1b>
			gu8_ERROR_STAT = USONIC_NULL_POINTER; //STORE NOT INIT IN ERRROR STAT
     872:	8d ef       	ldi	r24, 0xFD	; 253
     874:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <gu8_ERROR_STAT>
     878:	53 c0       	rjmp	.+166    	; 0x920 <__stack+0xc1>
     87a:	89 01       	movw	r16, r18
		} else {
			/*CHECK IF THE ICU IS NOT STARTED YET*/
			if (START_STATE == ICU_STAT) {
     87c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ICU_STAT.1694>
     880:	81 11       	cpse	r24, r1
     882:	26 c0       	rjmp	.+76     	; 0x8d0 <__stack+0x71>
            gu8_ERROR_STAT = NOT_OK;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <gu8_ERROR_STAT>
				/*FIRE THE ULTASONIC TRIGGER*/
				DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_HIGH); //SET TRIGGER PIN
     88a:	41 e0       	ldi	r20, 0x01	; 1
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	83 e0       	ldi	r24, 0x03	; 3
     890:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
				do
					TIM_DelayUs(TIMER_2, TRIG_TIME); //WAIT 10 MICRO SEC
     894:	4a e0       	ldi	r20, 0x0A	; 10
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <TIM_DelayUs>
				while (OK != TIM_DelayUs(TIMER_2, TRIG_TIME));
     8a2:	4a e0       	ldi	r20, 0x0A	; 10
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	0e 94 52 08 	call	0x10a4	; 0x10a4 <TIM_DelayUs>
     8b0:	81 11       	cpse	r24, r1
     8b2:	f0 cf       	rjmp	.-32     	; 0x894 <__stack+0x35>
				DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_LOW); //CLEAR TRIGER PIN
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	83 e0       	ldi	r24, 0x03	; 3
     8ba:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_WritePin>
				ICU_UpdateTimeOn(ICU_1, &ICU_STAT, &au64_TIME); //START ICU
     8be:	ae 01       	movw	r20, r28
     8c0:	4f 5f       	subi	r20, 0xFF	; 255
     8c2:	5f 4f       	sbci	r21, 0xFF	; 255
     8c4:	60 e7       	ldi	r22, 0x70	; 112
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	0e 94 6e 06 	call	0xcdc	; 0xcdc <ICU_UpdateTimeOn>
     8ce:	28 c0       	rjmp	.+80     	; 0x920 <__stack+0xc1>
			} else  { //IF ICU IS NOT FINISHED
				ICU_UpdateTimeOn(ICU_1, &ICU_STAT, &au64_TIME); //CALL ICU UPDATE
     8d0:	ae 01       	movw	r20, r28
     8d2:	4f 5f       	subi	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	60 e7       	ldi	r22, 0x70	; 112
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <ICU_UpdateTimeOn>
				gu8_ERROR_STAT = USONIC_PENDING; //STORE PENDING
     8e0:	8c ef       	ldi	r24, 0xFC	; 252
     8e2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <gu8_ERROR_STAT>
            if (END_STATE == ICU_STAT) { //IF ICU IS FINISHED
     8e6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ICU_STAT.1694>
     8ea:	83 30       	cpi	r24, 0x03	; 3
     8ec:	c9 f4       	brne	.+50     	; 0x920 <__stack+0xc1>
               *(distance) = (((SOUND_SPPED) * au64_TIME) / 2); //CALCULATE THE DISTANCE
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	3c ef       	ldi	r19, 0xFC	; 252
     8f2:	45 e0       	ldi	r20, 0x05	; 5
     8f4:	57 e4       	ldi	r21, 0x47	; 71
     8f6:	69 81       	ldd	r22, Y+1	; 0x01
     8f8:	7a 81       	ldd	r23, Y+2	; 0x02
     8fa:	8b 81       	ldd	r24, Y+3	; 0x03
     8fc:	9c 81       	ldd	r25, Y+4	; 0x04
     8fe:	0e 94 8f 0b 	call	0x171e	; 0x171e <__mulsf3>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	5f e3       	ldi	r21, 0x3F	; 63
     90a:	0e 94 8f 0b 	call	0x171e	; 0x171e <__mulsf3>
     90e:	f8 01       	movw	r30, r16
     910:	60 83       	st	Z, r22
     912:	71 83       	std	Z+1, r23	; 0x01
     914:	82 83       	std	Z+2, r24	; 0x02
     916:	93 83       	std	Z+3, r25	; 0x03
               ICU_STAT = START_STATE; //RESET ICU STAT
     918:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <ICU_STAT.1694>
               gu8_ERROR_STAT = OK; //RETURN OK(FINISHED)
     91c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <gu8_ERROR_STAT>
		}
	} else {
		//DO NOTHING
	}
	return gu8_ERROR_STAT; //RETURN API STAT
}
     920:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <gu8_ERROR_STAT>
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	08 95       	ret

00000936 <STR_StringReverse>:
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
{
     936:	dc 01       	movw	r26, r24
	uint8_t* A = String;
	uint8_t* B = String;
     938:	fc 01       	movw	r30, r24
	uint8_t Temp = 0;
	while(*B != '\0')
     93a:	01 c0       	rjmp	.+2      	; 0x93e <STR_StringReverse+0x8>
	{
		B++;
     93c:	31 96       	adiw	r30, 0x01	; 1
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
     93e:	80 81       	ld	r24, Z
     940:	81 11       	cpse	r24, r1
     942:	fc cf       	rjmp	.-8      	; 0x93c <STR_StringReverse+0x6>
	{
		B++;
	}
	B--;
     944:	31 97       	sbiw	r30, 0x01	; 1
	while(A<B)
     946:	05 c0       	rjmp	.+10     	; 0x952 <STR_StringReverse+0x1c>
	{
		//swap
		Temp=*A;
     948:	8c 91       	ld	r24, X
		*A=*B;
     94a:	90 81       	ld	r25, Z
     94c:	9d 93       	st	X+, r25
		*B=Temp;
     94e:	80 83       	st	Z, r24
		A++;B--;
     950:	31 97       	sbiw	r30, 0x01	; 1
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
     952:	ae 17       	cp	r26, r30
     954:	bf 07       	cpc	r27, r31
     956:	c0 f3       	brcs	.-16     	; 0x948 <STR_StringReverse+0x12>
		*A=*B;
		*B=Temp;
		A++;B--;
	}
	return 0;
}
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	08 95       	ret

0000095c <STR_Number2String>:
		Multiplier*=10;
	}while(String!=StartOfString);
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	8a 01       	movw	r16, r20
	uint8_t* SringCpy = String;
	if(Number==0)
     966:	61 15       	cp	r22, r1
     968:	71 05       	cpc	r23, r1
     96a:	81 05       	cpc	r24, r1
     96c:	91 05       	cpc	r25, r1
     96e:	21 f4       	brne	.+8      	; 0x978 <STR_Number2String+0x1c>
	{
		*String='0';
     970:	80 e3       	ldi	r24, 0x30	; 48
     972:	fa 01       	movw	r30, r20
     974:	80 83       	st	Z, r24
     976:	13 c0       	rjmp	.+38     	; 0x99e <STR_Number2String+0x42>
     978:	ea 01       	movw	r28, r20
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
     97a:	2a e0       	ldi	r18, 0x0A	; 10
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__udivmodsi4>
     986:	60 5d       	subi	r22, 0xD0	; 208
     988:	69 93       	st	Y+, r22
			String++;
			Number/=10;
     98a:	62 2f       	mov	r22, r18
     98c:	73 2f       	mov	r23, r19
     98e:	84 2f       	mov	r24, r20
     990:	95 2f       	mov	r25, r21
		}while(Number);
     992:	61 15       	cp	r22, r1
     994:	71 05       	cpc	r23, r1
     996:	81 05       	cpc	r24, r1
     998:	91 05       	cpc	r25, r1
     99a:	79 f7       	brne	.-34     	; 0x97a <STR_Number2String+0x1e>
		*String = NULL_TERMINATOR;
     99c:	18 82       	st	Y, r1
	}
	STR_StringReverse(SringCpy);
     99e:	c8 01       	movw	r24, r16
     9a0:	0e 94 9b 04 	call	0x936	; 0x936 <STR_StringReverse>
	return 0;
}
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	08 95       	ret

000009b0 <main>:
#define MOTOR_Rotate            5

#define MOTOR_DUTY              (50)

int main(void)
{
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <main+0x6>
     9b6:	00 d0       	rcall	.+0      	; 0x9b8 <main+0x8>
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
   static uint8_t State = OperationStarted;
   static uint8_t u8_Counter = 0;
   
   uint8_t LCD_Init_RetVal = OperationStarted;
   USONIC_ERROR_state_t USonic_State = OperationStarted;
   double64_t distance = 0;
     9bc:	19 82       	std	Y+1, r1	; 0x01
     9be:	1a 82       	std	Y+2, r1	; 0x02
     9c0:	1b 82       	std	Y+3, r1	; 0x03
     9c2:	1c 82       	std	Y+4, r1	; 0x04
   USONIC_Init();
     9c4:	0e 94 04 04 	call	0x808	; 0x808 <USONIC_Init>
   MOTOR_init();
     9c8:	0e 94 30 03 	call	0x660	; 0x660 <MOTOR_init>
int main(void)
{
   static uint8_t State = OperationStarted;
   static uint8_t u8_Counter = 0;
   
   uint8_t LCD_Init_RetVal = OperationStarted;
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
   USONIC_ERROR_state_t USonic_State = OperationStarted;
   double64_t distance = 0;
   USONIC_Init();
   MOTOR_init();
   while(LCD_Init_RetVal != OperationSuccess)
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <main+0x24>
   {
      LCD_Init_RetVal = LCD_Init();
     9d0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_Init>
   uint8_t LCD_Init_RetVal = OperationStarted;
   USONIC_ERROR_state_t USonic_State = OperationStarted;
   double64_t distance = 0;
   USONIC_Init();
   MOTOR_init();
   while(LCD_Init_RetVal != OperationSuccess)
     9d4:	81 11       	cpse	r24, r1
     9d6:	fc cf       	rjmp	.-8      	; 0x9d0 <main+0x20>
   {
      LCD_Init_RetVal = LCD_Init();
   }
   MOTOR_start(MOTOR1, MOTOR_DUTY, MOTOR_FORWARD);
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	62 e3       	ldi	r22, 0x32	; 50
     9dc:	0e 94 60 03 	call	0x6c0	; 0x6c0 <MOTOR_start>
   MOTOR_start(MOTOR2, MOTOR_DUTY, MOTOR_FORWARD);
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	62 e3       	ldi	r22, 0x32	; 50
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <MOTOR_start>
   while(1)
   {
      switch(State)
     9ea:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <State.1757>
     9ee:	84 30       	cpi	r24, 0x04	; 4
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <main+0x44>
     9f2:	65 c0       	rjmp	.+202    	; 0xabe <main+0x10e>
     9f4:	30 f4       	brcc	.+12     	; 0xa02 <main+0x52>
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	91 f1       	breq	.+100    	; 0xa5e <main+0xae>
     9fa:	83 30       	cpi	r24, 0x03	; 3
     9fc:	09 f4       	brne	.+2      	; 0xa00 <main+0x50>
     9fe:	53 c0       	rjmp	.+166    	; 0xaa6 <main+0xf6>
     a00:	f4 cf       	rjmp	.-24     	; 0x9ea <main+0x3a>
     a02:	85 30       	cpi	r24, 0x05	; 5
     a04:	09 f4       	brne	.+2      	; 0xa08 <main+0x58>
     a06:	67 c0       	rjmp	.+206    	; 0xad6 <main+0x126>
     a08:	8f 3f       	cpi	r24, 0xFF	; 255
     a0a:	79 f7       	brne	.-34     	; 0x9ea <main+0x3a>
      {
         case OperationStarted:
            USonic_State = USONIC_GetDistance(&distance);
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	0e 94 1e 04 	call	0x83c	; 0x83c <USONIC_GetDistance>
            if(USonic_State == OK)
     a14:	81 11       	cpse	r24, r1
     a16:	e9 cf       	rjmp	.-46     	; 0x9ea <main+0x3a>
            {
               u8_Counter++;
     a18:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <u8_Counter.1758>
     a1c:	8f 5f       	subi	r24, 0xFF	; 255
     a1e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <u8_Counter.1758>
               if(15 <= u8_Counter)
     a22:	8f 30       	cpi	r24, 0x0F	; 15
     a24:	c0 f0       	brcs	.+48     	; 0xa56 <main+0xa6>
               {
                  u8_Counter = 0;
     a26:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <u8_Counter.1758>
                  while(LCD_SendCommand(LCD_CLR) != OperationSuccess);
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_SendCommand>
     a30:	81 11       	cpse	r24, r1
     a32:	fb cf       	rjmp	.-10     	; 0xa2a <main+0x7a>
                  LCD_SendNumber((uint32_t)(distance));
     a34:	69 81       	ldd	r22, Y+1	; 0x01
     a36:	7a 81       	ldd	r23, Y+2	; 0x02
     a38:	8b 81       	ldd	r24, Y+3	; 0x03
     a3a:	9c 81       	ldd	r25, Y+4	; 0x04
     a3c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
     a40:	0e 94 11 03 	call	0x622	; 0x622 <LCD_SendNumber>
                  while(TIM_DelayUs(TIMER_2, 500) != TIMER_E_SUCCESS);
     a44:	44 ef       	ldi	r20, 0xF4	; 244
     a46:	51 e0       	ldi	r21, 0x01	; 1
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <TIM_DelayUs>
     a52:	81 11       	cpse	r24, r1
     a54:	f7 cf       	rjmp	.-18     	; 0xa44 <main+0x94>
               }
               State = MOTOR_Start;
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1757>
     a5c:	c6 cf       	rjmp	.-116    	; 0x9ea <main+0x3a>
            }
            break;
         case MOTOR_Start:
            if(distance>52)
     a5e:	c9 80       	ldd	r12, Y+1	; 0x01
     a60:	da 80       	ldd	r13, Y+2	; 0x02
     a62:	eb 80       	ldd	r14, Y+3	; 0x03
     a64:	fc 80       	ldd	r15, Y+4	; 0x04
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	40 e5       	ldi	r20, 0x50	; 80
     a6c:	52 e4       	ldi	r21, 0x42	; 66
     a6e:	c7 01       	movw	r24, r14
     a70:	b6 01       	movw	r22, r12
     a72:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__gesf2>
     a76:	18 16       	cp	r1, r24
     a78:	24 f4       	brge	.+8      	; 0xa82 <main+0xd2>
            {
               State = MOTOR_Forward;
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1757>
     a80:	b4 cf       	rjmp	.-152    	; 0x9ea <main+0x3a>
            }
            else if (distance<48)
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e4       	ldi	r20, 0x40	; 64
     a88:	52 e4       	ldi	r21, 0x42	; 66
     a8a:	c7 01       	movw	r24, r14
     a8c:	b6 01       	movw	r22, r12
     a8e:	0e 94 32 0a 	call	0x1464	; 0x1464 <__cmpsf2>
     a92:	88 23       	and	r24, r24
     a94:	24 f4       	brge	.+8      	; 0xa9e <main+0xee>
            {
               State = MOTOR_Backward;
     a96:	84 e0       	ldi	r24, 0x04	; 4
     a98:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1757>
     a9c:	a6 cf       	rjmp	.-180    	; 0x9ea <main+0x3a>
            }
            else
            {
               State = MOTOR_Rotate;
     a9e:	85 e0       	ldi	r24, 0x05	; 5
     aa0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1757>
     aa4:	a2 cf       	rjmp	.-188    	; 0x9ea <main+0x3a>
            }
            break;
         case MOTOR_Forward:
            MOTOR_Update_dir(MOTOR1, MOTOR_FORWARD);
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	0e 94 be 03 	call	0x77c	; 0x77c <MOTOR_Update_dir>
            MOTOR_Update_dir(MOTOR2, MOTOR_FORWARD);
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 be 03 	call	0x77c	; 0x77c <MOTOR_Update_dir>
            State = OperationStarted;
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1757>
            break;
     abc:	96 cf       	rjmp	.-212    	; 0x9ea <main+0x3a>
         case MOTOR_Backward:
            MOTOR_Update_dir(MOTOR1, MOTOR_BACKWARD);
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	0e 94 be 03 	call	0x77c	; 0x77c <MOTOR_Update_dir>
            MOTOR_Update_dir(MOTOR2, MOTOR_BACKWARD);
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	0e 94 be 03 	call	0x77c	; 0x77c <MOTOR_Update_dir>
            State = OperationStarted;
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1757>
            break;
     ad4:	8a cf       	rjmp	.-236    	; 0x9ea <main+0x3a>
         case MOTOR_Rotate:
            MOTOR_Update_dir(MOTOR1, MOTOR_FORWARD);
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	0e 94 be 03 	call	0x77c	; 0x77c <MOTOR_Update_dir>
            MOTOR_Update_dir(MOTOR2, MOTOR_BACKWARD);
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	0e 94 be 03 	call	0x77c	; 0x77c <MOTOR_Update_dir>
            State = OperationStarted;
     ae6:	8f ef       	ldi	r24, 0xFF	; 255
     ae8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <State.1757>
            break;
     aec:	7e cf       	rjmp	.-260    	; 0x9ea <main+0x3a>

00000aee <DIO_SetPinDirection>:

#include "DIO.h"

uint8_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	switch(PortName)
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	d1 f0       	breq	.+52     	; 0xb26 <DIO_SetPinDirection+0x38>
     af2:	28 f0       	brcs	.+10     	; 0xafe <DIO_SetPinDirection+0x10>
     af4:	82 30       	cpi	r24, 0x02	; 2
     af6:	59 f1       	breq	.+86     	; 0xb4e <DIO_SetPinDirection+0x60>
     af8:	83 30       	cpi	r24, 0x03	; 3
     afa:	e9 f1       	breq	.+122    	; 0xb76 <DIO_SetPinDirection+0x88>
     afc:	4f c0       	rjmp	.+158    	; 0xb9c <DIO_SetPinDirection+0xae>
	{
		case PORT_A:
			BIT_WRITE(DDRA,PinNo,PinDirection);
     afe:	2a b3       	in	r18, 0x1a	; 26
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	06 2e       	mov	r0, r22
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <DIO_SetPinDirection+0x1e>
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	0a 94       	dec	r0
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <DIO_SetPinDirection+0x1a>
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <DIO_SetPinDirection+0x2a>
     b14:	44 0f       	add	r20, r20
     b16:	55 1f       	adc	r21, r21
     b18:	6a 95       	dec	r22
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <DIO_SetPinDirection+0x26>
     b1c:	80 95       	com	r24
     b1e:	82 23       	and	r24, r18
     b20:	48 2b       	or	r20, r24
     b22:	4a bb       	out	0x1a, r20	; 26
			break;
     b24:	3b c0       	rjmp	.+118    	; 0xb9c <DIO_SetPinDirection+0xae>
		case PORT_B:
			BIT_WRITE(DDRB,PinNo,PinDirection);
     b26:	27 b3       	in	r18, 0x17	; 23
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	06 2e       	mov	r0, r22
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <DIO_SetPinDirection+0x46>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	0a 94       	dec	r0
     b36:	e2 f7       	brpl	.-8      	; 0xb30 <DIO_SetPinDirection+0x42>
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <DIO_SetPinDirection+0x52>
     b3c:	44 0f       	add	r20, r20
     b3e:	55 1f       	adc	r21, r21
     b40:	6a 95       	dec	r22
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <DIO_SetPinDirection+0x4e>
     b44:	80 95       	com	r24
     b46:	82 23       	and	r24, r18
     b48:	48 2b       	or	r20, r24
     b4a:	47 bb       	out	0x17, r20	; 23
			break;
     b4c:	27 c0       	rjmp	.+78     	; 0xb9c <DIO_SetPinDirection+0xae>
		case PORT_C:
			BIT_WRITE(DDRC,PinNo,PinDirection);
     b4e:	24 b3       	in	r18, 0x14	; 20
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	06 2e       	mov	r0, r22
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <DIO_SetPinDirection+0x6e>
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	0a 94       	dec	r0
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <DIO_SetPinDirection+0x6a>
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <DIO_SetPinDirection+0x7a>
     b64:	44 0f       	add	r20, r20
     b66:	55 1f       	adc	r21, r21
     b68:	6a 95       	dec	r22
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <DIO_SetPinDirection+0x76>
     b6c:	80 95       	com	r24
     b6e:	82 23       	and	r24, r18
     b70:	48 2b       	or	r20, r24
     b72:	44 bb       	out	0x14, r20	; 20
			break;
     b74:	13 c0       	rjmp	.+38     	; 0xb9c <DIO_SetPinDirection+0xae>
		case PORT_D:
			BIT_WRITE(DDRD,PinNo,PinDirection);
     b76:	21 b3       	in	r18, 0x11	; 17
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	06 2e       	mov	r0, r22
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <DIO_SetPinDirection+0x96>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <DIO_SetPinDirection+0x92>
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <DIO_SetPinDirection+0xa2>
     b8c:	44 0f       	add	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <DIO_SetPinDirection+0x9e>
     b94:	80 95       	com	r24
     b96:	82 23       	and	r24, r18
     b98:	48 2b       	or	r20, r24
     b9a:	41 bb       	out	0x11, r20	; 17
			break;
		default:
			break;
	}
	return ERROR_OK;
}
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	08 95       	ret

00000ba0 <DIO_WritePin>:

uint8_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	switch(PortName)
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	d1 f0       	breq	.+52     	; 0xbd8 <DIO_WritePin+0x38>
     ba4:	28 f0       	brcs	.+10     	; 0xbb0 <DIO_WritePin+0x10>
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	59 f1       	breq	.+86     	; 0xc00 <DIO_WritePin+0x60>
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	e9 f1       	breq	.+122    	; 0xc28 <DIO_WritePin+0x88>
     bae:	4f c0       	rjmp	.+158    	; 0xc4e <DIO_WritePin+0xae>
	{
		case PORT_A:
			BIT_WRITE(PORTA,PinNo,PinValue);
     bb0:	2b b3       	in	r18, 0x1b	; 27
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	06 2e       	mov	r0, r22
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <DIO_WritePin+0x1e>
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	0a 94       	dec	r0
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <DIO_WritePin+0x1a>
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <DIO_WritePin+0x2a>
     bc6:	44 0f       	add	r20, r20
     bc8:	55 1f       	adc	r21, r21
     bca:	6a 95       	dec	r22
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <DIO_WritePin+0x26>
     bce:	80 95       	com	r24
     bd0:	82 23       	and	r24, r18
     bd2:	48 2b       	or	r20, r24
     bd4:	4b bb       	out	0x1b, r20	; 27
			break;
     bd6:	3b c0       	rjmp	.+118    	; 0xc4e <DIO_WritePin+0xae>
		case PORT_B:
			BIT_WRITE(PORTB,PinNo,PinValue);
     bd8:	28 b3       	in	r18, 0x18	; 24
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	06 2e       	mov	r0, r22
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <DIO_WritePin+0x46>
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	0a 94       	dec	r0
     be8:	e2 f7       	brpl	.-8      	; 0xbe2 <DIO_WritePin+0x42>
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <DIO_WritePin+0x52>
     bee:	44 0f       	add	r20, r20
     bf0:	55 1f       	adc	r21, r21
     bf2:	6a 95       	dec	r22
     bf4:	e2 f7       	brpl	.-8      	; 0xbee <DIO_WritePin+0x4e>
     bf6:	80 95       	com	r24
     bf8:	82 23       	and	r24, r18
     bfa:	48 2b       	or	r20, r24
     bfc:	48 bb       	out	0x18, r20	; 24
			break;
     bfe:	27 c0       	rjmp	.+78     	; 0xc4e <DIO_WritePin+0xae>
		case PORT_C:
			BIT_WRITE(PORTC,PinNo,PinValue);
     c00:	25 b3       	in	r18, 0x15	; 21
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	06 2e       	mov	r0, r22
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <DIO_WritePin+0x6e>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	0a 94       	dec	r0
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <DIO_WritePin+0x6a>
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <DIO_WritePin+0x7a>
     c16:	44 0f       	add	r20, r20
     c18:	55 1f       	adc	r21, r21
     c1a:	6a 95       	dec	r22
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <DIO_WritePin+0x76>
     c1e:	80 95       	com	r24
     c20:	82 23       	and	r24, r18
     c22:	48 2b       	or	r20, r24
     c24:	45 bb       	out	0x15, r20	; 21
			break;
     c26:	13 c0       	rjmp	.+38     	; 0xc4e <DIO_WritePin+0xae>
		case PORT_D:
			BIT_WRITE(PORTD,PinNo,PinValue);
     c28:	22 b3       	in	r18, 0x12	; 18
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	06 2e       	mov	r0, r22
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <DIO_WritePin+0x96>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <DIO_WritePin+0x92>
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_WritePin+0xa2>
     c3e:	44 0f       	add	r20, r20
     c40:	55 1f       	adc	r21, r21
     c42:	6a 95       	dec	r22
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <DIO_WritePin+0x9e>
     c46:	80 95       	com	r24
     c48:	82 23       	and	r24, r18
     c4a:	48 2b       	or	r20, r24
     c4c:	42 bb       	out	0x12, r20	; 18
			break;
		default:
			break;
	}	
	return ERROR_OK;
}
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	08 95       	ret

00000c52 <ICU_Reset>:



static uint8_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	switch(ICUNumber)
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	69 f4       	brne	.+26     	; 0xc70 <ICU_Reset+0x1e>
	{
		#if  ICU1
			case ICU_1:
				REG_WRITE(TCNT1,0x0000);
     c56:	1d bc       	out	0x2d, r1	; 45
     c58:	1c bc       	out	0x2c, r1	; 44
				BIT_WRITE(TCCR1B,ICES1,ICUEdgeDetector);
     c5a:	8e b5       	in	r24, 0x2e	; 46
     c5c:	90 e4       	ldi	r25, 0x40	; 64
     c5e:	69 9f       	mul	r22, r25
     c60:	b0 01       	movw	r22, r0
     c62:	11 24       	eor	r1, r1
     c64:	8f 7b       	andi	r24, 0xBF	; 191
     c66:	68 2b       	or	r22, r24
     c68:	6e bd       	out	0x2e, r22	; 46
				BIT_WRITE(TIFR,TOV1,BIT_HIGH);
     c6a:	88 b7       	in	r24, 0x38	; 56
				BIT_WRITE(TIFR,ICF1,BIT_HIGH);
     c6c:	84 62       	ori	r24, 0x24	; 36
     c6e:	88 bf       	out	0x38, r24	; 56
				break;
		#endif
		default:
			break;
	}		
}
     c70:	08 95       	ret

00000c72 <ICU_CalculateTimeOn>:

static uint8_t ICU_CalculateTimeOn(uint8_t ICUNumber,ptr_double64_t TimeOnValue)
{
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
	uint64_t CounterNumber;
	switch(ICUNumber)
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	f9 f4       	brne	.+62     	; 0xcb8 <ICU_CalculateTimeOn+0x46>
     c7a:	eb 01       	movw	r28, r22
	{
		#if  ICU1
			case ICU_1:
				CounterNumber=(uint64_t)(REG_GET(ICR1)+(OverflowCounter*ICU1_MAX_COUNT));
     c7c:	e6 b5       	in	r30, 0x26	; 38
     c7e:	f7 b5       	in	r31, 0x27	; 39
     c80:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <OverflowCounter>
     c84:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <OverflowCounter+0x1>
     c88:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <OverflowCounter+0x2>
     c8c:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <OverflowCounter+0x3>
     c90:	af ef       	ldi	r26, 0xFF	; 255
     c92:	bf ef       	ldi	r27, 0xFF	; 255
     c94:	0e 94 33 0c 	call	0x1866	; 0x1866 <__muluhisi3>
     c98:	6e 0f       	add	r22, r30
     c9a:	7f 1f       	adc	r23, r31
     c9c:	81 1d       	adc	r24, r1
     c9e:	91 1d       	adc	r25, r1
				*TimeOnValue = (CounterNumber*((double)ICU1_PRESCALER/F_CPU));
     ca0:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__floatunsisf>
     ca4:	2d eb       	ldi	r18, 0xBD	; 189
     ca6:	37 e3       	ldi	r19, 0x37	; 55
     ca8:	46 e8       	ldi	r20, 0x86	; 134
     caa:	58 e3       	ldi	r21, 0x38	; 56
     cac:	0e 94 8f 0b 	call	0x171e	; 0x171e <__mulsf3>
     cb0:	68 83       	st	Y, r22
     cb2:	79 83       	std	Y+1, r23	; 0x01
     cb4:	8a 83       	std	Y+2, r24	; 0x02
     cb6:	9b 83       	std	Y+3, r25	; 0x03
				break;
		#endif
		default:
			break;
	}	
}
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <ICU_Init>:

uint8_t ICU_Init(uint8_t ICUNumber)
{
	switch(ICUNumber)
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	61 f4       	brne	.+24     	; 0xcda <ICU_Init+0x1c>
	{
		#if  ICU1
			case ICU_1:
				DIO_SetPinDirection(ICU1_PORT,ICU1_PIN,PIN_INPUT);
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	66 e0       	ldi	r22, 0x06	; 6
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	0e 94 77 05 	call	0xaee	; 0xaee <DIO_SetPinDirection>
				TWO_BITS_WRITE(TCCR1A,WGM10,TWO_BITS_GET(ICU1_MODE,BIT0));
     ccc:	8f b5       	in	r24, 0x2f	; 47
     cce:	8c 7f       	andi	r24, 0xFC	; 252
     cd0:	8f bd       	out	0x2f, r24	; 47
				TWO_BITS_WRITE(TCCR1B,WGM12,TWO_BITS_GET(ICU1_MODE,BIT2));
     cd2:	8e b5       	in	r24, 0x2e	; 46
				THREE_BITS_WRITE(TCCR1B,CS10,ICU1_CLK_SOURCE);
     cd4:	80 7e       	andi	r24, 0xE0	; 224
     cd6:	85 60       	ori	r24, 0x05	; 5
     cd8:	8e bd       	out	0x2e, r24	; 46
				break;
		#endif
		default:
			break;
	}	
}
     cda:	08 95       	ret

00000cdc <ICU_UpdateTimeOn>:

uint8_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
	switch(ICUNumber)
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	09 f0       	breq	.+2      	; 0xce6 <ICU_UpdateTimeOn+0xa>
     ce4:	43 c0       	rjmp	.+134    	; 0xd6c <ICU_UpdateTimeOn+0x90>
     ce6:	eb 01       	movw	r28, r22
	{
		#if  ICU1
			case ICU_1:
			{
				switch(*ICUState)
     ce8:	88 81       	ld	r24, Y
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	59 f0       	breq	.+22     	; 0xd04 <ICU_UpdateTimeOn+0x28>
     cee:	18 f0       	brcs	.+6      	; 0xcf6 <ICU_UpdateTimeOn+0x1a>
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	d1 f0       	breq	.+52     	; 0xd28 <ICU_UpdateTimeOn+0x4c>
     cf4:	3b c0       	rjmp	.+118    	; 0xd6c <ICU_UpdateTimeOn+0x90>
				{
					case START_STATE:
					{
						ICU_Reset(ICU_1,ICU1_RISING_EDGE);
     cf6:	61 e0       	ldi	r22, 0x01	; 1
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	0e 94 29 06 	call	0xc52	; 0xc52 <ICU_Reset>
						*ICUState=WAITING_RISING_EDGE_STATE;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	88 83       	st	Y, r24
						break;
     d02:	34 c0       	rjmp	.+104    	; 0xd6c <ICU_UpdateTimeOn+0x90>
					}
					case WAITING_RISING_EDGE_STATE:
					{
						if(1==(BIT_GET(TIFR,ICF1)))
     d04:	08 b6       	in	r0, 0x38	; 56
     d06:	05 fe       	sbrs	r0, 5
     d08:	31 c0       	rjmp	.+98     	; 0xd6c <ICU_UpdateTimeOn+0x90>
						{
							ICU_Reset(ICU_1,ICU1_FALLING_EDGE);
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	0e 94 29 06 	call	0xc52	; 0xc52 <ICU_Reset>
							OverflowCounter=0;
     d12:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <OverflowCounter>
     d16:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <OverflowCounter+0x1>
     d1a:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <OverflowCounter+0x2>
     d1e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <OverflowCounter+0x3>
							*ICUState=WAITING_FALLING_EDGE_STATE;
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	88 83       	st	Y, r24
     d26:	22 c0       	rjmp	.+68     	; 0xd6c <ICU_UpdateTimeOn+0x90>
						}
						break;
					}
					case WAITING_FALLING_EDGE_STATE:
					{
						if(1==(BIT_GET(TIFR,TOV1)))
     d28:	08 b6       	in	r0, 0x38	; 56
     d2a:	02 fe       	sbrs	r0, 2
     d2c:	16 c0       	rjmp	.+44     	; 0xd5a <ICU_UpdateTimeOn+0x7e>
						{
							OverflowCounter++;
     d2e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <OverflowCounter>
     d32:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <OverflowCounter+0x1>
     d36:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <OverflowCounter+0x2>
     d3a:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <OverflowCounter+0x3>
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	a1 1d       	adc	r26, r1
     d42:	b1 1d       	adc	r27, r1
     d44:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <OverflowCounter>
     d48:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <OverflowCounter+0x1>
     d4c:	a0 93 76 00 	sts	0x0076, r26	; 0x800076 <OverflowCounter+0x2>
     d50:	b0 93 77 00 	sts	0x0077, r27	; 0x800077 <OverflowCounter+0x3>
							BIT_WRITE(TIFR,TOV1,BIT_HIGH);
     d54:	88 b7       	in	r24, 0x38	; 56
     d56:	84 60       	ori	r24, 0x04	; 4
     d58:	88 bf       	out	0x38, r24	; 56
						}	
						
						if(1==(BIT_GET(TIFR,ICF1)))
     d5a:	08 b6       	in	r0, 0x38	; 56
     d5c:	05 fe       	sbrs	r0, 5
     d5e:	06 c0       	rjmp	.+12     	; 0xd6c <ICU_UpdateTimeOn+0x90>
						{
							ICU_CalculateTimeOn(ICU_1,TimeOnValue);
     d60:	ba 01       	movw	r22, r20
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	0e 94 39 06 	call	0xc72	; 0xc72 <ICU_CalculateTimeOn>
							*ICUState=END_STATE;
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	88 83       	st	Y, r24
			}
		#endif
		default:
			break;
	}		
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <PwmInit>:
			#endif
			break;
		default:
			break;			
	}	
}
     d72:	83 b7       	in	r24, 0x33	; 51
     d74:	88 64       	ori	r24, 0x48	; 72
     d76:	8f 7c       	andi	r24, 0xCF	; 207
     d78:	80 62       	ori	r24, 0x20	; 32
     d7a:	83 bf       	out	0x33, r24	; 51
     d7c:	08 95       	ret

00000d7e <PwmStart>:
     d7e:	81 11       	cpse	r24, r1
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <PwmStart+0xc>
     d82:	83 b7       	in	r24, 0x33	; 51
     d84:	88 7f       	andi	r24, 0xF8	; 248
     d86:	85 60       	ori	r24, 0x05	; 5
     d88:	83 bf       	out	0x33, r24	; 51
     d8a:	08 95       	ret

00000d8c <PwmConnect>:
     d8c:	81 11       	cpse	r24, r1
     d8e:	04 c0       	rjmp	.+8      	; 0xd98 <PwmConnect+0xc>
     d90:	83 b7       	in	r24, 0x33	; 51
     d92:	8f 7c       	andi	r24, 0xCF	; 207
     d94:	80 62       	ori	r24, 0x20	; 32
     d96:	83 bf       	out	0x33, r24	; 51
     d98:	08 95       	ret

00000d9a <PwmSetDuty>:

uint8_t PwmSetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	switch(PwmChannelNumber)
     d9a:	81 11       	cpse	r24, r1
     d9c:	1a c0       	rjmp	.+52     	; 0xdd2 <PwmSetDuty+0x38>
	{
		case PWM_CHANNEL_OC0:
			#if OC0
				#if OC0_WAVEFORM_MODE == NON_INVERTING	
					OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__floatsisf>
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	48 ec       	ldi	r20, 0xC8	; 200
     dae:	52 e4       	ldi	r21, 0x42	; 66
     db0:	0e 94 37 0a 	call	0x146e	; 0x146e <__divsf3>
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e8       	ldi	r20, 0x80	; 128
     dba:	53 e4       	ldi	r21, 0x43	; 67
     dbc:	0e 94 8f 0b 	call	0x171e	; 0x171e <__mulsf3>
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e8       	ldi	r20, 0x80	; 128
     dc6:	5f e3       	ldi	r21, 0x3F	; 63
     dc8:	0e 94 c5 09 	call	0x138a	; 0x138a <__subsf3>
     dcc:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
     dd0:	6c bf       	out	0x3c, r22	; 60
			#endif
			break;
		default:
			break;			
	}
     dd2:	08 95       	ret

00000dd4 <GetFreqPrescaleRatio>:
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return TIMER_E_SUCCESS;
}
     dd4:	82 30       	cpi	r24, 0x02	; 2
     dd6:	08 f0       	brcs	.+2      	; 0xdda <GetFreqPrescaleRatio+0x6>
     dd8:	49 c0       	rjmp	.+146    	; 0xe6c <GetFreqPrescaleRatio+0x98>
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	fc 01       	movw	r30, r24
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	8e 0f       	add	r24, r30
     de4:	9f 1f       	adc	r25, r31
     de6:	fc 01       	movw	r30, r24
     de8:	ec 59       	subi	r30, 0x9C	; 156
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	82 81       	ldd	r24, Z+2	; 0x02
     dee:	83 30       	cpi	r24, 0x03	; 3
     df0:	f9 f0       	breq	.+62     	; 0xe30 <GetFreqPrescaleRatio+0x5c>
     df2:	28 f4       	brcc	.+10     	; 0xdfe <GetFreqPrescaleRatio+0x2a>
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	41 f0       	breq	.+16     	; 0xe08 <GetFreqPrescaleRatio+0x34>
     df8:	82 30       	cpi	r24, 0x02	; 2
     dfa:	81 f0       	breq	.+32     	; 0xe1c <GetFreqPrescaleRatio+0x48>
     dfc:	96 c0       	rjmp	.+300    	; 0xf2a <GetFreqPrescaleRatio+0x156>
     dfe:	84 30       	cpi	r24, 0x04	; 4
     e00:	09 f1       	breq	.+66     	; 0xe44 <GetFreqPrescaleRatio+0x70>
     e02:	85 30       	cpi	r24, 0x05	; 5
     e04:	49 f1       	breq	.+82     	; 0xe58 <GetFreqPrescaleRatio+0x84>
     e06:	91 c0       	rjmp	.+290    	; 0xf2a <GetFreqPrescaleRatio+0x156>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a0 e8       	ldi	r26, 0x80	; 128
     e0e:	bd e3       	ldi	r27, 0x3D	; 61
     e10:	fb 01       	movw	r30, r22
     e12:	80 83       	st	Z, r24
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	a2 83       	std	Z+2, r26	; 0x02
     e18:	b3 83       	std	Z+3, r27	; 0x03
     e1a:	86 c0       	rjmp	.+268    	; 0xf28 <GetFreqPrescaleRatio+0x154>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	a0 e0       	ldi	r26, 0x00	; 0
     e22:	bf e3       	ldi	r27, 0x3F	; 63
     e24:	fb 01       	movw	r30, r22
     e26:	80 83       	st	Z, r24
     e28:	91 83       	std	Z+1, r25	; 0x01
     e2a:	a2 83       	std	Z+2, r26	; 0x02
     e2c:	b3 83       	std	Z+3, r27	; 0x03
     e2e:	7c c0       	rjmp	.+248    	; 0xf28 <GetFreqPrescaleRatio+0x154>
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	a0 e8       	ldi	r26, 0x80	; 128
     e36:	b0 e4       	ldi	r27, 0x40	; 64
     e38:	fb 01       	movw	r30, r22
     e3a:	80 83       	st	Z, r24
     e3c:	91 83       	std	Z+1, r25	; 0x01
     e3e:	a2 83       	std	Z+2, r26	; 0x02
     e40:	b3 83       	std	Z+3, r27	; 0x03
     e42:	72 c0       	rjmp	.+228    	; 0xf28 <GetFreqPrescaleRatio+0x154>
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	a0 e8       	ldi	r26, 0x80	; 128
     e4a:	b1 e4       	ldi	r27, 0x41	; 65
     e4c:	fb 01       	movw	r30, r22
     e4e:	80 83       	st	Z, r24
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	a2 83       	std	Z+2, r26	; 0x02
     e54:	b3 83       	std	Z+3, r27	; 0x03
     e56:	68 c0       	rjmp	.+208    	; 0xf28 <GetFreqPrescaleRatio+0x154>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	a0 e8       	ldi	r26, 0x80	; 128
     e5e:	b2 e4       	ldi	r27, 0x42	; 66
     e60:	fb 01       	movw	r30, r22
     e62:	80 83       	st	Z, r24
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	a2 83       	std	Z+2, r26	; 0x02
     e68:	b3 83       	std	Z+3, r27	; 0x03
     e6a:	5e c0       	rjmp	.+188    	; 0xf28 <GetFreqPrescaleRatio+0x154>
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	09 f0       	breq	.+2      	; 0xe72 <GetFreqPrescaleRatio+0x9e>
     e70:	5b c0       	rjmp	.+182    	; 0xf28 <GetFreqPrescaleRatio+0x154>
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	fc 01       	movw	r30, r24
     e76:	ee 0f       	add	r30, r30
     e78:	ff 1f       	adc	r31, r31
     e7a:	8e 0f       	add	r24, r30
     e7c:	9f 1f       	adc	r25, r31
     e7e:	fc 01       	movw	r30, r24
     e80:	ec 59       	subi	r30, 0x9C	; 156
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	e2 81       	ldd	r30, Z+2	; 0x02
     e86:	8e 2f       	mov	r24, r30
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	fc 01       	movw	r30, r24
     e8c:	31 97       	sbiw	r30, 0x01	; 1
     e8e:	e7 30       	cpi	r30, 0x07	; 7
     e90:	f1 05       	cpc	r31, r1
     e92:	08 f0       	brcs	.+2      	; 0xe96 <GetFreqPrescaleRatio+0xc2>
     e94:	4a c0       	rjmp	.+148    	; 0xf2a <GetFreqPrescaleRatio+0x156>
     e96:	e6 5d       	subi	r30, 0xD6	; 214
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__tablejump2__>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	a0 e8       	ldi	r26, 0x80	; 128
     ea4:	bd e3       	ldi	r27, 0x3D	; 61
     ea6:	fb 01       	movw	r30, r22
     ea8:	80 83       	st	Z, r24
     eaa:	91 83       	std	Z+1, r25	; 0x01
     eac:	a2 83       	std	Z+2, r26	; 0x02
     eae:	b3 83       	std	Z+3, r27	; 0x03
     eb0:	3b c0       	rjmp	.+118    	; 0xf28 <GetFreqPrescaleRatio+0x154>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	a0 e0       	ldi	r26, 0x00	; 0
     eb8:	bf e3       	ldi	r27, 0x3F	; 63
     eba:	fb 01       	movw	r30, r22
     ebc:	80 83       	st	Z, r24
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	a2 83       	std	Z+2, r26	; 0x02
     ec2:	b3 83       	std	Z+3, r27	; 0x03
     ec4:	31 c0       	rjmp	.+98     	; 0xf28 <GetFreqPrescaleRatio+0x154>
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	a0 e0       	ldi	r26, 0x00	; 0
     ecc:	b0 e4       	ldi	r27, 0x40	; 64
     ece:	fb 01       	movw	r30, r22
     ed0:	80 83       	st	Z, r24
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	a2 83       	std	Z+2, r26	; 0x02
     ed6:	b3 83       	std	Z+3, r27	; 0x03
     ed8:	27 c0       	rjmp	.+78     	; 0xf28 <GetFreqPrescaleRatio+0x154>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	a0 e8       	ldi	r26, 0x80	; 128
     ee0:	b0 e4       	ldi	r27, 0x40	; 64
     ee2:	fb 01       	movw	r30, r22
     ee4:	80 83       	st	Z, r24
     ee6:	91 83       	std	Z+1, r25	; 0x01
     ee8:	a2 83       	std	Z+2, r26	; 0x02
     eea:	b3 83       	std	Z+3, r27	; 0x03
     eec:	1d c0       	rjmp	.+58     	; 0xf28 <GetFreqPrescaleRatio+0x154>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	b1 e4       	ldi	r27, 0x41	; 65
     ef6:	fb 01       	movw	r30, r22
     ef8:	80 83       	st	Z, r24
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	a2 83       	std	Z+2, r26	; 0x02
     efe:	b3 83       	std	Z+3, r27	; 0x03
     f00:	13 c0       	rjmp	.+38     	; 0xf28 <GetFreqPrescaleRatio+0x154>
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	a0 e8       	ldi	r26, 0x80	; 128
     f08:	b1 e4       	ldi	r27, 0x41	; 65
     f0a:	fb 01       	movw	r30, r22
     f0c:	80 83       	st	Z, r24
     f0e:	91 83       	std	Z+1, r25	; 0x01
     f10:	a2 83       	std	Z+2, r26	; 0x02
     f12:	b3 83       	std	Z+3, r27	; 0x03
     f14:	09 c0       	rjmp	.+18     	; 0xf28 <GetFreqPrescaleRatio+0x154>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a0 e8       	ldi	r26, 0x80	; 128
     f1c:	b2 e4       	ldi	r27, 0x42	; 66
     f1e:	fb 01       	movw	r30, r22
     f20:	80 83       	st	Z, r24
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	a2 83       	std	Z+2, r26	; 0x02
     f26:	b3 83       	std	Z+3, r27	; 0x03
     f28:	08 95       	ret
     f2a:	8c ef       	ldi	r24, 0xFC	; 252
     f2c:	08 95       	ret

00000f2e <TIM_Start>:
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	71 f0       	breq	.+28     	; 0xf4e <TIM_Start+0x20>
     f32:	18 f0       	brcs	.+6      	; 0xf3a <TIM_Start+0xc>
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	31 f0       	breq	.+12     	; 0xf44 <TIM_Start+0x16>
     f38:	1e c0       	rjmp	.+60     	; 0xf76 <TIM_Start+0x48>
     f3a:	e2 e5       	ldi	r30, 0x52	; 82
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	a3 e5       	ldi	r26, 0x53	; 83
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <TIM_Start+0x28>
     f44:	e4 e4       	ldi	r30, 0x44	; 68
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	a5 e4       	ldi	r26, 0x45	; 69
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	04 c0       	rjmp	.+8      	; 0xf56 <TIM_Start+0x28>
     f4e:	ec e4       	ldi	r30, 0x4C	; 76
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	ae e4       	ldi	r26, 0x4E	; 78
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	60 83       	st	Z, r22
     f58:	2c 91       	ld	r18, X
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	fc 01       	movw	r30, r24
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	8e 0f       	add	r24, r30
     f64:	9f 1f       	adc	r25, r31
     f66:	fc 01       	movw	r30, r24
     f68:	ec 59       	subi	r30, 0x9C	; 156
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	82 81       	ldd	r24, Z+2	; 0x02
     f6e:	82 2b       	or	r24, r18
     f70:	8c 93       	st	X, r24
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	08 95       	ret
     f76:	8e ef       	ldi	r24, 0xFE	; 254
     f78:	08 95       	ret

00000f7a <TIM_GetStatus>:
*
* @return function error state.
*/
TIMER_ERROR_state_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
     f7a:	61 15       	cp	r22, r1
     f7c:	71 05       	cpc	r23, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <TIM_GetStatus+0x8>
     f80:	7b c0       	rjmp	.+246    	; 0x1078 <TIM_GetStatus+0xfe>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	41 f1       	breq	.+80     	; 0xfd6 <TIM_GetStatus+0x5c>
     f86:	20 f0       	brcs	.+8      	; 0xf90 <TIM_GetStatus+0x16>
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	09 f4       	brne	.+2      	; 0xf8e <TIM_GetStatus+0x14>
     f8c:	53 c0       	rjmp	.+166    	; 0x1034 <TIM_GetStatus+0xba>
     f8e:	76 c0       	rjmp	.+236    	; 0x107c <TIM_GetStatus+0x102>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	fc 01       	movw	r30, r24
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	8e 0f       	add	r24, r30
     f9a:	9f 1f       	adc	r25, r31
     f9c:	fc 01       	movw	r30, r24
     f9e:	ec 59       	subi	r30, 0x9C	; 156
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	80 81       	ld	r24, Z
     fa4:	81 11       	cpse	r24, r1
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <TIM_GetStatus+0x40>
         {
            if( TIMER_INT_FLAG & TIMER_0_OVERFLOW_FLAG )
     fa8:	08 b6       	in	r0, 0x38	; 56
     faa:	00 fe       	sbrs	r0, 0
     fac:	69 c0       	rjmp	.+210    	; 0x1080 <TIM_GetStatus+0x106>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
     fae:	fb 01       	movw	r30, r22
     fb0:	10 82       	st	Z, r1
               TIMER_INT_FLAG |= TIMER_0_OVERFLOW_FLAG;
     fb2:	98 b7       	in	r25, 0x38	; 56
     fb4:	91 60       	ori	r25, 0x01	; 1
     fb6:	98 bf       	out	0x38, r25	; 56
     fb8:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
     fba:	88 30       	cpi	r24, 0x08	; 8
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <TIM_GetStatus+0x46>
     fbe:	62 c0       	rjmp	.+196    	; 0x1084 <TIM_GetStatus+0x10a>
         {
            if(TIMER_INT_FLAG & TIMER_0_COMPARE_FLAG)
     fc0:	08 b6       	in	r0, 0x38	; 56
     fc2:	01 fe       	sbrs	r0, 1
     fc4:	61 c0       	rjmp	.+194    	; 0x1088 <TIM_GetStatus+0x10e>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	fb 01       	movw	r30, r22
     fca:	80 83       	st	Z, r24
               TIMER_INT_FLAG |= TIMER_0_COMPARE_FLAG;
     fcc:	88 b7       	in	r24, 0x38	; 56
     fce:	82 60       	ori	r24, 0x02	; 2
     fd0:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	fc 01       	movw	r30, r24
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	8e 0f       	add	r24, r30
     fe0:	9f 1f       	adc	r25, r31
     fe2:	fc 01       	movw	r30, r24
     fe4:	ec 59       	subi	r30, 0x9C	; 156
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	80 81       	ld	r24, Z
     fea:	81 11       	cpse	r24, r1
     fec:	09 c0       	rjmp	.+18     	; 0x1000 <TIM_GetStatus+0x86>
         {
            if( TIMER_INT_FLAG & TIMER_1_OVERFLOW_FLAG )
     fee:	08 b6       	in	r0, 0x38	; 56
     ff0:	02 fe       	sbrs	r0, 2
     ff2:	4c c0       	rjmp	.+152    	; 0x108c <TIM_GetStatus+0x112>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
     ff4:	fb 01       	movw	r30, r22
     ff6:	10 82       	st	Z, r1
               TIMER_INT_FLAG |= TIMER_1_OVERFLOW_FLAG;
     ff8:	98 b7       	in	r25, 0x38	; 56
     ffa:	94 60       	ori	r25, 0x04	; 4
     ffc:	98 bf       	out	0x38, r25	; 56
     ffe:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1000:	88 30       	cpi	r24, 0x08	; 8
    1002:	09 f0       	breq	.+2      	; 0x1006 <TIM_GetStatus+0x8c>
    1004:	45 c0       	rjmp	.+138    	; 0x1090 <TIM_GetStatus+0x116>
         {
            if(TIMER_INT_FLAG & TIMER_1A_COMPARE_FLAG)
    1006:	98 b7       	in	r25, 0x38	; 56
    1008:	89 2f       	mov	r24, r25
    100a:	80 71       	andi	r24, 0x10	; 16
    100c:	94 ff       	sbrs	r25, 4
    100e:	08 c0       	rjmp	.+16     	; 0x1020 <TIM_GetStatus+0xa6>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	fb 01       	movw	r30, r22
    1014:	80 83       	st	Z, r24
               TIMER_INT_FLAG |= TIMER_1A_COMPARE_FLAG;
    1016:	88 b7       	in	r24, 0x38	; 56
    1018:	80 61       	ori	r24, 0x10	; 16
    101a:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	08 95       	ret
            if(TIMER_INT_FLAG & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIMER_INT_FLAG |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIMER_INT_FLAG & TIMER_1B_COMPARE_FLAG)
    1020:	08 b6       	in	r0, 0x38	; 56
    1022:	03 fe       	sbrs	r0, 3
    1024:	37 c0       	rjmp	.+110    	; 0x1094 <TIM_GetStatus+0x11a>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	fb 01       	movw	r30, r22
    102a:	90 83       	st	Z, r25
               TIMER_INT_FLAG |= TIMER_1B_COMPARE_FLAG;
    102c:	98 b7       	in	r25, 0x38	; 56
    102e:	98 60       	ori	r25, 0x08	; 8
    1030:	98 bf       	out	0x38, r25	; 56
    1032:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	fc 01       	movw	r30, r24
    1038:	ee 0f       	add	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	8e 0f       	add	r24, r30
    103e:	9f 1f       	adc	r25, r31
    1040:	fc 01       	movw	r30, r24
    1042:	ec 59       	subi	r30, 0x9C	; 156
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	81 11       	cpse	r24, r1
    104a:	09 c0       	rjmp	.+18     	; 0x105e <TIM_GetStatus+0xe4>
         {
            if( TIMER_INT_FLAG & TIMER_2_OVERFLOW_FLAG )
    104c:	08 b6       	in	r0, 0x38	; 56
    104e:	06 fe       	sbrs	r0, 6
    1050:	23 c0       	rjmp	.+70     	; 0x1098 <TIM_GetStatus+0x11e>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1052:	fb 01       	movw	r30, r22
    1054:	10 82       	st	Z, r1
               TIMER_INT_FLAG |= TIMER_2_OVERFLOW_FLAG;
    1056:	98 b7       	in	r25, 0x38	; 56
    1058:	90 64       	ori	r25, 0x40	; 64
    105a:	98 bf       	out	0x38, r25	; 56
    105c:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    105e:	88 30       	cpi	r24, 0x08	; 8
    1060:	e9 f4       	brne	.+58     	; 0x109c <TIM_GetStatus+0x122>
         {
            if(TIMER_INT_FLAG & TIMER_2_COMPARE_FLAG)
    1062:	08 b6       	in	r0, 0x38	; 56
    1064:	07 fe       	sbrs	r0, 7
    1066:	1c c0       	rjmp	.+56     	; 0x10a0 <TIM_GetStatus+0x126>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	fb 01       	movw	r30, r22
    106c:	80 83       	st	Z, r24
               TIMER_INT_FLAG |= TIMER_2_COMPARE_FLAG;
    106e:	88 b7       	in	r24, 0x38	; 56
    1070:	80 68       	ori	r24, 0x80	; 128
    1072:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	08 95       	ret
*/
TIMER_ERROR_state_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    107c:	8e ef       	ldi	r24, 0xFE	; 254
    107e:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIMER_INT_FLAG |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1080:	8d ef       	ldi	r24, 0xFD	; 253
    1082:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIMER_INT_FLAG |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1088:	8d ef       	ldi	r24, 0xFD	; 253
    108a:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIMER_INT_FLAG |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    108c:	8d ef       	ldi	r24, 0xFD	; 253
    108e:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIMER_INT_FLAG |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1094:	8d ef       	ldi	r24, 0xFD	; 253
    1096:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIMER_INT_FLAG |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1098:	8d ef       	ldi	r24, 0xFD	; 253
    109a:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIMER_INT_FLAG |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    10a0:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
}
    10a2:	08 95       	ret

000010a4 <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
TIMER_ERROR_state_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
    10a4:	8f 92       	push	r8
    10a6:	9f 92       	push	r9
    10a8:	af 92       	push	r10
    10aa:	bf 92       	push	r11
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <TIM_DelayUs+0x18>
    10bc:	00 d0       	rcall	.+0      	; 0x10be <TIM_DelayUs+0x1a>
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	18 2f       	mov	r17, r24
    10c4:	6a 01       	movw	r12, r20
    10c6:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	08 f0       	brcs	.+2      	; 0x10ce <TIM_DelayUs+0x2a>
    10cc:	8a c0       	rjmp	.+276    	; 0x11e2 <TIM_DelayUs+0x13e>
   static uint8_t u8_Remindar = 0;
   static Enu_DelayStateMachine Enu_State = Ready;
   TIMER_ERROR_state_t Timer_state;
   
   /* Ready state */
   if(Ready == Enu_State)
    10ce:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <Enu_State.1685>
    10d2:	81 11       	cpse	r24, r1
    10d4:	48 c0       	rjmp	.+144    	; 0x1166 <TIM_DelayUs+0xc2>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    10d6:	be 01       	movw	r22, r28
    10d8:	6f 5f       	subi	r22, 0xFF	; 255
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	81 2f       	mov	r24, r17
    10de:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    10e2:	8c 3f       	cpi	r24, 0xFC	; 252
    10e4:	f1 f1       	breq	.+124    	; 0x1162 <TIM_DelayUs+0xbe>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    10e6:	89 80       	ldd	r8, Y+1	; 0x01
    10e8:	9a 80       	ldd	r9, Y+2	; 0x02
    10ea:	ab 80       	ldd	r10, Y+3	; 0x03
    10ec:	bc 80       	ldd	r11, Y+4	; 0x04
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	a9 01       	movw	r20, r18
    10f4:	c5 01       	movw	r24, r10
    10f6:	b4 01       	movw	r22, r8
    10f8:	0e 94 32 0a 	call	0x1464	; 0x1464 <__cmpsf2>
    10fc:	88 23       	and	r24, r24
    10fe:	61 f0       	breq	.+24     	; 0x1118 <TIM_DelayUs+0x74>
      {
         TIM_Delay /= f32_FreqRatio;
    1100:	c7 01       	movw	r24, r14
    1102:	b6 01       	movw	r22, r12
    1104:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__floatunsisf>
    1108:	a5 01       	movw	r20, r10
    110a:	94 01       	movw	r18, r8
    110c:	0e 94 37 0a 	call	0x146e	; 0x146e <__divsf3>
    1110:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
    1114:	6b 01       	movw	r12, r22
    1116:	7c 01       	movw	r14, r24
      }
      
      /* Calculate how many overflows needed */
      u32_Overflows = TIM_Delay / 256;
    1118:	bb 27       	eor	r27, r27
    111a:	af 2d       	mov	r26, r15
    111c:	9e 2d       	mov	r25, r14
    111e:	8d 2d       	mov	r24, r13
    1120:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <u32_Overflows.1682>
    1124:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <u32_Overflows.1682+0x1>
    1128:	a0 93 83 00 	sts	0x0083, r26	; 0x800083 <u32_Overflows.1682+0x2>
    112c:	b0 93 84 00 	sts	0x0084, r27	; 0x800084 <u32_Overflows.1682+0x3>
      u8_Remindar = TIM_Delay % 256;
    1130:	c0 92 80 00 	sts	0x0080, r12	; 0x800080 <u8_Remindar.1684>
      
      if(u32_Overflows == 0)
    1134:	89 2b       	or	r24, r25
    1136:	8a 2b       	or	r24, r26
    1138:	8b 2b       	or	r24, r27
    113a:	49 f4       	brne	.+18     	; 0x114e <TIM_DelayUs+0xaa>
      {
         u8_OverflowsComplete = HIGH;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <u8_OverflowsComplete.1683>
         TIM_Start(TIM_channel, u8_Remindar);
    1142:	6c 2d       	mov	r22, r12
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	81 2f       	mov	r24, r17
    1148:	0e 94 97 07 	call	0xf2e	; 0xf2e <TIM_Start>
    114c:	05 c0       	rjmp	.+10     	; 0x1158 <TIM_DelayUs+0xb4>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, 255);
    114e:	6f ef       	ldi	r22, 0xFF	; 255
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	81 2f       	mov	r24, r17
    1154:	0e 94 97 07 	call	0xf2e	; 0xf2e <TIM_Start>
      }     
      /* Change to timer pending state */ 
      Enu_State = Pending;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <Enu_State.1685>
      return TIMER_E_PENDING;
    115e:	8d ef       	ldi	r24, 0xFD	; 253
    1160:	41 c0       	rjmp	.+130    	; 0x11e4 <TIM_DelayUs+0x140>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1162:	8c ef       	ldi	r24, 0xFC	; 252
    1164:	3f c0       	rjmp	.+126    	; 0x11e4 <TIM_DelayUs+0x140>
      /* Change to timer pending state */ 
      Enu_State = Pending;
      return TIMER_E_PENDING;
   }
   /* Pending state */
   else if(Pending == Enu_State)
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	d9 f5       	brne	.+118    	; 0x11e0 <TIM_DelayUs+0x13c>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state = TIM_GetStatus(TIM_channel, &u8_FlagState);
    116a:	be 01       	movw	r22, r28
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	81 2f       	mov	r24, r17
    1172:	0e 94 bd 07 	call	0xf7a	; 0xf7a <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    1176:	81 11       	cpse	r24, r1
    1178:	33 c0       	rjmp	.+102    	; 0x11e0 <TIM_DelayUs+0x13c>
      {
         /* If all overflows are finished and reminder. */
         if(u8_OverflowsComplete == HIGH)
    117a:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <u8_OverflowsComplete.1683>
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	31 f4       	brne	.+12     	; 0x118e <TIM_DelayUs+0xea>
         {
            /* Return to ready state */
            Enu_State = Ready;
    1182:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <Enu_State.1685>
            u8_OverflowsComplete = LOW;
    1186:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <u8_OverflowsComplete.1683>
            /* return success message. */
            return TIMER_E_SUCCESS;
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	2b c0       	rjmp	.+86     	; 0x11e4 <TIM_DelayUs+0x140>
         }
         
         /* Decrement overflows number */
         u32_Overflows--;
    118e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <u32_Overflows.1682>
    1192:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <u32_Overflows.1682+0x1>
    1196:	a0 91 83 00 	lds	r26, 0x0083	; 0x800083 <u32_Overflows.1682+0x2>
    119a:	b0 91 84 00 	lds	r27, 0x0084	; 0x800084 <u32_Overflows.1682+0x3>
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	a1 09       	sbc	r26, r1
    11a2:	b1 09       	sbc	r27, r1
    11a4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <u32_Overflows.1682>
    11a8:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <u32_Overflows.1682+0x1>
    11ac:	a0 93 83 00 	sts	0x0083, r26	; 0x800083 <u32_Overflows.1682+0x2>
    11b0:	b0 93 84 00 	sts	0x0084, r27	; 0x800084 <u32_Overflows.1682+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(u32_Overflows == 0)
    11b4:	89 2b       	or	r24, r25
    11b6:	8a 2b       	or	r24, r26
    11b8:	8b 2b       	or	r24, r27
    11ba:	59 f4       	brne	.+22     	; 0x11d2 <TIM_DelayUs+0x12e>
         {
            u8_OverflowsComplete = HIGH;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <u8_OverflowsComplete.1683>
            TIM_Start(TIM_channel, u8_Remindar);
    11c2:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <u8_Remindar.1684>
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	81 2f       	mov	r24, r17
    11ca:	0e 94 97 07 	call	0xf2e	; 0xf2e <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
         }
         
         return TIMER_E_PENDING;
    11ce:	8d ef       	ldi	r24, 0xFD	; 253
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <TIM_DelayUs+0x140>
            TIM_Start(TIM_channel, u8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
    11d2:	6f ef       	ldi	r22, 0xFF	; 255
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	81 2f       	mov	r24, r17
    11d8:	0e 94 97 07 	call	0xf2e	; 0xf2e <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    11dc:	8d ef       	ldi	r24, 0xFD	; 253
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <TIM_DelayUs+0x140>
      }         
   }            
}
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <TIM_DelayUs+0x140>
TIMER_ERROR_state_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    11e2:	8e ef       	ldi	r24, 0xFE	; 254
         }
         
         return TIMER_E_PENDING;
      }         
   }            
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	df 90       	pop	r13
    11f8:	cf 90       	pop	r12
    11fa:	bf 90       	pop	r11
    11fc:	af 90       	pop	r10
    11fe:	9f 90       	pop	r9
    1200:	8f 90       	pop	r8
    1202:	08 95       	ret

00001204 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
TIMER_ERROR_state_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
    1204:	8f 92       	push	r8
    1206:	9f 92       	push	r9
    1208:	af 92       	push	r10
    120a:	bf 92       	push	r11
    120c:	df 92       	push	r13
    120e:	ef 92       	push	r14
    1210:	ff 92       	push	r15
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	00 d0       	rcall	.+0      	; 0x121c <TIM_DelayMs+0x18>
    121c:	00 d0       	rcall	.+0      	; 0x121e <TIM_DelayMs+0x1a>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	18 2f       	mov	r17, r24
    1224:	04 2f       	mov	r16, r20
    1226:	d5 2e       	mov	r13, r21
    1228:	e6 2e       	mov	r14, r22
    122a:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	08 f0       	brcs	.+2      	; 0x1232 <TIM_DelayMs+0x2e>
    1230:	9b c0       	rjmp	.+310    	; 0x1368 <TIM_DelayMs+0x164>
   static uint8_t u8_Remindar = 0;
   static Enu_DelayStateMachine Enu_State = Ready;
   TIMER_ERROR_state_t Timer_state;
   
   /* Ready state */
   if(Ready == Enu_State)
    1232:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <Enu_State.1696>
    1236:	81 11       	cpse	r24, r1
    1238:	59 c0       	rjmp	.+178    	; 0x12ec <TIM_DelayMs+0xe8>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    123a:	be 01       	movw	r22, r28
    123c:	6f 5f       	subi	r22, 0xFF	; 255
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	81 2f       	mov	r24, r17
    1242:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    1246:	8c 3f       	cpi	r24, 0xFC	; 252
    1248:	09 f4       	brne	.+2      	; 0x124c <TIM_DelayMs+0x48>
    124a:	4e c0       	rjmp	.+156    	; 0x12e8 <TIM_DelayMs+0xe4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    124c:	89 80       	ldd	r8, Y+1	; 0x01
    124e:	9a 80       	ldd	r9, Y+2	; 0x02
    1250:	ab 80       	ldd	r10, Y+3	; 0x03
    1252:	bc 80       	ldd	r11, Y+4	; 0x04
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	a9 01       	movw	r20, r18
    125a:	c5 01       	movw	r24, r10
    125c:	b4 01       	movw	r22, r8
    125e:	0e 94 32 0a 	call	0x1464	; 0x1464 <__cmpsf2>
    1262:	88 23       	and	r24, r24
    1264:	81 f0       	breq	.+32     	; 0x1286 <TIM_DelayMs+0x82>
      {
         TIM_Delay /= f32_FreqRatio;
    1266:	60 2f       	mov	r22, r16
    1268:	7d 2d       	mov	r23, r13
    126a:	8e 2d       	mov	r24, r14
    126c:	9f 2d       	mov	r25, r15
    126e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__floatunsisf>
    1272:	a5 01       	movw	r20, r10
    1274:	94 01       	movw	r18, r8
    1276:	0e 94 37 0a 	call	0x146e	; 0x146e <__divsf3>
    127a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
    127e:	06 2f       	mov	r16, r22
    1280:	d7 2e       	mov	r13, r23
    1282:	e8 2e       	mov	r14, r24
    1284:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      u32_Overflows = TIM_Delay*1000 / 256;
    1286:	a8 ee       	ldi	r26, 0xE8	; 232
    1288:	b3 e0       	ldi	r27, 0x03	; 3
    128a:	20 2f       	mov	r18, r16
    128c:	3d 2d       	mov	r19, r13
    128e:	4e 2d       	mov	r20, r14
    1290:	5f 2d       	mov	r21, r15
    1292:	0e 94 33 0c 	call	0x1866	; 0x1866 <__muluhisi3>
    1296:	bb 27       	eor	r27, r27
    1298:	a9 2f       	mov	r26, r25
    129a:	98 2f       	mov	r25, r24
    129c:	87 2f       	mov	r24, r23
    129e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <u32_Overflows.1693>
    12a2:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <u32_Overflows.1693+0x1>
    12a6:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <u32_Overflows.1693+0x2>
    12aa:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <u32_Overflows.1693+0x3>
      u8_Remindar = TIM_Delay*1000 % 256;
    12ae:	28 ee       	ldi	r18, 0xE8	; 232
    12b0:	02 9f       	mul	r16, r18
    12b2:	00 2d       	mov	r16, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	00 93 79 00 	sts	0x0079, r16	; 0x800079 <u8_Remindar.1695>
      
      if(u32_Overflows == 0)
    12ba:	89 2b       	or	r24, r25
    12bc:	8a 2b       	or	r24, r26
    12be:	8b 2b       	or	r24, r27
    12c0:	49 f4       	brne	.+18     	; 0x12d4 <TIM_DelayMs+0xd0>
      {
         u8_OverflowsComplete = HIGH;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <u8_OverflowsComplete.1694>
         TIM_Start(TIM_channel, u8_Remindar);
    12c8:	60 2f       	mov	r22, r16
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	81 2f       	mov	r24, r17
    12ce:	0e 94 97 07 	call	0xf2e	; 0xf2e <TIM_Start>
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <TIM_DelayMs+0xda>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, 255);
    12d4:	6f ef       	ldi	r22, 0xFF	; 255
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	81 2f       	mov	r24, r17
    12da:	0e 94 97 07 	call	0xf2e	; 0xf2e <TIM_Start>
      }
      /* Change to timer pending state */
      Enu_State= Pending;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <Enu_State.1696>
      return TIMER_E_PENDING;
    12e4:	8d ef       	ldi	r24, 0xFD	; 253
    12e6:	41 c0       	rjmp	.+130    	; 0x136a <TIM_DelayMs+0x166>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    12e8:	8c ef       	ldi	r24, 0xFC	; 252
    12ea:	3f c0       	rjmp	.+126    	; 0x136a <TIM_DelayMs+0x166>
      /* Change to timer pending state */
      Enu_State= Pending;
      return TIMER_E_PENDING;
   }
   /* Pending state */
   else if(Pending == Enu_State)
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	d9 f5       	brne	.+118    	; 0x1366 <TIM_DelayMs+0x162>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    12f0:	be 01       	movw	r22, r28
    12f2:	6f 5f       	subi	r22, 0xFF	; 255
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	81 2f       	mov	r24, r17
    12f8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    12fc:	81 11       	cpse	r24, r1
    12fe:	33 c0       	rjmp	.+102    	; 0x1366 <TIM_DelayMs+0x162>
      {
         /* If all overflows are finished and reminder. */
         if(u8_OverflowsComplete == HIGH)
    1300:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <u8_OverflowsComplete.1694>
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	31 f4       	brne	.+12     	; 0x1314 <TIM_DelayMs+0x110>
         {
            /* Return to ready state */
            Enu_State = Ready;
    1308:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <Enu_State.1696>
            u8_OverflowsComplete = LOW;
    130c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <u8_OverflowsComplete.1694>
            /* return success message. */
            return TIMER_E_SUCCESS;
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	2b c0       	rjmp	.+86     	; 0x136a <TIM_DelayMs+0x166>
         }
         
         /* Decrement overflows number */
         u32_Overflows--;
    1314:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <u32_Overflows.1693>
    1318:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <u32_Overflows.1693+0x1>
    131c:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <u32_Overflows.1693+0x2>
    1320:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <u32_Overflows.1693+0x3>
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	a1 09       	sbc	r26, r1
    1328:	b1 09       	sbc	r27, r1
    132a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <u32_Overflows.1693>
    132e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <u32_Overflows.1693+0x1>
    1332:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <u32_Overflows.1693+0x2>
    1336:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <u32_Overflows.1693+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(u32_Overflows == 0)
    133a:	89 2b       	or	r24, r25
    133c:	8a 2b       	or	r24, r26
    133e:	8b 2b       	or	r24, r27
    1340:	59 f4       	brne	.+22     	; 0x1358 <TIM_DelayMs+0x154>
         {
            u8_OverflowsComplete = HIGH;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <u8_OverflowsComplete.1694>
            TIM_Start(TIM_channel, u8_Remindar);
    1348:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <u8_Remindar.1695>
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	81 2f       	mov	r24, r17
    1350:	0e 94 97 07 	call	0xf2e	; 0xf2e <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
         }
         
         return TIMER_E_PENDING;
    1354:	8d ef       	ldi	r24, 0xFD	; 253
    1356:	09 c0       	rjmp	.+18     	; 0x136a <TIM_DelayMs+0x166>
            TIM_Start(TIM_channel, u8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
    1358:	6f ef       	ldi	r22, 0xFF	; 255
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	81 2f       	mov	r24, r17
    135e:	0e 94 97 07 	call	0xf2e	; 0xf2e <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    1362:	8d ef       	ldi	r24, 0xFD	; 253
    1364:	02 c0       	rjmp	.+4      	; 0x136a <TIM_DelayMs+0x166>
      }
   }
    1366:	01 c0       	rjmp	.+2      	; 0x136a <TIM_DelayMs+0x166>
TIMER_ERROR_state_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    1368:	8e ef       	ldi	r24, 0xFE	; 254
         }
         
         return TIMER_E_PENDING;
      }
   }
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	bf 90       	pop	r11
    1382:	af 90       	pop	r10
    1384:	9f 90       	pop	r9
    1386:	8f 90       	pop	r8
    1388:	08 95       	ret

0000138a <__subsf3>:
    138a:	50 58       	subi	r21, 0x80	; 128

0000138c <__addsf3>:
    138c:	bb 27       	eor	r27, r27
    138e:	aa 27       	eor	r26, r26
    1390:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__addsf3x>
    1394:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__fp_round>
    1398:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fp_pscA>
    139c:	38 f0       	brcs	.+14     	; 0x13ac <__addsf3+0x20>
    139e:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fp_pscB>
    13a2:	20 f0       	brcs	.+8      	; 0x13ac <__addsf3+0x20>
    13a4:	39 f4       	brne	.+14     	; 0x13b4 <__addsf3+0x28>
    13a6:	9f 3f       	cpi	r25, 0xFF	; 255
    13a8:	19 f4       	brne	.+6      	; 0x13b0 <__addsf3+0x24>
    13aa:	26 f4       	brtc	.+8      	; 0x13b4 <__addsf3+0x28>
    13ac:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__fp_nan>
    13b0:	0e f4       	brtc	.+2      	; 0x13b4 <__addsf3+0x28>
    13b2:	e0 95       	com	r30
    13b4:	e7 fb       	bst	r30, 7
    13b6:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__fp_inf>

000013ba <__addsf3x>:
    13ba:	e9 2f       	mov	r30, r25
    13bc:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fp_split3>
    13c0:	58 f3       	brcs	.-42     	; 0x1398 <__addsf3+0xc>
    13c2:	ba 17       	cp	r27, r26
    13c4:	62 07       	cpc	r22, r18
    13c6:	73 07       	cpc	r23, r19
    13c8:	84 07       	cpc	r24, r20
    13ca:	95 07       	cpc	r25, r21
    13cc:	20 f0       	brcs	.+8      	; 0x13d6 <__addsf3x+0x1c>
    13ce:	79 f4       	brne	.+30     	; 0x13ee <__addsf3x+0x34>
    13d0:	a6 f5       	brtc	.+104    	; 0x143a <__addsf3x+0x80>
    13d2:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__fp_zero>
    13d6:	0e f4       	brtc	.+2      	; 0x13da <__addsf3x+0x20>
    13d8:	e0 95       	com	r30
    13da:	0b 2e       	mov	r0, r27
    13dc:	ba 2f       	mov	r27, r26
    13de:	a0 2d       	mov	r26, r0
    13e0:	0b 01       	movw	r0, r22
    13e2:	b9 01       	movw	r22, r18
    13e4:	90 01       	movw	r18, r0
    13e6:	0c 01       	movw	r0, r24
    13e8:	ca 01       	movw	r24, r20
    13ea:	a0 01       	movw	r20, r0
    13ec:	11 24       	eor	r1, r1
    13ee:	ff 27       	eor	r31, r31
    13f0:	59 1b       	sub	r21, r25
    13f2:	99 f0       	breq	.+38     	; 0x141a <__addsf3x+0x60>
    13f4:	59 3f       	cpi	r21, 0xF9	; 249
    13f6:	50 f4       	brcc	.+20     	; 0x140c <__addsf3x+0x52>
    13f8:	50 3e       	cpi	r21, 0xE0	; 224
    13fa:	68 f1       	brcs	.+90     	; 0x1456 <__addsf3x+0x9c>
    13fc:	1a 16       	cp	r1, r26
    13fe:	f0 40       	sbci	r31, 0x00	; 0
    1400:	a2 2f       	mov	r26, r18
    1402:	23 2f       	mov	r18, r19
    1404:	34 2f       	mov	r19, r20
    1406:	44 27       	eor	r20, r20
    1408:	58 5f       	subi	r21, 0xF8	; 248
    140a:	f3 cf       	rjmp	.-26     	; 0x13f2 <__addsf3x+0x38>
    140c:	46 95       	lsr	r20
    140e:	37 95       	ror	r19
    1410:	27 95       	ror	r18
    1412:	a7 95       	ror	r26
    1414:	f0 40       	sbci	r31, 0x00	; 0
    1416:	53 95       	inc	r21
    1418:	c9 f7       	brne	.-14     	; 0x140c <__addsf3x+0x52>
    141a:	7e f4       	brtc	.+30     	; 0x143a <__addsf3x+0x80>
    141c:	1f 16       	cp	r1, r31
    141e:	ba 0b       	sbc	r27, r26
    1420:	62 0b       	sbc	r22, r18
    1422:	73 0b       	sbc	r23, r19
    1424:	84 0b       	sbc	r24, r20
    1426:	ba f0       	brmi	.+46     	; 0x1456 <__addsf3x+0x9c>
    1428:	91 50       	subi	r25, 0x01	; 1
    142a:	a1 f0       	breq	.+40     	; 0x1454 <__addsf3x+0x9a>
    142c:	ff 0f       	add	r31, r31
    142e:	bb 1f       	adc	r27, r27
    1430:	66 1f       	adc	r22, r22
    1432:	77 1f       	adc	r23, r23
    1434:	88 1f       	adc	r24, r24
    1436:	c2 f7       	brpl	.-16     	; 0x1428 <__addsf3x+0x6e>
    1438:	0e c0       	rjmp	.+28     	; 0x1456 <__addsf3x+0x9c>
    143a:	ba 0f       	add	r27, r26
    143c:	62 1f       	adc	r22, r18
    143e:	73 1f       	adc	r23, r19
    1440:	84 1f       	adc	r24, r20
    1442:	48 f4       	brcc	.+18     	; 0x1456 <__addsf3x+0x9c>
    1444:	87 95       	ror	r24
    1446:	77 95       	ror	r23
    1448:	67 95       	ror	r22
    144a:	b7 95       	ror	r27
    144c:	f7 95       	ror	r31
    144e:	9e 3f       	cpi	r25, 0xFE	; 254
    1450:	08 f0       	brcs	.+2      	; 0x1454 <__addsf3x+0x9a>
    1452:	b0 cf       	rjmp	.-160    	; 0x13b4 <__addsf3+0x28>
    1454:	93 95       	inc	r25
    1456:	88 0f       	add	r24, r24
    1458:	08 f0       	brcs	.+2      	; 0x145c <__addsf3x+0xa2>
    145a:	99 27       	eor	r25, r25
    145c:	ee 0f       	add	r30, r30
    145e:	97 95       	ror	r25
    1460:	87 95       	ror	r24
    1462:	08 95       	ret

00001464 <__cmpsf2>:
    1464:	0e 94 15 0b 	call	0x162a	; 0x162a <__fp_cmp>
    1468:	08 f4       	brcc	.+2      	; 0x146c <__cmpsf2+0x8>
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	08 95       	ret

0000146e <__divsf3>:
    146e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__divsf3x>
    1472:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__fp_round>
    1476:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fp_pscB>
    147a:	58 f0       	brcs	.+22     	; 0x1492 <__divsf3+0x24>
    147c:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fp_pscA>
    1480:	40 f0       	brcs	.+16     	; 0x1492 <__divsf3+0x24>
    1482:	29 f4       	brne	.+10     	; 0x148e <__divsf3+0x20>
    1484:	5f 3f       	cpi	r21, 0xFF	; 255
    1486:	29 f0       	breq	.+10     	; 0x1492 <__divsf3+0x24>
    1488:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__fp_inf>
    148c:	51 11       	cpse	r21, r1
    148e:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__fp_szero>
    1492:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__fp_nan>

00001496 <__divsf3x>:
    1496:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fp_split3>
    149a:	68 f3       	brcs	.-38     	; 0x1476 <__divsf3+0x8>

0000149c <__divsf3_pse>:
    149c:	99 23       	and	r25, r25
    149e:	b1 f3       	breq	.-20     	; 0x148c <__divsf3+0x1e>
    14a0:	55 23       	and	r21, r21
    14a2:	91 f3       	breq	.-28     	; 0x1488 <__divsf3+0x1a>
    14a4:	95 1b       	sub	r25, r21
    14a6:	55 0b       	sbc	r21, r21
    14a8:	bb 27       	eor	r27, r27
    14aa:	aa 27       	eor	r26, r26
    14ac:	62 17       	cp	r22, r18
    14ae:	73 07       	cpc	r23, r19
    14b0:	84 07       	cpc	r24, r20
    14b2:	38 f0       	brcs	.+14     	; 0x14c2 <__divsf3_pse+0x26>
    14b4:	9f 5f       	subi	r25, 0xFF	; 255
    14b6:	5f 4f       	sbci	r21, 0xFF	; 255
    14b8:	22 0f       	add	r18, r18
    14ba:	33 1f       	adc	r19, r19
    14bc:	44 1f       	adc	r20, r20
    14be:	aa 1f       	adc	r26, r26
    14c0:	a9 f3       	breq	.-22     	; 0x14ac <__divsf3_pse+0x10>
    14c2:	35 d0       	rcall	.+106    	; 0x152e <__divsf3_pse+0x92>
    14c4:	0e 2e       	mov	r0, r30
    14c6:	3a f0       	brmi	.+14     	; 0x14d6 <__divsf3_pse+0x3a>
    14c8:	e0 e8       	ldi	r30, 0x80	; 128
    14ca:	32 d0       	rcall	.+100    	; 0x1530 <__divsf3_pse+0x94>
    14cc:	91 50       	subi	r25, 0x01	; 1
    14ce:	50 40       	sbci	r21, 0x00	; 0
    14d0:	e6 95       	lsr	r30
    14d2:	00 1c       	adc	r0, r0
    14d4:	ca f7       	brpl	.-14     	; 0x14c8 <__divsf3_pse+0x2c>
    14d6:	2b d0       	rcall	.+86     	; 0x152e <__divsf3_pse+0x92>
    14d8:	fe 2f       	mov	r31, r30
    14da:	29 d0       	rcall	.+82     	; 0x152e <__divsf3_pse+0x92>
    14dc:	66 0f       	add	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	bb 1f       	adc	r27, r27
    14e4:	26 17       	cp	r18, r22
    14e6:	37 07       	cpc	r19, r23
    14e8:	48 07       	cpc	r20, r24
    14ea:	ab 07       	cpc	r26, r27
    14ec:	b0 e8       	ldi	r27, 0x80	; 128
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <__divsf3_pse+0x56>
    14f0:	bb 0b       	sbc	r27, r27
    14f2:	80 2d       	mov	r24, r0
    14f4:	bf 01       	movw	r22, r30
    14f6:	ff 27       	eor	r31, r31
    14f8:	93 58       	subi	r25, 0x83	; 131
    14fa:	5f 4f       	sbci	r21, 0xFF	; 255
    14fc:	3a f0       	brmi	.+14     	; 0x150c <__divsf3_pse+0x70>
    14fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1500:	51 05       	cpc	r21, r1
    1502:	78 f0       	brcs	.+30     	; 0x1522 <__divsf3_pse+0x86>
    1504:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__fp_inf>
    1508:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__fp_szero>
    150c:	5f 3f       	cpi	r21, 0xFF	; 255
    150e:	e4 f3       	brlt	.-8      	; 0x1508 <__divsf3_pse+0x6c>
    1510:	98 3e       	cpi	r25, 0xE8	; 232
    1512:	d4 f3       	brlt	.-12     	; 0x1508 <__divsf3_pse+0x6c>
    1514:	86 95       	lsr	r24
    1516:	77 95       	ror	r23
    1518:	67 95       	ror	r22
    151a:	b7 95       	ror	r27
    151c:	f7 95       	ror	r31
    151e:	9f 5f       	subi	r25, 0xFF	; 255
    1520:	c9 f7       	brne	.-14     	; 0x1514 <__divsf3_pse+0x78>
    1522:	88 0f       	add	r24, r24
    1524:	91 1d       	adc	r25, r1
    1526:	96 95       	lsr	r25
    1528:	87 95       	ror	r24
    152a:	97 f9       	bld	r25, 7
    152c:	08 95       	ret
    152e:	e1 e0       	ldi	r30, 0x01	; 1
    1530:	66 0f       	add	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	bb 1f       	adc	r27, r27
    1538:	62 17       	cp	r22, r18
    153a:	73 07       	cpc	r23, r19
    153c:	84 07       	cpc	r24, r20
    153e:	ba 07       	cpc	r27, r26
    1540:	20 f0       	brcs	.+8      	; 0x154a <__divsf3_pse+0xae>
    1542:	62 1b       	sub	r22, r18
    1544:	73 0b       	sbc	r23, r19
    1546:	84 0b       	sbc	r24, r20
    1548:	ba 0b       	sbc	r27, r26
    154a:	ee 1f       	adc	r30, r30
    154c:	88 f7       	brcc	.-30     	; 0x1530 <__divsf3_pse+0x94>
    154e:	e0 95       	com	r30
    1550:	08 95       	ret

00001552 <__fixunssfsi>:
    1552:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__fp_splitA>
    1556:	88 f0       	brcs	.+34     	; 0x157a <__fixunssfsi+0x28>
    1558:	9f 57       	subi	r25, 0x7F	; 127
    155a:	98 f0       	brcs	.+38     	; 0x1582 <__fixunssfsi+0x30>
    155c:	b9 2f       	mov	r27, r25
    155e:	99 27       	eor	r25, r25
    1560:	b7 51       	subi	r27, 0x17	; 23
    1562:	b0 f0       	brcs	.+44     	; 0x1590 <__fixunssfsi+0x3e>
    1564:	e1 f0       	breq	.+56     	; 0x159e <__fixunssfsi+0x4c>
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	1a f0       	brmi	.+6      	; 0x1576 <__fixunssfsi+0x24>
    1570:	ba 95       	dec	r27
    1572:	c9 f7       	brne	.-14     	; 0x1566 <__fixunssfsi+0x14>
    1574:	14 c0       	rjmp	.+40     	; 0x159e <__fixunssfsi+0x4c>
    1576:	b1 30       	cpi	r27, 0x01	; 1
    1578:	91 f0       	breq	.+36     	; 0x159e <__fixunssfsi+0x4c>
    157a:	0e 94 83 0b 	call	0x1706	; 0x1706 <__fp_zero>
    157e:	b1 e0       	ldi	r27, 0x01	; 1
    1580:	08 95       	ret
    1582:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__fp_zero>
    1586:	67 2f       	mov	r22, r23
    1588:	78 2f       	mov	r23, r24
    158a:	88 27       	eor	r24, r24
    158c:	b8 5f       	subi	r27, 0xF8	; 248
    158e:	39 f0       	breq	.+14     	; 0x159e <__fixunssfsi+0x4c>
    1590:	b9 3f       	cpi	r27, 0xF9	; 249
    1592:	cc f3       	brlt	.-14     	; 0x1586 <__fixunssfsi+0x34>
    1594:	86 95       	lsr	r24
    1596:	77 95       	ror	r23
    1598:	67 95       	ror	r22
    159a:	b3 95       	inc	r27
    159c:	d9 f7       	brne	.-10     	; 0x1594 <__fixunssfsi+0x42>
    159e:	3e f4       	brtc	.+14     	; 0x15ae <__fixunssfsi+0x5c>
    15a0:	90 95       	com	r25
    15a2:	80 95       	com	r24
    15a4:	70 95       	com	r23
    15a6:	61 95       	neg	r22
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	8f 4f       	sbci	r24, 0xFF	; 255
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	08 95       	ret

000015b0 <__floatunsisf>:
    15b0:	e8 94       	clt
    15b2:	09 c0       	rjmp	.+18     	; 0x15c6 <__floatsisf+0x12>

000015b4 <__floatsisf>:
    15b4:	97 fb       	bst	r25, 7
    15b6:	3e f4       	brtc	.+14     	; 0x15c6 <__floatsisf+0x12>
    15b8:	90 95       	com	r25
    15ba:	80 95       	com	r24
    15bc:	70 95       	com	r23
    15be:	61 95       	neg	r22
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	8f 4f       	sbci	r24, 0xFF	; 255
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	99 23       	and	r25, r25
    15c8:	a9 f0       	breq	.+42     	; 0x15f4 <__floatsisf+0x40>
    15ca:	f9 2f       	mov	r31, r25
    15cc:	96 e9       	ldi	r25, 0x96	; 150
    15ce:	bb 27       	eor	r27, r27
    15d0:	93 95       	inc	r25
    15d2:	f6 95       	lsr	r31
    15d4:	87 95       	ror	r24
    15d6:	77 95       	ror	r23
    15d8:	67 95       	ror	r22
    15da:	b7 95       	ror	r27
    15dc:	f1 11       	cpse	r31, r1
    15de:	f8 cf       	rjmp	.-16     	; 0x15d0 <__floatsisf+0x1c>
    15e0:	fa f4       	brpl	.+62     	; 0x1620 <__floatsisf+0x6c>
    15e2:	bb 0f       	add	r27, r27
    15e4:	11 f4       	brne	.+4      	; 0x15ea <__floatsisf+0x36>
    15e6:	60 ff       	sbrs	r22, 0
    15e8:	1b c0       	rjmp	.+54     	; 0x1620 <__floatsisf+0x6c>
    15ea:	6f 5f       	subi	r22, 0xFF	; 255
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	8f 4f       	sbci	r24, 0xFF	; 255
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	16 c0       	rjmp	.+44     	; 0x1620 <__floatsisf+0x6c>
    15f4:	88 23       	and	r24, r24
    15f6:	11 f0       	breq	.+4      	; 0x15fc <__floatsisf+0x48>
    15f8:	96 e9       	ldi	r25, 0x96	; 150
    15fa:	11 c0       	rjmp	.+34     	; 0x161e <__floatsisf+0x6a>
    15fc:	77 23       	and	r23, r23
    15fe:	21 f0       	breq	.+8      	; 0x1608 <__floatsisf+0x54>
    1600:	9e e8       	ldi	r25, 0x8E	; 142
    1602:	87 2f       	mov	r24, r23
    1604:	76 2f       	mov	r23, r22
    1606:	05 c0       	rjmp	.+10     	; 0x1612 <__floatsisf+0x5e>
    1608:	66 23       	and	r22, r22
    160a:	71 f0       	breq	.+28     	; 0x1628 <__floatsisf+0x74>
    160c:	96 e8       	ldi	r25, 0x86	; 134
    160e:	86 2f       	mov	r24, r22
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	2a f0       	brmi	.+10     	; 0x1620 <__floatsisf+0x6c>
    1616:	9a 95       	dec	r25
    1618:	66 0f       	add	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	88 1f       	adc	r24, r24
    161e:	da f7       	brpl	.-10     	; 0x1616 <__floatsisf+0x62>
    1620:	88 0f       	add	r24, r24
    1622:	96 95       	lsr	r25
    1624:	87 95       	ror	r24
    1626:	97 f9       	bld	r25, 7
    1628:	08 95       	ret

0000162a <__fp_cmp>:
    162a:	99 0f       	add	r25, r25
    162c:	00 08       	sbc	r0, r0
    162e:	55 0f       	add	r21, r21
    1630:	aa 0b       	sbc	r26, r26
    1632:	e0 e8       	ldi	r30, 0x80	; 128
    1634:	fe ef       	ldi	r31, 0xFE	; 254
    1636:	16 16       	cp	r1, r22
    1638:	17 06       	cpc	r1, r23
    163a:	e8 07       	cpc	r30, r24
    163c:	f9 07       	cpc	r31, r25
    163e:	c0 f0       	brcs	.+48     	; 0x1670 <__fp_cmp+0x46>
    1640:	12 16       	cp	r1, r18
    1642:	13 06       	cpc	r1, r19
    1644:	e4 07       	cpc	r30, r20
    1646:	f5 07       	cpc	r31, r21
    1648:	98 f0       	brcs	.+38     	; 0x1670 <__fp_cmp+0x46>
    164a:	62 1b       	sub	r22, r18
    164c:	73 0b       	sbc	r23, r19
    164e:	84 0b       	sbc	r24, r20
    1650:	95 0b       	sbc	r25, r21
    1652:	39 f4       	brne	.+14     	; 0x1662 <__fp_cmp+0x38>
    1654:	0a 26       	eor	r0, r26
    1656:	61 f0       	breq	.+24     	; 0x1670 <__fp_cmp+0x46>
    1658:	23 2b       	or	r18, r19
    165a:	24 2b       	or	r18, r20
    165c:	25 2b       	or	r18, r21
    165e:	21 f4       	brne	.+8      	; 0x1668 <__fp_cmp+0x3e>
    1660:	08 95       	ret
    1662:	0a 26       	eor	r0, r26
    1664:	09 f4       	brne	.+2      	; 0x1668 <__fp_cmp+0x3e>
    1666:	a1 40       	sbci	r26, 0x01	; 1
    1668:	a6 95       	lsr	r26
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	81 1d       	adc	r24, r1
    166e:	81 1d       	adc	r24, r1
    1670:	08 95       	ret

00001672 <__fp_inf>:
    1672:	97 f9       	bld	r25, 7
    1674:	9f 67       	ori	r25, 0x7F	; 127
    1676:	80 e8       	ldi	r24, 0x80	; 128
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	08 95       	ret

0000167e <__fp_nan>:
    167e:	9f ef       	ldi	r25, 0xFF	; 255
    1680:	80 ec       	ldi	r24, 0xC0	; 192
    1682:	08 95       	ret

00001684 <__fp_pscA>:
    1684:	00 24       	eor	r0, r0
    1686:	0a 94       	dec	r0
    1688:	16 16       	cp	r1, r22
    168a:	17 06       	cpc	r1, r23
    168c:	18 06       	cpc	r1, r24
    168e:	09 06       	cpc	r0, r25
    1690:	08 95       	ret

00001692 <__fp_pscB>:
    1692:	00 24       	eor	r0, r0
    1694:	0a 94       	dec	r0
    1696:	12 16       	cp	r1, r18
    1698:	13 06       	cpc	r1, r19
    169a:	14 06       	cpc	r1, r20
    169c:	05 06       	cpc	r0, r21
    169e:	08 95       	ret

000016a0 <__fp_round>:
    16a0:	09 2e       	mov	r0, r25
    16a2:	03 94       	inc	r0
    16a4:	00 0c       	add	r0, r0
    16a6:	11 f4       	brne	.+4      	; 0x16ac <__fp_round+0xc>
    16a8:	88 23       	and	r24, r24
    16aa:	52 f0       	brmi	.+20     	; 0x16c0 <__fp_round+0x20>
    16ac:	bb 0f       	add	r27, r27
    16ae:	40 f4       	brcc	.+16     	; 0x16c0 <__fp_round+0x20>
    16b0:	bf 2b       	or	r27, r31
    16b2:	11 f4       	brne	.+4      	; 0x16b8 <__fp_round+0x18>
    16b4:	60 ff       	sbrs	r22, 0
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <__fp_round+0x20>
    16b8:	6f 5f       	subi	r22, 0xFF	; 255
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
    16bc:	8f 4f       	sbci	r24, 0xFF	; 255
    16be:	9f 4f       	sbci	r25, 0xFF	; 255
    16c0:	08 95       	ret

000016c2 <__fp_split3>:
    16c2:	57 fd       	sbrc	r21, 7
    16c4:	90 58       	subi	r25, 0x80	; 128
    16c6:	44 0f       	add	r20, r20
    16c8:	55 1f       	adc	r21, r21
    16ca:	59 f0       	breq	.+22     	; 0x16e2 <__fp_splitA+0x10>
    16cc:	5f 3f       	cpi	r21, 0xFF	; 255
    16ce:	71 f0       	breq	.+28     	; 0x16ec <__fp_splitA+0x1a>
    16d0:	47 95       	ror	r20

000016d2 <__fp_splitA>:
    16d2:	88 0f       	add	r24, r24
    16d4:	97 fb       	bst	r25, 7
    16d6:	99 1f       	adc	r25, r25
    16d8:	61 f0       	breq	.+24     	; 0x16f2 <__fp_splitA+0x20>
    16da:	9f 3f       	cpi	r25, 0xFF	; 255
    16dc:	79 f0       	breq	.+30     	; 0x16fc <__fp_splitA+0x2a>
    16de:	87 95       	ror	r24
    16e0:	08 95       	ret
    16e2:	12 16       	cp	r1, r18
    16e4:	13 06       	cpc	r1, r19
    16e6:	14 06       	cpc	r1, r20
    16e8:	55 1f       	adc	r21, r21
    16ea:	f2 cf       	rjmp	.-28     	; 0x16d0 <__fp_split3+0xe>
    16ec:	46 95       	lsr	r20
    16ee:	f1 df       	rcall	.-30     	; 0x16d2 <__fp_splitA>
    16f0:	08 c0       	rjmp	.+16     	; 0x1702 <__fp_splitA+0x30>
    16f2:	16 16       	cp	r1, r22
    16f4:	17 06       	cpc	r1, r23
    16f6:	18 06       	cpc	r1, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	f1 cf       	rjmp	.-30     	; 0x16de <__fp_splitA+0xc>
    16fc:	86 95       	lsr	r24
    16fe:	71 05       	cpc	r23, r1
    1700:	61 05       	cpc	r22, r1
    1702:	08 94       	sec
    1704:	08 95       	ret

00001706 <__fp_zero>:
    1706:	e8 94       	clt

00001708 <__fp_szero>:
    1708:	bb 27       	eor	r27, r27
    170a:	66 27       	eor	r22, r22
    170c:	77 27       	eor	r23, r23
    170e:	cb 01       	movw	r24, r22
    1710:	97 f9       	bld	r25, 7
    1712:	08 95       	ret

00001714 <__gesf2>:
    1714:	0e 94 15 0b 	call	0x162a	; 0x162a <__fp_cmp>
    1718:	08 f4       	brcc	.+2      	; 0x171c <__gesf2+0x8>
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	08 95       	ret

0000171e <__mulsf3>:
    171e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__mulsf3x>
    1722:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__fp_round>
    1726:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fp_pscA>
    172a:	38 f0       	brcs	.+14     	; 0x173a <__mulsf3+0x1c>
    172c:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fp_pscB>
    1730:	20 f0       	brcs	.+8      	; 0x173a <__mulsf3+0x1c>
    1732:	95 23       	and	r25, r21
    1734:	11 f0       	breq	.+4      	; 0x173a <__mulsf3+0x1c>
    1736:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__fp_inf>
    173a:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__fp_nan>
    173e:	11 24       	eor	r1, r1
    1740:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__fp_szero>

00001744 <__mulsf3x>:
    1744:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fp_split3>
    1748:	70 f3       	brcs	.-36     	; 0x1726 <__mulsf3+0x8>

0000174a <__mulsf3_pse>:
    174a:	95 9f       	mul	r25, r21
    174c:	c1 f3       	breq	.-16     	; 0x173e <__mulsf3+0x20>
    174e:	95 0f       	add	r25, r21
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	55 1f       	adc	r21, r21
    1754:	62 9f       	mul	r22, r18
    1756:	f0 01       	movw	r30, r0
    1758:	72 9f       	mul	r23, r18
    175a:	bb 27       	eor	r27, r27
    175c:	f0 0d       	add	r31, r0
    175e:	b1 1d       	adc	r27, r1
    1760:	63 9f       	mul	r22, r19
    1762:	aa 27       	eor	r26, r26
    1764:	f0 0d       	add	r31, r0
    1766:	b1 1d       	adc	r27, r1
    1768:	aa 1f       	adc	r26, r26
    176a:	64 9f       	mul	r22, r20
    176c:	66 27       	eor	r22, r22
    176e:	b0 0d       	add	r27, r0
    1770:	a1 1d       	adc	r26, r1
    1772:	66 1f       	adc	r22, r22
    1774:	82 9f       	mul	r24, r18
    1776:	22 27       	eor	r18, r18
    1778:	b0 0d       	add	r27, r0
    177a:	a1 1d       	adc	r26, r1
    177c:	62 1f       	adc	r22, r18
    177e:	73 9f       	mul	r23, r19
    1780:	b0 0d       	add	r27, r0
    1782:	a1 1d       	adc	r26, r1
    1784:	62 1f       	adc	r22, r18
    1786:	83 9f       	mul	r24, r19
    1788:	a0 0d       	add	r26, r0
    178a:	61 1d       	adc	r22, r1
    178c:	22 1f       	adc	r18, r18
    178e:	74 9f       	mul	r23, r20
    1790:	33 27       	eor	r19, r19
    1792:	a0 0d       	add	r26, r0
    1794:	61 1d       	adc	r22, r1
    1796:	23 1f       	adc	r18, r19
    1798:	84 9f       	mul	r24, r20
    179a:	60 0d       	add	r22, r0
    179c:	21 1d       	adc	r18, r1
    179e:	82 2f       	mov	r24, r18
    17a0:	76 2f       	mov	r23, r22
    17a2:	6a 2f       	mov	r22, r26
    17a4:	11 24       	eor	r1, r1
    17a6:	9f 57       	subi	r25, 0x7F	; 127
    17a8:	50 40       	sbci	r21, 0x00	; 0
    17aa:	9a f0       	brmi	.+38     	; 0x17d2 <__mulsf3_pse+0x88>
    17ac:	f1 f0       	breq	.+60     	; 0x17ea <__mulsf3_pse+0xa0>
    17ae:	88 23       	and	r24, r24
    17b0:	4a f0       	brmi	.+18     	; 0x17c4 <__mulsf3_pse+0x7a>
    17b2:	ee 0f       	add	r30, r30
    17b4:	ff 1f       	adc	r31, r31
    17b6:	bb 1f       	adc	r27, r27
    17b8:	66 1f       	adc	r22, r22
    17ba:	77 1f       	adc	r23, r23
    17bc:	88 1f       	adc	r24, r24
    17be:	91 50       	subi	r25, 0x01	; 1
    17c0:	50 40       	sbci	r21, 0x00	; 0
    17c2:	a9 f7       	brne	.-22     	; 0x17ae <__mulsf3_pse+0x64>
    17c4:	9e 3f       	cpi	r25, 0xFE	; 254
    17c6:	51 05       	cpc	r21, r1
    17c8:	80 f0       	brcs	.+32     	; 0x17ea <__mulsf3_pse+0xa0>
    17ca:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__fp_inf>
    17ce:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__fp_szero>
    17d2:	5f 3f       	cpi	r21, 0xFF	; 255
    17d4:	e4 f3       	brlt	.-8      	; 0x17ce <__mulsf3_pse+0x84>
    17d6:	98 3e       	cpi	r25, 0xE8	; 232
    17d8:	d4 f3       	brlt	.-12     	; 0x17ce <__mulsf3_pse+0x84>
    17da:	86 95       	lsr	r24
    17dc:	77 95       	ror	r23
    17de:	67 95       	ror	r22
    17e0:	b7 95       	ror	r27
    17e2:	f7 95       	ror	r31
    17e4:	e7 95       	ror	r30
    17e6:	9f 5f       	subi	r25, 0xFF	; 255
    17e8:	c1 f7       	brne	.-16     	; 0x17da <__mulsf3_pse+0x90>
    17ea:	fe 2b       	or	r31, r30
    17ec:	88 0f       	add	r24, r24
    17ee:	91 1d       	adc	r25, r1
    17f0:	96 95       	lsr	r25
    17f2:	87 95       	ror	r24
    17f4:	97 f9       	bld	r25, 7
    17f6:	08 95       	ret

000017f8 <__udivmodsi4>:
    17f8:	a1 e2       	ldi	r26, 0x21	; 33
    17fa:	1a 2e       	mov	r1, r26
    17fc:	aa 1b       	sub	r26, r26
    17fe:	bb 1b       	sub	r27, r27
    1800:	fd 01       	movw	r30, r26
    1802:	0d c0       	rjmp	.+26     	; 0x181e <__udivmodsi4_ep>

00001804 <__udivmodsi4_loop>:
    1804:	aa 1f       	adc	r26, r26
    1806:	bb 1f       	adc	r27, r27
    1808:	ee 1f       	adc	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	a2 17       	cp	r26, r18
    180e:	b3 07       	cpc	r27, r19
    1810:	e4 07       	cpc	r30, r20
    1812:	f5 07       	cpc	r31, r21
    1814:	20 f0       	brcs	.+8      	; 0x181e <__udivmodsi4_ep>
    1816:	a2 1b       	sub	r26, r18
    1818:	b3 0b       	sbc	r27, r19
    181a:	e4 0b       	sbc	r30, r20
    181c:	f5 0b       	sbc	r31, r21

0000181e <__udivmodsi4_ep>:
    181e:	66 1f       	adc	r22, r22
    1820:	77 1f       	adc	r23, r23
    1822:	88 1f       	adc	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	1a 94       	dec	r1
    1828:	69 f7       	brne	.-38     	; 0x1804 <__udivmodsi4_loop>
    182a:	60 95       	com	r22
    182c:	70 95       	com	r23
    182e:	80 95       	com	r24
    1830:	90 95       	com	r25
    1832:	9b 01       	movw	r18, r22
    1834:	ac 01       	movw	r20, r24
    1836:	bd 01       	movw	r22, r26
    1838:	cf 01       	movw	r24, r30
    183a:	08 95       	ret

0000183c <__tablejump2__>:
    183c:	ee 0f       	add	r30, r30
    183e:	ff 1f       	adc	r31, r31
    1840:	05 90       	lpm	r0, Z+
    1842:	f4 91       	lpm	r31, Z
    1844:	e0 2d       	mov	r30, r0
    1846:	09 94       	ijmp

00001848 <__umulhisi3>:
    1848:	a2 9f       	mul	r26, r18
    184a:	b0 01       	movw	r22, r0
    184c:	b3 9f       	mul	r27, r19
    184e:	c0 01       	movw	r24, r0
    1850:	a3 9f       	mul	r26, r19
    1852:	70 0d       	add	r23, r0
    1854:	81 1d       	adc	r24, r1
    1856:	11 24       	eor	r1, r1
    1858:	91 1d       	adc	r25, r1
    185a:	b2 9f       	mul	r27, r18
    185c:	70 0d       	add	r23, r0
    185e:	81 1d       	adc	r24, r1
    1860:	11 24       	eor	r1, r1
    1862:	91 1d       	adc	r25, r1
    1864:	08 95       	ret

00001866 <__muluhisi3>:
    1866:	0e 94 24 0c 	call	0x1848	; 0x1848 <__umulhisi3>
    186a:	a5 9f       	mul	r26, r21
    186c:	90 0d       	add	r25, r0
    186e:	b4 9f       	mul	r27, r20
    1870:	90 0d       	add	r25, r0
    1872:	a4 9f       	mul	r26, r20
    1874:	80 0d       	add	r24, r0
    1876:	91 1d       	adc	r25, r1
    1878:	11 24       	eor	r1, r1
    187a:	08 95       	ret

0000187c <_exit>:
    187c:	f8 94       	cli

0000187e <__stop_program>:
    187e:	ff cf       	rjmp	.-2      	; 0x187e <__stop_program>
