
USonic_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000a44  00000ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006a  0080006a  00000ae2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ae2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cb9  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000732  00000000  00000000  00001891  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000779  00000000  00000000  00001fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  0000273c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000598  00000000  00000000  00002d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	e2 00       	.word	0x00e2	; ????
  56:	ec 00       	.word	0x00ec	; ????
  58:	f6 00       	.word	0x00f6	; ????
  5a:	00 01       	movw	r0, r0
  5c:	0a 01       	movw	r0, r20
  5e:	14 01       	movw	r2, r8
  60:	1e 01       	movw	r2, r28

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e4 e4       	ldi	r30, 0x44	; 68
  76:	fa e0       	ldi	r31, 0x0A	; 10
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	aa 36       	cpi	r26, 0x6A	; 106
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	aa e6       	ldi	r26, 0x6A	; 106
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a8 37       	cpi	r26, 0x78	; 120
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  98:	0c 94 20 05 	jmp	0xa40	; 0xa40 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <main>:

int main(void)
{
   TIMER_ERROR_state_t state;
   TIMER_ERROR_state_t state2;
   PORTB_DIR |= 0xF0;
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	80 6f       	ori	r24, 0xF0	; 240
  a4:	87 bb       	out	0x17, r24	; 23
   PORTB_DATA |= 0xF0;
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	80 6f       	ori	r24, 0xF0	; 240
  aa:	88 bb       	out	0x18, r24	; 24
   state = TIM_Init(TIMER_2);
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0e 94 2a 01 	call	0x254	; 0x254 <TIM_Init>
   if(state == TIMER_E_SUCCESS)
  b2:	81 11       	cpse	r24, r1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <main+0x18>
   {
      PORTB_DATA = 0x00;
  b6:	18 ba       	out	0x18, r1	; 24
   }
   state2 = TIM_Init(TIMER_0);
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 2a 01 	call	0x254	; 0x254 <TIM_Init>
   if(state2 == TIMER_E_SUCCESS)
  be:	81 11       	cpse	r24, r1
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x26>
   {
      PORTB_DATA = 0xF0;
  c2:	80 ef       	ldi	r24, 0xF0	; 240
  c4:	88 bb       	out	0x18, r24	; 24
   }
   /* Replace with your application code */
   while (1) 
   {
      
      state = TIM_DelayMs(TIMER_2, 5000);
  c6:	48 e8       	ldi	r20, 0x88	; 136
  c8:	53 e1       	ldi	r21, 0x13	; 19
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <TIM_DelayMs>
      if(state == TIMER_E_SUCCESS)
  d4:	81 11       	cpse	r24, r1
  d6:	03 c0       	rjmp	.+6      	; 0xde <main+0x3e>
      {
         PORTB_DATA ^= 0x80;
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	80 58       	subi	r24, 0x80	; 128
  dc:	88 bb       	out	0x18, r24	; 24
      }
      state2 = TIM_DelayUs(TIMER_0, 1000000);
  de:	40 e4       	ldi	r20, 0x40	; 64
  e0:	52 e4       	ldi	r21, 0x42	; 66
  e2:	6f e0       	ldi	r22, 0x0F	; 15
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 35 02 	call	0x46a	; 0x46a <TIM_DelayUs>
      if(state2 == TIMER_E_SUCCESS)
  ec:	81 11       	cpse	r24, r1
  ee:	eb cf       	rjmp	.-42     	; 0xc6 <main+0x26>
      {
         PORTB_DATA ^= 0x40;
  f0:	98 b3       	in	r25, 0x18	; 24
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	89 27       	eor	r24, r25
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	e6 cf       	rjmp	.-52     	; 0xc6 <main+0x26>

000000fa <GetFreqPrescaleRatio>:
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return TIMER_E_SUCCESS;
}
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	08 f0       	brcs	.+2      	; 0x100 <GetFreqPrescaleRatio+0x6>
  fe:	49 c0       	rjmp	.+146    	; 0x192 <GetFreqPrescaleRatio+0x98>
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	8e 0f       	add	r24, r30
 10a:	9f 1f       	adc	r25, r31
 10c:	fc 01       	movw	r30, r24
 10e:	e0 5a       	subi	r30, 0xA0	; 160
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	82 81       	ldd	r24, Z+2	; 0x02
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	f9 f0       	breq	.+62     	; 0x156 <GetFreqPrescaleRatio+0x5c>
 118:	28 f4       	brcc	.+10     	; 0x124 <GetFreqPrescaleRatio+0x2a>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	41 f0       	breq	.+16     	; 0x12e <GetFreqPrescaleRatio+0x34>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	81 f0       	breq	.+32     	; 0x142 <GetFreqPrescaleRatio+0x48>
 122:	96 c0       	rjmp	.+300    	; 0x250 <GetFreqPrescaleRatio+0x156>
 124:	84 30       	cpi	r24, 0x04	; 4
 126:	09 f1       	breq	.+66     	; 0x16a <GetFreqPrescaleRatio+0x70>
 128:	85 30       	cpi	r24, 0x05	; 5
 12a:	49 f1       	breq	.+82     	; 0x17e <GetFreqPrescaleRatio+0x84>
 12c:	91 c0       	rjmp	.+290    	; 0x250 <GetFreqPrescaleRatio+0x156>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	a0 e8       	ldi	r26, 0x80	; 128
 134:	bd e3       	ldi	r27, 0x3D	; 61
 136:	fb 01       	movw	r30, r22
 138:	80 83       	st	Z, r24
 13a:	91 83       	std	Z+1, r25	; 0x01
 13c:	a2 83       	std	Z+2, r26	; 0x02
 13e:	b3 83       	std	Z+3, r27	; 0x03
 140:	86 c0       	rjmp	.+268    	; 0x24e <GetFreqPrescaleRatio+0x154>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	bf e3       	ldi	r27, 0x3F	; 63
 14a:	fb 01       	movw	r30, r22
 14c:	80 83       	st	Z, r24
 14e:	91 83       	std	Z+1, r25	; 0x01
 150:	a2 83       	std	Z+2, r26	; 0x02
 152:	b3 83       	std	Z+3, r27	; 0x03
 154:	7c c0       	rjmp	.+248    	; 0x24e <GetFreqPrescaleRatio+0x154>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	a0 e8       	ldi	r26, 0x80	; 128
 15c:	b0 e4       	ldi	r27, 0x40	; 64
 15e:	fb 01       	movw	r30, r22
 160:	80 83       	st	Z, r24
 162:	91 83       	std	Z+1, r25	; 0x01
 164:	a2 83       	std	Z+2, r26	; 0x02
 166:	b3 83       	std	Z+3, r27	; 0x03
 168:	72 c0       	rjmp	.+228    	; 0x24e <GetFreqPrescaleRatio+0x154>
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	a0 e8       	ldi	r26, 0x80	; 128
 170:	b1 e4       	ldi	r27, 0x41	; 65
 172:	fb 01       	movw	r30, r22
 174:	80 83       	st	Z, r24
 176:	91 83       	std	Z+1, r25	; 0x01
 178:	a2 83       	std	Z+2, r26	; 0x02
 17a:	b3 83       	std	Z+3, r27	; 0x03
 17c:	68 c0       	rjmp	.+208    	; 0x24e <GetFreqPrescaleRatio+0x154>
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	a0 e8       	ldi	r26, 0x80	; 128
 184:	b2 e4       	ldi	r27, 0x42	; 66
 186:	fb 01       	movw	r30, r22
 188:	80 83       	st	Z, r24
 18a:	91 83       	std	Z+1, r25	; 0x01
 18c:	a2 83       	std	Z+2, r26	; 0x02
 18e:	b3 83       	std	Z+3, r27	; 0x03
 190:	5e c0       	rjmp	.+188    	; 0x24e <GetFreqPrescaleRatio+0x154>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	09 f0       	breq	.+2      	; 0x198 <GetFreqPrescaleRatio+0x9e>
 196:	5b c0       	rjmp	.+182    	; 0x24e <GetFreqPrescaleRatio+0x154>
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	8e 0f       	add	r24, r30
 1a2:	9f 1f       	adc	r25, r31
 1a4:	fc 01       	movw	r30, r24
 1a6:	e0 5a       	subi	r30, 0xA0	; 160
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	e2 81       	ldd	r30, Z+2	; 0x02
 1ac:	8e 2f       	mov	r24, r30
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fc 01       	movw	r30, r24
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	e7 30       	cpi	r30, 0x07	; 7
 1b6:	f1 05       	cpc	r31, r1
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <GetFreqPrescaleRatio+0xc2>
 1ba:	4a c0       	rjmp	.+148    	; 0x250 <GetFreqPrescaleRatio+0x156>
 1bc:	e6 5d       	subi	r30, 0xD6	; 214
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__tablejump2__>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	a0 e8       	ldi	r26, 0x80	; 128
 1ca:	bd e3       	ldi	r27, 0x3D	; 61
 1cc:	fb 01       	movw	r30, r22
 1ce:	80 83       	st	Z, r24
 1d0:	91 83       	std	Z+1, r25	; 0x01
 1d2:	a2 83       	std	Z+2, r26	; 0x02
 1d4:	b3 83       	std	Z+3, r27	; 0x03
 1d6:	3b c0       	rjmp	.+118    	; 0x24e <GetFreqPrescaleRatio+0x154>
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	a0 e0       	ldi	r26, 0x00	; 0
 1de:	bf e3       	ldi	r27, 0x3F	; 63
 1e0:	fb 01       	movw	r30, r22
 1e2:	80 83       	st	Z, r24
 1e4:	91 83       	std	Z+1, r25	; 0x01
 1e6:	a2 83       	std	Z+2, r26	; 0x02
 1e8:	b3 83       	std	Z+3, r27	; 0x03
 1ea:	31 c0       	rjmp	.+98     	; 0x24e <GetFreqPrescaleRatio+0x154>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	a0 e0       	ldi	r26, 0x00	; 0
 1f2:	b0 e4       	ldi	r27, 0x40	; 64
 1f4:	fb 01       	movw	r30, r22
 1f6:	80 83       	st	Z, r24
 1f8:	91 83       	std	Z+1, r25	; 0x01
 1fa:	a2 83       	std	Z+2, r26	; 0x02
 1fc:	b3 83       	std	Z+3, r27	; 0x03
 1fe:	27 c0       	rjmp	.+78     	; 0x24e <GetFreqPrescaleRatio+0x154>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	a0 e8       	ldi	r26, 0x80	; 128
 206:	b0 e4       	ldi	r27, 0x40	; 64
 208:	fb 01       	movw	r30, r22
 20a:	80 83       	st	Z, r24
 20c:	91 83       	std	Z+1, r25	; 0x01
 20e:	a2 83       	std	Z+2, r26	; 0x02
 210:	b3 83       	std	Z+3, r27	; 0x03
 212:	1d c0       	rjmp	.+58     	; 0x24e <GetFreqPrescaleRatio+0x154>
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	a0 e0       	ldi	r26, 0x00	; 0
 21a:	b1 e4       	ldi	r27, 0x41	; 65
 21c:	fb 01       	movw	r30, r22
 21e:	80 83       	st	Z, r24
 220:	91 83       	std	Z+1, r25	; 0x01
 222:	a2 83       	std	Z+2, r26	; 0x02
 224:	b3 83       	std	Z+3, r27	; 0x03
 226:	13 c0       	rjmp	.+38     	; 0x24e <GetFreqPrescaleRatio+0x154>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	a0 e8       	ldi	r26, 0x80	; 128
 22e:	b1 e4       	ldi	r27, 0x41	; 65
 230:	fb 01       	movw	r30, r22
 232:	80 83       	st	Z, r24
 234:	91 83       	std	Z+1, r25	; 0x01
 236:	a2 83       	std	Z+2, r26	; 0x02
 238:	b3 83       	std	Z+3, r27	; 0x03
 23a:	09 c0       	rjmp	.+18     	; 0x24e <GetFreqPrescaleRatio+0x154>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	a0 e8       	ldi	r26, 0x80	; 128
 242:	b2 e4       	ldi	r27, 0x42	; 66
 244:	fb 01       	movw	r30, r22
 246:	80 83       	st	Z, r24
 248:	91 83       	std	Z+1, r25	; 0x01
 24a:	a2 83       	std	Z+2, r26	; 0x02
 24c:	b3 83       	std	Z+3, r27	; 0x03
 24e:	08 95       	ret
 250:	8c ef       	ldi	r24, 0xFC	; 252
 252:	08 95       	ret

00000254 <TIM_Init>:
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	c1 f0       	breq	.+48     	; 0x288 <TIM_Init+0x34>
 258:	18 f0       	brcs	.+6      	; 0x260 <TIM_Init+0xc>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	89 f1       	breq	.+98     	; 0x2c0 <TIM_Init+0x6c>
 25e:	48 c0       	rjmp	.+144    	; 0x2f0 <TIM_Init+0x9c>
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	fc 01       	movw	r30, r24
 264:	ee 0f       	add	r30, r30
 266:	ff 1f       	adc	r31, r31
 268:	8e 0f       	add	r24, r30
 26a:	9f 1f       	adc	r25, r31
 26c:	fc 01       	movw	r30, r24
 26e:	e0 5a       	subi	r30, 0xA0	; 160
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	80 81       	ld	r24, Z
 274:	83 bf       	out	0x33, r24	; 51
 276:	89 b7       	in	r24, 0x39	; 57
 278:	8c 7f       	andi	r24, 0xFC	; 252
 27a:	89 bf       	out	0x39, r24	; 57
 27c:	99 b7       	in	r25, 0x39	; 57
 27e:	81 81       	ldd	r24, Z+1	; 0x01
 280:	89 2b       	or	r24, r25
 282:	89 bf       	out	0x39, r24	; 57
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	08 95       	ret
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	fc 01       	movw	r30, r24
 28c:	ee 0f       	add	r30, r30
 28e:	ff 1f       	adc	r31, r31
 290:	8e 0f       	add	r24, r30
 292:	9f 1f       	adc	r25, r31
 294:	fc 01       	movw	r30, r24
 296:	e0 5a       	subi	r30, 0xA0	; 160
 298:	ff 4f       	sbci	r31, 0xFF	; 255
 29a:	80 81       	ld	r24, Z
 29c:	8e bd       	out	0x2e, r24	; 46
 29e:	89 b7       	in	r24, 0x39	; 57
 2a0:	87 7e       	andi	r24, 0xE7	; 231
 2a2:	89 bf       	out	0x39, r24	; 57
 2a4:	29 b7       	in	r18, 0x39	; 57
 2a6:	91 81       	ldd	r25, Z+1	; 0x01
 2a8:	89 2f       	mov	r24, r25
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	82 2b       	or	r24, r18
 2ba:	89 bf       	out	0x39, r24	; 57
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	08 95       	ret
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fc 01       	movw	r30, r24
 2c4:	ee 0f       	add	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	8e 0f       	add	r24, r30
 2ca:	9f 1f       	adc	r25, r31
 2cc:	fc 01       	movw	r30, r24
 2ce:	e0 5a       	subi	r30, 0xA0	; 160
 2d0:	ff 4f       	sbci	r31, 0xFF	; 255
 2d2:	80 81       	ld	r24, Z
 2d4:	85 bd       	out	0x25, r24	; 37
 2d6:	89 b7       	in	r24, 0x39	; 57
 2d8:	8f 73       	andi	r24, 0x3F	; 63
 2da:	89 bf       	out	0x39, r24	; 57
 2dc:	29 b7       	in	r18, 0x39	; 57
 2de:	91 81       	ldd	r25, Z+1	; 0x01
 2e0:	30 e4       	ldi	r19, 0x40	; 64
 2e2:	93 9f       	mul	r25, r19
 2e4:	c0 01       	movw	r24, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	82 2b       	or	r24, r18
 2ea:	89 bf       	out	0x39, r24	; 57
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 95       	ret
 2f0:	8e ef       	ldi	r24, 0xFE	; 254
 2f2:	08 95       	ret

000002f4 <TIM_Start>:
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	71 f0       	breq	.+28     	; 0x314 <TIM_Start+0x20>
 2f8:	18 f0       	brcs	.+6      	; 0x300 <TIM_Start+0xc>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	31 f0       	breq	.+12     	; 0x30a <TIM_Start+0x16>
 2fe:	1e c0       	rjmp	.+60     	; 0x33c <TIM_Start+0x48>
 300:	e2 e5       	ldi	r30, 0x52	; 82
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	a3 e5       	ldi	r26, 0x53	; 83
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	09 c0       	rjmp	.+18     	; 0x31c <TIM_Start+0x28>
 30a:	e4 e4       	ldi	r30, 0x44	; 68
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	a5 e4       	ldi	r26, 0x45	; 69
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	04 c0       	rjmp	.+8      	; 0x31c <TIM_Start+0x28>
 314:	ec e4       	ldi	r30, 0x4C	; 76
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	ae e4       	ldi	r26, 0x4E	; 78
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	60 83       	st	Z, r22
 31e:	2c 91       	ld	r18, X
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	fc 01       	movw	r30, r24
 324:	ee 0f       	add	r30, r30
 326:	ff 1f       	adc	r31, r31
 328:	8e 0f       	add	r24, r30
 32a:	9f 1f       	adc	r25, r31
 32c:	fc 01       	movw	r30, r24
 32e:	e0 5a       	subi	r30, 0xA0	; 160
 330:	ff 4f       	sbci	r31, 0xFF	; 255
 332:	82 81       	ldd	r24, Z+2	; 0x02
 334:	82 2b       	or	r24, r18
 336:	8c 93       	st	X, r24
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret
 33c:	8e ef       	ldi	r24, 0xFE	; 254
 33e:	08 95       	ret

00000340 <TIM_GetStatus>:
*
* @return function error state.
*/
TIMER_ERROR_state_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
 340:	61 15       	cp	r22, r1
 342:	71 05       	cpc	r23, r1
 344:	09 f4       	brne	.+2      	; 0x348 <TIM_GetStatus+0x8>
 346:	7b c0       	rjmp	.+246    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	41 f1       	breq	.+80     	; 0x39c <TIM_GetStatus+0x5c>
 34c:	20 f0       	brcs	.+8      	; 0x356 <TIM_GetStatus+0x16>
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	09 f4       	brne	.+2      	; 0x354 <TIM_GetStatus+0x14>
 352:	53 c0       	rjmp	.+166    	; 0x3fa <TIM_GetStatus+0xba>
 354:	76 c0       	rjmp	.+236    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	ee 0f       	add	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	8e 0f       	add	r24, r30
 360:	9f 1f       	adc	r25, r31
 362:	fc 01       	movw	r30, r24
 364:	e0 5a       	subi	r30, 0xA0	; 160
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	80 81       	ld	r24, Z
 36a:	81 11       	cpse	r24, r1
 36c:	09 c0       	rjmp	.+18     	; 0x380 <TIM_GetStatus+0x40>
         {
            if( TIMER_INT_FLAG & TIMER_0_OVERFLOW_FLAG )
 36e:	08 b6       	in	r0, 0x38	; 56
 370:	00 fe       	sbrs	r0, 0
 372:	69 c0       	rjmp	.+210    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
 374:	fb 01       	movw	r30, r22
 376:	10 82       	st	Z, r1
               TIMER_INT_FLAG |= TIMER_0_OVERFLOW_FLAG;
 378:	98 b7       	in	r25, 0x38	; 56
 37a:	91 60       	ori	r25, 0x01	; 1
 37c:	98 bf       	out	0x38, r25	; 56
 37e:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
 380:	88 30       	cpi	r24, 0x08	; 8
 382:	09 f0       	breq	.+2      	; 0x386 <TIM_GetStatus+0x46>
 384:	62 c0       	rjmp	.+196    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
         {
            if(TIMER_INT_FLAG & TIMER_0_COMPARE_FLAG)
 386:	08 b6       	in	r0, 0x38	; 56
 388:	01 fe       	sbrs	r0, 1
 38a:	61 c0       	rjmp	.+194    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	fb 01       	movw	r30, r22
 390:	80 83       	st	Z, r24
               TIMER_INT_FLAG |= TIMER_0_COMPARE_FLAG;
 392:	88 b7       	in	r24, 0x38	; 56
 394:	82 60       	ori	r24, 0x02	; 2
 396:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	fc 01       	movw	r30, r24
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	8e 0f       	add	r24, r30
 3a6:	9f 1f       	adc	r25, r31
 3a8:	fc 01       	movw	r30, r24
 3aa:	e0 5a       	subi	r30, 0xA0	; 160
 3ac:	ff 4f       	sbci	r31, 0xFF	; 255
 3ae:	80 81       	ld	r24, Z
 3b0:	81 11       	cpse	r24, r1
 3b2:	09 c0       	rjmp	.+18     	; 0x3c6 <TIM_GetStatus+0x86>
         {
            if( TIMER_INT_FLAG & TIMER_1_OVERFLOW_FLAG )
 3b4:	08 b6       	in	r0, 0x38	; 56
 3b6:	02 fe       	sbrs	r0, 2
 3b8:	4c c0       	rjmp	.+152    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
 3ba:	fb 01       	movw	r30, r22
 3bc:	10 82       	st	Z, r1
               TIMER_INT_FLAG |= TIMER_1_OVERFLOW_FLAG;
 3be:	98 b7       	in	r25, 0x38	; 56
 3c0:	94 60       	ori	r25, 0x04	; 4
 3c2:	98 bf       	out	0x38, r25	; 56
 3c4:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
 3c6:	88 30       	cpi	r24, 0x08	; 8
 3c8:	09 f0       	breq	.+2      	; 0x3cc <TIM_GetStatus+0x8c>
 3ca:	45 c0       	rjmp	.+138    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
         {
            if(TIMER_INT_FLAG & TIMER_1A_COMPARE_FLAG)
 3cc:	98 b7       	in	r25, 0x38	; 56
 3ce:	89 2f       	mov	r24, r25
 3d0:	80 71       	andi	r24, 0x10	; 16
 3d2:	94 ff       	sbrs	r25, 4
 3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <TIM_GetStatus+0xa6>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	fb 01       	movw	r30, r22
 3da:	80 83       	st	Z, r24
               TIMER_INT_FLAG |= TIMER_1A_COMPARE_FLAG;
 3dc:	88 b7       	in	r24, 0x38	; 56
 3de:	80 61       	ori	r24, 0x10	; 16
 3e0:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	08 95       	ret
            if(TIMER_INT_FLAG & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIMER_INT_FLAG |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIMER_INT_FLAG & TIMER_1B_COMPARE_FLAG)
 3e6:	08 b6       	in	r0, 0x38	; 56
 3e8:	03 fe       	sbrs	r0, 3
 3ea:	37 c0       	rjmp	.+110    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	fb 01       	movw	r30, r22
 3f0:	90 83       	st	Z, r25
               TIMER_INT_FLAG |= TIMER_1B_COMPARE_FLAG;
 3f2:	98 b7       	in	r25, 0x38	; 56
 3f4:	98 60       	ori	r25, 0x08	; 8
 3f6:	98 bf       	out	0x38, r25	; 56
 3f8:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	fc 01       	movw	r30, r24
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	8e 0f       	add	r24, r30
 404:	9f 1f       	adc	r25, r31
 406:	fc 01       	movw	r30, r24
 408:	e0 5a       	subi	r30, 0xA0	; 160
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	80 81       	ld	r24, Z
 40e:	81 11       	cpse	r24, r1
 410:	09 c0       	rjmp	.+18     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
         {
            if( TIMER_INT_FLAG & TIMER_2_OVERFLOW_FLAG )
 412:	08 b6       	in	r0, 0x38	; 56
 414:	06 fe       	sbrs	r0, 6
 416:	23 c0       	rjmp	.+70     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
 418:	fb 01       	movw	r30, r22
 41a:	10 82       	st	Z, r1
               TIMER_INT_FLAG |= TIMER_2_OVERFLOW_FLAG;
 41c:	98 b7       	in	r25, 0x38	; 56
 41e:	90 64       	ori	r25, 0x40	; 64
 420:	98 bf       	out	0x38, r25	; 56
 422:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
 424:	88 30       	cpi	r24, 0x08	; 8
 426:	e9 f4       	brne	.+58     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
         {
            if(TIMER_INT_FLAG & TIMER_2_COMPARE_FLAG)
 428:	08 b6       	in	r0, 0x38	; 56
 42a:	07 fe       	sbrs	r0, 7
 42c:	1c c0       	rjmp	.+56     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	fb 01       	movw	r30, r22
 432:	80 83       	st	Z, r24
               TIMER_INT_FLAG |= TIMER_2_COMPARE_FLAG;
 434:	88 b7       	in	r24, 0x38	; 56
 436:	80 68       	ori	r24, 0x80	; 128
 438:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
*/
TIMER_ERROR_state_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
 442:	8e ef       	ldi	r24, 0xFE	; 254
 444:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIMER_INT_FLAG |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
 446:	8d ef       	ldi	r24, 0xFD	; 253
 448:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIMER_INT_FLAG |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
 44e:	8d ef       	ldi	r24, 0xFD	; 253
 450:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIMER_INT_FLAG |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
 452:	8d ef       	ldi	r24, 0xFD	; 253
 454:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIMER_INT_FLAG |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
 45a:	8d ef       	ldi	r24, 0xFD	; 253
 45c:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIMER_INT_FLAG |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
 45e:	8d ef       	ldi	r24, 0xFD	; 253
 460:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIMER_INT_FLAG |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
 466:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return TIMER_E_SUCCESS;
}
 468:	08 95       	ret

0000046a <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
TIMER_ERROR_state_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
 46a:	8f 92       	push	r8
 46c:	9f 92       	push	r9
 46e:	af 92       	push	r10
 470:	bf 92       	push	r11
 472:	cf 92       	push	r12
 474:	df 92       	push	r13
 476:	ef 92       	push	r14
 478:	ff 92       	push	r15
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	00 d0       	rcall	.+0      	; 0x482 <TIM_DelayUs+0x18>
 482:	00 d0       	rcall	.+0      	; 0x484 <TIM_DelayUs+0x1a>
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	18 2f       	mov	r17, r24
 48a:	6a 01       	movw	r12, r20
 48c:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
 48e:	83 30       	cpi	r24, 0x03	; 3
 490:	08 f0       	brcs	.+2      	; 0x494 <TIM_DelayUs+0x2a>
 492:	8a c0       	rjmp	.+276    	; 0x5a8 <TIM_DelayUs+0x13e>
   static uint8_t u8_Remindar = 0;
   static Enu_DelayStateMachine Enu_State = Ready;
   TIMER_ERROR_state_t Timer_state;
   
   /* Ready state */
   if(Ready == Enu_State)
 494:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Enu_State.1683>
 498:	81 11       	cpse	r24, r1
 49a:	48 c0       	rjmp	.+144    	; 0x52c <TIM_DelayUs+0xc2>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
 49c:	be 01       	movw	r22, r28
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	81 2f       	mov	r24, r17
 4a4:	0e 94 7d 00 	call	0xfa	; 0xfa <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
 4a8:	8c 3f       	cpi	r24, 0xFC	; 252
 4aa:	f1 f1       	breq	.+124    	; 0x528 <TIM_DelayUs+0xbe>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
 4ac:	89 80       	ldd	r8, Y+1	; 0x01
 4ae:	9a 80       	ldd	r9, Y+2	; 0x02
 4b0:	ab 80       	ldd	r10, Y+3	; 0x03
 4b2:	bc 80       	ldd	r11, Y+4	; 0x04
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	a9 01       	movw	r20, r18
 4ba:	c5 01       	movw	r24, r10
 4bc:	b4 01       	movw	r22, r8
 4be:	0e 94 a8 03 	call	0x750	; 0x750 <__cmpsf2>
 4c2:	88 23       	and	r24, r24
 4c4:	61 f0       	breq	.+24     	; 0x4de <TIM_DelayUs+0x74>
      {
         TIM_Delay /= f32_FreqRatio;
 4c6:	c7 01       	movw	r24, r14
 4c8:	b6 01       	movw	r22, r12
 4ca:	0e 94 4e 04 	call	0x89c	; 0x89c <__floatunsisf>
 4ce:	a5 01       	movw	r20, r10
 4d0:	94 01       	movw	r18, r8
 4d2:	0e 94 ad 03 	call	0x75a	; 0x75a <__divsf3>
 4d6:	0e 94 1f 04 	call	0x83e	; 0x83e <__fixunssfsi>
 4da:	6b 01       	movw	r12, r22
 4dc:	7c 01       	movw	r14, r24
      }
      
      /* Calculate how many overflows needed */
      u32_Overflows = TIM_Delay / 256;
 4de:	bb 27       	eor	r27, r27
 4e0:	af 2d       	mov	r26, r15
 4e2:	9e 2d       	mov	r25, r14
 4e4:	8d 2d       	mov	r24, r13
 4e6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <u32_Overflows.1680>
 4ea:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <u32_Overflows.1680+0x1>
 4ee:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <u32_Overflows.1680+0x2>
 4f2:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <u32_Overflows.1680+0x3>
      u8_Remindar = TIM_Delay % 256;
 4f6:	c0 92 72 00 	sts	0x0072, r12	; 0x800072 <u8_Remindar.1682>
      
      if(u32_Overflows == 0)
 4fa:	89 2b       	or	r24, r25
 4fc:	8a 2b       	or	r24, r26
 4fe:	8b 2b       	or	r24, r27
 500:	49 f4       	brne	.+18     	; 0x514 <TIM_DelayUs+0xaa>
      {
         u8_OverflowsComplete = HIGH;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <u8_OverflowsComplete.1681>
         TIM_Start(TIM_channel, u8_Remindar);
 508:	6c 2d       	mov	r22, r12
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	81 2f       	mov	r24, r17
 50e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <TIM_Start>
 512:	05 c0       	rjmp	.+10     	; 0x51e <TIM_DelayUs+0xb4>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, 255);
 514:	6f ef       	ldi	r22, 0xFF	; 255
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	81 2f       	mov	r24, r17
 51a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      Enu_State = Pending;
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Enu_State.1683>
      return TIMER_E_PENDING;
 524:	8d ef       	ldi	r24, 0xFD	; 253
 526:	41 c0       	rjmp	.+130    	; 0x5aa <TIM_DelayUs+0x140>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
 528:	8c ef       	ldi	r24, 0xFC	; 252
 52a:	3f c0       	rjmp	.+126    	; 0x5aa <TIM_DelayUs+0x140>
      /* Change to timer pending state */ 
      Enu_State = Pending;
      return TIMER_E_PENDING;
   }
   /* Pending state */
   else if(Pending == Enu_State)
 52c:	81 30       	cpi	r24, 0x01	; 1
 52e:	d9 f5       	brne	.+118    	; 0x5a6 <TIM_DelayUs+0x13c>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state = TIM_GetStatus(TIM_channel, &u8_FlagState);
 530:	be 01       	movw	r22, r28
 532:	6f 5f       	subi	r22, 0xFF	; 255
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	81 2f       	mov	r24, r17
 538:	0e 94 a0 01 	call	0x340	; 0x340 <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
 53c:	81 11       	cpse	r24, r1
 53e:	33 c0       	rjmp	.+102    	; 0x5a6 <TIM_DelayUs+0x13c>
      {
         /* If all overflows are finished and reminder. */
         if(u8_OverflowsComplete == HIGH)
 540:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <u8_OverflowsComplete.1681>
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	31 f4       	brne	.+12     	; 0x554 <TIM_DelayUs+0xea>
         {
            /* Return to ready state */
            Enu_State = Ready;
 548:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Enu_State.1683>
            u8_OverflowsComplete = LOW;
 54c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <u8_OverflowsComplete.1681>
            /* return success message. */
            return TIMER_E_SUCCESS;
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	2b c0       	rjmp	.+86     	; 0x5aa <TIM_DelayUs+0x140>
         }
         
         /* Decrement overflows number */
         u32_Overflows--;
 554:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <u32_Overflows.1680>
 558:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <u32_Overflows.1680+0x1>
 55c:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <u32_Overflows.1680+0x2>
 560:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <u32_Overflows.1680+0x3>
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	a1 09       	sbc	r26, r1
 568:	b1 09       	sbc	r27, r1
 56a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <u32_Overflows.1680>
 56e:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <u32_Overflows.1680+0x1>
 572:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <u32_Overflows.1680+0x2>
 576:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <u32_Overflows.1680+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(u32_Overflows == 0)
 57a:	89 2b       	or	r24, r25
 57c:	8a 2b       	or	r24, r26
 57e:	8b 2b       	or	r24, r27
 580:	59 f4       	brne	.+22     	; 0x598 <TIM_DelayUs+0x12e>
         {
            u8_OverflowsComplete = HIGH;
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <u8_OverflowsComplete.1681>
            TIM_Start(TIM_channel, u8_Remindar);
 588:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <u8_Remindar.1682>
 58c:	70 e0       	ldi	r23, 0x00	; 0
 58e:	81 2f       	mov	r24, r17
 590:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
         }
         
         return TIMER_E_PENDING;
 594:	8d ef       	ldi	r24, 0xFD	; 253
 596:	09 c0       	rjmp	.+18     	; 0x5aa <TIM_DelayUs+0x140>
            TIM_Start(TIM_channel, u8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
 598:	6f ef       	ldi	r22, 0xFF	; 255
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	81 2f       	mov	r24, r17
 59e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
 5a2:	8d ef       	ldi	r24, 0xFD	; 253
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <TIM_DelayUs+0x140>
      }         
   }            
}
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <TIM_DelayUs+0x140>
TIMER_ERROR_state_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
 5a8:	8e ef       	ldi	r24, 0xFE	; 254
         }
         
         return TIMER_E_PENDING;
      }         
   }            
}
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	ff 90       	pop	r15
 5ba:	ef 90       	pop	r14
 5bc:	df 90       	pop	r13
 5be:	cf 90       	pop	r12
 5c0:	bf 90       	pop	r11
 5c2:	af 90       	pop	r10
 5c4:	9f 90       	pop	r9
 5c6:	8f 90       	pop	r8
 5c8:	08 95       	ret

000005ca <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
TIMER_ERROR_state_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
 5ca:	8f 92       	push	r8
 5cc:	9f 92       	push	r9
 5ce:	af 92       	push	r10
 5d0:	bf 92       	push	r11
 5d2:	df 92       	push	r13
 5d4:	ef 92       	push	r14
 5d6:	ff 92       	push	r15
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	00 d0       	rcall	.+0      	; 0x5e2 <TIM_DelayMs+0x18>
 5e2:	00 d0       	rcall	.+0      	; 0x5e4 <TIM_DelayMs+0x1a>
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	18 2f       	mov	r17, r24
 5ea:	04 2f       	mov	r16, r20
 5ec:	d5 2e       	mov	r13, r21
 5ee:	e6 2e       	mov	r14, r22
 5f0:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
 5f2:	83 30       	cpi	r24, 0x03	; 3
 5f4:	08 f0       	brcs	.+2      	; 0x5f8 <TIM_DelayMs+0x2e>
 5f6:	9b c0       	rjmp	.+310    	; 0x72e <TIM_DelayMs+0x164>
   static uint8_t u8_Remindar = 0;
   static Enu_DelayStateMachine Enu_State = Ready;
   TIMER_ERROR_state_t Timer_state;
   
   /* Ready state */
   if(Ready == Enu_State)
 5f8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Enu_State.1694>
 5fc:	81 11       	cpse	r24, r1
 5fe:	59 c0       	rjmp	.+178    	; 0x6b2 <TIM_DelayMs+0xe8>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
 600:	be 01       	movw	r22, r28
 602:	6f 5f       	subi	r22, 0xFF	; 255
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	81 2f       	mov	r24, r17
 608:	0e 94 7d 00 	call	0xfa	; 0xfa <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
 60c:	8c 3f       	cpi	r24, 0xFC	; 252
 60e:	09 f4       	brne	.+2      	; 0x612 <TIM_DelayMs+0x48>
 610:	4e c0       	rjmp	.+156    	; 0x6ae <TIM_DelayMs+0xe4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
 612:	89 80       	ldd	r8, Y+1	; 0x01
 614:	9a 80       	ldd	r9, Y+2	; 0x02
 616:	ab 80       	ldd	r10, Y+3	; 0x03
 618:	bc 80       	ldd	r11, Y+4	; 0x04
 61a:	20 e0       	ldi	r18, 0x00	; 0
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	a9 01       	movw	r20, r18
 620:	c5 01       	movw	r24, r10
 622:	b4 01       	movw	r22, r8
 624:	0e 94 a8 03 	call	0x750	; 0x750 <__cmpsf2>
 628:	88 23       	and	r24, r24
 62a:	81 f0       	breq	.+32     	; 0x64c <TIM_DelayMs+0x82>
      {
         TIM_Delay /= f32_FreqRatio;
 62c:	60 2f       	mov	r22, r16
 62e:	7d 2d       	mov	r23, r13
 630:	8e 2d       	mov	r24, r14
 632:	9f 2d       	mov	r25, r15
 634:	0e 94 4e 04 	call	0x89c	; 0x89c <__floatunsisf>
 638:	a5 01       	movw	r20, r10
 63a:	94 01       	movw	r18, r8
 63c:	0e 94 ad 03 	call	0x75a	; 0x75a <__divsf3>
 640:	0e 94 1f 04 	call	0x83e	; 0x83e <__fixunssfsi>
 644:	06 2f       	mov	r16, r22
 646:	d7 2e       	mov	r13, r23
 648:	e8 2e       	mov	r14, r24
 64a:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      u32_Overflows = TIM_Delay*1000 / 256;
 64c:	a8 ee       	ldi	r26, 0xE8	; 232
 64e:	b3 e0       	ldi	r27, 0x03	; 3
 650:	20 2f       	mov	r18, r16
 652:	3d 2d       	mov	r19, r13
 654:	4e 2d       	mov	r20, r14
 656:	5f 2d       	mov	r21, r15
 658:	0e 94 06 05 	call	0xa0c	; 0xa0c <__muluhisi3>
 65c:	bb 27       	eor	r27, r27
 65e:	a9 2f       	mov	r26, r25
 660:	98 2f       	mov	r25, r24
 662:	87 2f       	mov	r24, r23
 664:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <u32_Overflows.1691>
 668:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <u32_Overflows.1691+0x1>
 66c:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <u32_Overflows.1691+0x2>
 670:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <u32_Overflows.1691+0x3>
      u8_Remindar = TIM_Delay*1000 % 256;
 674:	28 ee       	ldi	r18, 0xE8	; 232
 676:	02 9f       	mul	r16, r18
 678:	00 2d       	mov	r16, r0
 67a:	11 24       	eor	r1, r1
 67c:	00 93 6b 00 	sts	0x006B, r16	; 0x80006b <u8_Remindar.1693>
      
      if(u32_Overflows == 0)
 680:	89 2b       	or	r24, r25
 682:	8a 2b       	or	r24, r26
 684:	8b 2b       	or	r24, r27
 686:	49 f4       	brne	.+18     	; 0x69a <TIM_DelayMs+0xd0>
      {
         u8_OverflowsComplete = HIGH;
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
         TIM_Start(TIM_channel, u8_Remindar);
 68e:	60 2f       	mov	r22, r16
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	81 2f       	mov	r24, r17
 694:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <TIM_Start>
 698:	05 c0       	rjmp	.+10     	; 0x6a4 <TIM_DelayMs+0xda>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, 255);
 69a:	6f ef       	ldi	r22, 0xFF	; 255
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	81 2f       	mov	r24, r17
 6a0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <TIM_Start>
      }
      /* Change to timer pending state */
      Enu_State= Pending;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Enu_State.1694>
      return TIMER_E_PENDING;
 6aa:	8d ef       	ldi	r24, 0xFD	; 253
 6ac:	41 c0       	rjmp	.+130    	; 0x730 <TIM_DelayMs+0x166>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
 6ae:	8c ef       	ldi	r24, 0xFC	; 252
 6b0:	3f c0       	rjmp	.+126    	; 0x730 <TIM_DelayMs+0x166>
      /* Change to timer pending state */
      Enu_State= Pending;
      return TIMER_E_PENDING;
   }
   /* Pending state */
   else if(Pending == Enu_State)
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	d9 f5       	brne	.+118    	; 0x72c <TIM_DelayMs+0x162>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
 6b6:	be 01       	movw	r22, r28
 6b8:	6f 5f       	subi	r22, 0xFF	; 255
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
 6bc:	81 2f       	mov	r24, r17
 6be:	0e 94 a0 01 	call	0x340	; 0x340 <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
 6c2:	81 11       	cpse	r24, r1
 6c4:	33 c0       	rjmp	.+102    	; 0x72c <TIM_DelayMs+0x162>
      {
         /* If all overflows are finished and reminder. */
         if(u8_OverflowsComplete == HIGH)
 6c6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	31 f4       	brne	.+12     	; 0x6da <TIM_DelayMs+0x110>
         {
            /* Return to ready state */
            Enu_State = Ready;
 6ce:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Enu_State.1694>
            u8_OverflowsComplete = LOW;
 6d2:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
            /* return success message. */
            return TIMER_E_SUCCESS;
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	2b c0       	rjmp	.+86     	; 0x730 <TIM_DelayMs+0x166>
         }
         
         /* Decrement overflows number */
         u32_Overflows--;
 6da:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <u32_Overflows.1691>
 6de:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <u32_Overflows.1691+0x1>
 6e2:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <u32_Overflows.1691+0x2>
 6e6:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <u32_Overflows.1691+0x3>
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	a1 09       	sbc	r26, r1
 6ee:	b1 09       	sbc	r27, r1
 6f0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <u32_Overflows.1691>
 6f4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <u32_Overflows.1691+0x1>
 6f8:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <u32_Overflows.1691+0x2>
 6fc:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <u32_Overflows.1691+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(u32_Overflows == 0)
 700:	89 2b       	or	r24, r25
 702:	8a 2b       	or	r24, r26
 704:	8b 2b       	or	r24, r27
 706:	59 f4       	brne	.+22     	; 0x71e <TIM_DelayMs+0x154>
         {
            u8_OverflowsComplete = HIGH;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
            TIM_Start(TIM_channel, u8_Remindar);
 70e:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <u8_Remindar.1693>
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	81 2f       	mov	r24, r17
 716:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
         }
         
         return TIMER_E_PENDING;
 71a:	8d ef       	ldi	r24, 0xFD	; 253
 71c:	09 c0       	rjmp	.+18     	; 0x730 <TIM_DelayMs+0x166>
            TIM_Start(TIM_channel, u8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
 71e:	6f ef       	ldi	r22, 0xFF	; 255
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	81 2f       	mov	r24, r17
 724:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
 728:	8d ef       	ldi	r24, 0xFD	; 253
 72a:	02 c0       	rjmp	.+4      	; 0x730 <TIM_DelayMs+0x166>
      }
   }
 72c:	01 c0       	rjmp	.+2      	; 0x730 <TIM_DelayMs+0x166>
TIMER_ERROR_state_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
 72e:	8e ef       	ldi	r24, 0xFE	; 254
         }
         
         return TIMER_E_PENDING;
      }
   }
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	0f 90       	pop	r0
 736:	0f 90       	pop	r0
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	1f 91       	pop	r17
 73e:	0f 91       	pop	r16
 740:	ff 90       	pop	r15
 742:	ef 90       	pop	r14
 744:	df 90       	pop	r13
 746:	bf 90       	pop	r11
 748:	af 90       	pop	r10
 74a:	9f 90       	pop	r9
 74c:	8f 90       	pop	r8
 74e:	08 95       	ret

00000750 <__cmpsf2>:
 750:	0e 94 8b 04 	call	0x916	; 0x916 <__fp_cmp>
 754:	08 f4       	brcc	.+2      	; 0x758 <__cmpsf2+0x8>
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	08 95       	ret

0000075a <__divsf3>:
 75a:	0e 94 c1 03 	call	0x782	; 0x782 <__divsf3x>
 75e:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_round>
 762:	0e 94 bf 04 	call	0x97e	; 0x97e <__fp_pscB>
 766:	58 f0       	brcs	.+22     	; 0x77e <__divsf3+0x24>
 768:	0e 94 b8 04 	call	0x970	; 0x970 <__fp_pscA>
 76c:	40 f0       	brcs	.+16     	; 0x77e <__divsf3+0x24>
 76e:	29 f4       	brne	.+10     	; 0x77a <__divsf3+0x20>
 770:	5f 3f       	cpi	r21, 0xFF	; 255
 772:	29 f0       	breq	.+10     	; 0x77e <__divsf3+0x24>
 774:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_inf>
 778:	51 11       	cpse	r21, r1
 77a:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__fp_szero>
 77e:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__fp_nan>

00000782 <__divsf3x>:
 782:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fp_split3>
 786:	68 f3       	brcs	.-38     	; 0x762 <__divsf3+0x8>

00000788 <__divsf3_pse>:
 788:	99 23       	and	r25, r25
 78a:	b1 f3       	breq	.-20     	; 0x778 <__divsf3+0x1e>
 78c:	55 23       	and	r21, r21
 78e:	91 f3       	breq	.-28     	; 0x774 <__divsf3+0x1a>
 790:	95 1b       	sub	r25, r21
 792:	55 0b       	sbc	r21, r21
 794:	bb 27       	eor	r27, r27
 796:	aa 27       	eor	r26, r26
 798:	62 17       	cp	r22, r18
 79a:	73 07       	cpc	r23, r19
 79c:	84 07       	cpc	r24, r20
 79e:	38 f0       	brcs	.+14     	; 0x7ae <__divsf3_pse+0x26>
 7a0:	9f 5f       	subi	r25, 0xFF	; 255
 7a2:	5f 4f       	sbci	r21, 0xFF	; 255
 7a4:	22 0f       	add	r18, r18
 7a6:	33 1f       	adc	r19, r19
 7a8:	44 1f       	adc	r20, r20
 7aa:	aa 1f       	adc	r26, r26
 7ac:	a9 f3       	breq	.-22     	; 0x798 <__divsf3_pse+0x10>
 7ae:	35 d0       	rcall	.+106    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7b0:	0e 2e       	mov	r0, r30
 7b2:	3a f0       	brmi	.+14     	; 0x7c2 <__divsf3_pse+0x3a>
 7b4:	e0 e8       	ldi	r30, 0x80	; 128
 7b6:	32 d0       	rcall	.+100    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7b8:	91 50       	subi	r25, 0x01	; 1
 7ba:	50 40       	sbci	r21, 0x00	; 0
 7bc:	e6 95       	lsr	r30
 7be:	00 1c       	adc	r0, r0
 7c0:	ca f7       	brpl	.-14     	; 0x7b4 <__divsf3_pse+0x2c>
 7c2:	2b d0       	rcall	.+86     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7c4:	fe 2f       	mov	r31, r30
 7c6:	29 d0       	rcall	.+82     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7c8:	66 0f       	add	r22, r22
 7ca:	77 1f       	adc	r23, r23
 7cc:	88 1f       	adc	r24, r24
 7ce:	bb 1f       	adc	r27, r27
 7d0:	26 17       	cp	r18, r22
 7d2:	37 07       	cpc	r19, r23
 7d4:	48 07       	cpc	r20, r24
 7d6:	ab 07       	cpc	r26, r27
 7d8:	b0 e8       	ldi	r27, 0x80	; 128
 7da:	09 f0       	breq	.+2      	; 0x7de <__divsf3_pse+0x56>
 7dc:	bb 0b       	sbc	r27, r27
 7de:	80 2d       	mov	r24, r0
 7e0:	bf 01       	movw	r22, r30
 7e2:	ff 27       	eor	r31, r31
 7e4:	93 58       	subi	r25, 0x83	; 131
 7e6:	5f 4f       	sbci	r21, 0xFF	; 255
 7e8:	3a f0       	brmi	.+14     	; 0x7f8 <__divsf3_pse+0x70>
 7ea:	9e 3f       	cpi	r25, 0xFE	; 254
 7ec:	51 05       	cpc	r21, r1
 7ee:	78 f0       	brcs	.+30     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f0:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_inf>
 7f4:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__fp_szero>
 7f8:	5f 3f       	cpi	r21, 0xFF	; 255
 7fa:	e4 f3       	brlt	.-8      	; 0x7f4 <__divsf3_pse+0x6c>
 7fc:	98 3e       	cpi	r25, 0xE8	; 232
 7fe:	d4 f3       	brlt	.-12     	; 0x7f4 <__divsf3_pse+0x6c>
 800:	86 95       	lsr	r24
 802:	77 95       	ror	r23
 804:	67 95       	ror	r22
 806:	b7 95       	ror	r27
 808:	f7 95       	ror	r31
 80a:	9f 5f       	subi	r25, 0xFF	; 255
 80c:	c9 f7       	brne	.-14     	; 0x800 <__DATA_REGION_LENGTH__>
 80e:	88 0f       	add	r24, r24
 810:	91 1d       	adc	r25, r1
 812:	96 95       	lsr	r25
 814:	87 95       	ror	r24
 816:	97 f9       	bld	r25, 7
 818:	08 95       	ret
 81a:	e1 e0       	ldi	r30, 0x01	; 1
 81c:	66 0f       	add	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	88 1f       	adc	r24, r24
 822:	bb 1f       	adc	r27, r27
 824:	62 17       	cp	r22, r18
 826:	73 07       	cpc	r23, r19
 828:	84 07       	cpc	r24, r20
 82a:	ba 07       	cpc	r27, r26
 82c:	20 f0       	brcs	.+8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 82e:	62 1b       	sub	r22, r18
 830:	73 0b       	sbc	r23, r19
 832:	84 0b       	sbc	r24, r20
 834:	ba 0b       	sbc	r27, r26
 836:	ee 1f       	adc	r30, r30
 838:	88 f7       	brcc	.-30     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 83a:	e0 95       	com	r30
 83c:	08 95       	ret

0000083e <__fixunssfsi>:
 83e:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_splitA>
 842:	88 f0       	brcs	.+34     	; 0x866 <__stack+0x7>
 844:	9f 57       	subi	r25, 0x7F	; 127
 846:	98 f0       	brcs	.+38     	; 0x86e <__stack+0xf>
 848:	b9 2f       	mov	r27, r25
 84a:	99 27       	eor	r25, r25
 84c:	b7 51       	subi	r27, 0x17	; 23
 84e:	b0 f0       	brcs	.+44     	; 0x87c <__stack+0x1d>
 850:	e1 f0       	breq	.+56     	; 0x88a <__stack+0x2b>
 852:	66 0f       	add	r22, r22
 854:	77 1f       	adc	r23, r23
 856:	88 1f       	adc	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	1a f0       	brmi	.+6      	; 0x862 <__stack+0x3>
 85c:	ba 95       	dec	r27
 85e:	c9 f7       	brne	.-14     	; 0x852 <__fixunssfsi+0x14>
 860:	14 c0       	rjmp	.+40     	; 0x88a <__stack+0x2b>
 862:	b1 30       	cpi	r27, 0x01	; 1
 864:	91 f0       	breq	.+36     	; 0x88a <__stack+0x2b>
 866:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fp_zero>
 86a:	b1 e0       	ldi	r27, 0x01	; 1
 86c:	08 95       	ret
 86e:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_zero>
 872:	67 2f       	mov	r22, r23
 874:	78 2f       	mov	r23, r24
 876:	88 27       	eor	r24, r24
 878:	b8 5f       	subi	r27, 0xF8	; 248
 87a:	39 f0       	breq	.+14     	; 0x88a <__stack+0x2b>
 87c:	b9 3f       	cpi	r27, 0xF9	; 249
 87e:	cc f3       	brlt	.-14     	; 0x872 <__stack+0x13>
 880:	86 95       	lsr	r24
 882:	77 95       	ror	r23
 884:	67 95       	ror	r22
 886:	b3 95       	inc	r27
 888:	d9 f7       	brne	.-10     	; 0x880 <__stack+0x21>
 88a:	3e f4       	brtc	.+14     	; 0x89a <__stack+0x3b>
 88c:	90 95       	com	r25
 88e:	80 95       	com	r24
 890:	70 95       	com	r23
 892:	61 95       	neg	r22
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	8f 4f       	sbci	r24, 0xFF	; 255
 898:	9f 4f       	sbci	r25, 0xFF	; 255
 89a:	08 95       	ret

0000089c <__floatunsisf>:
 89c:	e8 94       	clt
 89e:	09 c0       	rjmp	.+18     	; 0x8b2 <__floatsisf+0x12>

000008a0 <__floatsisf>:
 8a0:	97 fb       	bst	r25, 7
 8a2:	3e f4       	brtc	.+14     	; 0x8b2 <__floatsisf+0x12>
 8a4:	90 95       	com	r25
 8a6:	80 95       	com	r24
 8a8:	70 95       	com	r23
 8aa:	61 95       	neg	r22
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	99 23       	and	r25, r25
 8b4:	a9 f0       	breq	.+42     	; 0x8e0 <__floatsisf+0x40>
 8b6:	f9 2f       	mov	r31, r25
 8b8:	96 e9       	ldi	r25, 0x96	; 150
 8ba:	bb 27       	eor	r27, r27
 8bc:	93 95       	inc	r25
 8be:	f6 95       	lsr	r31
 8c0:	87 95       	ror	r24
 8c2:	77 95       	ror	r23
 8c4:	67 95       	ror	r22
 8c6:	b7 95       	ror	r27
 8c8:	f1 11       	cpse	r31, r1
 8ca:	f8 cf       	rjmp	.-16     	; 0x8bc <__floatsisf+0x1c>
 8cc:	fa f4       	brpl	.+62     	; 0x90c <__floatsisf+0x6c>
 8ce:	bb 0f       	add	r27, r27
 8d0:	11 f4       	brne	.+4      	; 0x8d6 <__floatsisf+0x36>
 8d2:	60 ff       	sbrs	r22, 0
 8d4:	1b c0       	rjmp	.+54     	; 0x90c <__floatsisf+0x6c>
 8d6:	6f 5f       	subi	r22, 0xFF	; 255
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	16 c0       	rjmp	.+44     	; 0x90c <__floatsisf+0x6c>
 8e0:	88 23       	and	r24, r24
 8e2:	11 f0       	breq	.+4      	; 0x8e8 <__floatsisf+0x48>
 8e4:	96 e9       	ldi	r25, 0x96	; 150
 8e6:	11 c0       	rjmp	.+34     	; 0x90a <__floatsisf+0x6a>
 8e8:	77 23       	and	r23, r23
 8ea:	21 f0       	breq	.+8      	; 0x8f4 <__floatsisf+0x54>
 8ec:	9e e8       	ldi	r25, 0x8E	; 142
 8ee:	87 2f       	mov	r24, r23
 8f0:	76 2f       	mov	r23, r22
 8f2:	05 c0       	rjmp	.+10     	; 0x8fe <__floatsisf+0x5e>
 8f4:	66 23       	and	r22, r22
 8f6:	71 f0       	breq	.+28     	; 0x914 <__floatsisf+0x74>
 8f8:	96 e8       	ldi	r25, 0x86	; 134
 8fa:	86 2f       	mov	r24, r22
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	2a f0       	brmi	.+10     	; 0x90c <__floatsisf+0x6c>
 902:	9a 95       	dec	r25
 904:	66 0f       	add	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	da f7       	brpl	.-10     	; 0x902 <__floatsisf+0x62>
 90c:	88 0f       	add	r24, r24
 90e:	96 95       	lsr	r25
 910:	87 95       	ror	r24
 912:	97 f9       	bld	r25, 7
 914:	08 95       	ret

00000916 <__fp_cmp>:
 916:	99 0f       	add	r25, r25
 918:	00 08       	sbc	r0, r0
 91a:	55 0f       	add	r21, r21
 91c:	aa 0b       	sbc	r26, r26
 91e:	e0 e8       	ldi	r30, 0x80	; 128
 920:	fe ef       	ldi	r31, 0xFE	; 254
 922:	16 16       	cp	r1, r22
 924:	17 06       	cpc	r1, r23
 926:	e8 07       	cpc	r30, r24
 928:	f9 07       	cpc	r31, r25
 92a:	c0 f0       	brcs	.+48     	; 0x95c <__fp_cmp+0x46>
 92c:	12 16       	cp	r1, r18
 92e:	13 06       	cpc	r1, r19
 930:	e4 07       	cpc	r30, r20
 932:	f5 07       	cpc	r31, r21
 934:	98 f0       	brcs	.+38     	; 0x95c <__fp_cmp+0x46>
 936:	62 1b       	sub	r22, r18
 938:	73 0b       	sbc	r23, r19
 93a:	84 0b       	sbc	r24, r20
 93c:	95 0b       	sbc	r25, r21
 93e:	39 f4       	brne	.+14     	; 0x94e <__fp_cmp+0x38>
 940:	0a 26       	eor	r0, r26
 942:	61 f0       	breq	.+24     	; 0x95c <__fp_cmp+0x46>
 944:	23 2b       	or	r18, r19
 946:	24 2b       	or	r18, r20
 948:	25 2b       	or	r18, r21
 94a:	21 f4       	brne	.+8      	; 0x954 <__fp_cmp+0x3e>
 94c:	08 95       	ret
 94e:	0a 26       	eor	r0, r26
 950:	09 f4       	brne	.+2      	; 0x954 <__fp_cmp+0x3e>
 952:	a1 40       	sbci	r26, 0x01	; 1
 954:	a6 95       	lsr	r26
 956:	8f ef       	ldi	r24, 0xFF	; 255
 958:	81 1d       	adc	r24, r1
 95a:	81 1d       	adc	r24, r1
 95c:	08 95       	ret

0000095e <__fp_inf>:
 95e:	97 f9       	bld	r25, 7
 960:	9f 67       	ori	r25, 0x7F	; 127
 962:	80 e8       	ldi	r24, 0x80	; 128
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	08 95       	ret

0000096a <__fp_nan>:
 96a:	9f ef       	ldi	r25, 0xFF	; 255
 96c:	80 ec       	ldi	r24, 0xC0	; 192
 96e:	08 95       	ret

00000970 <__fp_pscA>:
 970:	00 24       	eor	r0, r0
 972:	0a 94       	dec	r0
 974:	16 16       	cp	r1, r22
 976:	17 06       	cpc	r1, r23
 978:	18 06       	cpc	r1, r24
 97a:	09 06       	cpc	r0, r25
 97c:	08 95       	ret

0000097e <__fp_pscB>:
 97e:	00 24       	eor	r0, r0
 980:	0a 94       	dec	r0
 982:	12 16       	cp	r1, r18
 984:	13 06       	cpc	r1, r19
 986:	14 06       	cpc	r1, r20
 988:	05 06       	cpc	r0, r21
 98a:	08 95       	ret

0000098c <__fp_round>:
 98c:	09 2e       	mov	r0, r25
 98e:	03 94       	inc	r0
 990:	00 0c       	add	r0, r0
 992:	11 f4       	brne	.+4      	; 0x998 <__fp_round+0xc>
 994:	88 23       	and	r24, r24
 996:	52 f0       	brmi	.+20     	; 0x9ac <__fp_round+0x20>
 998:	bb 0f       	add	r27, r27
 99a:	40 f4       	brcc	.+16     	; 0x9ac <__fp_round+0x20>
 99c:	bf 2b       	or	r27, r31
 99e:	11 f4       	brne	.+4      	; 0x9a4 <__fp_round+0x18>
 9a0:	60 ff       	sbrs	r22, 0
 9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__fp_round+0x20>
 9a4:	6f 5f       	subi	r22, 0xFF	; 255
 9a6:	7f 4f       	sbci	r23, 0xFF	; 255
 9a8:	8f 4f       	sbci	r24, 0xFF	; 255
 9aa:	9f 4f       	sbci	r25, 0xFF	; 255
 9ac:	08 95       	ret

000009ae <__fp_split3>:
 9ae:	57 fd       	sbrc	r21, 7
 9b0:	90 58       	subi	r25, 0x80	; 128
 9b2:	44 0f       	add	r20, r20
 9b4:	55 1f       	adc	r21, r21
 9b6:	59 f0       	breq	.+22     	; 0x9ce <__fp_splitA+0x10>
 9b8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ba:	71 f0       	breq	.+28     	; 0x9d8 <__fp_splitA+0x1a>
 9bc:	47 95       	ror	r20

000009be <__fp_splitA>:
 9be:	88 0f       	add	r24, r24
 9c0:	97 fb       	bst	r25, 7
 9c2:	99 1f       	adc	r25, r25
 9c4:	61 f0       	breq	.+24     	; 0x9de <__fp_splitA+0x20>
 9c6:	9f 3f       	cpi	r25, 0xFF	; 255
 9c8:	79 f0       	breq	.+30     	; 0x9e8 <__fp_splitA+0x2a>
 9ca:	87 95       	ror	r24
 9cc:	08 95       	ret
 9ce:	12 16       	cp	r1, r18
 9d0:	13 06       	cpc	r1, r19
 9d2:	14 06       	cpc	r1, r20
 9d4:	55 1f       	adc	r21, r21
 9d6:	f2 cf       	rjmp	.-28     	; 0x9bc <__fp_split3+0xe>
 9d8:	46 95       	lsr	r20
 9da:	f1 df       	rcall	.-30     	; 0x9be <__fp_splitA>
 9dc:	08 c0       	rjmp	.+16     	; 0x9ee <__fp_splitA+0x30>
 9de:	16 16       	cp	r1, r22
 9e0:	17 06       	cpc	r1, r23
 9e2:	18 06       	cpc	r1, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	f1 cf       	rjmp	.-30     	; 0x9ca <__fp_splitA+0xc>
 9e8:	86 95       	lsr	r24
 9ea:	71 05       	cpc	r23, r1
 9ec:	61 05       	cpc	r22, r1
 9ee:	08 94       	sec
 9f0:	08 95       	ret

000009f2 <__fp_zero>:
 9f2:	e8 94       	clt

000009f4 <__fp_szero>:
 9f4:	bb 27       	eor	r27, r27
 9f6:	66 27       	eor	r22, r22
 9f8:	77 27       	eor	r23, r23
 9fa:	cb 01       	movw	r24, r22
 9fc:	97 f9       	bld	r25, 7
 9fe:	08 95       	ret

00000a00 <__tablejump2__>:
 a00:	ee 0f       	add	r30, r30
 a02:	ff 1f       	adc	r31, r31
 a04:	05 90       	lpm	r0, Z+
 a06:	f4 91       	lpm	r31, Z
 a08:	e0 2d       	mov	r30, r0
 a0a:	09 94       	ijmp

00000a0c <__muluhisi3>:
 a0c:	0e 94 11 05 	call	0xa22	; 0xa22 <__umulhisi3>
 a10:	a5 9f       	mul	r26, r21
 a12:	90 0d       	add	r25, r0
 a14:	b4 9f       	mul	r27, r20
 a16:	90 0d       	add	r25, r0
 a18:	a4 9f       	mul	r26, r20
 a1a:	80 0d       	add	r24, r0
 a1c:	91 1d       	adc	r25, r1
 a1e:	11 24       	eor	r1, r1
 a20:	08 95       	ret

00000a22 <__umulhisi3>:
 a22:	a2 9f       	mul	r26, r18
 a24:	b0 01       	movw	r22, r0
 a26:	b3 9f       	mul	r27, r19
 a28:	c0 01       	movw	r24, r0
 a2a:	a3 9f       	mul	r26, r19
 a2c:	70 0d       	add	r23, r0
 a2e:	81 1d       	adc	r24, r1
 a30:	11 24       	eor	r1, r1
 a32:	91 1d       	adc	r25, r1
 a34:	b2 9f       	mul	r27, r18
 a36:	70 0d       	add	r23, r0
 a38:	81 1d       	adc	r24, r1
 a3a:	11 24       	eor	r1, r1
 a3c:	91 1d       	adc	r25, r1
 a3e:	08 95       	ret

00000a40 <_exit>:
 a40:	f8 94       	cli

00000a42 <__stop_program>:
 a42:	ff cf       	rjmp	.-2      	; 0xa42 <__stop_program>
