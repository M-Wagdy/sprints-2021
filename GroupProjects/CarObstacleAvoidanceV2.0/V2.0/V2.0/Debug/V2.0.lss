
V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002918  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00002918  000029ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  008000c0  008000c0  00002a0c  2**0
                  ALLOC
  3 .stab         00002700  00000000  00000000  00002a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007ce  00000000  00000000  0000510c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c0  00000000  00000000  000058e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003553  00000000  00000000  00005ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011de  00000000  00000000  000090f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f5  00000000  00000000  0000a2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000084c  00000000  00000000  0000b7c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000127e  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002261  00000000  00000000  0000d292  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000f4f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ab 0a 	call	0x1556	; 0x1556 <main>
      8a:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CRASH_MainFunction>:
-----------------------------------*/
/**
* @brief: This is the main function of CRASH module.
*/
extern void CRASH_MainFunction(void)
{
      92:	cf 92       	push	r12
      94:	df 92       	push	r13
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
   ERROR_STATE_t CRASH_MainErrorState;
   
   /* Call Distance Getter Function */
   SENSING_Get(&gd64_distance);
      9a:	80 ec       	ldi	r24, 0xC0	; 192
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 88 02 	call	0x510	; 0x510 <SENSING_Get>
static ERROR_STATE_t CRASH_Logic(void)
{
   static Enu_LogicStateMachine u8_CurrentState = CRASH_Ready;
   static Enu_LogicStateMachine u8_PreviousState = CRASH_Ready;

   if(gd64_distance > gd64_UpperDistanceLimit)
      a2:	c0 90 c0 00 	lds	r12, 0x00C0
      a6:	d0 90 c1 00 	lds	r13, 0x00C1
      aa:	e0 90 c2 00 	lds	r14, 0x00C2
      ae:	f0 90 c3 00 	lds	r15, 0x00C3
      b2:	c7 01       	movw	r24, r14
      b4:	b6 01       	movw	r22, r12
      b6:	20 91 64 00 	lds	r18, 0x0064
      ba:	30 91 65 00 	lds	r19, 0x0065
      be:	40 91 66 00 	lds	r20, 0x0066
      c2:	50 91 67 00 	lds	r21, 0x0067
      c6:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__gesf2>
      ca:	18 16       	cp	r1, r24
      cc:	24 f4       	brge	.+8      	; 0xd6 <CRASH_MainFunction+0x44>
   {
      u8_CurrentState = CRASH_Forward;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 93 c7 00 	sts	0x00C7, r24
      d4:	15 c0       	rjmp	.+42     	; 0x100 <CRASH_MainFunction+0x6e>
   }
   else if (gd64_distance < gd64_LowerDistanceLimit)
      d6:	c7 01       	movw	r24, r14
      d8:	b6 01       	movw	r22, r12
      da:	20 91 60 00 	lds	r18, 0x0060
      de:	30 91 61 00 	lds	r19, 0x0061
      e2:	40 91 62 00 	lds	r20, 0x0062
      e6:	50 91 63 00 	lds	r21, 0x0063
      ea:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__cmpsf2>
      ee:	88 23       	and	r24, r24
      f0:	24 f4       	brge	.+8      	; 0xfa <CRASH_MainFunction+0x68>
   {
      u8_CurrentState = CRASH_Backward;
      f2:	82 e0       	ldi	r24, 0x02	; 2
      f4:	80 93 c7 00 	sts	0x00C7, r24
      f8:	03 c0       	rjmp	.+6      	; 0x100 <CRASH_MainFunction+0x6e>
   }
   else
   {
      u8_CurrentState = CRASH_RotateRight;
      fa:	83 e0       	ldi	r24, 0x03	; 3
      fc:	80 93 c7 00 	sts	0x00C7, r24
   }
   
   if(u8_PreviousState != u8_CurrentState)
     100:	80 91 c7 00 	lds	r24, 0x00C7
     104:	90 91 c8 00 	lds	r25, 0x00C8
     108:	98 17       	cp	r25, r24
     10a:	59 f1       	breq	.+86     	; 0x162 <CRASH_MainFunction+0xd0>
   {
      switch(u8_CurrentState)
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	81 f0       	breq	.+32     	; 0x130 <CRASH_MainFunction+0x9e>
     110:	83 30       	cpi	r24, 0x03	; 3
     112:	d9 f0       	breq	.+54     	; 0x14a <CRASH_MainFunction+0xb8>
     114:	81 30       	cpi	r24, 0x01	; 1
     116:	69 f5       	brne	.+90     	; 0x172 <CRASH_MainFunction+0xe0>
      {
         case CRASH_Forward:
            gu8_CarDirection = STEERING_FORWARD;
     118:	10 92 c4 00 	sts	0x00C4, r1
            gu8_CarSpeed = 15;
     11c:	8f e0       	ldi	r24, 0x0F	; 15
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	90 93 c6 00 	sts	0x00C6, r25
     124:	80 93 c5 00 	sts	0x00C5, r24
            u8_PreviousState = u8_CurrentState;
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	80 93 c8 00 	sts	0x00C8, r24
     12e:	19 c0       	rjmp	.+50     	; 0x162 <CRASH_MainFunction+0xd0>
            break;
         case CRASH_Backward:
            gu8_CarDirection = STEERING_BACKWARD;
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	80 93 c4 00 	sts	0x00C4, r24
            gu8_CarSpeed = 15;
     136:	8f e0       	ldi	r24, 0x0F	; 15
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	90 93 c6 00 	sts	0x00C6, r25
     13e:	80 93 c5 00 	sts	0x00C5, r24
            u8_PreviousState = u8_CurrentState;
     142:	82 e0       	ldi	r24, 0x02	; 2
     144:	80 93 c8 00 	sts	0x00C8, r24
     148:	0c c0       	rjmp	.+24     	; 0x162 <CRASH_MainFunction+0xd0>
            break;
         case CRASH_RotateRight:
            gu8_CarDirection = STEERING_RIGHT;
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	80 93 c4 00 	sts	0x00C4, r24
            gu8_CarSpeed = 100;
     150:	84 e6       	ldi	r24, 0x64	; 100
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	90 93 c6 00 	sts	0x00C6, r25
     158:	80 93 c5 00 	sts	0x00C5, r24
            u8_PreviousState = u8_CurrentState;
     15c:	83 e0       	ldi	r24, 0x03	; 3
     15e:	80 93 c8 00 	sts	0x00C8, r24
   CRASH_MainErrorState = CRASH_Logic();
   
   /* Call Speed and Direction Setters */
   if(ERROR_OK == CRASH_MainErrorState)
   {
      STEERING_Set(gu8_CarDirection, gu8_CarSpeed);
     162:	60 91 c5 00 	lds	r22, 0x00C5
     166:	70 91 c6 00 	lds	r23, 0x00C6
     16a:	80 91 c4 00 	lds	r24, 0x00C4
     16e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <STEERING_Set>
   }
}
     172:	ff 90       	pop	r15
     174:	ef 90       	pop	r14
     176:	df 90       	pop	r13
     178:	cf 90       	pop	r12
     17a:	08 95       	ret

0000017c <MONITOR_SendDataToDisplay>:
         }   
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
	uint8_t FunRetVal = OperationStarted;
	static uint8_t Position = 0;
   
	if(To_Display_Manager != NULL_PTR)
	{
		if((STR_ToDisplay.u32_MONITOR_Number != NULL_PTR) ^ (STR_ToDisplay.u8_MONITOR_String != NULL_PTR))
     180:	e0 91 d4 00 	lds	r30, 0x00D4
     184:	f0 91 d5 00 	lds	r31, 0x00D5
     188:	31 e0       	ldi	r19, 0x01	; 1
     18a:	30 97       	sbiw	r30, 0x00	; 0
     18c:	09 f4       	brne	.+2      	; 0x190 <MONITOR_SendDataToDisplay+0x14>
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	21 e0       	ldi	r18, 0x01	; 1
     192:	80 91 d2 00 	lds	r24, 0x00D2
     196:	90 91 d3 00 	lds	r25, 0x00D3
     19a:	00 97       	sbiw	r24, 0x00	; 0
     19c:	09 f4       	brne	.+2      	; 0x1a0 <MONITOR_SendDataToDisplay+0x24>
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	32 17       	cp	r19, r18
     1a2:	09 f4       	brne	.+2      	; 0x1a6 <MONITOR_SendDataToDisplay+0x2a>
     1a4:	c1 c0       	rjmp	.+386    	; 0x328 <MONITOR_SendDataToDisplay+0x1ac>
		{
			switch(State)
     1a6:	80 91 8c 00 	lds	r24, 0x008C
     1aa:	82 30       	cpi	r24, 0x02	; 2
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <MONITOR_SendDataToDisplay+0x34>
     1ae:	74 c0       	rjmp	.+232    	; 0x298 <MONITOR_SendDataToDisplay+0x11c>
     1b0:	83 30       	cpi	r24, 0x03	; 3
     1b2:	38 f4       	brcc	.+14     	; 0x1c2 <MONITOR_SendDataToDisplay+0x46>
     1b4:	88 23       	and	r24, r24
     1b6:	09 f4       	brne	.+2      	; 0x1ba <MONITOR_SendDataToDisplay+0x3e>
     1b8:	57 c0       	rjmp	.+174    	; 0x268 <MONITOR_SendDataToDisplay+0xec>
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <MONITOR_SendDataToDisplay+0x44>
     1be:	b6 c0       	rjmp	.+364    	; 0x32c <MONITOR_SendDataToDisplay+0x1b0>
     1c0:	5f c0       	rjmp	.+190    	; 0x280 <MONITOR_SendDataToDisplay+0x104>
     1c2:	84 30       	cpi	r24, 0x04	; 4
     1c4:	09 f4       	brne	.+2      	; 0x1c8 <MONITOR_SendDataToDisplay+0x4c>
     1c6:	87 c0       	rjmp	.+270    	; 0x2d6 <MONITOR_SendDataToDisplay+0x15a>
     1c8:	84 30       	cpi	r24, 0x04	; 4
     1ca:	08 f4       	brcc	.+2      	; 0x1ce <MONITOR_SendDataToDisplay+0x52>
     1cc:	42 c0       	rjmp	.+132    	; 0x252 <MONITOR_SendDataToDisplay+0xd6>
     1ce:	8f 3f       	cpi	r24, 0xFF	; 255
     1d0:	09 f0       	breq	.+2      	; 0x1d4 <MONITOR_SendDataToDisplay+0x58>
     1d2:	ac c0       	rjmp	.+344    	; 0x32c <MONITOR_SendDataToDisplay+0x1b0>
			{
         case OperationStarted:
            /*logic of data sending starts here*/
            /*Determine the Position*/
            if((STR_ToDisplay.u32_MONITOR_Ypos == 0) & (STR_ToDisplay.u32_MONITOR_Xpos < 16))
     1d4:	40 91 ce 00 	lds	r20, 0x00CE
     1d8:	50 91 cf 00 	lds	r21, 0x00CF
     1dc:	60 91 d0 00 	lds	r22, 0x00D0
     1e0:	70 91 d1 00 	lds	r23, 0x00D1
     1e4:	80 91 ca 00 	lds	r24, 0x00CA
     1e8:	90 91 cb 00 	lds	r25, 0x00CB
     1ec:	a0 91 cc 00 	lds	r26, 0x00CC
     1f0:	b0 91 cd 00 	lds	r27, 0x00CD
     1f4:	31 e0       	ldi	r19, 0x01	; 1
     1f6:	80 31       	cpi	r24, 0x10	; 16
     1f8:	91 05       	cpc	r25, r1
     1fa:	a1 05       	cpc	r26, r1
     1fc:	b1 05       	cpc	r27, r1
     1fe:	08 f0       	brcs	.+2      	; 0x202 <MONITOR_SendDataToDisplay+0x86>
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	41 15       	cp	r20, r1
     206:	51 05       	cpc	r21, r1
     208:	61 05       	cpc	r22, r1
     20a:	71 05       	cpc	r23, r1
     20c:	09 f0       	breq	.+2      	; 0x210 <MONITOR_SendDataToDisplay+0x94>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	22 23       	and	r18, r18
     212:	51 f0       	breq	.+20     	; 0x228 <MONITOR_SendDataToDisplay+0xac>
     214:	33 23       	and	r19, r19
     216:	41 f0       	breq	.+16     	; 0x228 <MONITOR_SendDataToDisplay+0xac>
            {
               Position = LCD_CURS_Position0 | STR_ToDisplay.u32_MONITOR_Xpos;
     218:	80 68       	ori	r24, 0x80	; 128
     21a:	80 93 e2 00 	sts	0x00E2, r24
               ErrRetVal = OperationRunning;
               State = GoToPosition;
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	80 93 8c 00 	sts	0x008C, r24
            /*logic of data sending starts here*/
            /*Determine the Position*/
            if((STR_ToDisplay.u32_MONITOR_Ypos == 0) & (STR_ToDisplay.u32_MONITOR_Xpos < 16))
            {
               Position = LCD_CURS_Position0 | STR_ToDisplay.u32_MONITOR_Xpos;
               ErrRetVal = OperationRunning;
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	91 c0       	rjmp	.+290    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
               State = GoToPosition;
            }
            else if((STR_ToDisplay.u32_MONITOR_Ypos == 1) & (STR_ToDisplay.u32_MONITOR_Xpos < 16))
     228:	33 23       	and	r19, r19
     22a:	09 f4       	brne	.+2      	; 0x22e <MONITOR_SendDataToDisplay+0xb2>
     22c:	81 c0       	rjmp	.+258    	; 0x330 <MONITOR_SendDataToDisplay+0x1b4>
     22e:	21 e0       	ldi	r18, 0x01	; 1
     230:	41 30       	cpi	r20, 0x01	; 1
     232:	51 05       	cpc	r21, r1
     234:	61 05       	cpc	r22, r1
     236:	71 05       	cpc	r23, r1
     238:	09 f0       	breq	.+2      	; 0x23c <MONITOR_SendDataToDisplay+0xc0>
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	22 23       	and	r18, r18
     23e:	09 f4       	brne	.+2      	; 0x242 <MONITOR_SendDataToDisplay+0xc6>
     240:	77 c0       	rjmp	.+238    	; 0x330 <MONITOR_SendDataToDisplay+0x1b4>
            {
               Position = LCD_CURS_LINE2 | STR_ToDisplay.u32_MONITOR_Xpos;
     242:	80 6c       	ori	r24, 0xC0	; 192
     244:	80 93 e2 00 	sts	0x00E2, r24
               ErrRetVal = OperationRunning;
               State = GoToPosition;
     248:	83 e0       	ldi	r24, 0x03	; 3
     24a:	80 93 8c 00 	sts	0x008C, r24
               State = GoToPosition;
            }
            else if((STR_ToDisplay.u32_MONITOR_Ypos == 1) & (STR_ToDisplay.u32_MONITOR_Xpos < 16))
            {
               Position = LCD_CURS_LINE2 | STR_ToDisplay.u32_MONITOR_Xpos;
               ErrRetVal = OperationRunning;
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	7c c0       	rjmp	.+248    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
               ErrRetVal = OperationFail;
            }
            break;
         case GoToPosition:
            /*go to position*/
				FunRetVal = LCD_SendCommand(Position);
     252:	80 91 e2 00 	lds	r24, 0x00E2
     256:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendCommand>
				if(FunRetVal==OperationSuccess)
     25a:	88 23       	and	r24, r24
     25c:	09 f0       	breq	.+2      	; 0x260 <MONITOR_SendDataToDisplay+0xe4>
     25e:	6a c0       	rjmp	.+212    	; 0x334 <MONITOR_SendDataToDisplay+0x1b8>
				{
					State = CursorAtPosition;//CursorAtPosition
     260:	10 92 8c 00 	sts	0x008C, r1
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	71 c0       	rjmp	.+226    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
				{
					State = CursorAtPosition;//CursorAtPosition
				}
				break;
			case CursorAtPosition:
				FunRetVal = LCD_SendString((uint8_t*)"          ");
     268:	88 e6       	ldi	r24, 0x68	; 104
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD_SendString>
				if(FunRetVal == OperationSuccess)
     270:	88 23       	and	r24, r24
     272:	09 f0       	breq	.+2      	; 0x276 <MONITOR_SendDataToDisplay+0xfa>
     274:	61 c0       	rjmp	.+194    	; 0x338 <MONITOR_SendDataToDisplay+0x1bc>
				{
					State = SpaceCleared;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	80 93 8c 00 	sts	0x008C, r24
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     27c:	8f ef       	ldi	r24, 0xFF	; 255
     27e:	65 c0       	rjmp	.+202    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
				{
					State = SpaceCleared;
				}
				break;
			case SpaceCleared:
				FunRetVal = LCD_SendCommand(Position);
     280:	80 91 e2 00 	lds	r24, 0x00E2
     284:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendCommand>
				if(FunRetVal == OperationSuccess)
     288:	88 23       	and	r24, r24
     28a:	09 f0       	breq	.+2      	; 0x28e <MONITOR_SendDataToDisplay+0x112>
     28c:	57 c0       	rjmp	.+174    	; 0x33c <MONITOR_SendDataToDisplay+0x1c0>
				{
					State = CursorHoming;
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	80 93 8c 00 	sts	0x008C, r24
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     294:	8f ef       	ldi	r24, 0xFF	; 255
     296:	59 c0       	rjmp	.+178    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
				{
					State = CursorHoming;
				}
				break;
			case CursorHoming:
				if(To_Display_Manager->u32_MONITOR_Number==NULL_PTR)
     298:	30 97       	sbiw	r30, 0x00	; 0
     29a:	81 f4       	brne	.+32     	; 0x2bc <MONITOR_SendDataToDisplay+0x140>
				{
					FunRetVal = OperationStarted;
               while (OperationSuccess != FunRetVal)
               {
                  FunRetVal = LCD_SendString((To_Display_Manager->u8_MONITOR_String));
     29c:	c2 ed       	ldi	r28, 0xD2	; 210
     29e:	d0 e0       	ldi	r29, 0x00	; 0
     2a0:	88 81       	ld	r24, Y
     2a2:	99 81       	ldd	r25, Y+1	; 0x01
     2a4:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD_SendString>
				break;
			case CursorHoming:
				if(To_Display_Manager->u32_MONITOR_Number==NULL_PTR)
				{
					FunRetVal = OperationStarted;
               while (OperationSuccess != FunRetVal)
     2a8:	88 23       	and	r24, r24
     2aa:	d1 f7       	brne	.-12     	; 0x2a0 <MONITOR_SendDataToDisplay+0x124>
               {
                  FunRetVal = LCD_SendString((To_Display_Manager->u8_MONITOR_String));
               }                  
					if(FunRetVal == OperationSuccess)
     2ac:	88 23       	and	r24, r24
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <MONITOR_SendDataToDisplay+0x136>
     2b0:	47 c0       	rjmp	.+142    	; 0x340 <MONITOR_SendDataToDisplay+0x1c4>
					{
						State = MonitorDelay;
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	80 93 8c 00 	sts	0x008C, r24
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	47 c0       	rjmp	.+142    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
						State = MonitorDelay;
					}
				}
				else
				{
					FunRetVal = LCD_SendNumber(*(To_Display_Manager->u32_MONITOR_Number));
     2bc:	60 81       	ld	r22, Z
     2be:	71 81       	ldd	r23, Z+1	; 0x01
     2c0:	82 81       	ldd	r24, Z+2	; 0x02
     2c2:	93 81       	ldd	r25, Z+3	; 0x03
     2c4:	0e 94 89 06 	call	0xd12	; 0xd12 <LCD_SendNumber>
					if(FunRetVal == OperationSuccess)
     2c8:	88 23       	and	r24, r24
     2ca:	e1 f5       	brne	.+120    	; 0x344 <MONITOR_SendDataToDisplay+0x1c8>
					{
						State = MonitorDelay;
     2cc:	84 e0       	ldi	r24, 0x04	; 4
     2ce:	80 93 8c 00 	sts	0x008C, r24
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
     2d4:	3a c0       	rjmp	.+116    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
						State = MonitorDelay;
					}
				}
				break;
         case MonitorDelay:
            FunRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
     2d6:	c4 e2       	ldi	r28, 0x24	; 36
     2d8:	d3 e0       	ldi	r29, 0x03	; 3
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	be 01       	movw	r22, r28
     2de:	0e 94 96 11 	call	0x232c	; 0x232c <TIM_DelayStatus>
            if(TIMER_E_DELAY_EMPTY == FunRetVal)
     2e2:	8b 3f       	cpi	r24, 0xFB	; 251
     2e4:	51 f4       	brne	.+20     	; 0x2fa <MONITOR_SendDataToDisplay+0x17e>
            {
               TIM_DelayMs(TIMER_2,50, LCD_SendCommand);
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	42 e3       	ldi	r20, 0x32	; 50
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	9e 01       	movw	r18, r28
     2f2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <TIM_DelayMs>
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	28 c0       	rjmp	.+80     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
            FunRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
            if(TIMER_E_DELAY_EMPTY == FunRetVal)
            {
               TIM_DelayMs(TIMER_2,50, LCD_SendCommand);
            }
            if(FunRetVal == ((uint8_t)ERROR_OK))
     2fa:	88 23       	and	r24, r24
     2fc:	29 f5       	brne	.+74     	; 0x348 <MONITOR_SendDataToDisplay+0x1cc>
            {
               ErrRetVal = OperationSuccess;
               u32_PrevNumber = u32_Number;
     2fe:	80 91 da 00 	lds	r24, 0x00DA
     302:	90 91 db 00 	lds	r25, 0x00DB
     306:	a0 91 dc 00 	lds	r26, 0x00DC
     30a:	b0 91 dd 00 	lds	r27, 0x00DD
     30e:	80 93 de 00 	sts	0x00DE, r24
     312:	90 93 df 00 	sts	0x00DF, r25
     316:	a0 93 e0 00 	sts	0x00E0, r26
     31a:	b0 93 e1 00 	sts	0x00E1, r27
               State = OperationStarted;
     31e:	8f ef       	ldi	r24, 0xFF	; 255
     320:	80 93 8c 00 	sts	0x008C, r24
            {
               TIM_DelayMs(TIMER_2,50, LCD_SendCommand);
            }
            if(FunRetVal == ((uint8_t)ERROR_OK))
            {
               ErrRetVal = OperationSuccess;
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	11 c0       	rjmp	.+34     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
            }
			}			
		}
		else
		{
			ErrRetVal = OperationFail;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	0f c0       	rjmp	.+30     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	0d c0       	rjmp	.+26     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
               ErrRetVal = OperationRunning;
               State = GoToPosition;
            }
            else
            {
               ErrRetVal = OperationFail;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	0b c0       	rjmp	.+22     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	09 c0       	rjmp	.+18     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	07 c0       	rjmp	.+14     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
     33c:	8f ef       	ldi	r24, 0xFF	; 255
     33e:	05 c0       	rjmp	.+10     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	03 c0       	rjmp	.+6      	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	01 c0       	rjmp	.+2      	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
     348:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret

00000350 <MONITOR_MainFunction>:
#define InitializationFlag_3  (3)
void MONITOR_MainFunction(void)
{
   uint8_t FunRetVal = OperationStarted;
   
	if(InitializationFlag == InitializationFlag_0)
     350:	80 91 c9 00 	lds	r24, 0x00C9
     354:	88 23       	and	r24, r24
     356:	49 f4       	brne	.+18     	; 0x36a <MONITOR_MainFunction+0x1a>
	{
		FunRetVal = LCD_Init();
     358:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_Init>
		if(FunRetVal == OperationSuccess)
     35c:	88 23       	and	r24, r24
     35e:	09 f0       	breq	.+2      	; 0x362 <MONITOR_MainFunction+0x12>
     360:	a9 c0       	rjmp	.+338    	; 0x4b4 <MONITOR_MainFunction+0x164>
		{
			InitializationFlag = InitializationFlag_1;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 c9 00 	sts	0x00C9, r24
     368:	08 95       	ret
		}
	}
   else if (1 == InitializationFlag)
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	e9 f4       	brne	.+58     	; 0x3a8 <MONITOR_MainFunction+0x58>
   {
      STR_ToDisplay.u8_MONITOR_String = (uint8_t*)"Distance: ";
     36e:	83 e7       	ldi	r24, 0x73	; 115
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	90 93 d3 00 	sts	0x00D3, r25
     376:	80 93 d2 00 	sts	0x00D2, r24
      STR_ToDisplay.u32_MONITOR_Number = NULL_PTR;
     37a:	10 92 d5 00 	sts	0x00D5, r1
     37e:	10 92 d4 00 	sts	0x00D4, r1
      STR_ToDisplay.u32_MONITOR_Xpos = 0;
     382:	ea ec       	ldi	r30, 0xCA	; 202
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	10 82       	st	Z, r1
     388:	11 82       	std	Z+1, r1	; 0x01
     38a:	12 82       	std	Z+2, r1	; 0x02
     38c:	13 82       	std	Z+3, r1	; 0x03
      STR_ToDisplay.u32_MONITOR_Ypos = 0;
     38e:	14 82       	std	Z+4, r1	; 0x04
     390:	15 82       	std	Z+5, r1	; 0x05
     392:	16 82       	std	Z+6, r1	; 0x06
     394:	17 82       	std	Z+7, r1	; 0x07
      FunRetVal = MONITOR_SendDataToDisplay();
     396:	0e 94 be 00 	call	0x17c	; 0x17c <MONITOR_SendDataToDisplay>
      if(FunRetVal == OperationSuccess)
     39a:	88 23       	and	r24, r24
     39c:	09 f0       	breq	.+2      	; 0x3a0 <MONITOR_MainFunction+0x50>
     39e:	8a c0       	rjmp	.+276    	; 0x4b4 <MONITOR_MainFunction+0x164>
      {
         InitializationFlag = InitializationFlag_2;
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	80 93 c9 00 	sts	0x00C9, r24
     3a6:	08 95       	ret
      }
   }      
   else if (2 == InitializationFlag)
     3a8:	82 30       	cpi	r24, 0x02	; 2
     3aa:	29 f5       	brne	.+74     	; 0x3f6 <MONITOR_MainFunction+0xa6>
   {
      STR_ToDisplay.u8_MONITOR_String = (uint8_t*)"AMR_TEAM";
     3ac:	8e e7       	ldi	r24, 0x7E	; 126
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 d3 00 	sts	0x00D3, r25
     3b4:	80 93 d2 00 	sts	0x00D2, r24
      STR_ToDisplay.u32_MONITOR_Number = NULL_PTR;
     3b8:	10 92 d5 00 	sts	0x00D5, r1
     3bc:	10 92 d4 00 	sts	0x00D4, r1
      STR_ToDisplay.u32_MONITOR_Xpos = 4;
     3c0:	ea ec       	ldi	r30, 0xCA	; 202
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	84 e0       	ldi	r24, 0x04	; 4
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	80 83       	st	Z, r24
     3ce:	91 83       	std	Z+1, r25	; 0x01
     3d0:	a2 83       	std	Z+2, r26	; 0x02
     3d2:	b3 83       	std	Z+3, r27	; 0x03
      STR_ToDisplay.u32_MONITOR_Ypos = 1;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	a0 e0       	ldi	r26, 0x00	; 0
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	84 83       	std	Z+4, r24	; 0x04
     3de:	95 83       	std	Z+5, r25	; 0x05
     3e0:	a6 83       	std	Z+6, r26	; 0x06
     3e2:	b7 83       	std	Z+7, r27	; 0x07
      FunRetVal = MONITOR_SendDataToDisplay();
     3e4:	0e 94 be 00 	call	0x17c	; 0x17c <MONITOR_SendDataToDisplay>
      if(FunRetVal == OperationSuccess)
     3e8:	88 23       	and	r24, r24
     3ea:	09 f0       	breq	.+2      	; 0x3ee <MONITOR_MainFunction+0x9e>
     3ec:	63 c0       	rjmp	.+198    	; 0x4b4 <MONITOR_MainFunction+0x164>
      {
         InitializationFlag = InitializationFlag_3;
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	80 93 c9 00 	sts	0x00C9, r24
     3f4:	08 95       	ret
      }
   }      
	else
	{
		SENSING_Get(&number);
     3f6:	86 ed       	ldi	r24, 0xD6	; 214
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 88 02 	call	0x510	; 0x510 <SENSING_Get>
		u32_Number=(uint32_t)number;
     3fe:	60 91 d6 00 	lds	r22, 0x00D6
     402:	70 91 d7 00 	lds	r23, 0x00D7
     406:	80 91 d8 00 	lds	r24, 0x00D8
     40a:	90 91 d9 00 	lds	r25, 0x00D9
     40e:	0e 94 c6 12 	call	0x258c	; 0x258c <__fixunssfsi>
     412:	dc 01       	movw	r26, r24
     414:	cb 01       	movw	r24, r22
     416:	80 93 da 00 	sts	0x00DA, r24
     41a:	90 93 db 00 	sts	0x00DB, r25
     41e:	a0 93 dc 00 	sts	0x00DC, r26
     422:	b0 93 dd 00 	sts	0x00DD, r27
      if(u32_PrevNumber != u32_Number)
     426:	40 91 de 00 	lds	r20, 0x00DE
     42a:	50 91 df 00 	lds	r21, 0x00DF
     42e:	60 91 e0 00 	lds	r22, 0x00E0
     432:	70 91 e1 00 	lds	r23, 0x00E1
     436:	84 17       	cp	r24, r20
     438:	95 07       	cpc	r25, r21
     43a:	a6 07       	cpc	r26, r22
     43c:	b7 07       	cpc	r27, r23
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <MONITOR_MainFunction+0x164>
      {
         if(u32_Number<=150)
     440:	87 39       	cpi	r24, 0x97	; 151
     442:	91 05       	cpc	r25, r1
     444:	a1 05       	cpc	r26, r1
     446:	b1 05       	cpc	r27, r1
     448:	d8 f4       	brcc	.+54     	; 0x480 <MONITOR_MainFunction+0x130>
         {
            STR_ToDisplay.u8_MONITOR_String = NULL_PTR;
     44a:	10 92 d3 00 	sts	0x00D3, r1
     44e:	10 92 d2 00 	sts	0x00D2, r1
            STR_ToDisplay.u32_MONITOR_Number = &u32_Number;
     452:	8a ed       	ldi	r24, 0xDA	; 218
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	90 93 d5 00 	sts	0x00D5, r25
     45a:	80 93 d4 00 	sts	0x00D4, r24
            STR_ToDisplay.u32_MONITOR_Xpos = 10;
     45e:	ea ec       	ldi	r30, 0xCA	; 202
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	8a e0       	ldi	r24, 0x0A	; 10
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	a0 e0       	ldi	r26, 0x00	; 0
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	80 83       	st	Z, r24
     46c:	91 83       	std	Z+1, r25	; 0x01
     46e:	a2 83       	std	Z+2, r26	; 0x02
     470:	b3 83       	std	Z+3, r27	; 0x03
            STR_ToDisplay.u32_MONITOR_Ypos = 0;
     472:	14 82       	std	Z+4, r1	; 0x04
     474:	15 82       	std	Z+5, r1	; 0x05
     476:	16 82       	std	Z+6, r1	; 0x06
     478:	17 82       	std	Z+7, r1	; 0x07
            FunRetVal = MONITOR_SendDataToDisplay();
     47a:	0e 94 be 00 	call	0x17c	; 0x17c <MONITOR_SendDataToDisplay>
     47e:	08 95       	ret
            
         }
         else
         {
            STR_ToDisplay.u8_MONITOR_String = (uint8_t*)"FREE";
     480:	87 e8       	ldi	r24, 0x87	; 135
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	90 93 d3 00 	sts	0x00D3, r25
     488:	80 93 d2 00 	sts	0x00D2, r24
            STR_ToDisplay.u32_MONITOR_Number = NULL_PTR;
     48c:	10 92 d5 00 	sts	0x00D5, r1
     490:	10 92 d4 00 	sts	0x00D4, r1
            STR_ToDisplay.u32_MONITOR_Xpos = 10;
     494:	ea ec       	ldi	r30, 0xCA	; 202
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	8a e0       	ldi	r24, 0x0A	; 10
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	a0 e0       	ldi	r26, 0x00	; 0
     49e:	b0 e0       	ldi	r27, 0x00	; 0
     4a0:	80 83       	st	Z, r24
     4a2:	91 83       	std	Z+1, r25	; 0x01
     4a4:	a2 83       	std	Z+2, r26	; 0x02
     4a6:	b3 83       	std	Z+3, r27	; 0x03
            STR_ToDisplay.u32_MONITOR_Ypos = 0;
     4a8:	14 82       	std	Z+4, r1	; 0x04
     4aa:	15 82       	std	Z+5, r1	; 0x05
     4ac:	16 82       	std	Z+6, r1	; 0x06
     4ae:	17 82       	std	Z+7, r1	; 0x07
            FunRetVal = MONITOR_SendDataToDisplay();
     4b0:	0e 94 be 00 	call	0x17c	; 0x17c <MONITOR_SendDataToDisplay>
     4b4:	08 95       	ret

000004b6 <MONITOR_Set>:

static STR_MONITOR_data_t * From_Outside_To_Inside = NULL_PTR;
ERROR_STATE_t MONITOR_Set(STR_MONITOR_data_t * Data_To_Display)
{
	uint8_t ErrRetVal = 0;
	From_Outside_To_Inside = Data_To_Display;
     4b6:	90 93 e4 00 	sts	0x00E4, r25
     4ba:	80 93 e3 00 	sts	0x00E3, r24
	return ErrRetVal;
}
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	08 95       	ret

000004c2 <MONITOR_Get>:
	if(From_Outside_To_Inside != NULL_PTR)
	{
		Data_From_Display = From_Outside_To_Inside;	
	}
	return ErrRetVal;
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	08 95       	ret

000004c6 <SENSING_MainFunction>:
	u8_ErrorState = USONIC_Init();
	return u8_ErrorState;
}

void SENSING_MainFunction(void)
{
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <SENSING_MainFunction+0x6>
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <SENSING_MainFunction+0x8>
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
	double64_t d64_Distance;
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
     4d2:	80 91 e5 00 	lds	r24, 0x00E5
     4d6:	88 23       	and	r24, r24
     4d8:	41 f4       	brne	.+16     	; 0x4ea <SENSING_MainFunction+0x24>

static ERROR_STATE_t SENSING_Init(void);
static ERROR_STATE_t SENSING_Init(void)
{
	uint8_t u8_ErrorState=ERROR_NOK;
	u8_ErrorState = USONIC_Init();
     4da:	0e 94 96 08 	call	0x112c	; 0x112c <USONIC_Init>
void SENSING_MainFunction(void)
{
	double64_t d64_Distance;
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
		if(ERROR_OK==SENSING_Init()){
     4de:	88 23       	and	r24, r24
     4e0:	81 f4       	brne	.+32     	; 0x502 <SENSING_MainFunction+0x3c>
			u8_InitFlag=INIT;
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	80 93 e5 00 	sts	0x00E5, r24
     4e8:	0c c0       	rjmp	.+24     	; 0x502 <SENSING_MainFunction+0x3c>
		}
	}
	else
	{
		uint8_t u8_UsonicState = USONIC_GetDistance(&d64_Distance);
     4ea:	ce 01       	movw	r24, r28
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	0e 94 c0 08 	call	0x1180	; 0x1180 <USONIC_GetDistance>
		if(ERROR_OK==u8_UsonicState)
     4f2:	88 23       	and	r24, r24
     4f4:	31 f4       	brne	.+12     	; 0x502 <SENSING_MainFunction+0x3c>
		{
			SENSING_Set(d64_Distance);
     4f6:	69 81       	ldd	r22, Y+1	; 0x01
     4f8:	7a 81       	ldd	r23, Y+2	; 0x02
     4fa:	8b 81       	ldd	r24, Y+3	; 0x03
     4fc:	9c 81       	ldd	r25, Y+4	; 0x04
     4fe:	0e 94 9b 02 	call	0x536	; 0x536 <SENSING_Set>
		}	
	}			
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <SENSING_Get>:

ERROR_STATE_t SENSING_Get(ptr_double64_t Distance)
{
	uint8_t u8_ErrorState = ERROR_OK;
	
	if(NULL_PTR==Distance)
     510:	00 97       	sbiw	r24, 0x00	; 0
     512:	79 f0       	breq	.+30     	; 0x532 <SENSING_Get+0x22>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		*Distance = gd64_Distance;
     514:	40 91 e6 00 	lds	r20, 0x00E6
     518:	50 91 e7 00 	lds	r21, 0x00E7
     51c:	60 91 e8 00 	lds	r22, 0x00E8
     520:	70 91 e9 00 	lds	r23, 0x00E9
     524:	fc 01       	movw	r30, r24
     526:	40 83       	st	Z, r20
     528:	51 83       	std	Z+1, r21	; 0x01
     52a:	62 83       	std	Z+2, r22	; 0x02
     52c:	73 83       	std	Z+3, r23	; 0x03
		u8_ErrorState = ERROR_OK;
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	08 95       	ret
{
	uint8_t u8_ErrorState = ERROR_OK;
	
	if(NULL_PTR==Distance)
	{
		u8_ErrorState = ERROR_NOK;
     532:	81 e0       	ldi	r24, 0x01	; 1
	{
		*Distance = gd64_Distance;
		u8_ErrorState = ERROR_OK;
	}
	return u8_ErrorState;
}
     534:	08 95       	ret

00000536 <SENSING_Set>:

ERROR_STATE_t SENSING_Set(double64_t Distance)
{
     536:	dc 01       	movw	r26, r24
     538:	cb 01       	movw	r24, r22
	uint8_t u8_ErrorState=ERROR_OK;
	
	gd64_Distance = Distance;
     53a:	80 93 e6 00 	sts	0x00E6, r24
     53e:	90 93 e7 00 	sts	0x00E7, r25
     542:	a0 93 e8 00 	sts	0x00E8, r26
     546:	b0 93 e9 00 	sts	0x00E9, r27
	
	return u8_ErrorState;
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	08 95       	ret

0000054e <STEERING_MainFunction>:
* @brief: This function Moves the robot to a given direction.
*/
extern void STEERING_MainFunction(void)
{
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
     54e:	80 91 ea 00 	lds	r24, 0x00EA
     552:	88 23       	and	r24, r24
     554:	41 f4       	brne	.+16     	; 0x566 <STEERING_MainFunction+0x18>
------------------------*/
static ERROR_STATE_t STEERING_Init(void)
{
   ERROR_STATE_t MOTOR_ErrorState = ERROR_NOK;
   
   MOTOR_ErrorState = MOTOR_init();
     556:	0e 94 a7 06 	call	0xd4e	; 0xd4e <MOTOR_init>
*/
extern void STEERING_MainFunction(void)
{
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
		if(ERROR_OK==STEERING_Init()){
     55a:	88 23       	and	r24, r24
     55c:	21 f4       	brne	.+8      	; 0x566 <STEERING_MainFunction+0x18>
			u8_InitFlag=INIT;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	80 93 ea 00 	sts	0x00EA, r24
     564:	05 c0       	rjmp	.+10     	; 0x570 <STEERING_MainFunction+0x22>
		}
	}
	else{
        //DO Nothing
	}
    if(INIT==u8_InitFlag){
     566:	80 91 ea 00 	lds	r24, 0x00EA
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	09 f0       	breq	.+2      	; 0x570 <STEERING_MainFunction+0x22>
     56e:	44 c0       	rjmp	.+136    	; 0x5f8 <STEERING_MainFunction+0xaa>
		STEERING_Get(&u8_dir,&u16_speed);
     570:	8b ee       	ldi	r24, 0xEB	; 235
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	6c ee       	ldi	r22, 0xEC	; 236
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	0e 94 0e 03 	call	0x61c	; 0x61c <STEERING_Get>
		switch(u8_dir)
     57c:	80 91 eb 00 	lds	r24, 0x00EB
     580:	81 30       	cpi	r24, 0x01	; 1
     582:	a1 f0       	breq	.+40     	; 0x5ac <STEERING_MainFunction+0x5e>
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	28 f0       	brcs	.+10     	; 0x592 <STEERING_MainFunction+0x44>
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	e9 f0       	breq	.+58     	; 0x5c6 <STEERING_MainFunction+0x78>
     58c:	83 30       	cpi	r24, 0x03	; 3
     58e:	a1 f5       	brne	.+104    	; 0x5f8 <STEERING_MainFunction+0xaa>
     590:	27 c0       	rjmp	.+78     	; 0x5e0 <STEERING_MainFunction+0x92>
		{
		  case STEERING_FORWARD:
             MOTOR_start(MOTOR1, u16_speed, MOTOR_FORWARD);
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	60 91 ec 00 	lds	r22, 0x00EC
     598:	41 e0       	ldi	r20, 0x01	; 1
     59a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_start>
             MOTOR_start(MOTOR2, u16_speed, MOTOR_FORWARD);
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	60 91 ec 00 	lds	r22, 0x00EC
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_start>
			 break;
     5aa:	08 95       	ret
		  case STEERING_BACKWARD:
			 MOTOR_start(MOTOR1, u16_speed, MOTOR_BACKWARD);
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	60 91 ec 00 	lds	r22, 0x00EC
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_start>
             MOTOR_start(MOTOR2, u16_speed, MOTOR_BACKWARD);
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	60 91 ec 00 	lds	r22, 0x00EC
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_start>
			 break;
     5c4:	08 95       	ret
		  case STEERING_RIGHT:
			 MOTOR_start(MOTOR1, u16_speed, MOTOR_BACKWARD);
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	60 91 ec 00 	lds	r22, 0x00EC
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_start>
			 MOTOR_start(MOTOR2, u16_speed, MOTOR_FORWARD);
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	60 91 ec 00 	lds	r22, 0x00EC
     5d8:	41 e0       	ldi	r20, 0x01	; 1
     5da:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_start>
			 break;
     5de:	08 95       	ret
		  case STEERING_LEFT:
			 MOTOR_start(MOTOR1, u16_speed, MOTOR_FORWARD);
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	60 91 ec 00 	lds	r22, 0x00EC
     5e6:	41 e0       	ldi	r20, 0x01	; 1
     5e8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_start>
			 MOTOR_start(MOTOR2, u16_speed, MOTOR_BACKWARD);
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	60 91 ec 00 	lds	r22, 0x00EC
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_start>
     5f8:	08 95       	ret

000005fa <STEERING_Set>:
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Set(uint8_t  Dir, uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF INVALID DIRECTION*/
	if(Dir>=INVALID_STEERING){
     5fa:	84 30       	cpi	r24, 0x04	; 4
     5fc:	58 f4       	brcc	.+22     	; 0x614 <STEERING_Set+0x1a>
		STEERING_ErrorState = ERROR_NOK;
	}
	/*CHECK IF INVLAID SPEED*/
	else if(Speed>STEERING_MAX_SPEED){
     5fe:	65 36       	cpi	r22, 0x65	; 101
     600:	71 05       	cpc	r23, r1
     602:	50 f4       	brcc	.+20     	; 0x618 <STEERING_Set+0x1e>
		STEERING_ErrorState = ERROR_NOK;
	}
	else{
		/*SET THE SPEED*/
		gstr_Steering_State.u16_steering_Speed=Speed;
     604:	70 93 ef 00 	sts	0x00EF, r23
     608:	60 93 ee 00 	sts	0x00EE, r22
		/*SET THE DIRECTION*/
		gstr_Steering_State.u8_steering_Dir=Dir;
     60c:	80 93 f0 00 	sts	0x00F0, r24
		STEERING_ErrorState = ERROR_OK;
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	08 95       	ret
*/
extern ERROR_STATE_t  STEERING_Set(uint8_t  Dir, uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF INVALID DIRECTION*/
	if(Dir>=INVALID_STEERING){
		STEERING_ErrorState = ERROR_NOK;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	08 95       	ret
	}
	/*CHECK IF INVLAID SPEED*/
	else if(Speed>STEERING_MAX_SPEED){
		STEERING_ErrorState = ERROR_NOK;
     618:	81 e0       	ldi	r24, 0x01	; 1
		/*SET THE DIRECTION*/
		gstr_Steering_State.u8_steering_Dir=Dir;
		STEERING_ErrorState = ERROR_OK;
	}
	return STEERING_ErrorState;
}
     61a:	08 95       	ret

0000061c <STEERING_Get>:
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Get(ptr_uint8_t  Dir, ptr_uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF NULL_PTR*/
	if((NULL_PTR==Dir)||(NULL_PTR==Speed))
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	81 f0       	breq	.+32     	; 0x640 <STEERING_Get+0x24>
     620:	61 15       	cp	r22, r1
     622:	71 05       	cpc	r23, r1
     624:	79 f0       	breq	.+30     	; 0x644 <STEERING_Get+0x28>
		STEERING_ErrorState=ERROR_NOK;
	}
	else
    {
		/*GET THE SPEED*/
		*(Speed)=gstr_Steering_State.u16_steering_Speed;
     626:	20 91 ee 00 	lds	r18, 0x00EE
     62a:	30 91 ef 00 	lds	r19, 0x00EF
     62e:	fb 01       	movw	r30, r22
     630:	31 83       	std	Z+1, r19	; 0x01
     632:	20 83       	st	Z, r18
		/*GET THE DIRECTION*/
		*(Dir)=gstr_Steering_State.u8_steering_Dir;
     634:	20 91 f0 00 	lds	r18, 0x00F0
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
		STEERING_ErrorState = ERROR_OK;
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	08 95       	ret
extern ERROR_STATE_t  STEERING_Get(ptr_uint8_t  Dir, ptr_uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF NULL_PTR*/
	if((NULL_PTR==Dir)||(NULL_PTR==Speed))
    {
		STEERING_ErrorState=ERROR_NOK;
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	08 95       	ret
     644:	81 e0       	ldi	r24, 0x01	; 1
		/*GET THE DIRECTION*/
		*(Dir)=gstr_Steering_State.u8_steering_Dir;
		STEERING_ErrorState = ERROR_OK;
	}
	return STEERING_ErrorState;
     646:	08 95       	ret

00000648 <LCD_SendCommand>:

/*Externed global variables*/
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch(State)
     652:	80 91 8d 00 	lds	r24, 0x008D
     656:	83 30       	cpi	r24, 0x03	; 3
     658:	09 f4       	brne	.+2      	; 0x65c <LCD_SendCommand+0x14>
     65a:	ce c0       	rjmp	.+412    	; 0x7f8 <LCD_SendCommand+0x1b0>
     65c:	84 30       	cpi	r24, 0x04	; 4
     65e:	38 f4       	brcc	.+14     	; 0x66e <LCD_SendCommand+0x26>
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	09 f4       	brne	.+2      	; 0x666 <LCD_SendCommand+0x1e>
     664:	60 c0       	rjmp	.+192    	; 0x726 <LCD_SendCommand+0xde>
     666:	82 30       	cpi	r24, 0x02	; 2
     668:	09 f0       	breq	.+2      	; 0x66c <LCD_SendCommand+0x24>
     66a:	01 c1       	rjmp	.+514    	; 0x86e <__stack+0xf>
     66c:	7f c0       	rjmp	.+254    	; 0x76c <LCD_SendCommand+0x124>
     66e:	84 30       	cpi	r24, 0x04	; 4
     670:	09 f4       	brne	.+2      	; 0x674 <LCD_SendCommand+0x2c>
     672:	e4 c0       	rjmp	.+456    	; 0x83c <LCD_SendCommand+0x1f4>
     674:	8f 3f       	cpi	r24, 0xFF	; 255
     676:	09 f0       	breq	.+2      	; 0x67a <LCD_SendCommand+0x32>
     678:	fa c0       	rjmp	.+500    	; 0x86e <__stack+0xf>
	{
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     67a:	d0 91 90 00 	lds	r29, 0x0090
     67e:	8d 2f       	mov	r24, r29
     680:	60 91 91 00 	lds	r22, 0x0091
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     68a:	8d 2f       	mov	r24, r29
     68c:	60 91 92 00 	lds	r22, 0x0092
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>

		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(CMD, BIT_4));
     696:	0c 2f       	mov	r16, r28
     698:	10 e0       	ldi	r17, 0x00	; 0
     69a:	a8 01       	movw	r20, r16
     69c:	40 71       	andi	r20, 0x10	; 16
     69e:	50 70       	andi	r21, 0x00	; 0
     6a0:	55 95       	asr	r21
     6a2:	47 95       	ror	r20
     6a4:	55 95       	asr	r21
     6a6:	47 95       	ror	r20
     6a8:	55 95       	asr	r21
     6aa:	47 95       	ror	r20
     6ac:	55 95       	asr	r21
     6ae:	47 95       	ror	r20
     6b0:	8d 2f       	mov	r24, r29
     6b2:	60 91 97 00 	lds	r22, 0x0097
     6b6:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(CMD, BIT_5));
     6ba:	a8 01       	movw	r20, r16
     6bc:	40 72       	andi	r20, 0x20	; 32
     6be:	50 70       	andi	r21, 0x00	; 0
     6c0:	55 95       	asr	r21
     6c2:	47 95       	ror	r20
     6c4:	55 95       	asr	r21
     6c6:	47 95       	ror	r20
     6c8:	55 95       	asr	r21
     6ca:	47 95       	ror	r20
     6cc:	55 95       	asr	r21
     6ce:	47 95       	ror	r20
     6d0:	55 95       	asr	r21
     6d2:	47 95       	ror	r20
     6d4:	8d 2f       	mov	r24, r29
     6d6:	60 91 96 00 	lds	r22, 0x0096
     6da:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(CMD, BIT_6));
     6de:	00 74       	andi	r16, 0x40	; 64
     6e0:	10 70       	andi	r17, 0x00	; 0
     6e2:	a8 01       	movw	r20, r16
     6e4:	04 2e       	mov	r0, r20
     6e6:	45 2f       	mov	r20, r21
     6e8:	00 0c       	add	r0, r0
     6ea:	44 1f       	adc	r20, r20
     6ec:	55 0b       	sbc	r21, r21
     6ee:	00 0c       	add	r0, r0
     6f0:	44 1f       	adc	r20, r20
     6f2:	55 1f       	adc	r21, r21
     6f4:	8d 2f       	mov	r24, r29
     6f6:	60 91 95 00 	lds	r22, 0x0095
     6fa:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(CMD, BIT_7));
     6fe:	4c 2f       	mov	r20, r28
     700:	44 1f       	adc	r20, r20
     702:	44 27       	eor	r20, r20
     704:	44 1f       	adc	r20, r20
     706:	8d 2f       	mov	r24, r29
     708:	60 91 94 00 	lds	r22, 0x0094
     70c:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>


		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     710:	8d 2f       	mov	r24, r29
     712:	60 91 93 00 	lds	r22, 0x0093
     716:	41 e0       	ldi	r20, 0x01	; 1
     718:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	80 93 8d 00 	sts	0x008D, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     722:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     724:	ab c0       	rjmp	.+342    	; 0x87c <__stack+0x1d>
	case Sending_First_Nibble:
		/*start timer delay in background*/
		if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     726:	c4 e2       	ldi	r28, 0x24	; 36
     728:	d3 e0       	ldi	r29, 0x03	; 3
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	be 01       	movw	r22, r28
     72e:	0e 94 96 11 	call	0x232c	; 0x232c <TIM_DelayStatus>
     732:	8b 3f       	cpi	r24, 0xFB	; 251
     734:	09 f0       	breq	.+2      	; 0x738 <LCD_SendCommand+0xf0>
     736:	9d c0       	rjmp	.+314    	; 0x872 <__stack+0x13>
		{
   		TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	41 e0       	ldi	r20, 0x01	; 1
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	9e 01       	movw	r18, r28
     744:	0e 94 73 10 	call	0x20e6	; 0x20e6 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	be 01       	movw	r22, r28
     74c:	0e 94 96 11 	call	0x232c	; 0x232c <TIM_DelayStatus>
     750:	88 23       	and	r24, r24
     752:	d1 f7       	brne	.-12     	; 0x748 <LCD_SendCommand+0x100>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     754:	80 91 90 00 	lds	r24, 0x0090
     758:	60 91 93 00 	lds	r22, 0x0093
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	80 93 8d 00 	sts	0x008D, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     768:	8f ef       	ldi	r24, 0xFF	; 255
     76a:	88 c0       	rjmp	.+272    	; 0x87c <__stack+0x1d>
         State = First_Nibble_Sent;
		}
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs,PIN_LOW);
     76c:	d0 91 90 00 	lds	r29, 0x0090
     770:	8d 2f       	mov	r24, r29
     772:	60 91 91 00 	lds	r22, 0x0091
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw,PIN_LOW);
     77c:	8d 2f       	mov	r24, r29
     77e:	60 91 92 00 	lds	r22, 0x0092
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>

		/*copying lower nibble of the command to the pins*/

		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(CMD,BIT_0));
     788:	4c 2f       	mov	r20, r28
     78a:	41 70       	andi	r20, 0x01	; 1
     78c:	8d 2f       	mov	r24, r29
     78e:	60 91 97 00 	lds	r22, 0x0097
     792:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(CMD,BIT_1));
     796:	0c 2f       	mov	r16, r28
     798:	10 e0       	ldi	r17, 0x00	; 0
     79a:	a8 01       	movw	r20, r16
     79c:	42 70       	andi	r20, 0x02	; 2
     79e:	50 70       	andi	r21, 0x00	; 0
     7a0:	55 95       	asr	r21
     7a2:	47 95       	ror	r20
     7a4:	8d 2f       	mov	r24, r29
     7a6:	60 91 96 00 	lds	r22, 0x0096
     7aa:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(CMD,BIT_2));
     7ae:	a8 01       	movw	r20, r16
     7b0:	44 70       	andi	r20, 0x04	; 4
     7b2:	50 70       	andi	r21, 0x00	; 0
     7b4:	55 95       	asr	r21
     7b6:	47 95       	ror	r20
     7b8:	55 95       	asr	r21
     7ba:	47 95       	ror	r20
     7bc:	8d 2f       	mov	r24, r29
     7be:	60 91 95 00 	lds	r22, 0x0095
     7c2:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
     7c6:	08 70       	andi	r16, 0x08	; 8
     7c8:	10 70       	andi	r17, 0x00	; 0
     7ca:	a8 01       	movw	r20, r16
     7cc:	55 95       	asr	r21
     7ce:	47 95       	ror	r20
     7d0:	55 95       	asr	r21
     7d2:	47 95       	ror	r20
     7d4:	55 95       	asr	r21
     7d6:	47 95       	ror	r20
     7d8:	8d 2f       	mov	r24, r29
     7da:	60 91 94 00 	lds	r22, 0x0094
     7de:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
     7e2:	8d 2f       	mov	r24, r29
     7e4:	60 91 93 00 	lds	r22, 0x0093
     7e8:	41 e0       	ldi	r20, 0x01	; 1
     7ea:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     7ee:	83 e0       	ldi	r24, 0x03	; 3
     7f0:	80 93 8d 00 	sts	0x008D, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     7f6:	42 c0       	rjmp	.+132    	; 0x87c <__stack+0x1d>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     7f8:	c4 e2       	ldi	r28, 0x24	; 36
     7fa:	d3 e0       	ldi	r29, 0x03	; 3
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	be 01       	movw	r22, r28
     800:	0e 94 96 11 	call	0x232c	; 0x232c <TIM_DelayStatus>
     804:	8b 3f       	cpi	r24, 0xFB	; 251
     806:	b9 f5       	brne	.+110    	; 0x876 <__stack+0x17>
      {
         TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	41 e0       	ldi	r20, 0x01	; 1
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	9e 01       	movw	r18, r28
     814:	0e 94 73 10 	call	0x20e6	; 0x20e6 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	be 01       	movw	r22, r28
     81c:	0e 94 96 11 	call	0x232c	; 0x232c <TIM_DelayStatus>
     820:	88 23       	and	r24, r24
     822:	d1 f7       	brne	.-12     	; 0x818 <LCD_SendCommand+0x1d0>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_LOW);
     824:	80 91 90 00 	lds	r24, 0x0090
     828:	60 91 93 00 	lds	r22, 0x0093
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
         /*reset the function's state*/
         State = Second_Nibble_Sent;
     832:	84 e0       	ldi	r24, 0x04	; 4
     834:	80 93 8d 00 	sts	0x008D, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	20 c0       	rjmp	.+64     	; 0x87c <__stack+0x1d>
         State = Second_Nibble_Sent;
      }
		break;
	case Second_Nibble_Sent:
		/*start timer delay in background*/
      TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
     83c:	c4 e2       	ldi	r28, 0x24	; 36
     83e:	d3 e0       	ldi	r29, 0x03	; 3
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	be 01       	movw	r22, r28
     844:	0e 94 96 11 	call	0x232c	; 0x232c <TIM_DelayStatus>
      if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     848:	8b 3f       	cpi	r24, 0xFB	; 251
     84a:	51 f4       	brne	.+20     	; 0x860 <__stack+0x1>
      {
         TIM_DelayMs(TIMER_2,2, LCD_SendCommand);
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	42 e0       	ldi	r20, 0x02	; 2
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	9e 01       	movw	r18, r28
     858:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <TIM_DelayMs>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	0e c0       	rjmp	.+28     	; 0x87c <__stack+0x1d>
      TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
      if(TIMER_E_DELAY_EMPTY == TimerRetVal)
      {
         TIM_DelayMs(TIMER_2,2, LCD_SendCommand);
      }         
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     860:	88 23       	and	r24, r24
     862:	59 f4       	brne	.+22     	; 0x87a <__stack+0x1b>
		{
			/*reset the function's state*/
			State = OperationStarted;
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	80 93 8d 00 	sts	0x008D, r24
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	07 c0       	rjmp	.+14     	; 0x87c <__stack+0x1d>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	05 c0       	rjmp	.+10     	; 0x87c <__stack+0x1d>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	03 c0       	rjmp	.+6      	; 0x87c <__stack+0x1d>
     876:	8f ef       	ldi	r24, 0xFF	; 255
     878:	01 c0       	rjmp	.+2      	; 0x87c <__stack+0x1d>
     87a:	8f ef       	ldi	r24, 0xFF	; 255
	default:
		ErrRetVal = OperationFail;
	}
	/*return from function*/
return ErrRetVal;
}
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	08 95       	ret

00000886 <LCD_SendData>:
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch (State) {
     890:	80 91 8e 00 	lds	r24, 0x008E
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	09 f4       	brne	.+2      	; 0x89a <LCD_SendData+0x14>
     898:	85 c0       	rjmp	.+266    	; 0x9a4 <LCD_SendData+0x11e>
     89a:	83 30       	cpi	r24, 0x03	; 3
     89c:	20 f4       	brcc	.+8      	; 0x8a6 <LCD_SendData+0x20>
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <LCD_SendData+0x1e>
     8a2:	e8 c0       	rjmp	.+464    	; 0xa74 <LCD_SendData+0x1ee>
     8a4:	5c c0       	rjmp	.+184    	; 0x95e <LCD_SendData+0xd8>
     8a6:	83 30       	cpi	r24, 0x03	; 3
     8a8:	09 f4       	brne	.+2      	; 0x8ac <LCD_SendData+0x26>
     8aa:	c2 c0       	rjmp	.+388    	; 0xa30 <LCD_SendData+0x1aa>
     8ac:	8f 3f       	cpi	r24, 0xFF	; 255
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <LCD_SendData+0x2c>
     8b0:	e1 c0       	rjmp	.+450    	; 0xa74 <LCD_SendData+0x1ee>
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     8b2:	d0 91 90 00 	lds	r29, 0x0090
     8b6:	8d 2f       	mov	r24, r29
     8b8:	60 91 91 00 	lds	r22, 0x0091
     8bc:	41 e0       	ldi	r20, 0x01	; 1
     8be:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     8c2:	8d 2f       	mov	r24, r29
     8c4:	60 91 92 00 	lds	r22, 0x0092
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_7));
     8ce:	4c 2f       	mov	r20, r28
     8d0:	44 1f       	adc	r20, r20
     8d2:	44 27       	eor	r20, r20
     8d4:	44 1f       	adc	r20, r20
     8d6:	8d 2f       	mov	r24, r29
     8d8:	60 91 94 00 	lds	r22, 0x0094
     8dc:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_6));
     8e0:	0c 2f       	mov	r16, r28
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	a8 01       	movw	r20, r16
     8e6:	40 74       	andi	r20, 0x40	; 64
     8e8:	50 70       	andi	r21, 0x00	; 0
     8ea:	04 2e       	mov	r0, r20
     8ec:	45 2f       	mov	r20, r21
     8ee:	00 0c       	add	r0, r0
     8f0:	44 1f       	adc	r20, r20
     8f2:	55 0b       	sbc	r21, r21
     8f4:	00 0c       	add	r0, r0
     8f6:	44 1f       	adc	r20, r20
     8f8:	55 1f       	adc	r21, r21
     8fa:	8d 2f       	mov	r24, r29
     8fc:	60 91 95 00 	lds	r22, 0x0095
     900:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_5));
     904:	a8 01       	movw	r20, r16
     906:	40 72       	andi	r20, 0x20	; 32
     908:	50 70       	andi	r21, 0x00	; 0
     90a:	55 95       	asr	r21
     90c:	47 95       	ror	r20
     90e:	55 95       	asr	r21
     910:	47 95       	ror	r20
     912:	55 95       	asr	r21
     914:	47 95       	ror	r20
     916:	55 95       	asr	r21
     918:	47 95       	ror	r20
     91a:	55 95       	asr	r21
     91c:	47 95       	ror	r20
     91e:	8d 2f       	mov	r24, r29
     920:	60 91 96 00 	lds	r22, 0x0096
     924:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_4));
     928:	00 71       	andi	r16, 0x10	; 16
     92a:	10 70       	andi	r17, 0x00	; 0
     92c:	a8 01       	movw	r20, r16
     92e:	55 95       	asr	r21
     930:	47 95       	ror	r20
     932:	55 95       	asr	r21
     934:	47 95       	ror	r20
     936:	55 95       	asr	r21
     938:	47 95       	ror	r20
     93a:	55 95       	asr	r21
     93c:	47 95       	ror	r20
     93e:	8d 2f       	mov	r24, r29
     940:	60 91 97 00 	lds	r22, 0x0097
     944:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     948:	8d 2f       	mov	r24, r29
     94a:	60 91 93 00 	lds	r22, 0x0093
     94e:	41 e0       	ldi	r20, 0x01	; 1
     950:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 8e 00 	sts	0x008E, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     95a:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     95c:	90 c0       	rjmp	.+288    	; 0xa7e <LCD_SendData+0x1f8>
	case Sending_First_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     95e:	c4 e2       	ldi	r28, 0x24	; 36
     960:	d3 e0       	ldi	r29, 0x03	; 3
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	be 01       	movw	r22, r28
     966:	0e 94 96 11 	call	0x232c	; 0x232c <TIM_DelayStatus>
     96a:	8b 3f       	cpi	r24, 0xFB	; 251
     96c:	09 f0       	breq	.+2      	; 0x970 <LCD_SendData+0xea>
     96e:	84 c0       	rjmp	.+264    	; 0xa78 <LCD_SendData+0x1f2>
      {
         TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	41 e0       	ldi	r20, 0x01	; 1
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	9e 01       	movw	r18, r28
     97c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	be 01       	movw	r22, r28
     984:	0e 94 96 11 	call	0x232c	; 0x232c <TIM_DelayStatus>
     988:	88 23       	and	r24, r24
     98a:	d1 f7       	brne	.-12     	; 0x980 <LCD_SendData+0xfa>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     98c:	80 91 90 00 	lds	r24, 0x0090
     990:	60 91 93 00 	lds	r22, 0x0093
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	80 93 8e 00 	sts	0x008E, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	6d c0       	rjmp	.+218    	; 0xa7e <LCD_SendData+0x1f8>
         State = First_Nibble_Sent;
      }
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     9a4:	d0 91 90 00 	lds	r29, 0x0090
     9a8:	8d 2f       	mov	r24, r29
     9aa:	60 91 91 00 	lds	r22, 0x0091
     9ae:	41 e0       	ldi	r20, 0x01	; 1
     9b0:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     9b4:	8d 2f       	mov	r24, r29
     9b6:	60 91 92 00 	lds	r22, 0x0092
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_3));
     9c0:	0c 2f       	mov	r16, r28
     9c2:	10 e0       	ldi	r17, 0x00	; 0
     9c4:	a8 01       	movw	r20, r16
     9c6:	48 70       	andi	r20, 0x08	; 8
     9c8:	50 70       	andi	r21, 0x00	; 0
     9ca:	55 95       	asr	r21
     9cc:	47 95       	ror	r20
     9ce:	55 95       	asr	r21
     9d0:	47 95       	ror	r20
     9d2:	55 95       	asr	r21
     9d4:	47 95       	ror	r20
     9d6:	8d 2f       	mov	r24, r29
     9d8:	60 91 94 00 	lds	r22, 0x0094
     9dc:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_2));
     9e0:	a8 01       	movw	r20, r16
     9e2:	44 70       	andi	r20, 0x04	; 4
     9e4:	50 70       	andi	r21, 0x00	; 0
     9e6:	55 95       	asr	r21
     9e8:	47 95       	ror	r20
     9ea:	55 95       	asr	r21
     9ec:	47 95       	ror	r20
     9ee:	8d 2f       	mov	r24, r29
     9f0:	60 91 95 00 	lds	r22, 0x0095
     9f4:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_1));
     9f8:	02 70       	andi	r16, 0x02	; 2
     9fa:	10 70       	andi	r17, 0x00	; 0
     9fc:	a8 01       	movw	r20, r16
     9fe:	55 95       	asr	r21
     a00:	47 95       	ror	r20
     a02:	8d 2f       	mov	r24, r29
     a04:	60 91 96 00 	lds	r22, 0x0096
     a08:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_0));
     a0c:	4c 2f       	mov	r20, r28
     a0e:	41 70       	andi	r20, 0x01	; 1
     a10:	8d 2f       	mov	r24, r29
     a12:	60 91 97 00 	lds	r22, 0x0097
     a16:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     a1a:	8d 2f       	mov	r24, r29
     a1c:	60 91 93 00 	lds	r22, 0x0093
     a20:	41 e0       	ldi	r20, 0x01	; 1
     a22:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	80 93 8e 00 	sts	0x008E, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a2c:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     a2e:	27 c0       	rjmp	.+78     	; 0xa7e <LCD_SendData+0x1f8>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     a30:	c4 e2       	ldi	r28, 0x24	; 36
     a32:	d3 e0       	ldi	r29, 0x03	; 3
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	be 01       	movw	r22, r28
     a38:	0e 94 96 11 	call	0x232c	; 0x232c <TIM_DelayStatus>
     a3c:	8b 3f       	cpi	r24, 0xFB	; 251
     a3e:	f1 f4       	brne	.+60     	; 0xa7c <LCD_SendData+0x1f6>
      {
         TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	41 e0       	ldi	r20, 0x01	; 1
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	9e 01       	movw	r18, r28
     a4c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	be 01       	movw	r22, r28
     a54:	0e 94 96 11 	call	0x232c	; 0x232c <TIM_DelayStatus>
     a58:	88 23       	and	r24, r24
     a5a:	d1 f7       	brne	.-12     	; 0xa50 <LCD_SendData+0x1ca>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     a5c:	80 91 90 00 	lds	r24, 0x0090
     a60:	60 91 93 00 	lds	r22, 0x0093
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
         /*reset the function's state*/
         State = OperationStarted;
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	80 93 8e 00 	sts	0x008E, r24
         /*process finished successfully*/
         ErrRetVal = OperationSuccess;
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	05 c0       	rjmp	.+10     	; 0xa7e <LCD_SendData+0x1f8>
      }
		break;
	default:
		ErrRetVal = OperationFail;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	03 c0       	rjmp	.+6      	; 0xa7e <LCD_SendData+0x1f8>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <LCD_SendData+0x1f8>
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
	}
	/*return from function*/
	return ErrRetVal;

}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	08 95       	ret

00000a88 <LCD_Init>:
ERROR_STATE_t LCD_Init()
{
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	uint8_t LCD_SendCommandRetVal = OperationStarted;
	switch (State) {
     a98:	80 91 8f 00 	lds	r24, 0x008F
     a9c:	8b 30       	cpi	r24, 0x0B	; 11
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <LCD_Init+0x1a>
     aa0:	cb c0       	rjmp	.+406    	; 0xc38 <LCD_Init+0x1b0>
     aa2:	8c 30       	cpi	r24, 0x0C	; 12
     aa4:	98 f4       	brcc	.+38     	; 0xacc <LCD_Init+0x44>
     aa6:	88 30       	cpi	r24, 0x08	; 8
     aa8:	09 f4       	brne	.+2      	; 0xaac <LCD_Init+0x24>
     aaa:	a5 c0       	rjmp	.+330    	; 0xbf6 <LCD_Init+0x16e>
     aac:	89 30       	cpi	r24, 0x09	; 9
     aae:	38 f4       	brcc	.+14     	; 0xabe <LCD_Init+0x36>
     ab0:	85 30       	cpi	r24, 0x05	; 5
     ab2:	09 f4       	brne	.+2      	; 0xab6 <LCD_Init+0x2e>
     ab4:	7b c0       	rjmp	.+246    	; 0xbac <LCD_Init+0x124>
     ab6:	86 30       	cpi	r24, 0x06	; 6
     ab8:	09 f0       	breq	.+2      	; 0xabc <LCD_Init+0x34>
     aba:	f0 c0       	rjmp	.+480    	; 0xc9c <LCD_Init+0x214>
     abc:	91 c0       	rjmp	.+290    	; 0xbe0 <LCD_Init+0x158>
     abe:	89 30       	cpi	r24, 0x09	; 9
     ac0:	09 f4       	brne	.+2      	; 0xac4 <LCD_Init+0x3c>
     ac2:	a4 c0       	rjmp	.+328    	; 0xc0c <LCD_Init+0x184>
     ac4:	8a 30       	cpi	r24, 0x0A	; 10
     ac6:	09 f0       	breq	.+2      	; 0xaca <LCD_Init+0x42>
     ac8:	e9 c0       	rjmp	.+466    	; 0xc9c <LCD_Init+0x214>
     aca:	ab c0       	rjmp	.+342    	; 0xc22 <LCD_Init+0x19a>
     acc:	8e 30       	cpi	r24, 0x0E	; 14
     ace:	09 f4       	brne	.+2      	; 0xad2 <LCD_Init+0x4a>
     ad0:	d1 c0       	rjmp	.+418    	; 0xc74 <LCD_Init+0x1ec>
     ad2:	8f 30       	cpi	r24, 0x0F	; 15
     ad4:	38 f4       	brcc	.+14     	; 0xae4 <LCD_Init+0x5c>
     ad6:	8c 30       	cpi	r24, 0x0C	; 12
     ad8:	09 f4       	brne	.+2      	; 0xadc <LCD_Init+0x54>
     ada:	b8 c0       	rjmp	.+368    	; 0xc4c <LCD_Init+0x1c4>
     adc:	8d 30       	cpi	r24, 0x0D	; 13
     ade:	09 f0       	breq	.+2      	; 0xae2 <LCD_Init+0x5a>
     ae0:	dd c0       	rjmp	.+442    	; 0xc9c <LCD_Init+0x214>
     ae2:	be c0       	rjmp	.+380    	; 0xc60 <LCD_Init+0x1d8>
     ae4:	8f 30       	cpi	r24, 0x0F	; 15
     ae6:	09 f4       	brne	.+2      	; 0xaea <LCD_Init+0x62>
     ae8:	cf c0       	rjmp	.+414    	; 0xc88 <LCD_Init+0x200>
     aea:	8f 3f       	cpi	r24, 0xFF	; 255
     aec:	09 f0       	breq	.+2      	; 0xaf0 <LCD_Init+0x68>
     aee:	d6 c0       	rjmp	.+428    	; 0xc9c <LCD_Init+0x214>
	case OperationStarted:
		/*Dio Initialize for the*/
		TIM_Init(TIMER_2);
     af0:	82 e0       	ldi	r24, 0x02	; 2
     af2:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <TIM_Init>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     af6:	c0 91 90 00 	lds	r28, 0x0090
     afa:	e0 90 94 00 	lds	r14, 0x0094
     afe:	8c 2f       	mov	r24, r28
     b00:	6e 2d       	mov	r22, r14
     b02:	41 e0       	ldi	r20, 0x01	; 1
     b04:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     b08:	f0 90 95 00 	lds	r15, 0x0095
     b0c:	8c 2f       	mov	r24, r28
     b0e:	6f 2d       	mov	r22, r15
     b10:	41 e0       	ldi	r20, 0x01	; 1
     b12:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     b16:	00 91 96 00 	lds	r16, 0x0096
     b1a:	8c 2f       	mov	r24, r28
     b1c:	60 2f       	mov	r22, r16
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     b24:	10 91 97 00 	lds	r17, 0x0097
     b28:	8c 2f       	mov	r24, r28
     b2a:	61 2f       	mov	r22, r17
     b2c:	41 e0       	ldi	r20, 0x01	; 1
     b2e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     b32:	d0 91 91 00 	lds	r29, 0x0091
     b36:	8c 2f       	mov	r24, r28
     b38:	6d 2f       	mov	r22, r29
     b3a:	41 e0       	ldi	r20, 0x01	; 1
     b3c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     b40:	d0 90 92 00 	lds	r13, 0x0092
     b44:	8c 2f       	mov	r24, r28
     b46:	6d 2d       	mov	r22, r13
     b48:	41 e0       	ldi	r20, 0x01	; 1
     b4a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     b4e:	c0 90 93 00 	lds	r12, 0x0093
     b52:	8c 2f       	mov	r24, r28
     b54:	6c 2d       	mov	r22, r12
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     b5c:	8c 2f       	mov	r24, r28
     b5e:	6e 2d       	mov	r22, r14
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     b66:	8c 2f       	mov	r24, r28
     b68:	6f 2d       	mov	r22, r15
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     b70:	8c 2f       	mov	r24, r28
     b72:	60 2f       	mov	r22, r16
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     b7a:	8c 2f       	mov	r24, r28
     b7c:	61 2f       	mov	r22, r17
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     b84:	8c 2f       	mov	r24, r28
     b86:	6d 2f       	mov	r22, r29
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     b8e:	8c 2f       	mov	r24, r28
     b90:	6d 2d       	mov	r22, r13
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     b98:	8c 2f       	mov	r24, r28
     b9a:	6c 2d       	mov	r22, r12
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
		/*set status of the function*/
		State = LCD_Pin_Initializing;
     ba2:	85 e0       	ldi	r24, 0x05	; 5
     ba4:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     ba8:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
		/*set status of the function*/
		State = LCD_Pin_Initializing;
		break;
     baa:	8d c0       	rjmp	.+282    	; 0xcc6 <LCD_Init+0x23e>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
     bac:	c4 e2       	ldi	r28, 0x24	; 36
     bae:	d3 e0       	ldi	r29, 0x03	; 3
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	be 01       	movw	r22, r28
     bb4:	0e 94 96 11 	call	0x232c	; 0x232c <TIM_DelayStatus>
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     bb8:	8b 3f       	cpi	r24, 0xFB	; 251
     bba:	51 f4       	brne	.+20     	; 0xbd0 <LCD_Init+0x148>
		{
   		TIM_DelayMs(TIMER_2,15, LCD_SendCommand);
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	4f e0       	ldi	r20, 0x0F	; 15
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	9e 01       	movw	r18, r28
     bc8:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <TIM_DelayMs>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     bcc:	8f ef       	ldi	r24, 0xFF	; 255
     bce:	7b c0       	rjmp	.+246    	; 0xcc6 <LCD_Init+0x23e>
		TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
		{
   		TIM_DelayMs(TIMER_2,15, LCD_SendCommand);
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     bd0:	88 23       	and	r24, r24
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <LCD_Init+0x14e>
     bd4:	65 c0       	rjmp	.+202    	; 0xca0 <LCD_Init+0x218>
		{
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
     bd6:	86 e0       	ldi	r24, 0x06	; 6
     bd8:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	73 c0       	rjmp	.+230    	; 0xcc6 <LCD_Init+0x23e>
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
	case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     be6:	88 23       	and	r24, r24
     be8:	09 f0       	breq	.+2      	; 0xbec <LCD_Init+0x164>
     bea:	5c c0       	rjmp	.+184    	; 0xca4 <LCD_Init+0x21c>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     bec:	88 e0       	ldi	r24, 0x08	; 8
     bee:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     bf2:	8f ef       	ldi	r24, 0xFF	; 255
     bf4:	68 c0       	rjmp	.+208    	; 0xcc6 <LCD_Init+0x23e>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     bfc:	88 23       	and	r24, r24
     bfe:	09 f0       	breq	.+2      	; 0xc02 <LCD_Init+0x17a>
     c00:	53 c0       	rjmp	.+166    	; 0xca8 <LCD_Init+0x220>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     c02:	89 e0       	ldi	r24, 0x09	; 9
     c04:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	5d c0       	rjmp	.+186    	; 0xcc6 <LCD_Init+0x23e>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     c0c:	83 e0       	ldi	r24, 0x03	; 3
     c0e:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c12:	88 23       	and	r24, r24
     c14:	09 f0       	breq	.+2      	; 0xc18 <LCD_Init+0x190>
     c16:	4a c0       	rjmp	.+148    	; 0xcac <LCD_Init+0x224>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     c18:	8a e0       	ldi	r24, 0x0A	; 10
     c1a:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	52 c0       	rjmp	.+164    	; 0xcc6 <LCD_Init+0x23e>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c28:	88 23       	and	r24, r24
     c2a:	09 f0       	breq	.+2      	; 0xc2e <LCD_Init+0x1a6>
     c2c:	41 c0       	rjmp	.+130    	; 0xcb0 <LCD_Init+0x228>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     c2e:	8b e0       	ldi	r24, 0x0B	; 11
     c30:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	47 c0       	rjmp	.+142    	; 0xcc6 <LCD_Init+0x23e>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);
     c38:	88 e2       	ldi	r24, 0x28	; 40
     c3a:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c3e:	88 23       	and	r24, r24
     c40:	c9 f5       	brne	.+114    	; 0xcb4 <LCD_Init+0x22c>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     c42:	8c e0       	ldi	r24, 0x0C	; 12
     c44:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c48:	8f ef       	ldi	r24, 0xFF	; 255
     c4a:	3d c0       	rjmp	.+122    	; 0xcc6 <LCD_Init+0x23e>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     c4c:	8c e0       	ldi	r24, 0x0C	; 12
     c4e:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c52:	88 23       	and	r24, r24
     c54:	89 f5       	brne	.+98     	; 0xcb8 <LCD_Init+0x230>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     c56:	8d e0       	ldi	r24, 0x0D	; 13
     c58:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c5c:	8f ef       	ldi	r24, 0xFF	; 255
     c5e:	33 c0       	rjmp	.+102    	; 0xcc6 <LCD_Init+0x23e>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);
     c60:	86 e0       	ldi	r24, 0x06	; 6
     c62:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c66:	88 23       	and	r24, r24
     c68:	49 f5       	brne	.+82     	; 0xcbc <LCD_Init+0x234>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     c6a:	8e e0       	ldi	r24, 0x0E	; 14
     c6c:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c70:	8f ef       	ldi	r24, 0xFF	; 255
     c72:	29 c0       	rjmp	.+82     	; 0xcc6 <LCD_Init+0x23e>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c7a:	88 23       	and	r24, r24
     c7c:	09 f5       	brne	.+66     	; 0xcc0 <LCD_Init+0x238>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     c7e:	8f e0       	ldi	r24, 0x0F	; 15
     c80:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	1f c0       	rjmp	.+62     	; 0xcc6 <LCD_Init+0x23e>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     c88:	80 e8       	ldi	r24, 0x80	; 128
     c8a:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c8e:	88 23       	and	r24, r24
     c90:	c9 f4       	brne	.+50     	; 0xcc4 <LCD_Init+0x23c>
		{
			State = OperationStarted;
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	80 93 8f 00 	sts	0x008F, r24
			ErrRetVal = OperationSuccess;
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	15 c0       	rjmp	.+42     	; 0xcc6 <LCD_Init+0x23e>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	13 c0       	rjmp	.+38     	; 0xcc6 <LCD_Init+0x23e>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	11 c0       	rjmp	.+34     	; 0xcc6 <LCD_Init+0x23e>
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <LCD_Init+0x23e>
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <LCD_Init+0x23e>
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	0b c0       	rjmp	.+22     	; 0xcc6 <LCD_Init+0x23e>
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	09 c0       	rjmp	.+18     	; 0xcc6 <LCD_Init+0x23e>
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <LCD_Init+0x23e>
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	05 c0       	rjmp	.+10     	; 0xcc6 <LCD_Init+0x23e>
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <LCD_Init+0x23e>
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <LCD_Init+0x23e>
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	default:
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	df 90       	pop	r13
     cd4:	cf 90       	pop	r12
     cd6:	08 95       	ret

00000cd8 <LCD_SendString>:
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	b9 f0       	breq	.+46     	; 0xd0a <LCD_SendString+0x32>
		if (String[Number] != NULL_TERMINATOR ) {
     cdc:	20 91 f1 00 	lds	r18, 0x00F1
     ce0:	82 0f       	add	r24, r18
     ce2:	91 1d       	adc	r25, r1
     ce4:	fc 01       	movw	r30, r24
     ce6:	80 81       	ld	r24, Z
     ce8:	88 23       	and	r24, r24
     cea:	59 f0       	breq	.+22     	; 0xd02 <LCD_SendString+0x2a>
			ErrRetVal = OperationRunning;
			LCD_SendDataRetVal = LCD_SendData(String[Number]);
     cec:	0e 94 43 04 	call	0x886	; 0x886 <LCD_SendData>
			if(LCD_SendDataRetVal == OperationSuccess)
     cf0:	88 23       	and	r24, r24
     cf2:	69 f4       	brne	.+26     	; 0xd0e <LCD_SendString+0x36>
			{
				Number++;
     cf4:	80 91 f1 00 	lds	r24, 0x00F1
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	80 93 f1 00 	sts	0x00F1, r24
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	08 95       	ret
				Number++;
			}
		}
		else
		{
			Number = 0;
     d02:	10 92 f1 00 	sts	0x00F1, r1
			ErrRetVal = OperationSuccess;
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	08 95       	ret
		}
	} else {
		ErrRetVal = OperationFail;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	08 95       	ret
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     d0e:	82 e0       	ldi	r24, 0x02	; 2
		}
	} else {
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     d10:	08 95       	ret

00000d12 <LCD_SendNumber>:
ERROR_STATE_t LCD_SendNumber(uint32_t Number)
{
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	2a 97       	sbiw	r28, 0x0a	; 10
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrRetVal = OperationStarted;
	uint8_t FunRetVal = OperationStarted;
	uint8_t String[10];
	STR_Number2String((uint32_t)Number,String);
     d26:	ae 01       	movw	r20, r28
     d28:	4f 5f       	subi	r20, 0xFF	; 255
     d2a:	5f 4f       	sbci	r21, 0xFF	; 255
     d2c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <STR_Number2String>
	while(FunRetVal != OperationSuccess)
   {
      FunRetVal = LCD_SendString((uint8_t*)String);
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD_SendString>
      if(FunRetVal == OperationSuccess)
     d38:	88 23       	and	r24, r24
     d3a:	d1 f7       	brne	.-12     	; 0xd30 <LCD_SendNumber+0x1e>
      {
         ErrRetVal = OperationFail;
      }
   }
	return ErrRetVal;
}
     d3c:	2a 96       	adiw	r28, 0x0a	; 10
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <MOTOR_init>:
extern const STR_MOTOR_config_t gastr_Motor_Config[MOTORS_NUMBER];

/*APIs IMPLEMENTATION------------------------*/
ERROR_STATE_t MOTOR_init(void) {
		/*CHECK IF MOTORS HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) {//IF MOTORS IS INITIALIZED
     d4e:	80 91 f2 00 	lds	r24, 0x00F2
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	21 f4       	brne	.+8      	; 0xd5e <MOTOR_init+0x10>
		gu8_ERROR_STAT = MOTOR_SEC_INIT;//STORE SEC INIT IN ERRROR STAT
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	80 93 f3 00 	sts	0x00F3, r24
     d5c:	28 c0       	rjmp	.+80     	; 0xdae <MOTOR_init+0x60>
	} else if (NOT_INIT == gu8_InitFlag) {//IF MOTORS IS NOT INITIALIZED
     d5e:	88 23       	and	r24, r24
     d60:	31 f5       	brne	.+76     	; 0xdae <MOTOR_init+0x60>
	PWM_Init(PWM_CHANNEL_OC0);
     d62:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <PWM_Init>
   /*SETTING MOTOR1 DIR PINS TO OUTPUT*/
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA, PIN_OUTPUT);
     d66:	80 91 98 00 	lds	r24, 0x0098
     d6a:	60 91 99 00 	lds	r22, 0x0099
     d6e:	41 e0       	ldi	r20, 0x01	; 1
     d70:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB, PIN_OUTPUT);
     d74:	80 91 9a 00 	lds	r24, 0x009A
     d78:	60 91 9b 00 	lds	r22, 0x009B
     d7c:	41 e0       	ldi	r20, 0x01	; 1
     d7e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
	/*SETTING MOTOR2 DIR PINS TO OUTPUT*/
	
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA, PIN_OUTPUT);
     d82:	80 91 9c 00 	lds	r24, 0x009C
     d86:	60 91 9d 00 	lds	r22, 0x009D
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB, PIN_OUTPUT);
     d90:	80 91 9e 00 	lds	r24, 0x009E
     d94:	60 91 9f 00 	lds	r22, 0x009F
     d98:	41 e0       	ldi	r20, 0x01	; 1
     d9a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
   /*START THE PWM WAVE*/
   PWM_Start(PWM_CHANNEL_OC0);
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <PWM_Start>
	gu8_InitFlag = INIT;//SET INIT FLAG
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 f2 00 	sts	0x00F2, r24
	gu8_ERROR_STAT = ERROR_OK;//STORE ERROR_OK IN ERRROR STAT
     daa:	10 92 f3 00 	sts	0x00F3, r1
	}
	/*STOP MOTOER EN PINS AT THE START*/
	return gu8_ERROR_STAT ;//RETURN FROM THE API
}
     dae:	80 91 f3 00 	lds	r24, 0x00F3
     db2:	08 95       	ret

00000db4 <MOTOR_start>:
ERROR_STATE_t MOTOR_start(uint8_t motor_no, uint8_t speed,  uint8_t dir) {
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	c8 2f       	mov	r28, r24
     dba:	d4 2f       	mov	r29, r20
	if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     dbc:	80 91 f2 00 	lds	r24, 0x00F2
     dc0:	88 23       	and	r24, r24
     dc2:	21 f4       	brne	.+8      	; 0xdcc <MOTOR_start+0x18>
		gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     dc4:	8e ef       	ldi	r24, 0xFE	; 254
     dc6:	80 93 f3 00 	sts	0x00F3, r24
     dca:	66 c0       	rjmp	.+204    	; 0xe98 <MOTOR_start+0xe4>
	} else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	09 f0       	breq	.+2      	; 0xdd2 <MOTOR_start+0x1e>
     dd0:	63 c0       	rjmp	.+198    	; 0xe98 <MOTOR_start+0xe4>
      PWM_SetDuty(PWM_CHANNEL_OC0, speed);
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <PWM_SetDuty>
      PWM_Connect(PWM_CHANNEL_OC0);
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <PWM_Connect>
	switch (motor_no) {
     dde:	cc 23       	and	r28, r28
     de0:	21 f0       	breq	.+8      	; 0xdea <MOTOR_start+0x36>
     de2:	c1 30       	cpi	r28, 0x01	; 1
     de4:	09 f0       	breq	.+2      	; 0xde8 <MOTOR_start+0x34>
     de6:	55 c0       	rjmp	.+170    	; 0xe92 <MOTOR_start+0xde>
     de8:	2a c0       	rjmp	.+84     	; 0xe3e <MOTOR_start+0x8a>
	case MOTOR1 :
		switch (dir) {
     dea:	dd 23       	and	r29, r29
     dec:	99 f0       	breq	.+38     	; 0xe14 <MOTOR_start+0x60>
     dee:	d1 30       	cpi	r29, 0x01	; 1
     df0:	11 f5       	brne	.+68     	; 0xe36 <MOTOR_start+0x82>
		case MOTOR_FORWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     df2:	80 91 98 00 	lds	r24, 0x0098
     df6:	60 91 99 00 	lds	r22, 0x0099
     dfa:	41 e0       	ldi	r20, 0x01	; 1
     dfc:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_LOW);
     e00:	80 91 9a 00 	lds	r24, 0x009A
     e04:	60 91 9b 00 	lds	r22, 0x009B
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
			gu8_ERROR_STAT = ERROR_OK;
     e0e:	10 92 f3 00 	sts	0x00F3, r1
			break;
     e12:	42 c0       	rjmp	.+132    	; 0xe98 <MOTOR_start+0xe4>
		case MOTOR_BACKWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_LOW);
     e14:	80 91 98 00 	lds	r24, 0x0098
     e18:	60 91 99 00 	lds	r22, 0x0099
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     e22:	80 91 9a 00 	lds	r24, 0x009A
     e26:	60 91 9b 00 	lds	r22, 0x009B
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     e30:	10 92 f3 00 	sts	0x00F3, r1

			break;
     e34:	31 c0       	rjmp	.+98     	; 0xe98 <MOTOR_start+0xe4>
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     e36:	8d ef       	ldi	r24, 0xFD	; 253
     e38:	80 93 f3 00 	sts	0x00F3, r24
			break;
     e3c:	2d c0       	rjmp	.+90     	; 0xe98 <MOTOR_start+0xe4>
		}
		break;
	case MOTOR2 :
		switch (dir) {
     e3e:	dd 23       	and	r29, r29
     e40:	99 f0       	breq	.+38     	; 0xe68 <MOTOR_start+0xb4>
     e42:	d1 30       	cpi	r29, 0x01	; 1
     e44:	11 f5       	brne	.+68     	; 0xe8a <MOTOR_start+0xd6>
		case MOTOR_FORWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     e46:	80 91 9c 00 	lds	r24, 0x009C
     e4a:	60 91 9d 00 	lds	r22, 0x009D
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_LOW);
     e54:	80 91 9e 00 	lds	r24, 0x009E
     e58:	60 91 9f 00 	lds	r22, 0x009F
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     e62:	10 92 f3 00 	sts	0x00F3, r1

			break;
     e66:	18 c0       	rjmp	.+48     	; 0xe98 <MOTOR_start+0xe4>
		case MOTOR_BACKWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_LOW);
     e68:	80 91 9c 00 	lds	r24, 0x009C
     e6c:	60 91 9d 00 	lds	r22, 0x009D
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     e76:	80 91 9e 00 	lds	r24, 0x009E
     e7a:	60 91 9f 00 	lds	r22, 0x009F
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     e84:	10 92 f3 00 	sts	0x00F3, r1

			break;
     e88:	07 c0       	rjmp	.+14     	; 0xe98 <MOTOR_start+0xe4>
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     e8a:	8d ef       	ldi	r24, 0xFD	; 253
     e8c:	80 93 f3 00 	sts	0x00F3, r24
			break;
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <MOTOR_start+0xe4>
		}
		break;
	default:
	gu8_ERROR_STAT=MOTOR_INVALID_CH;
     e92:	8c ef       	ldi	r24, 0xFC	; 252
     e94:	80 93 f3 00 	sts	0x00F3, r24
		break;
	}
	}
	return gu8_ERROR_STAT ;
}
     e98:	80 91 f3 00 	lds	r24, 0x00F3
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <MOTOR_stop>:
ERROR_STATE_t MOTOR_stop(uint8_t motor_no) {
     ea2:	cf 93       	push	r28
     ea4:	c8 2f       	mov	r28, r24
    if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     ea6:	80 91 f2 00 	lds	r24, 0x00F2
     eaa:	88 23       	and	r24, r24
     eac:	21 f4       	brne	.+8      	; 0xeb6 <MOTOR_stop+0x14>
		gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     eae:	8e ef       	ldi	r24, 0xFE	; 254
     eb0:	80 93 f3 00 	sts	0x00F3, r24
     eb4:	2f c0       	rjmp	.+94     	; 0xf14 <MOTOR_stop+0x72>
        } else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	69 f5       	brne	.+90     	; 0xf14 <MOTOR_stop+0x72>
		PWM_Disconnect(PWM_CHANNEL_OC0);
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <PWM_Disconnect>
       switch (motor_no){
     ec0:	cc 23       	and	r28, r28
     ec2:	19 f0       	breq	.+6      	; 0xeca <MOTOR_stop+0x28>
     ec4:	c1 30       	cpi	r28, 0x01	; 1
     ec6:	19 f5       	brne	.+70     	; 0xf0e <MOTOR_stop+0x6c>
     ec8:	11 c0       	rjmp	.+34     	; 0xeec <MOTOR_stop+0x4a>
        case MOTOR1:
            DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     eca:	80 91 98 00 	lds	r24, 0x0098
     ece:	60 91 99 00 	lds	r22, 0x0099
     ed2:	41 e0       	ldi	r20, 0x01	; 1
     ed4:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
            DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     ed8:	80 91 9a 00 	lds	r24, 0x009A
     edc:	60 91 9b 00 	lds	r22, 0x009B
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     ee6:	10 92 f3 00 	sts	0x00F3, r1
            break;
     eea:	14 c0       	rjmp	.+40     	; 0xf14 <MOTOR_stop+0x72>
        case MOTOR2:
            DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     eec:	80 91 9c 00 	lds	r24, 0x009C
     ef0:	60 91 9d 00 	lds	r22, 0x009D
     ef4:	41 e0       	ldi	r20, 0x01	; 1
     ef6:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
            DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     efa:	80 91 9e 00 	lds	r24, 0x009E
     efe:	60 91 9f 00 	lds	r22, 0x009F
     f02:	41 e0       	ldi	r20, 0x01	; 1
     f04:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     f08:	10 92 f3 00 	sts	0x00F3, r1
            break;
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <MOTOR_stop+0x72>
        default:
        gu8_ERROR_STAT=MOTOR_INVALID_CH;
     f0e:	8c ef       	ldi	r24, 0xFC	; 252
     f10:	80 93 f3 00 	sts	0x00F3, r24
            break;
        }
	}
	return gu8_ERROR_STAT ;
}
     f14:	80 91 f3 00 	lds	r24, 0x00F3
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <MOTOR_Update_dir>:
ERROR_STATE_t MOTOR_Update_dir(uint8_t motor_no, uint8_t dir) {
    if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     f1c:	90 91 f2 00 	lds	r25, 0x00F2
     f20:	99 23       	and	r25, r25
     f22:	21 f4       	brne	.+8      	; 0xf2c <MOTOR_Update_dir+0x10>
    gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     f24:	8e ef       	ldi	r24, 0xFE	; 254
     f26:	80 93 f3 00 	sts	0x00F3, r24
     f2a:	60 c0       	rjmp	.+192    	; 0xfec <MOTOR_Update_dir+0xd0>
    } else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     f2c:	91 30       	cpi	r25, 0x01	; 1
     f2e:	09 f0       	breq	.+2      	; 0xf32 <MOTOR_Update_dir+0x16>
     f30:	5d c0       	rjmp	.+186    	; 0xfec <MOTOR_Update_dir+0xd0>
        switch (motor_no) {
     f32:	88 23       	and	r24, r24
     f34:	21 f0       	breq	.+8      	; 0xf3e <MOTOR_Update_dir+0x22>
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	09 f0       	breq	.+2      	; 0xf3c <MOTOR_Update_dir+0x20>
     f3a:	55 c0       	rjmp	.+170    	; 0xfe6 <MOTOR_Update_dir+0xca>
     f3c:	2a c0       	rjmp	.+84     	; 0xf92 <MOTOR_Update_dir+0x76>
            case MOTOR1 :
                switch (dir) {
     f3e:	66 23       	and	r22, r22
     f40:	99 f0       	breq	.+38     	; 0xf68 <MOTOR_Update_dir+0x4c>
     f42:	61 30       	cpi	r22, 0x01	; 1
     f44:	11 f5       	brne	.+68     	; 0xf8a <MOTOR_Update_dir+0x6e>
                case MOTOR_FORWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     f46:	80 91 98 00 	lds	r24, 0x0098
     f4a:	60 91 99 00 	lds	r22, 0x0099
     f4e:	41 e0       	ldi	r20, 0x01	; 1
     f50:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_LOW);
     f54:	80 91 9a 00 	lds	r24, 0x009A
     f58:	60 91 9b 00 	lds	r22, 0x009B
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     f62:	10 92 f3 00 	sts	0x00F3, r1

                    break;
     f66:	42 c0       	rjmp	.+132    	; 0xfec <MOTOR_Update_dir+0xd0>
                case MOTOR_BACKWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_LOW);
     f68:	80 91 98 00 	lds	r24, 0x0098
     f6c:	60 91 99 00 	lds	r22, 0x0099
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     f76:	80 91 9a 00 	lds	r24, 0x009A
     f7a:	60 91 9b 00 	lds	r22, 0x009B
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     f84:	10 92 f3 00 	sts	0x00F3, r1

                    break;
     f88:	31 c0       	rjmp	.+98     	; 0xfec <MOTOR_Update_dir+0xd0>
                default:
                gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     f8a:	8d ef       	ldi	r24, 0xFD	; 253
     f8c:	80 93 f3 00 	sts	0x00F3, r24
                    break;
     f90:	2d c0       	rjmp	.+90     	; 0xfec <MOTOR_Update_dir+0xd0>
                }
                break;
            case MOTOR2 :
                switch (dir) {
     f92:	66 23       	and	r22, r22
     f94:	99 f0       	breq	.+38     	; 0xfbc <MOTOR_Update_dir+0xa0>
     f96:	61 30       	cpi	r22, 0x01	; 1
     f98:	11 f5       	brne	.+68     	; 0xfde <MOTOR_Update_dir+0xc2>
                case MOTOR_FORWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     f9a:	80 91 9c 00 	lds	r24, 0x009C
     f9e:	60 91 9d 00 	lds	r22, 0x009D
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_LOW);
     fa8:	80 91 9e 00 	lds	r24, 0x009E
     fac:	60 91 9f 00 	lds	r22, 0x009F
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     fb6:	10 92 f3 00 	sts	0x00F3, r1

                    break;
     fba:	18 c0       	rjmp	.+48     	; 0xfec <MOTOR_Update_dir+0xd0>
                case MOTOR_BACKWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_LOW);
     fbc:	80 91 9c 00 	lds	r24, 0x009C
     fc0:	60 91 9d 00 	lds	r22, 0x009D
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     fca:	80 91 9e 00 	lds	r24, 0x009E
     fce:	60 91 9f 00 	lds	r22, 0x009F
     fd2:	41 e0       	ldi	r20, 0x01	; 1
     fd4:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     fd8:	10 92 f3 00 	sts	0x00F3, r1

                    break;
     fdc:	07 c0       	rjmp	.+14     	; 0xfec <MOTOR_Update_dir+0xd0>
                default:
                   gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     fde:	8d ef       	ldi	r24, 0xFD	; 253
     fe0:	80 93 f3 00 	sts	0x00F3, r24
                    break;
     fe4:	03 c0       	rjmp	.+6      	; 0xfec <MOTOR_Update_dir+0xd0>
                }
                break;
            default:
               gu8_ERROR_STAT=MOTOR_INVALID_CH;
     fe6:	8c ef       	ldi	r24, 0xFC	; 252
     fe8:	80 93 f3 00 	sts	0x00F3, r24
                break;
            }
    }

		return gu8_ERROR_STAT ;
}
     fec:	80 91 f3 00 	lds	r24, 0x00F3
     ff0:	08 95       	ret

00000ff2 <USONIC_OVF1Callback>:
	}
}

static void USONIC_OVF1Callback(void)
{
	gu16_OverflowCounter++; 
     ff2:	80 91 f8 00 	lds	r24, 0x00F8
     ff6:	90 91 f9 00 	lds	r25, 0x00F9
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	90 93 f9 00 	sts	0x00F9, r25
    1000:	80 93 f8 00 	sts	0x00F8, r24
    1004:	08 95       	ret

00001006 <USONIC_ICU1Callback>:
	}
	return gu8_ERROR_STATE;	
}

static void USONIC_ICU1Callback(void)
{
    1006:	8f 92       	push	r8
    1008:	9f 92       	push	r9
    100a:	af 92       	push	r10
    100c:	bf 92       	push	r11
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
	volatile static  uint64_t CounterNumber;
	volatile static  uint16_t ICR1_Register;
 
	switch(gu8_ICU_State)
    101a:	80 91 04 01 	lds	r24, 0x0104
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	21 f0       	breq	.+8      	; 0x102a <USONIC_ICU1Callback+0x24>
    1022:	82 30       	cpi	r24, 0x02	; 2
    1024:	09 f0       	breq	.+2      	; 0x1028 <USONIC_ICU1Callback+0x22>
    1026:	77 c0       	rjmp	.+238    	; 0x1116 <USONIC_ICU1Callback+0x110>
    1028:	0c c0       	rjmp	.+24     	; 0x1042 <USONIC_ICU1Callback+0x3c>
	{
			case WAITING_RISING_EDGE_STATE: //Rising 
			{
				gu16_OverflowCounter=0;
    102a:	10 92 f9 00 	sts	0x00F9, r1
    102e:	10 92 f8 00 	sts	0x00F8, r1
				gu8_ICU_State=WAITING_FALLING_EDGE_STATE;
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	80 93 04 01 	sts	0x0104, r24
				ICU_Reset(ICU_1,ICU1_FALLING_EDGE);
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <ICU_Reset>
				break;
    1040:	6a c0       	rjmp	.+212    	; 0x1116 <USONIC_ICU1Callback+0x110>
			}		 
			case WAITING_FALLING_EDGE_STATE: //Falling
			{
				ICU_GetICR1Registert(ICU_1,&ICR1_Register);
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	62 e0       	ldi	r22, 0x02	; 2
    1046:	71 e0       	ldi	r23, 0x01	; 1
    1048:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <ICU_GetICR1Registert>
				CounterNumber=(uint64_t)(ICR1_Register+(gu16_OverflowCounter*ICU1_MAX_COUNT));			
    104c:	80 91 02 01 	lds	r24, 0x0102
    1050:	90 91 03 01 	lds	r25, 0x0103
    1054:	20 91 f8 00 	lds	r18, 0x00F8
    1058:	30 91 f9 00 	lds	r19, 0x00F9
    105c:	82 1b       	sub	r24, r18
    105e:	93 0b       	sbc	r25, r19
    1060:	80 93 fa 00 	sts	0x00FA, r24
    1064:	90 93 fb 00 	sts	0x00FB, r25
    1068:	10 92 fc 00 	sts	0x00FC, r1
    106c:	10 92 fd 00 	sts	0x00FD, r1
    1070:	10 92 fe 00 	sts	0x00FE, r1
    1074:	10 92 ff 00 	sts	0x00FF, r1
    1078:	10 92 00 01 	sts	0x0100, r1
    107c:	10 92 01 01 	sts	0x0101, r1
				TimeOnValue = (CounterNumber*((double)gastr_ICUConfig[ICU_1].ICUPrescaler/gu32_USONIC_SystemFreq));
    1080:	20 91 fa 00 	lds	r18, 0x00FA
    1084:	30 91 fb 00 	lds	r19, 0x00FB
    1088:	40 91 fc 00 	lds	r20, 0x00FC
    108c:	50 91 fd 00 	lds	r21, 0x00FD
    1090:	60 91 fe 00 	lds	r22, 0x00FE
    1094:	70 91 ff 00 	lds	r23, 0x00FF
    1098:	80 91 00 01 	lds	r24, 0x0100
    109c:	90 91 01 01 	lds	r25, 0x0101
    10a0:	0e 94 2f 13 	call	0x265e	; 0x265e <__floatundisf>
    10a4:	4b 01       	movw	r8, r22
    10a6:	5c 01       	movw	r10, r24
    10a8:	60 91 a8 00 	lds	r22, 0x00A8
    10ac:	70 91 a9 00 	lds	r23, 0x00A9
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__floatunsisf>
    10b8:	6b 01       	movw	r12, r22
    10ba:	7c 01       	movw	r14, r24
    10bc:	60 91 a0 00 	lds	r22, 0x00A0
    10c0:	70 91 a1 00 	lds	r23, 0x00A1
    10c4:	80 91 a2 00 	lds	r24, 0x00A2
    10c8:	90 91 a3 00 	lds	r25, 0x00A3
    10cc:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__floatunsisf>
    10d0:	9b 01       	movw	r18, r22
    10d2:	ac 01       	movw	r20, r24
    10d4:	c7 01       	movw	r24, r14
    10d6:	b6 01       	movw	r22, r12
    10d8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__divsf3>
    10dc:	9b 01       	movw	r18, r22
    10de:	ac 01       	movw	r20, r24
    10e0:	c5 01       	movw	r24, r10
    10e2:	b4 01       	movw	r22, r8
    10e4:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__mulsf3>
    10e8:	46 2f       	mov	r20, r22
    10ea:	57 2f       	mov	r21, r23
    10ec:	68 2f       	mov	r22, r24
    10ee:	79 2f       	mov	r23, r25
    10f0:	40 93 f4 00 	sts	0x00F4, r20
    10f4:	50 93 f5 00 	sts	0x00F5, r21
    10f8:	60 93 f6 00 	sts	0x00F6, r22
    10fc:	70 93 f7 00 	sts	0x00F7, r23
				gu8_ICU_State=END_STATE;
    1100:	83 e0       	ldi	r24, 0x03	; 3
    1102:	80 93 04 01 	sts	0x0104, r24
				ICU_DisableInterrupt(ICU_1,ICU1_INPUTCAPTURE_INT);
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <ICU_DisableInterrupt>
				ICU_DisableInterrupt(ICU_1,ICU1_OVERFLOW_INT);
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <ICU_DisableInterrupt>
				break;
			}			
			default:
				break;
	}
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	df 90       	pop	r13
    1120:	cf 90       	pop	r12
    1122:	bf 90       	pop	r11
    1124:	af 90       	pop	r10
    1126:	9f 90       	pop	r9
    1128:	8f 90       	pop	r8
    112a:	08 95       	ret

0000112c <USONIC_Init>:
/*
 * THIS API INITIALIZE THE ULTRASONIC
 * */
ERROR_STATE_t USONIC_Init(void) {
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) //IF ULTRA SONIC IS INITIALIZED
    112c:	80 91 05 01 	lds	r24, 0x0105
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	21 f4       	brne	.+8      	; 0x113c <USONIC_Init+0x10>
	{
		gu8_ERROR_STATE = USONIC_SEC_INIT; //STORE SEC INIT IN ERRROR STAT
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	80 93 06 01 	sts	0x0106, r24
    113a:	1f c0       	rjmp	.+62     	; 0x117a <USONIC_Init+0x4e>
	} 
	else if (NOT_INIT == gu8_InitFlag) //IF ULTRA SONIC IS NOT INITIALIZED
    113c:	88 23       	and	r24, r24
    113e:	e9 f4       	brne	.+58     	; 0x117a <USONIC_Init+0x4e>
	{
		DIO_SetPinDirection(gastr_USONIC_Config[USONIC1].USONIC_TRIG_PORT, gastr_USONIC_Config[USONIC1].USONIC_TRIG_PIN, PIN_OUTPUT);//SET THE TRIGGER PIN AS AN OUTPUT
    1140:	80 91 a4 00 	lds	r24, 0x00A4
    1144:	60 91 a5 00 	lds	r22, 0x00A5
    1148:	41 e0       	ldi	r20, 0x01	; 1
    114a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
		ICU_Init(ICU_1); //INIT THE ICU CH 1
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	0e 94 8d 0c 	call	0x191a	; 0x191a <ICU_Init>
		
		ICU_SetCallback(ICU_1,ICU1_INPUTCAPTURE_INT,USONIC_ICU1Callback);
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	61 e0       	ldi	r22, 0x01	; 1
    1158:	43 e0       	ldi	r20, 0x03	; 3
    115a:	58 e0       	ldi	r21, 0x08	; 8
    115c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <ICU_SetCallback>
		ICU_SetCallback(ICU_1,ICU1_OVERFLOW_INT,USONIC_OVF1Callback);
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	49 ef       	ldi	r20, 0xF9	; 249
    1166:	57 e0       	ldi	r21, 0x07	; 7
    1168:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <ICU_SetCallback>
		GLOBALINTTERUPTS_Enable();
    116c:	0e 94 85 0c 	call	0x190a	; 0x190a <GLOBALINTTERUPTS_Enable>
	
		gu8_InitFlag = INIT;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 93 05 01 	sts	0x0105, r24
		gu8_ERROR_STATE=ERROR_OK;
    1176:	10 92 06 01 	sts	0x0106, r1
	else 
	{
		//DO NOTHING
	}
	return gu8_ERROR_STATE ;
}
    117a:	80 91 06 01 	lds	r24, 0x0106
    117e:	08 95       	ret

00001180 <USONIC_GetDistance>:

ERROR_STATE_t USONIC_GetDistance(ptr_double64_t distance)
{
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	ec 01       	movw	r28, r24
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (NOT_INIT == gu8_InitFlag) //IF ULTRA SONIC IS NOT INITIALIZED
    1186:	80 91 05 01 	lds	r24, 0x0105
    118a:	88 23       	and	r24, r24
    118c:	21 f4       	brne	.+8      	; 0x1196 <USONIC_GetDistance+0x16>
	{ 
		gu8_ERROR_STATE = USONIC_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
    118e:	8e ef       	ldi	r24, 0xFE	; 254
    1190:	80 93 06 01 	sts	0x0106, r24
    1194:	5b c0       	rjmp	.+182    	; 0x124c <USONIC_GetDistance+0xcc>
	} 
	else if(INIT == gu8_InitFlag) //IF ULTRA SONIC IS INITIALIZED
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	09 f0       	breq	.+2      	; 0x119c <USONIC_GetDistance+0x1c>
    119a:	58 c0       	rjmp	.+176    	; 0x124c <USONIC_GetDistance+0xcc>
	{ 
		/* CHECK IF ptr_float32_t distance EQUALS NULL */
		if (NULL_PTR == distance) 
    119c:	20 97       	sbiw	r28, 0x00	; 0
    119e:	21 f4       	brne	.+8      	; 0x11a8 <USONIC_GetDistance+0x28>
		{
			gu8_ERROR_STATE = USONIC_NULL_POINTER; //STORE NOT INIT IN ERRROR STAT
    11a0:	8d ef       	ldi	r24, 0xFD	; 253
    11a2:	80 93 06 01 	sts	0x0106, r24
    11a6:	52 c0       	rjmp	.+164    	; 0x124c <USONIC_GetDistance+0xcc>
		} 
		else 
		{
			switch(gu8_ICU_State)
    11a8:	80 91 04 01 	lds	r24, 0x0104
    11ac:	88 23       	and	r24, r24
    11ae:	21 f0       	breq	.+8      	; 0x11b8 <USONIC_GetDistance+0x38>
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <USONIC_GetDistance+0x36>
    11b4:	4b c0       	rjmp	.+150    	; 0x124c <USONIC_GetDistance+0xcc>
    11b6:	2c c0       	rjmp	.+88     	; 0x1210 <USONIC_GetDistance+0x90>
			{
				case START_STATE:
				{
					gu8_ICU_State=WAITING_RISING_EDGE_STATE;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 04 01 	sts	0x0104, r24
					DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_HIGH); //SET TRIGGER PIN
    11be:	83 e0       	ldi	r24, 0x03	; 3
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	41 e0       	ldi	r20, 0x01	; 1
    11c4:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
					
					gu16_OverflowCounter=COUNTER_RESET;
    11c8:	10 92 f9 00 	sts	0x00F9, r1
    11cc:	10 92 f8 00 	sts	0x00F8, r1
					ICU_SetTCNT1Registert(ICU_1,PRELOAD_10U);
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	6e ef       	ldi	r22, 0xFE	; 254
    11d4:	7f ef       	ldi	r23, 0xFF	; 255
    11d6:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <ICU_SetTCNT1Registert>
					ICU_EnableInterrupt(ICU_1,ICU1_OVERFLOW_INT);
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <ICU_EnableInterrupt>
					while(gu16_OverflowCounter<1);
    11e2:	80 91 f8 00 	lds	r24, 0x00F8
    11e6:	90 91 f9 00 	lds	r25, 0x00F9
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	d1 f3       	breq	.-12     	; 0x11e2 <USONIC_GetDistance+0x62>
						{
							
						}
					}*/
					
					DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_LOW);
    11ee:	83 e0       	ldi	r24, 0x03	; 3
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	40 e0       	ldi	r20, 0x00	; 0
    11f4:	0e 94 26 0b 	call	0x164c	; 0x164c <DIO_WritePin>
					ICU_Reset(ICU_1,ICU1_RISING_EDGE);
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	0e 94 b3 0c 	call	0x1966	; 0x1966 <ICU_Reset>
					ICU_EnableInterrupt(ICU_1,ICU1_INPUTCAPTURE_INT);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <ICU_EnableInterrupt>
					gu8_ERROR_STATE=ERROR_NOK;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	80 93 06 01 	sts	0x0106, r24
					break;
    120e:	1e c0       	rjmp	.+60     	; 0x124c <USONIC_GetDistance+0xcc>
				}
				case END_STATE:
				{
					*distance = (((SOUND_SPPED) * TimeOnValue) / HALF_DISTANCE);
    1210:	60 91 f4 00 	lds	r22, 0x00F4
    1214:	70 91 f5 00 	lds	r23, 0x00F5
    1218:	80 91 f6 00 	lds	r24, 0x00F6
    121c:	90 91 f7 00 	lds	r25, 0x00F7
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	3c ef       	ldi	r19, 0xFC	; 252
    1224:	45 e0       	ldi	r20, 0x05	; 5
    1226:	57 e4       	ldi	r21, 0x47	; 71
    1228:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__mulsf3>
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	5f e3       	ldi	r21, 0x3F	; 63
    1234:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__mulsf3>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	88 83       	st	Y, r24
    123e:	99 83       	std	Y+1, r25	; 0x01
    1240:	aa 83       	std	Y+2, r26	; 0x02
    1242:	bb 83       	std	Y+3, r27	; 0x03
					gu8_ERROR_STATE=ERROR_OK;
    1244:	10 92 06 01 	sts	0x0106, r1
					gu8_ICU_State=START_STATE;
    1248:	10 92 04 01 	sts	0x0104, r1
	else
	{
			
	}
	return gu8_ERROR_STATE;	
}
    124c:	80 91 06 01 	lds	r24, 0x0106
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	08 95       	ret

00001256 <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	00 d0       	rcall	.+0      	; 0x125c <dummy_delay+0x6>
    125c:	00 d0       	rcall	.+0      	; 0x125e <dummy_delay+0x8>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
    1262:	1c 82       	std	Y+4, r1	; 0x04
    1264:	1b 82       	std	Y+3, r1	; 0x03
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	84 36       	cpi	r24, 0x64	; 100
    126c:	91 05       	cpc	r25, r1
    126e:	f0 f4       	brcc	.+60     	; 0x12ac <dummy_delay+0x56>
   {
      for(volatile uint8_t j=0; j<32; j++)
    1270:	1a 82       	std	Y+2, r1	; 0x02
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	80 32       	cpi	r24, 0x20	; 32
    1276:	80 f4       	brcc	.+32     	; 0x1298 <dummy_delay+0x42>
      {
         for(volatile uint8_t k=0; k<2; k++)
    1278:	19 82       	std	Y+1, r1	; 0x01
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	30 f4       	brcc	.+12     	; 0x128c <dummy_delay+0x36>
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	82 30       	cpi	r24, 0x02	; 2
    128a:	d0 f3       	brcs	.-12     	; 0x1280 <dummy_delay+0x2a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	8a 83       	std	Y+2, r24	; 0x02
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	80 32       	cpi	r24, 0x20	; 32
    1296:	80 f3       	brcs	.-32     	; 0x1278 <dummy_delay+0x22>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	9c 83       	std	Y+4, r25	; 0x04
    12a0:	8b 83       	std	Y+3, r24	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	84 36       	cpi	r24, 0x64	; 100
    12a8:	91 05       	cpc	r25, r1
    12aa:	10 f3       	brcs	.-60     	; 0x1270 <dummy_delay+0x1a>
         {
            
         }
      }
   }
}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <StringCompare>:
* @param [in]  str2   -  pointer to the second string.
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
    12ba:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
    12bc:	8c 91       	ld	r24, X
    12be:	88 23       	and	r24, r24
    12c0:	01 f1       	breq	.+64     	; 0x1302 <StringCompare+0x48>
    12c2:	8d 30       	cpi	r24, 0x0D	; 13
    12c4:	09 f1       	breq	.+66     	; 0x1308 <StringCompare+0x4e>
   {
      if(str1[u8_counter] != str2[u8_counter])
    12c6:	fb 01       	movw	r30, r22
    12c8:	90 81       	ld	r25, Z
    12ca:	89 17       	cp	r24, r25
    12cc:	49 f4       	brne	.+18     	; 0x12e0 <StringCompare+0x26>
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	0b c0       	rjmp	.+22     	; 0x12e8 <StringCompare+0x2e>
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
    12d2:	86 0f       	add	r24, r22
    12d4:	97 1f       	adc	r25, r23
    12d6:	fc 01       	movw	r30, r24
    12d8:	80 81       	ld	r24, Z
    12da:	28 17       	cp	r18, r24
    12dc:	29 f0       	breq	.+10     	; 0x12e8 <StringCompare+0x2e>
    12de:	01 c0       	rjmp	.+2      	; 0x12e2 <StringCompare+0x28>
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
    12e0:	30 e0       	ldi	r19, 0x00	; 0
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
         u8_counter++;
    12e2:	3f 5f       	subi	r19, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
    12e4:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
    12e6:	14 c0       	rjmp	.+40     	; 0x1310 <StringCompare+0x56>
      }
      u8_counter++;
    12e8:	3f 5f       	subi	r19, 0xFF	; 255
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
    12ea:	83 2f       	mov	r24, r19
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	fd 01       	movw	r30, r26
    12f0:	e8 0f       	add	r30, r24
    12f2:	f9 1f       	adc	r31, r25
    12f4:	20 81       	ld	r18, Z
    12f6:	22 23       	and	r18, r18
    12f8:	51 f0       	breq	.+20     	; 0x130e <StringCompare+0x54>
    12fa:	2d 30       	cpi	r18, 0x0D	; 13
    12fc:	51 f7       	brne	.-44     	; 0x12d2 <StringCompare+0x18>
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	07 c0       	rjmp	.+14     	; 0x1310 <StringCompare+0x56>
    1302:	81 e0       	ldi	r24, 0x01	; 1
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	04 c0       	rjmp	.+8      	; 0x1310 <StringCompare+0x56>
   uint8_t u8_isEqual = TRUE;
    1308:	81 e0       	ldi	r24, 0x01	; 1
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <StringCompare+0x56>
   uint8_t u8_isEqual = TRUE;
    130e:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
    1310:	63 0f       	add	r22, r19
    1312:	71 1d       	adc	r23, r1
    1314:	fb 01       	movw	r30, r22
    1316:	90 81       	ld	r25, Z
    1318:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
    131a:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
}
    131c:	08 95       	ret

0000131e <STR_Length>:
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
    131e:	fb 01       	movw	r30, r22
	*StringLength = 0;
    1320:	11 82       	std	Z+1, r1	; 0x01
    1322:	10 82       	st	Z, r1
	while(*String!='\0')
    1324:	dc 01       	movw	r26, r24
    1326:	2c 91       	ld	r18, X
    1328:	22 23       	and	r18, r18
    132a:	49 f0       	breq	.+18     	; 0x133e <STR_Length+0x20>
   return u8_isEqual;
}
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
    132c:	11 96       	adiw	r26, 0x01	; 1
{
	*StringLength = 0;
	while(*String!='\0')
	{
		(*StringLength)++;
    132e:	80 81       	ld	r24, Z
    1330:	91 81       	ldd	r25, Z+1	; 0x01
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	80 83       	st	Z, r24
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
	*StringLength = 0;
	while(*String!='\0')
    1338:	8d 91       	ld	r24, X+
    133a:	88 23       	and	r24, r24
    133c:	c1 f7       	brne	.-16     	; 0x132e <STR_Length+0x10>
	{
		(*StringLength)++;
		String++;
	}
	return 0;
}
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	08 95       	ret

00001342 <STR_CharIsNumeric>:
uint8_t STR_CharIsNumeric(uint8_t Character, uint8_t* Result)
{
	if(Character>=48 && Character<=57)
    1342:	80 53       	subi	r24, 0x30	; 48
    1344:	8a 30       	cpi	r24, 0x0A	; 10
    1346:	20 f4       	brcc	.+8      	; 0x1350 <STR_CharIsNumeric+0xe>
	{
		*Result=1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	fb 01       	movw	r30, r22
    134c:	80 83       	st	Z, r24
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <STR_CharIsNumeric+0x12>
	}
	else
	{
		*Result=0;
    1350:	fb 01       	movw	r30, r22
    1352:	10 82       	st	Z, r1
	}
	return 0;
}
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	08 95       	ret

00001358 <STR_StringIsNumeric>:
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	0f 92       	push	r0
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	fc 01       	movw	r30, r24
    136e:	7b 01       	movw	r14, r22
	uint8_t FunRetVal = 0;
    1370:	19 82       	std	Y+1, r1	; 0x01
	while(*String!='\0')
    1372:	80 81       	ld	r24, Z
    1374:	88 23       	and	r24, r24
    1376:	b9 f0       	breq	.+46     	; 0x13a6 <STR_StringIsNumeric+0x4e>
	{
		*Result=0;
	}
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
    1378:	8f 01       	movw	r16, r30
    137a:	0f 5f       	subi	r16, 0xFF	; 255
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
			*Result = 0;
			break;
		}
		else
		{
			*Result = 1;
    137e:	dd 24       	eor	r13, r13
    1380:	d3 94       	inc	r13
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
	{
		STR_CharIsNumeric(*String,&FunRetVal);
    1382:	be 01       	movw	r22, r28
    1384:	6f 5f       	subi	r22, 0xFF	; 255
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	0e 94 a1 09 	call	0x1342	; 0x1342 <STR_CharIsNumeric>
		if(!FunRetVal)
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	88 23       	and	r24, r24
    1390:	19 f4       	brne	.+6      	; 0x1398 <STR_StringIsNumeric+0x40>
		{
			*Result = 0;
    1392:	f7 01       	movw	r30, r14
    1394:	10 82       	st	Z, r1
			break;
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <STR_StringIsNumeric+0x4e>
		}
		else
		{
			*Result = 1;
    1398:	f7 01       	movw	r30, r14
    139a:	d0 82       	st	Z, r13
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
    139c:	f8 01       	movw	r30, r16
    139e:	81 91       	ld	r24, Z+
    13a0:	8f 01       	movw	r16, r30
    13a2:	88 23       	and	r24, r24
    13a4:	71 f7       	brne	.-36     	; 0x1382 <STR_StringIsNumeric+0x2a>
			String++;
			continue;
		}
	}
	return 0;
}
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	0f 90       	pop	r0
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	df 90       	pop	r13
    13b8:	08 95       	ret

000013ba <STR_CompareString>:
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	fc 01       	movw	r30, r24
    13c4:	ec 01       	movw	r28, r24
    13c6:	cb 01       	movw	r24, r22
			continue;
		}
	}
	return 0;
}
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
    13c8:	db 01       	movw	r26, r22
    13ca:	11 96       	adiw	r26, 0x01	; 1
    13cc:	8f 01       	movw	r16, r30
    13ce:	0f 5f       	subi	r16, 0xFF	; 255
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
{
	while(1)
	{
		if(*String_1==*String_2)
		{
			*Result = 1;
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <STR_CompareString+0x1e>
		}
	}
	return 0;
}
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
    13d6:	11 96       	adiw	r26, 0x01	; 1
	while(1)
	{
		if(*String_1==*String_2)
    13d8:	29 91       	ld	r18, Y+
    13da:	fc 01       	movw	r30, r24
    13dc:	31 91       	ld	r19, Z+
    13de:	cf 01       	movw	r24, r30
    13e0:	23 17       	cp	r18, r19
    13e2:	59 f4       	brne	.+22     	; 0x13fa <STR_CompareString+0x40>
		{
			*Result = 1;
    13e4:	fa 01       	movw	r30, r20
    13e6:	60 83       	st	Z, r22
			String_1++;
			String_2++;
			if(*String_1=='\0'&&*String_2=='\0')
    13e8:	f8 01       	movw	r30, r16
    13ea:	21 91       	ld	r18, Z+
    13ec:	8f 01       	movw	r16, r30
    13ee:	22 23       	and	r18, r18
    13f0:	91 f7       	brne	.-28     	; 0x13d6 <STR_CompareString+0x1c>
    13f2:	2c 91       	ld	r18, X
    13f4:	22 23       	and	r18, r18
    13f6:	79 f7       	brne	.-34     	; 0x13d6 <STR_CompareString+0x1c>
    13f8:	0a c0       	rjmp	.+20     	; 0x140e <STR_CompareString+0x54>
				break;
			continue;
		}
		else if(*String_1=='\0'&&*String_2=='\0')
    13fa:	22 23       	and	r18, r18
    13fc:	31 f4       	brne	.+12     	; 0x140a <STR_CompareString+0x50>
    13fe:	33 23       	and	r19, r19
    1400:	21 f4       	brne	.+8      	; 0x140a <STR_CompareString+0x50>
		{
			*Result = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	fa 01       	movw	r30, r20
    1406:	80 83       	st	Z, r24
			break;
    1408:	02 c0       	rjmp	.+4      	; 0x140e <STR_CompareString+0x54>
		}
		else
		{
			*Result = 0;
    140a:	fa 01       	movw	r30, r20
    140c:	10 82       	st	Z, r1
			break;
		}
	}
	return 0;
}
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	08 95       	ret

0000141a <STR_String2Number>:
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	8b 01       	movw	r16, r22
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
    1428:	fb 01       	movw	r30, r22
    142a:	11 82       	std	Z+1, r1	; 0x01
    142c:	10 82       	st	Z, r1
	while(*String!='\0')
    142e:	fc 01       	movw	r30, r24
    1430:	20 81       	ld	r18, Z
    1432:	22 23       	and	r18, r18
    1434:	39 f0       	breq	.+14     	; 0x1444 <STR_String2Number+0x2a>
			break;
		}
	}
	return 0;
}
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
    1436:	31 96       	adiw	r30, 0x01	; 1
    1438:	ec 01       	movw	r28, r24
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
	{
		String++;
    143a:	21 96       	adiw	r28, 0x01	; 1
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
    143c:	21 91       	ld	r18, Z+
    143e:	22 23       	and	r18, r18
    1440:	e1 f7       	brne	.-8      	; 0x143a <STR_String2Number+0x20>
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <STR_String2Number+0x2c>
    1444:	ec 01       	movw	r28, r24
			break;
		}
	}
	return 0;
}
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
    1446:	7c 01       	movw	r14, r24
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
	}

	do
	{
		String--;
		(*Number)+=((*String-48)*Multiplier);
    1450:	8a 91       	ld	r24, -Y
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	c0 97       	sbiw	r24, 0x30	; 48
    1456:	84 9f       	mul	r24, r20
    1458:	90 01       	movw	r18, r0
    145a:	85 9f       	mul	r24, r21
    145c:	30 0d       	add	r19, r0
    145e:	94 9f       	mul	r25, r20
    1460:	30 0d       	add	r19, r0
    1462:	11 24       	eor	r1, r1
    1464:	f8 01       	movw	r30, r16
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	82 0f       	add	r24, r18
    146c:	93 1f       	adc	r25, r19
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24
		Multiplier*=10;
    1472:	cb 01       	movw	r24, r22
    1474:	ba 01       	movw	r22, r20
    1476:	2a e0       	ldi	r18, 0x0A	; 10
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	0e 94 49 14 	call	0x2892	; 0x2892 <__mulsi3>
    1482:	ab 01       	movw	r20, r22
    1484:	bc 01       	movw	r22, r24
	}while(String!=StartOfString);
    1486:	ce 15       	cp	r28, r14
    1488:	df 05       	cpc	r29, r15
    148a:	11 f7       	brne	.-60     	; 0x1450 <STR_String2Number+0x36>
	return 0;
}
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	ff 90       	pop	r15
    1498:	ef 90       	pop	r14
    149a:	08 95       	ret

0000149c <STR_StringReverse>:
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    149c:	fc 01       	movw	r30, r24
    149e:	20 81       	ld	r18, Z
    14a0:	22 23       	and	r18, r18
    14a2:	39 f0       	breq	.+14     	; 0x14b2 <STR_StringReverse+0x16>
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
    14a4:	dc 01       	movw	r26, r24
    14a6:	11 96       	adiw	r26, 0x01	; 1
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
	{
		B++;
    14a8:	31 96       	adiw	r30, 0x01	; 1
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    14aa:	2d 91       	ld	r18, X+
    14ac:	22 23       	and	r18, r18
    14ae:	e1 f7       	brne	.-8      	; 0x14a8 <STR_StringReverse+0xc>
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <STR_StringReverse+0x18>
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
    14b2:	fc 01       	movw	r30, r24
	uint8_t Temp = 0;
	while(*B != '\0')
	{
		B++;
	}
	B--;
    14b4:	9f 01       	movw	r18, r30
    14b6:	21 50       	subi	r18, 0x01	; 1
    14b8:	30 40       	sbci	r19, 0x00	; 0
	while(A<B)
    14ba:	82 17       	cp	r24, r18
    14bc:	93 07       	cpc	r25, r19
    14be:	50 f4       	brcc	.+20     	; 0x14d4 <STR_StringReverse+0x38>
    14c0:	dc 01       	movw	r26, r24
	{
		//swap
		Temp=*A;
    14c2:	8c 91       	ld	r24, X
		*A=*B;
    14c4:	92 91       	ld	r25, -Z
    14c6:	9d 93       	st	X+, r25
		*B=Temp;
    14c8:	80 83       	st	Z, r24
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
    14ca:	cf 01       	movw	r24, r30
    14cc:	01 97       	sbiw	r24, 0x01	; 1
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
    14ce:	a8 17       	cp	r26, r24
    14d0:	b9 07       	cpc	r27, r25
    14d2:	b8 f3       	brcs	.-18     	; 0x14c2 <STR_StringReverse+0x26>
		*A=*B;
		*B=Temp;
		A++;B--;
	}
	return 0;
}
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	08 95       	ret

000014d8 <STR_Number2String>:
		Multiplier*=10;
	}while(String!=StartOfString);
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
    14d8:	cf 92       	push	r12
    14da:	df 92       	push	r13
    14dc:	ef 92       	push	r14
    14de:	ff 92       	push	r15
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	8a 01       	movw	r16, r20
	uint8_t* SringCpy = String;
	if(Number==0)
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	a1 05       	cpc	r26, r1
    14f2:	b1 05       	cpc	r27, r1
    14f4:	21 f4       	brne	.+8      	; 0x14fe <STR_Number2String+0x26>
	{
		*String='0';
    14f6:	80 e3       	ldi	r24, 0x30	; 48
    14f8:	fa 01       	movw	r30, r20
    14fa:	80 83       	st	Z, r24
    14fc:	1f c0       	rjmp	.+62     	; 0x153c <STR_Number2String+0x64>
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
	uint8_t* SringCpy = String;
	if(Number==0)
    14fe:	ea 01       	movw	r28, r20
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
    1500:	0f 2e       	mov	r0, r31
    1502:	fa e0       	ldi	r31, 0x0A	; 10
    1504:	cf 2e       	mov	r12, r31
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	df 2e       	mov	r13, r31
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	ef 2e       	mov	r14, r31
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	ff 2e       	mov	r15, r31
    1512:	f0 2d       	mov	r31, r0
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <STR_Number2String+0x40>
			String++;
    1516:	ef 01       	movw	r28, r30
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	a7 01       	movw	r20, r14
    151e:	96 01       	movw	r18, r12
    1520:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__udivmodsi4>
    1524:	60 5d       	subi	r22, 0xD0	; 208
    1526:	fe 01       	movw	r30, r28
    1528:	61 93       	st	Z+, r22
			String++;
			Number/=10;
    152a:	82 2f       	mov	r24, r18
    152c:	93 2f       	mov	r25, r19
    152e:	a4 2f       	mov	r26, r20
    1530:	b5 2f       	mov	r27, r21
		}while(Number);
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	a1 05       	cpc	r26, r1
    1536:	b1 05       	cpc	r27, r1
    1538:	71 f7       	brne	.-36     	; 0x1516 <STR_Number2String+0x3e>
		*String = NULL_TERMINATOR;
    153a:	19 82       	std	Y+1, r1	; 0x01
	}
	STR_StringReverse(SringCpy);
    153c:	c8 01       	movw	r24, r16
    153e:	0e 94 4e 0a 	call	0x149c	; 0x149c <STR_StringReverse>
	return 0;
}
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	08 95       	ret

00001556 <main>:

int main(void)
{  
   while(1)
   {
		SENSING_MainFunction();
    1556:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SENSING_MainFunction>
		CRASH_MainFunction();
    155a:	0e 94 49 00 	call	0x92	; 0x92 <CRASH_MainFunction>
		STEERING_MainFunction();
    155e:	0e 94 a7 02 	call	0x54e	; 0x54e <STEERING_MainFunction>
		MONITOR_MainFunction();
    1562:	0e 94 a8 01 	call	0x350	; 0x350 <MONITOR_MainFunction>
    1566:	f7 cf       	rjmp	.-18     	; 0x1556 <main>

00001568 <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
    1568:	42 30       	cpi	r20, 0x02	; 2
    156a:	08 f0       	brcs	.+2      	; 0x156e <DIO_SetPinDirection+0x6>
    156c:	69 c0       	rjmp	.+210    	; 0x1640 <DIO_SetPinDirection+0xd8>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
    156e:	68 30       	cpi	r22, 0x08	; 8
    1570:	08 f0       	brcs	.+2      	; 0x1574 <DIO_SetPinDirection+0xc>
    1572:	68 c0       	rjmp	.+208    	; 0x1644 <DIO_SetPinDirection+0xdc>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	f9 f0       	breq	.+62     	; 0x15b6 <DIO_SetPinDirection+0x4e>
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	30 f0       	brcs	.+12     	; 0x1588 <DIO_SetPinDirection+0x20>
    157c:	82 30       	cpi	r24, 0x02	; 2
    157e:	91 f1       	breq	.+100    	; 0x15e4 <DIO_SetPinDirection+0x7c>
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	09 f0       	breq	.+2      	; 0x1586 <DIO_SetPinDirection+0x1e>
    1584:	61 c0       	rjmp	.+194    	; 0x1648 <DIO_SetPinDirection+0xe0>
    1586:	45 c0       	rjmp	.+138    	; 0x1612 <DIO_SetPinDirection+0xaa>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	06 2e       	mov	r0, r22
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <DIO_SetPinDirection+0x2c>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <DIO_SetPinDirection+0x28>
    1598:	80 95       	com	r24
    159a:	9a b3       	in	r25, 0x1a	; 26
    159c:	89 23       	and	r24, r25
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	9a 01       	movw	r18, r20
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_SetPinDirection+0x40>
    15a4:	22 0f       	add	r18, r18
    15a6:	33 1f       	adc	r19, r19
    15a8:	6a 95       	dec	r22
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_SetPinDirection+0x3c>
    15ac:	b9 01       	movw	r22, r18
    15ae:	68 2b       	or	r22, r24
    15b0:	6a bb       	out	0x1a, r22	; 26
				u8_ErrorState=ERROR_OK;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
				break;
    15b4:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	06 2e       	mov	r0, r22
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DIO_SetPinDirection+0x5a>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <DIO_SetPinDirection+0x56>
    15c6:	80 95       	com	r24
    15c8:	97 b3       	in	r25, 0x17	; 23
    15ca:	89 23       	and	r24, r25
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	9a 01       	movw	r18, r20
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_SetPinDirection+0x6e>
    15d2:	22 0f       	add	r18, r18
    15d4:	33 1f       	adc	r19, r19
    15d6:	6a 95       	dec	r22
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_SetPinDirection+0x6a>
    15da:	b9 01       	movw	r22, r18
    15dc:	68 2b       	or	r22, r24
    15de:	67 bb       	out	0x17, r22	; 23
				u8_ErrorState=ERROR_OK;
    15e0:	80 e0       	ldi	r24, 0x00	; 0
				break;
    15e2:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	06 2e       	mov	r0, r22
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_SetPinDirection+0x88>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO_SetPinDirection+0x84>
    15f4:	80 95       	com	r24
    15f6:	94 b3       	in	r25, 0x14	; 20
    15f8:	89 23       	and	r24, r25
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	9a 01       	movw	r18, r20
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_SetPinDirection+0x9c>
    1600:	22 0f       	add	r18, r18
    1602:	33 1f       	adc	r19, r19
    1604:	6a 95       	dec	r22
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_SetPinDirection+0x98>
    1608:	b9 01       	movw	r22, r18
    160a:	68 2b       	or	r22, r24
    160c:	64 bb       	out	0x14, r22	; 20
				u8_ErrorState=ERROR_OK;
    160e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1610:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	06 2e       	mov	r0, r22
    1618:	02 c0       	rjmp	.+4      	; 0x161e <DIO_SetPinDirection+0xb6>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <DIO_SetPinDirection+0xb2>
    1622:	80 95       	com	r24
    1624:	91 b3       	in	r25, 0x11	; 17
    1626:	89 23       	and	r24, r25
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	9a 01       	movw	r18, r20
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <DIO_SetPinDirection+0xca>
    162e:	22 0f       	add	r18, r18
    1630:	33 1f       	adc	r19, r19
    1632:	6a 95       	dec	r22
    1634:	e2 f7       	brpl	.-8      	; 0x162e <DIO_SetPinDirection+0xc6>
    1636:	b9 01       	movw	r22, r18
    1638:	68 2b       	or	r22, r24
    163a:	61 bb       	out	0x11, r22	; 17
				u8_ErrorState=ERROR_OK;
    163c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    163e:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    1648:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
    164a:	08 95       	ret

0000164c <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
    164c:	42 30       	cpi	r20, 0x02	; 2
    164e:	08 f0       	brcs	.+2      	; 0x1652 <DIO_WritePin+0x6>
    1650:	69 c0       	rjmp	.+210    	; 0x1724 <DIO_WritePin+0xd8>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
    1652:	68 30       	cpi	r22, 0x08	; 8
    1654:	08 f0       	brcs	.+2      	; 0x1658 <DIO_WritePin+0xc>
    1656:	68 c0       	rjmp	.+208    	; 0x1728 <DIO_WritePin+0xdc>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	f9 f0       	breq	.+62     	; 0x169a <DIO_WritePin+0x4e>
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	30 f0       	brcs	.+12     	; 0x166c <DIO_WritePin+0x20>
    1660:	82 30       	cpi	r24, 0x02	; 2
    1662:	91 f1       	breq	.+100    	; 0x16c8 <DIO_WritePin+0x7c>
    1664:	83 30       	cpi	r24, 0x03	; 3
    1666:	09 f0       	breq	.+2      	; 0x166a <DIO_WritePin+0x1e>
    1668:	61 c0       	rjmp	.+194    	; 0x172c <DIO_WritePin+0xe0>
    166a:	45 c0       	rjmp	.+138    	; 0x16f6 <DIO_WritePin+0xaa>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	06 2e       	mov	r0, r22
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_WritePin+0x2c>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_WritePin+0x28>
    167c:	80 95       	com	r24
    167e:	9b b3       	in	r25, 0x1b	; 27
    1680:	89 23       	and	r24, r25
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	9a 01       	movw	r18, r20
    1686:	02 c0       	rjmp	.+4      	; 0x168c <DIO_WritePin+0x40>
    1688:	22 0f       	add	r18, r18
    168a:	33 1f       	adc	r19, r19
    168c:	6a 95       	dec	r22
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <DIO_WritePin+0x3c>
    1690:	b9 01       	movw	r22, r18
    1692:	68 2b       	or	r22, r24
    1694:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    1696:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1698:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	06 2e       	mov	r0, r22
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_WritePin+0x5a>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_WritePin+0x56>
    16aa:	80 95       	com	r24
    16ac:	98 b3       	in	r25, 0x18	; 24
    16ae:	89 23       	and	r24, r25
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	9a 01       	movw	r18, r20
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <DIO_WritePin+0x6e>
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	6a 95       	dec	r22
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <DIO_WritePin+0x6a>
    16be:	b9 01       	movw	r22, r18
    16c0:	68 2b       	or	r22, r24
    16c2:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    16c4:	80 e0       	ldi	r24, 0x00	; 0
				break;
    16c6:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	06 2e       	mov	r0, r22
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_WritePin+0x88>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_WritePin+0x84>
    16d8:	80 95       	com	r24
    16da:	95 b3       	in	r25, 0x15	; 21
    16dc:	89 23       	and	r24, r25
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	9a 01       	movw	r18, r20
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_WritePin+0x9c>
    16e4:	22 0f       	add	r18, r18
    16e6:	33 1f       	adc	r19, r19
    16e8:	6a 95       	dec	r22
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_WritePin+0x98>
    16ec:	b9 01       	movw	r22, r18
    16ee:	68 2b       	or	r22, r24
    16f0:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    16f2:	80 e0       	ldi	r24, 0x00	; 0
				break;
    16f4:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	06 2e       	mov	r0, r22
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_WritePin+0xb6>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_WritePin+0xb2>
    1706:	80 95       	com	r24
    1708:	92 b3       	in	r25, 0x12	; 18
    170a:	89 23       	and	r24, r25
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	9a 01       	movw	r18, r20
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_WritePin+0xca>
    1712:	22 0f       	add	r18, r18
    1714:	33 1f       	adc	r19, r19
    1716:	6a 95       	dec	r22
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <DIO_WritePin+0xc6>
    171a:	b9 01       	movw	r22, r18
    171c:	68 2b       	or	r22, r24
    171e:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    1720:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1722:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    172c:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    172e:	08 95       	ret

00001730 <DIO_TogglePin>:
ERROR_STATE_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    1730:	68 30       	cpi	r22, 0x08	; 8
    1732:	08 f0       	brcs	.+2      	; 0x1736 <DIO_TogglePin+0x6>
    1734:	42 c0       	rjmp	.+132    	; 0x17ba <DIO_TogglePin+0x8a>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	b1 f0       	breq	.+44     	; 0x1766 <DIO_TogglePin+0x36>
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	30 f0       	brcs	.+12     	; 0x174a <DIO_TogglePin+0x1a>
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	01 f1       	breq	.+64     	; 0x1782 <DIO_TogglePin+0x52>
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	09 f0       	breq	.+2      	; 0x1748 <DIO_TogglePin+0x18>
    1746:	3b c0       	rjmp	.+118    	; 0x17be <DIO_TogglePin+0x8e>
    1748:	2a c0       	rjmp	.+84     	; 0x179e <DIO_TogglePin+0x6e>
		{
			case PORT_A:
				BIT_TOGGLE(PORTA,PinNo);
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9c 01       	movw	r18, r24
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <DIO_TogglePin+0x26>
    1752:	22 0f       	add	r18, r18
    1754:	33 1f       	adc	r19, r19
    1756:	6a 95       	dec	r22
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <DIO_TogglePin+0x22>
    175a:	b9 01       	movw	r22, r18
    175c:	8b b3       	in	r24, 0x1b	; 27
    175e:	68 27       	eor	r22, r24
    1760:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    1762:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1764:	08 95       	ret
			case PORT_B:
				BIT_TOGGLE(PORTB,PinNo);
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9c 01       	movw	r18, r24
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_TogglePin+0x42>
    176e:	22 0f       	add	r18, r18
    1770:	33 1f       	adc	r19, r19
    1772:	6a 95       	dec	r22
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_TogglePin+0x3e>
    1776:	b9 01       	movw	r22, r18
    1778:	88 b3       	in	r24, 0x18	; 24
    177a:	68 27       	eor	r22, r24
    177c:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    177e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1780:	08 95       	ret
			case PORT_C:
				BIT_TOGGLE(PORTC,PinNo);
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9c 01       	movw	r18, r24
    1788:	02 c0       	rjmp	.+4      	; 0x178e <DIO_TogglePin+0x5e>
    178a:	22 0f       	add	r18, r18
    178c:	33 1f       	adc	r19, r19
    178e:	6a 95       	dec	r22
    1790:	e2 f7       	brpl	.-8      	; 0x178a <DIO_TogglePin+0x5a>
    1792:	b9 01       	movw	r22, r18
    1794:	85 b3       	in	r24, 0x15	; 21
    1796:	68 27       	eor	r22, r24
    1798:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    179a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    179c:	08 95       	ret
			case PORT_D:
				BIT_TOGGLE(PORTD,PinNo);
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	9c 01       	movw	r18, r24
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <DIO_TogglePin+0x7a>
    17a6:	22 0f       	add	r18, r18
    17a8:	33 1f       	adc	r19, r19
    17aa:	6a 95       	dec	r22
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <DIO_TogglePin+0x76>
    17ae:	b9 01       	movw	r22, r18
    17b0:	82 b3       	in	r24, 0x12	; 18
    17b2:	68 27       	eor	r22, r24
    17b4:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    17b6:	80 e0       	ldi	r24, 0x00	; 0
				break;
    17b8:	08 95       	ret
ERROR_STATE_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	08 95       	ret
			case PORT_D:
				BIT_TOGGLE(PORTD,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    17be:	81 e0       	ldi	r24, 0x01	; 1
				break;	
		}	
	}	
	return u8_ErrorState;
}
    17c0:	08 95       	ret

000017c2 <DIO_ReadPin>:
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    17c2:	68 30       	cpi	r22, 0x08	; 8
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <DIO_ReadPin+0x6>
    17c6:	46 c0       	rjmp	.+140    	; 0x1854 <DIO_ReadPin+0x92>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(NULL_PTR==PinData)
    17c8:	41 15       	cp	r20, r1
    17ca:	51 05       	cpc	r21, r1
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <DIO_ReadPin+0xe>
    17ce:	44 c0       	rjmp	.+136    	; 0x1858 <DIO_ReadPin+0x96>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	b1 f0       	breq	.+44     	; 0x1800 <DIO_ReadPin+0x3e>
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	30 f0       	brcs	.+12     	; 0x17e4 <DIO_ReadPin+0x22>
    17d8:	82 30       	cpi	r24, 0x02	; 2
    17da:	01 f1       	breq	.+64     	; 0x181c <DIO_ReadPin+0x5a>
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	09 f0       	breq	.+2      	; 0x17e2 <DIO_ReadPin+0x20>
    17e0:	3d c0       	rjmp	.+122    	; 0x185c <DIO_ReadPin+0x9a>
    17e2:	2a c0       	rjmp	.+84     	; 0x1838 <DIO_ReadPin+0x76>
		{
			case PORT_A:
				* PinData=BIT_GET(PINA,PinNo);
    17e4:	89 b3       	in	r24, 0x19	; 25
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	9c 01       	movw	r18, r24
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_ReadPin+0x2e>
    17ec:	35 95       	asr	r19
    17ee:	27 95       	ror	r18
    17f0:	6a 95       	dec	r22
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_ReadPin+0x2a>
    17f4:	b9 01       	movw	r22, r18
    17f6:	61 70       	andi	r22, 0x01	; 1
    17f8:	fa 01       	movw	r30, r20
    17fa:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    17fc:	80 e0       	ldi	r24, 0x00	; 0
				break;
    17fe:	08 95       	ret
			case PORT_B:
				* PinData=BIT_GET(PINB,PinNo);
    1800:	86 b3       	in	r24, 0x16	; 22
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9c 01       	movw	r18, r24
    1806:	02 c0       	rjmp	.+4      	; 0x180c <DIO_ReadPin+0x4a>
    1808:	35 95       	asr	r19
    180a:	27 95       	ror	r18
    180c:	6a 95       	dec	r22
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <DIO_ReadPin+0x46>
    1810:	b9 01       	movw	r22, r18
    1812:	61 70       	andi	r22, 0x01	; 1
    1814:	fa 01       	movw	r30, r20
    1816:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    1818:	80 e0       	ldi	r24, 0x00	; 0
				break;
    181a:	08 95       	ret
			case PORT_C:
				* PinData=BIT_GET(PINC,PinNo);
    181c:	83 b3       	in	r24, 0x13	; 19
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9c 01       	movw	r18, r24
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <DIO_ReadPin+0x66>
    1824:	35 95       	asr	r19
    1826:	27 95       	ror	r18
    1828:	6a 95       	dec	r22
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <DIO_ReadPin+0x62>
    182c:	b9 01       	movw	r22, r18
    182e:	61 70       	andi	r22, 0x01	; 1
    1830:	fa 01       	movw	r30, r20
    1832:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    1834:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1836:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
    1838:	80 b3       	in	r24, 0x10	; 16
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9c 01       	movw	r18, r24
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_ReadPin+0x82>
    1840:	35 95       	asr	r19
    1842:	27 95       	ror	r18
    1844:	6a 95       	dec	r22
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <DIO_ReadPin+0x7e>
    1848:	b9 01       	movw	r22, r18
    184a:	61 70       	andi	r22, 0x01	; 1
    184c:	fa 01       	movw	r30, r20
    184e:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    1850:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1852:	08 95       	ret
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	08 95       	ret
	}
	else if(NULL_PTR==PinData)
	{
		u8_ErrorState=ERROR_NOK;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    185c:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    185e:	08 95       	ret

00001860 <DIO_EnablePinPullup>:


ERROR_STATE_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    1860:	68 30       	cpi	r22, 0x08	; 8
    1862:	08 f0       	brcs	.+2      	; 0x1866 <DIO_EnablePinPullup+0x6>
    1864:	4e c0       	rjmp	.+156    	; 0x1902 <DIO_EnablePinPullup+0xa2>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{	
		switch(PortName)
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	c9 f0       	breq	.+50     	; 0x189c <DIO_EnablePinPullup+0x3c>
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	30 f0       	brcs	.+12     	; 0x187a <DIO_EnablePinPullup+0x1a>
    186e:	82 30       	cpi	r24, 0x02	; 2
    1870:	31 f1       	breq	.+76     	; 0x18be <DIO_EnablePinPullup+0x5e>
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	09 f0       	breq	.+2      	; 0x1878 <DIO_EnablePinPullup+0x18>
    1876:	47 c0       	rjmp	.+142    	; 0x1906 <DIO_EnablePinPullup+0xa6>
    1878:	33 c0       	rjmp	.+102    	; 0x18e0 <DIO_EnablePinPullup+0x80>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PIN_HIGH);
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9c 01       	movw	r18, r24
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_EnablePinPullup+0x26>
    1882:	22 0f       	add	r18, r18
    1884:	33 1f       	adc	r19, r19
    1886:	6a 95       	dec	r22
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_EnablePinPullup+0x22>
    188a:	b9 01       	movw	r22, r18
    188c:	92 2f       	mov	r25, r18
    188e:	90 95       	com	r25
    1890:	8b b3       	in	r24, 0x1b	; 27
    1892:	89 23       	and	r24, r25
    1894:	68 2b       	or	r22, r24
    1896:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    1898:	80 e0       	ldi	r24, 0x00	; 0
				break;
    189a:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PIN_HIGH);
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9c 01       	movw	r18, r24
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_EnablePinPullup+0x48>
    18a4:	22 0f       	add	r18, r18
    18a6:	33 1f       	adc	r19, r19
    18a8:	6a 95       	dec	r22
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_EnablePinPullup+0x44>
    18ac:	b9 01       	movw	r22, r18
    18ae:	92 2f       	mov	r25, r18
    18b0:	90 95       	com	r25
    18b2:	88 b3       	in	r24, 0x18	; 24
    18b4:	89 23       	and	r24, r25
    18b6:	68 2b       	or	r22, r24
    18b8:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    18ba:	80 e0       	ldi	r24, 0x00	; 0
				break;                            
    18bc:	08 95       	ret
			case PORT_C:                          
				BIT_WRITE(PORTC,PinNo,PIN_HIGH);
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9c 01       	movw	r18, r24
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <DIO_EnablePinPullup+0x6a>
    18c6:	22 0f       	add	r18, r18
    18c8:	33 1f       	adc	r19, r19
    18ca:	6a 95       	dec	r22
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <DIO_EnablePinPullup+0x66>
    18ce:	b9 01       	movw	r22, r18
    18d0:	92 2f       	mov	r25, r18
    18d2:	90 95       	com	r25
    18d4:	85 b3       	in	r24, 0x15	; 21
    18d6:	89 23       	and	r24, r25
    18d8:	68 2b       	or	r22, r24
    18da:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    18dc:	80 e0       	ldi	r24, 0x00	; 0
				break;                            
    18de:	08 95       	ret
			case PORT_D:                          
				BIT_WRITE(PORTD,PinNo,PIN_HIGH);
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9c 01       	movw	r18, r24
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <DIO_EnablePinPullup+0x8c>
    18e8:	22 0f       	add	r18, r18
    18ea:	33 1f       	adc	r19, r19
    18ec:	6a 95       	dec	r22
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <DIO_EnablePinPullup+0x88>
    18f0:	b9 01       	movw	r22, r18
    18f2:	92 2f       	mov	r25, r18
    18f4:	90 95       	com	r25
    18f6:	82 b3       	in	r24, 0x12	; 18
    18f8:	89 23       	and	r24, r25
    18fa:	68 2b       	or	r22, r24
    18fc:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    18fe:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1900:	08 95       	ret
ERROR_STATE_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	08 95       	ret
			case PORT_D:                          
				BIT_WRITE(PORTD,PinNo,PIN_HIGH);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    1906:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}	
	}	
	return u8_ErrorState;
    1908:	08 95       	ret

0000190a <GLOBALINTTERUPTS_Enable>:
/**
* @brief: This function enables global interrupts.
*/
void GLOBALINTTERUPTS_Enable(void)
{
   SET_BIT(SREG, I);
    190a:	8f b7       	in	r24, 0x3f	; 63
    190c:	80 68       	ori	r24, 0x80	; 128
    190e:	8f bf       	out	0x3f, r24	; 63
}
    1910:	08 95       	ret

00001912 <GLOBALINTTERUPTS_Disable>:
/**
* @brief: This function disables global interrupts.
*/
void GLOBALINTTERUPTS_Disable(void)
{
   CLEAR_BIT(SREG, I);
    1912:	8f b7       	in	r24, 0x3f	; 63
    1914:	8f 77       	andi	r24, 0x7F	; 127
    1916:	8f bf       	out	0x3f, r24	; 63
    1918:	08 95       	ret

0000191a <ICU_Init>:

//APIs Implementation
ERROR_STATE_t ICU_Init(uint8_t ICUNumber)
{	
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    191a:	88 23       	and	r24, r24
    191c:	11 f5       	brne	.+68     	; 0x1962 <ICU_Init+0x48>
	{
		#if  ICU1
			case ICU_1:
				DIO_SetPinDirection(ICU1_PORT,ICU1_PIN,PIN_INPUT);
    191e:	83 e0       	ldi	r24, 0x03	; 3
    1920:	66 e0       	ldi	r22, 0x06	; 6
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
				TWO_BITS_WRITE(TCCR1A,WGM10,TWO_BITS_GET(gastr_ICUConfig[ICU_1].ICUMode,BIT_0));
    1928:	80 91 a6 00 	lds	r24, 0x00A6
    192c:	28 2f       	mov	r18, r24
    192e:	23 70       	andi	r18, 0x03	; 3
    1930:	9f b5       	in	r25, 0x2f	; 47
    1932:	9c 7f       	andi	r25, 0xFC	; 252
    1934:	92 2b       	or	r25, r18
    1936:	9f bd       	out	0x2f, r25	; 47
				TWO_BITS_WRITE(TCCR1B,WGM12,TWO_BITS_GET(gastr_ICUConfig[ICU_1].ICUMode,BIT_2));
    1938:	86 95       	lsr	r24
    193a:	86 95       	lsr	r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	83 70       	andi	r24, 0x03	; 3
    1940:	90 70       	andi	r25, 0x00	; 0
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	9e b5       	in	r25, 0x2e	; 46
    1950:	97 7e       	andi	r25, 0xE7	; 231
    1952:	89 2b       	or	r24, r25
				THREE_BITS_WRITE(TCCR1B,CS10,gastr_ICUConfig[ICU_1].ICUClkSource);
    1954:	88 7f       	andi	r24, 0xF8	; 248
    1956:	90 91 a7 00 	lds	r25, 0x00A7
    195a:	89 2b       	or	r24, r25
    195c:	8e bd       	out	0x2e, r24	; 46
				u8_ErrorState=ERROR_OK;
    195e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1960:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1962:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}	
	return u8_ErrorState;
}
    1964:	08 95       	ret

00001966 <ICU_Reset>:

ERROR_STATE_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((ICU1_FALLING_EDGE!=ICUEdgeDetector )&&(ICU1_RISING_EDGE!=ICUEdgeDetector ))
    1966:	62 30       	cpi	r22, 0x02	; 2
    1968:	70 f4       	brcc	.+28     	; 0x1986 <ICU_Reset+0x20>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    196a:	88 23       	and	r24, r24
    196c:	71 f4       	brne	.+28     	; 0x198a <ICU_Reset+0x24>
		{
			#if  ICU1
			case ICU_1:
			REG_WRITE(TCNT1,CLEAR_REGISTER);
    196e:	1d bc       	out	0x2d, r1	; 45
    1970:	1c bc       	out	0x2c, r1	; 44
			BIT_WRITE(TCCR1B,ICES1,ICUEdgeDetector);
    1972:	62 95       	swap	r22
    1974:	66 0f       	add	r22, r22
    1976:	66 0f       	add	r22, r22
    1978:	60 7c       	andi	r22, 0xC0	; 192
    197a:	8e b5       	in	r24, 0x2e	; 46
    197c:	8f 7b       	andi	r24, 0xBF	; 191
    197e:	68 2b       	or	r22, r24
    1980:	6e bd       	out	0x2e, r22	; 46
			//BIT_WRITE(TIFR,TOV1,BIT_HIGH);
			//BIT_WRITE(TIFR,ICF1,BIT_HIGH);
			u8_ErrorState = ERROR_OK;
    1982:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1984:	08 95       	ret
ERROR_STATE_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((ICU1_FALLING_EDGE!=ICUEdgeDetector )&&(ICU1_RISING_EDGE!=ICUEdgeDetector ))
	{
		u8_ErrorState = ERROR_NOK;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	08 95       	ret
			//BIT_WRITE(TIFR,ICF1,BIT_HIGH);
			u8_ErrorState = ERROR_OK;
			break;
			#endif
			default:
			u8_ErrorState = ERROR_NOK;
    198a:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	return u8_ErrorState;
}
    198c:	08 95       	ret

0000198e <ICU_UpdateTimeOn>:

ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
    198e:	8f 92       	push	r8
    1990:	9f 92       	push	r9
    1992:	af 92       	push	r10
    1994:	bf 92       	push	r11
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	8b 01       	movw	r16, r22
    19a4:	7a 01       	movw	r14, r20
	uint8_t u8_ErrorState=ERROR_OK;
	if((NULL_PTR==ICUState) || (NULL_PTR==TimeOnValue))
    19a6:	61 15       	cp	r22, r1
    19a8:	71 05       	cpc	r23, r1
    19aa:	09 f4       	brne	.+2      	; 0x19ae <ICU_UpdateTimeOn+0x20>
    19ac:	9c c0       	rjmp	.+312    	; 0x1ae6 <ICU_UpdateTimeOn+0x158>
    19ae:	41 15       	cp	r20, r1
    19b0:	51 05       	cpc	r21, r1
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <ICU_UpdateTimeOn+0x28>
    19b4:	9a c0       	rjmp	.+308    	; 0x1aea <ICU_UpdateTimeOn+0x15c>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    19b6:	88 23       	and	r24, r24
    19b8:	09 f0       	breq	.+2      	; 0x19bc <ICU_UpdateTimeOn+0x2e>
    19ba:	99 c0       	rjmp	.+306    	; 0x1aee <ICU_UpdateTimeOn+0x160>
		{
			#if  ICU1
				case ICU_1:
				{
					switch(*ICUState)
    19bc:	fb 01       	movw	r30, r22
    19be:	80 81       	ld	r24, Z
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	91 f0       	breq	.+36     	; 0x19e8 <ICU_UpdateTimeOn+0x5a>
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	20 f0       	brcs	.+8      	; 0x19d0 <ICU_UpdateTimeOn+0x42>
    19c8:	82 30       	cpi	r24, 0x02	; 2
    19ca:	09 f0       	breq	.+2      	; 0x19ce <ICU_UpdateTimeOn+0x40>
    19cc:	92 c0       	rjmp	.+292    	; 0x1af2 <ICU_UpdateTimeOn+0x164>
    19ce:	26 c0       	rjmp	.+76     	; 0x1a1c <ICU_UpdateTimeOn+0x8e>
					{
						case START_STATE:
						{
							if(ERROR_OK != ICU_Reset(ICU_1,ICU1_RISING_EDGE))
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	0e 94 b3 0c 	call	0x1966	; 0x1966 <ICU_Reset>
    19d8:	88 23       	and	r24, r24
    19da:	09 f0       	breq	.+2      	; 0x19de <ICU_UpdateTimeOn+0x50>
    19dc:	8c c0       	rjmp	.+280    	; 0x1af6 <ICU_UpdateTimeOn+0x168>
							{
								u8_ErrorState = ERROR_NOK;
							}
							else
							{
								*ICUState=WAITING_RISING_EDGE_STATE;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	f8 01       	movw	r30, r16
    19e2:	80 83       	st	Z, r24
								u8_ErrorState = ERROR_OK;															
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	8e c0       	rjmp	.+284    	; 0x1b04 <ICU_UpdateTimeOn+0x176>
							}
							break;
						}
						case WAITING_RISING_EDGE_STATE:
						{
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    19e8:	88 b7       	in	r24, 0x38	; 56
    19ea:	82 95       	swap	r24
    19ec:	86 95       	lsr	r24
    19ee:	87 70       	andi	r24, 0x07	; 7
    19f0:	80 ff       	sbrs	r24, 0
    19f2:	83 c0       	rjmp	.+262    	; 0x1afa <ICU_UpdateTimeOn+0x16c>
							{
								if(ERROR_OK!=ICU_Reset(ICU_1,ICU1_FALLING_EDGE))
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	0e 94 b3 0c 	call	0x1966	; 0x1966 <ICU_Reset>
    19fc:	88 23       	and	r24, r24
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <ICU_UpdateTimeOn+0x74>
    1a00:	7e c0       	rjmp	.+252    	; 0x1afe <ICU_UpdateTimeOn+0x170>
								{
									u8_ErrorState = ERROR_NOK;
								}
								else
								{
									OverflowCounter=0;
    1a02:	10 92 07 01 	sts	0x0107, r1
    1a06:	10 92 08 01 	sts	0x0108, r1
    1a0a:	10 92 09 01 	sts	0x0109, r1
    1a0e:	10 92 0a 01 	sts	0x010A, r1
									*ICUState=WAITING_FALLING_EDGE_STATE;
    1a12:	82 e0       	ldi	r24, 0x02	; 2
    1a14:	f8 01       	movw	r30, r16
    1a16:	80 83       	st	Z, r24
									u8_ErrorState = ERROR_OK;									
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	74 c0       	rjmp	.+232    	; 0x1b04 <ICU_UpdateTimeOn+0x176>
							}
							break;
						}
						case WAITING_FALLING_EDGE_STATE:
						{
							if(OVERFLOW_FLAG_UP==(BIT_GET(TIFR,TOV1)))
    1a1c:	88 b7       	in	r24, 0x38	; 56
    1a1e:	86 95       	lsr	r24
    1a20:	86 95       	lsr	r24
    1a22:	80 ff       	sbrs	r24, 0
    1a24:	16 c0       	rjmp	.+44     	; 0x1a52 <ICU_UpdateTimeOn+0xc4>
							{
								OverflowCounter++;
    1a26:	80 91 07 01 	lds	r24, 0x0107
    1a2a:	90 91 08 01 	lds	r25, 0x0108
    1a2e:	a0 91 09 01 	lds	r26, 0x0109
    1a32:	b0 91 0a 01 	lds	r27, 0x010A
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	a1 1d       	adc	r26, r1
    1a3a:	b1 1d       	adc	r27, r1
    1a3c:	80 93 07 01 	sts	0x0107, r24
    1a40:	90 93 08 01 	sts	0x0108, r25
    1a44:	a0 93 09 01 	sts	0x0109, r26
    1a48:	b0 93 0a 01 	sts	0x010A, r27
								BIT_WRITE(TIFR,TOV1,BIT_HIGH);
    1a4c:	88 b7       	in	r24, 0x38	; 56
    1a4e:	84 60       	ori	r24, 0x04	; 4
    1a50:	88 bf       	out	0x38, r24	; 56
								u8_ErrorState = ERROR_OK;
							}
							
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    1a52:	88 b7       	in	r24, 0x38	; 56
    1a54:	82 95       	swap	r24
    1a56:	86 95       	lsr	r24
    1a58:	87 70       	andi	r24, 0x07	; 7
    1a5a:	80 ff       	sbrs	r24, 0
    1a5c:	52 c0       	rjmp	.+164    	; 0x1b02 <ICU_UpdateTimeOn+0x174>
	{
		switch(ICUNumber)
		{
			#if  ICU1
				case ICU_1:
					CounterNumber=(uint64_t)(REG_GET(ICR1)+(OverflowCounter*ICU1_MAX_COUNT));
    1a5e:	60 91 07 01 	lds	r22, 0x0107
    1a62:	70 91 08 01 	lds	r23, 0x0108
    1a66:	80 91 09 01 	lds	r24, 0x0109
    1a6a:	90 91 0a 01 	lds	r25, 0x010A
    1a6e:	2f ef       	ldi	r18, 0xFF	; 255
    1a70:	3f ef       	ldi	r19, 0xFF	; 255
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	50 e0       	ldi	r21, 0x00	; 0
    1a76:	0e 94 49 14 	call	0x2892	; 0x2892 <__mulsi3>
    1a7a:	ab 01       	movw	r20, r22
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	86 b5       	in	r24, 0x26	; 38
    1a80:	97 b5       	in	r25, 0x27	; 39
    1a82:	a0 e0       	ldi	r26, 0x00	; 0
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	84 0f       	add	r24, r20
    1a88:	95 1f       	adc	r25, r21
    1a8a:	a6 1f       	adc	r26, r22
    1a8c:	b7 1f       	adc	r27, r23
					*TimeOnValue = (CounterNumber*((double64_t)gastr_ICUConfig[ICU_1].ICUPrescaler/F_CPU));
    1a8e:	28 2f       	mov	r18, r24
    1a90:	39 2f       	mov	r19, r25
    1a92:	4a 2f       	mov	r20, r26
    1a94:	5b 2f       	mov	r21, r27
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 2f 13 	call	0x265e	; 0x265e <__floatundisf>
    1aa2:	4b 01       	movw	r8, r22
    1aa4:	5c 01       	movw	r10, r24
    1aa6:	60 91 a8 00 	lds	r22, 0x00A8
    1aaa:	70 91 a9 00 	lds	r23, 0x00A9
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__floatunsisf>
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	34 e2       	ldi	r19, 0x24	; 36
    1aba:	44 e7       	ldi	r20, 0x74	; 116
    1abc:	5b e4       	ldi	r21, 0x4B	; 75
    1abe:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__divsf3>
    1ac2:	9b 01       	movw	r18, r22
    1ac4:	ac 01       	movw	r20, r24
    1ac6:	c5 01       	movw	r24, r10
    1ac8:	b4 01       	movw	r22, r8
    1aca:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	f7 01       	movw	r30, r14
    1ad4:	80 83       	st	Z, r24
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	a2 83       	std	Z+2, r26	; 0x02
    1ada:	b3 83       	std	Z+3, r27	; 0x03
								{
									u8_ErrorState = ERROR_NOK;
								}
								else
								{
									*ICUState=END_STATE;
    1adc:	83 e0       	ldi	r24, 0x03	; 3
    1ade:	f8 01       	movw	r30, r16
    1ae0:	80 83       	st	Z, r24
									u8_ErrorState = ERROR_OK;	
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <ICU_UpdateTimeOn+0x176>
ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((NULL_PTR==ICUState) || (NULL_PTR==TimeOnValue))
	{
		u8_ErrorState = ERROR_NOK;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	0d c0       	rjmp	.+26     	; 0x1b04 <ICU_UpdateTimeOn+0x176>
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	0b c0       	rjmp	.+22     	; 0x1b04 <ICU_UpdateTimeOn+0x176>
					}
					break;
				}
			#endif
			default:
				u8_ErrorState= ERROR_NOK;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	09 c0       	rjmp	.+18     	; 0x1b04 <ICU_UpdateTimeOn+0x176>
								
							}
							break;
						}
						default:
							u8_ErrorState = ERROR_NOK;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	07 c0       	rjmp	.+14     	; 0x1b04 <ICU_UpdateTimeOn+0x176>
					{
						case START_STATE:
						{
							if(ERROR_OK != ICU_Reset(ICU_1,ICU1_RISING_EDGE))
							{
								u8_ErrorState = ERROR_NOK;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <ICU_UpdateTimeOn+0x176>
	return u8_ErrorState;
}

ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	03 c0       	rjmp	.+6      	; 0x1b04 <ICU_UpdateTimeOn+0x176>
						{
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
							{
								if(ERROR_OK!=ICU_Reset(ICU_1,ICU1_FALLING_EDGE))
								{
									u8_ErrorState = ERROR_NOK;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <ICU_UpdateTimeOn+0x176>
								OverflowCounter++;
								BIT_WRITE(TIFR,TOV1,BIT_HIGH);
								u8_ErrorState = ERROR_OK;
							}
							
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    1b02:	80 e0       	ldi	r24, 0x00	; 0
				u8_ErrorState= ERROR_NOK;
				break;
		}
	}
	return u8_ErrorState;
}
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	ff 90       	pop	r15
    1b0e:	ef 90       	pop	r14
    1b10:	bf 90       	pop	r11
    1b12:	af 90       	pop	r10
    1b14:	9f 90       	pop	r9
    1b16:	8f 90       	pop	r8
    1b18:	08 95       	ret

00001b1a <ICU_GetICR1Registert>:

ERROR_STATE_t ICU_GetICR1Registert(uint8_t ICUNumber,ptr_uint16_t Register)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1b1a:	88 23       	and	r24, r24
    1b1c:	39 f4       	brne	.+14     	; 0x1b2c <ICU_GetICR1Registert+0x12>
	{
		#if  ICU1
			case ICU_1:
				*Register=ICR1;
    1b1e:	86 b5       	in	r24, 0x26	; 38
    1b20:	97 b5       	in	r25, 0x27	; 39
    1b22:	fb 01       	movw	r30, r22
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
    1b28:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1b2a:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;
}
    1b2e:	08 95       	ret

00001b30 <ICU_GetTIFRRegistert>:

ERROR_STATE_t ICU_GetTIFRRegistert(uint8_t ICUNumber,ptr_uint8_t Register)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1b30:	88 23       	and	r24, r24
    1b32:	29 f4       	brne	.+10     	; 0x1b3e <ICU_GetTIFRRegistert+0xe>
	{
		#if  ICU1
			case ICU_1:
				*Register=TIFR;
    1b34:	88 b7       	in	r24, 0x38	; 56
    1b36:	fb 01       	movw	r30, r22
    1b38:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1b3c:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;
}
    1b40:	08 95       	ret

00001b42 <ICU_SetTCNT1Registert>:

ERROR_STATE_t ICU_SetTCNT1Registert(uint8_t ICUNumber,uint16_t RegisterValue)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1b42:	88 23       	and	r24, r24
    1b44:	19 f4       	brne	.+6      	; 0x1b4c <ICU_SetTCNT1Registert+0xa>
	{
		#if  ICU1
			case ICU_1:
				TCNT1=RegisterValue;
    1b46:	7d bd       	out	0x2d, r23	; 45
    1b48:	6c bd       	out	0x2c, r22	; 44
				u8_ErrorState=ERROR_OK;
				break;
    1b4a:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;	
}
    1b4e:	08 95       	ret

00001b50 <ICU_EnableInterrupt>:

ERROR_STATE_t ICU_EnableInterrupt(uint8_t ICUNumber,uint8_t ICUInterruptType)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1b50:	88 23       	and	r24, r24
    1b52:	79 f4       	brne	.+30     	; 0x1b72 <ICU_EnableInterrupt+0x22>
	{
		#if  ICU1
			case ICU_1:
				switch(ICUInterruptType)
    1b54:	66 23       	and	r22, r22
    1b56:	19 f0       	breq	.+6      	; 0x1b5e <ICU_EnableInterrupt+0xe>
    1b58:	61 30       	cpi	r22, 0x01	; 1
    1b5a:	69 f4       	brne	.+26     	; 0x1b76 <ICU_EnableInterrupt+0x26>
    1b5c:	05 c0       	rjmp	.+10     	; 0x1b68 <ICU_EnableInterrupt+0x18>
				{
					case ICU1_OVERFLOW_INT:
						BIT_WRITE(TIMSK,TOIE1,BIT_HIGH);
    1b5e:	89 b7       	in	r24, 0x39	; 57
    1b60:	84 60       	ori	r24, 0x04	; 4
    1b62:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1b64:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1b66:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_HIGH);
    1b68:	89 b7       	in	r24, 0x39	; 57
    1b6a:	80 62       	ori	r24, 0x20	; 32
    1b6c:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1b70:	08 95       	ret
						break;
				}
				break;
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_HIGH);
						u8_ErrorState=ERROR_OK;
						break;
					default:
						u8_ErrorState=ERROR_NOK;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
    1b78:	08 95       	ret

00001b7a <ICU_DisableInterrupt>:

ERROR_STATE_t ICU_DisableInterrupt(uint8_t ICUNumber,uint8_t ICUInterruptType)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1b7a:	88 23       	and	r24, r24
    1b7c:	79 f4       	brne	.+30     	; 0x1b9c <ICU_DisableInterrupt+0x22>
	{
		#if  ICU1
			case ICU_1:
				switch(ICUInterruptType)
    1b7e:	66 23       	and	r22, r22
    1b80:	19 f0       	breq	.+6      	; 0x1b88 <ICU_DisableInterrupt+0xe>
    1b82:	61 30       	cpi	r22, 0x01	; 1
    1b84:	69 f4       	brne	.+26     	; 0x1ba0 <ICU_DisableInterrupt+0x26>
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <ICU_DisableInterrupt+0x18>
				{
					case ICU1_OVERFLOW_INT:
						BIT_WRITE(TIMSK,TOIE1,BIT_LOW);
    1b88:	89 b7       	in	r24, 0x39	; 57
    1b8a:	8b 7f       	andi	r24, 0xFB	; 251
    1b8c:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1b90:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_LOW);
    1b92:	89 b7       	in	r24, 0x39	; 57
    1b94:	8f 7d       	andi	r24, 0xDF	; 223
    1b96:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1b98:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1b9a:	08 95       	ret
						break;
				}
				break;
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_LOW);
						u8_ErrorState=ERROR_OK;
						break;
					default:
						u8_ErrorState=ERROR_NOK;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
    1ba2:	08 95       	ret

00001ba4 <ICU_SetCallback>:

ERROR_STATE_t ICU_SetCallback(uint8_t ICUNumber,uint8_t ICUInterruptType,Ptr_VoidFuncVoid_t Callback)
{
	uint8_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Callback)
    1ba4:	41 15       	cp	r20, r1
    1ba6:	51 05       	cpc	r21, r1
    1ba8:	99 f0       	breq	.+38     	; 0x1bd0 <ICU_SetCallback+0x2c>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    1baa:	88 23       	and	r24, r24
    1bac:	99 f4       	brne	.+38     	; 0x1bd4 <ICU_SetCallback+0x30>
		{
			#if  ICU1
				case ICU_1:
					switch(ICUInterruptType)
    1bae:	66 23       	and	r22, r22
    1bb0:	19 f0       	breq	.+6      	; 0x1bb8 <ICU_SetCallback+0x14>
    1bb2:	61 30       	cpi	r22, 0x01	; 1
    1bb4:	89 f4       	brne	.+34     	; 0x1bd8 <ICU_SetCallback+0x34>
    1bb6:	06 c0       	rjmp	.+12     	; 0x1bc4 <ICU_SetCallback+0x20>
					{
						case ICU1_OVERFLOW_INT:
							gptr_CallbackOverflow=Callback;
    1bb8:	50 93 0c 01 	sts	0x010C, r21
    1bbc:	40 93 0b 01 	sts	0x010B, r20
							u8_ErrorState=ERROR_OK;
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
							break;
    1bc2:	08 95       	ret
						case ICU1_INPUTCAPTURE_INT:
							gptr_CallbackInputCapture=Callback;
    1bc4:	50 93 0e 01 	sts	0x010E, r21
    1bc8:	40 93 0d 01 	sts	0x010D, r20
							u8_ErrorState=ERROR_OK;
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
							break;
    1bce:	08 95       	ret
ERROR_STATE_t ICU_SetCallback(uint8_t ICUNumber,uint8_t ICUInterruptType,Ptr_VoidFuncVoid_t Callback)
{
	uint8_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Callback)
	{
		u8_ErrorState=ERROR_NOK;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	08 95       	ret
							break;
					}
					break;
			#endif
			default:
				u8_ErrorState=ERROR_NOK;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	08 95       	ret
						case ICU1_INPUTCAPTURE_INT:
							gptr_CallbackInputCapture=Callback;
							u8_ErrorState=ERROR_OK;
							break;
						default:
							u8_ErrorState=ERROR_NOK;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
				u8_ErrorState=ERROR_NOK;
				break;
		}				
	}
	return u8_ErrorState;
}
    1bda:	08 95       	ret

00001bdc <__vector_9>:

void __vector_9(void) __attribute__((signal)); //TIMER1_OVF_vect
void __vector_9(void) 
{
    1bdc:	1f 92       	push	r1
    1bde:	0f 92       	push	r0
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	0f 92       	push	r0
    1be4:	11 24       	eor	r1, r1
    1be6:	2f 93       	push	r18
    1be8:	3f 93       	push	r19
    1bea:	4f 93       	push	r20
    1bec:	5f 93       	push	r21
    1bee:	6f 93       	push	r22
    1bf0:	7f 93       	push	r23
    1bf2:	8f 93       	push	r24
    1bf4:	9f 93       	push	r25
    1bf6:	af 93       	push	r26
    1bf8:	bf 93       	push	r27
    1bfa:	ef 93       	push	r30
    1bfc:	ff 93       	push	r31
   gptr_CallbackOverflow();
    1bfe:	e0 91 0b 01 	lds	r30, 0x010B
    1c02:	f0 91 0c 01 	lds	r31, 0x010C
    1c06:	09 95       	icall
}
    1c08:	ff 91       	pop	r31
    1c0a:	ef 91       	pop	r30
    1c0c:	bf 91       	pop	r27
    1c0e:	af 91       	pop	r26
    1c10:	9f 91       	pop	r25
    1c12:	8f 91       	pop	r24
    1c14:	7f 91       	pop	r23
    1c16:	6f 91       	pop	r22
    1c18:	5f 91       	pop	r21
    1c1a:	4f 91       	pop	r20
    1c1c:	3f 91       	pop	r19
    1c1e:	2f 91       	pop	r18
    1c20:	0f 90       	pop	r0
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	0f 90       	pop	r0
    1c26:	1f 90       	pop	r1
    1c28:	18 95       	reti

00001c2a <__vector_6>:

void __vector_6(void) __attribute__((signal)); //TIMER1_CAPT_vect
void __vector_6(void) 
{
    1c2a:	1f 92       	push	r1
    1c2c:	0f 92       	push	r0
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	0f 92       	push	r0
    1c32:	11 24       	eor	r1, r1
    1c34:	2f 93       	push	r18
    1c36:	3f 93       	push	r19
    1c38:	4f 93       	push	r20
    1c3a:	5f 93       	push	r21
    1c3c:	6f 93       	push	r22
    1c3e:	7f 93       	push	r23
    1c40:	8f 93       	push	r24
    1c42:	9f 93       	push	r25
    1c44:	af 93       	push	r26
    1c46:	bf 93       	push	r27
    1c48:	ef 93       	push	r30
    1c4a:	ff 93       	push	r31
   gptr_CallbackInputCapture();
    1c4c:	e0 91 0d 01 	lds	r30, 0x010D
    1c50:	f0 91 0e 01 	lds	r31, 0x010E
    1c54:	09 95       	icall
}
    1c56:	ff 91       	pop	r31
    1c58:	ef 91       	pop	r30
    1c5a:	bf 91       	pop	r27
    1c5c:	af 91       	pop	r26
    1c5e:	9f 91       	pop	r25
    1c60:	8f 91       	pop	r24
    1c62:	7f 91       	pop	r23
    1c64:	6f 91       	pop	r22
    1c66:	5f 91       	pop	r21
    1c68:	4f 91       	pop	r20
    1c6a:	3f 91       	pop	r19
    1c6c:	2f 91       	pop	r18
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	0f 90       	pop	r0
    1c74:	1f 90       	pop	r1
    1c76:	18 95       	reti

00001c78 <PWM_Init>:
extern Str_PWMConfig_t gastr_PWMConfig[PWM_CHANNEL_NUMBERS];

ERROR_STATE_t PWM_Init(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1c78:	88 23       	and	r24, r24
    1c7a:	69 f5       	brne	.+90     	; 0x1cd6 <PWM_Init+0x5e>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				BIT_WRITE(TCCR0,WGM00,BIT_GET(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMMode,BIT0));
    1c7c:	20 91 ab 00 	lds	r18, 0x00AB
    1c80:	42 2f       	mov	r20, r18
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	41 70       	andi	r20, 0x01	; 1
    1c86:	50 70       	andi	r21, 0x00	; 0
    1c88:	00 24       	eor	r0, r0
    1c8a:	56 95       	lsr	r21
    1c8c:	47 95       	ror	r20
    1c8e:	07 94       	ror	r0
    1c90:	56 95       	lsr	r21
    1c92:	47 95       	ror	r20
    1c94:	07 94       	ror	r0
    1c96:	54 2f       	mov	r21, r20
    1c98:	40 2d       	mov	r20, r0
    1c9a:	83 b7       	in	r24, 0x33	; 51
    1c9c:	8f 7b       	andi	r24, 0xBF	; 191
    1c9e:	48 2b       	or	r20, r24
				BIT_WRITE(TCCR0,WGM01,BIT_GET(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMMode,BIT1));
    1ca0:	47 7f       	andi	r20, 0xF7	; 247
    1ca2:	26 95       	lsr	r18
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	21 70       	andi	r18, 0x01	; 1
    1ca8:	30 70       	andi	r19, 0x00	; 0
    1caa:	c9 01       	movw	r24, r18
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	84 2b       	or	r24, r20
				
				TWO_BITS_WRITE(TCCR0,COM00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode);
    1cba:	8f 7c       	andi	r24, 0xCF	; 207
    1cbc:	90 91 ac 00 	lds	r25, 0x00AC
    1cc0:	92 95       	swap	r25
    1cc2:	90 7f       	andi	r25, 0xF0	; 240
    1cc4:	89 2b       	or	r24, r25
    1cc6:	83 bf       	out	0x33, r24	; 51
				
				DIO_SetPinDirection(PWM0_PORT,PWM0_PIN,PIN_OUTPUT);
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	63 e0       	ldi	r22, 0x03	; 3
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_SetPinDirection>
				
				u8_ErrorState=ERROR_OK;
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1cd4:	08 95       	ret
				
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1cd8:	08 95       	ret

00001cda <PWM_Start>:

ERROR_STATE_t PWM_Start(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1cda:	88 23       	and	r24, r24
    1cdc:	41 f4       	brne	.+16     	; 0x1cee <PWM_Start+0x14>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				THREE_BITS_WRITE(TCCR0,CS00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMFrequancy);	
    1cde:	83 b7       	in	r24, 0x33	; 51
    1ce0:	88 7f       	andi	r24, 0xF8	; 248
    1ce2:	90 91 aa 00 	lds	r25, 0x00AA
    1ce6:	89 2b       	or	r24, r25
    1ce8:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;	
    1cea:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1cec:	08 95       	ret
				THREE_BITS_WRITE(TCCR2,CS20,gastr_PWMConfig[PWM_CHANNEL_OC2].PWMFrequancy);
				u8_ErrorState=ERROR_OK;				
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1cf0:	08 95       	ret

00001cf2 <PWM_Stop>:

ERROR_STATE_t PWM_Stop(uint8_t PwmChannelNumber )
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1cf2:	88 23       	and	r24, r24
    1cf4:	29 f4       	brne	.+10     	; 0x1d00 <PWM_Stop+0xe>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				THREE_BITS_WRITE(TCCR0,CS00,OC0_NO_CLK);
    1cf6:	83 b7       	in	r24, 0x33	; 51
    1cf8:	88 7f       	andi	r24, 0xF8	; 248
    1cfa:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;	
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1cfe:	08 95       	ret
				THREE_BITS_WRITE(TCCR2,CS20,OC2_NO_CLK);	
				u8_ErrorState=ERROR_OK;	
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;	
    1d00:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1d02:	08 95       	ret

00001d04 <PWM_Connect>:

ERROR_STATE_t PWM_Connect(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1d04:	88 23       	and	r24, r24
    1d06:	51 f4       	brne	.+20     	; 0x1d1c <PWM_Connect+0x18>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				TWO_BITS_WRITE(TCCR0,COM00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode);
    1d08:	90 91 ac 00 	lds	r25, 0x00AC
    1d0c:	92 95       	swap	r25
    1d0e:	90 7f       	andi	r25, 0xF0	; 240
    1d10:	83 b7       	in	r24, 0x33	; 51
    1d12:	8f 7c       	andi	r24, 0xCF	; 207
    1d14:	89 2b       	or	r24, r25
    1d16:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;
    1d18:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1d1a:	08 95       	ret
				TWO_BITS_WRITE(TCCR2,COM20,gastr_PWMConfig[PWM_CHANNEL_OC2].PWMWaveformMode);
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;	
}
    1d1e:	08 95       	ret

00001d20 <PWM_Disconnect>:

ERROR_STATE_t PWM_Disconnect(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1d20:	88 23       	and	r24, r24
    1d22:	29 f4       	brne	.+10     	; 0x1d2e <PWM_Disconnect+0xe>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				TWO_BITS_WRITE(TCCR0,COM00,DISCONNECT);
    1d24:	83 b7       	in	r24, 0x33	; 51
    1d26:	8f 7c       	andi	r24, 0xCF	; 207
    1d28:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1d2c:	08 95       	ret
				TWO_BITS_WRITE(TCCR2,COM20,DISCONNECT);	
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1d30:	08 95       	ret

00001d32 <PWM_SetDuty>:

ERROR_STATE_t PWM_SetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PwmDuty==0||PwmDuty>100)
    1d32:	96 2f       	mov	r25, r22
    1d34:	91 50       	subi	r25, 0x01	; 1
    1d36:	94 36       	cpi	r25, 0x64	; 100
    1d38:	10 f5       	brcc	.+68     	; 0x1d7e <PWM_SetDuty+0x4c>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PwmChannelNumber)
    1d3a:	88 23       	and	r24, r24
    1d3c:	11 f5       	brne	.+68     	; 0x1d82 <PWM_SetDuty+0x50>
		{
			#if OC0
				case PWM_CHANNEL_OC0:
					switch(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode)
    1d3e:	80 91 ac 00 	lds	r24, 0x00AC
    1d42:	82 30       	cpi	r24, 0x02	; 2
    1d44:	01 f5       	brne	.+64     	; 0x1d86 <PWM_SetDuty+0x54>
					{
						case NON_INVERTING:
							OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__floatsisf>
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	48 ec       	ldi	r20, 0xC8	; 200
    1d56:	52 e4       	ldi	r21, 0x42	; 66
    1d58:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__divsf3>
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	53 e4       	ldi	r21, 0x43	; 67
    1d64:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__mulsf3>
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e8       	ldi	r20, 0x80	; 128
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__subsf3>
    1d74:	0e 94 c6 12 	call	0x258c	; 0x258c <__fixunssfsi>
    1d78:	6c bf       	out	0x3c, r22	; 60
							u8_ErrorState=ERROR_OK;
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
							break;
    1d7c:	08 95       	ret
ERROR_STATE_t PWM_SetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PwmDuty==0||PwmDuty>100)
	{
		u8_ErrorState=ERROR_NOK;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	08 95       	ret
							break;
					}
					break;
			#endif	
			default:
				u8_ErrorState=ERROR_NOK;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	08 95       	ret
						case NON_INVERTING:
							OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
							u8_ErrorState=ERROR_OK;
							break;
						default:
							u8_ErrorState=ERROR_NOK;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
				u8_ErrorState=ERROR_NOK;
				break;			
		}		
	}
	return u8_ErrorState;
    1d88:	08 95       	ret

00001d8a <GetFreqPrescaleRatio>:
* @return function error state.
*/
static ERROR_STATE_t GetFreqPrescaleRatio(TIM_CH_t TIM_channel, float32_t * Ratio)
{
   /* For Timer 0 and 1 */
   if(TIMER_0 == TIM_channel || TIMER_1 == TIM_channel)
    1d8a:	82 30       	cpi	r24, 0x02	; 2
    1d8c:	08 f0       	brcs	.+2      	; 0x1d90 <GetFreqPrescaleRatio+0x6>
    1d8e:	51 c0       	rjmp	.+162    	; 0x1e32 <GetFreqPrescaleRatio+0xa8>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	fc 01       	movw	r30, r24
    1d94:	ee 0f       	add	r30, r30
    1d96:	ff 1f       	adc	r31, r31
    1d98:	8e 0f       	add	r24, r30
    1d9a:	9f 1f       	adc	r25, r31
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	ea 54       	subi	r30, 0x4A	; 74
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	82 81       	ldd	r24, Z+2	; 0x02
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	21 f1       	breq	.+72     	; 0x1df0 <GetFreqPrescaleRatio+0x66>
    1da8:	84 30       	cpi	r24, 0x04	; 4
    1daa:	30 f4       	brcc	.+12     	; 0x1db8 <GetFreqPrescaleRatio+0x2e>
    1dac:	81 30       	cpi	r24, 0x01	; 1
    1dae:	51 f0       	breq	.+20     	; 0x1dc4 <GetFreqPrescaleRatio+0x3a>
    1db0:	82 30       	cpi	r24, 0x02	; 2
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <GetFreqPrescaleRatio+0x2c>
    1db4:	a4 c0       	rjmp	.+328    	; 0x1efe <GetFreqPrescaleRatio+0x174>
    1db6:	11 c0       	rjmp	.+34     	; 0x1dda <GetFreqPrescaleRatio+0x50>
    1db8:	84 30       	cpi	r24, 0x04	; 4
    1dba:	29 f1       	breq	.+74     	; 0x1e06 <GetFreqPrescaleRatio+0x7c>
    1dbc:	85 30       	cpi	r24, 0x05	; 5
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <GetFreqPrescaleRatio+0x38>
    1dc0:	9e c0       	rjmp	.+316    	; 0x1efe <GetFreqPrescaleRatio+0x174>
    1dc2:	2c c0       	rjmp	.+88     	; 0x1e1c <GetFreqPrescaleRatio+0x92>
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a0 e8       	ldi	r26, 0x80	; 128
    1dca:	bd e3       	ldi	r27, 0x3D	; 61
    1dcc:	fb 01       	movw	r30, r22
    1dce:	80 83       	st	Z, r24
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	a2 83       	std	Z+2, r26	; 0x02
    1dd4:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1dd8:	08 95       	ret
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a0 e0       	ldi	r26, 0x00	; 0
    1de0:	bf e3       	ldi	r27, 0x3F	; 63
    1de2:	fb 01       	movw	r30, r22
    1de4:	80 83       	st	Z, r24
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	a2 83       	std	Z+2, r26	; 0x02
    1dea:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1dec:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1dee:	08 95       	ret
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a0 e8       	ldi	r26, 0x80	; 128
    1df6:	b0 e4       	ldi	r27, 0x40	; 64
    1df8:	fb 01       	movw	r30, r22
    1dfa:	80 83       	st	Z, r24
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	a2 83       	std	Z+2, r26	; 0x02
    1e00:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e02:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1e04:	08 95       	ret
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	a0 e8       	ldi	r26, 0x80	; 128
    1e0c:	b1 e4       	ldi	r27, 0x41	; 65
    1e0e:	fb 01       	movw	r30, r22
    1e10:	80 83       	st	Z, r24
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	a2 83       	std	Z+2, r26	; 0x02
    1e16:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e18:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1e1a:	08 95       	ret
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a0 e8       	ldi	r26, 0x80	; 128
    1e22:	b2 e4       	ldi	r27, 0x42	; 66
    1e24:	fb 01       	movw	r30, r22
    1e26:	80 83       	st	Z, r24
    1e28:	91 83       	std	Z+1, r25	; 0x01
    1e2a:	a2 83       	std	Z+2, r26	; 0x02
    1e2c:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1e30:	08 95       	ret
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   /* For Timer 2 */
   else if(TIMER_2 == TIM_channel)
    1e32:	82 30       	cpi	r24, 0x02	; 2
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <GetFreqPrescaleRatio+0xae>
    1e36:	65 c0       	rjmp	.+202    	; 0x1f02 <GetFreqPrescaleRatio+0x178>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
    1e38:	80 91 be 00 	lds	r24, 0x00BE
    1e3c:	84 30       	cpi	r24, 0x04	; 4
    1e3e:	99 f1       	breq	.+102    	; 0x1ea6 <GetFreqPrescaleRatio+0x11c>
    1e40:	85 30       	cpi	r24, 0x05	; 5
    1e42:	40 f4       	brcc	.+16     	; 0x1e54 <GetFreqPrescaleRatio+0xca>
    1e44:	82 30       	cpi	r24, 0x02	; 2
    1e46:	c9 f0       	breq	.+50     	; 0x1e7a <GetFreqPrescaleRatio+0xf0>
    1e48:	83 30       	cpi	r24, 0x03	; 3
    1e4a:	10 f5       	brcc	.+68     	; 0x1e90 <GetFreqPrescaleRatio+0x106>
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <GetFreqPrescaleRatio+0xc8>
    1e50:	5a c0       	rjmp	.+180    	; 0x1f06 <GetFreqPrescaleRatio+0x17c>
    1e52:	08 c0       	rjmp	.+16     	; 0x1e64 <GetFreqPrescaleRatio+0xda>
    1e54:	86 30       	cpi	r24, 0x06	; 6
    1e56:	e9 f1       	breq	.+122    	; 0x1ed2 <GetFreqPrescaleRatio+0x148>
    1e58:	86 30       	cpi	r24, 0x06	; 6
    1e5a:	80 f1       	brcs	.+96     	; 0x1ebc <GetFreqPrescaleRatio+0x132>
    1e5c:	87 30       	cpi	r24, 0x07	; 7
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <GetFreqPrescaleRatio+0xd8>
    1e60:	52 c0       	rjmp	.+164    	; 0x1f06 <GetFreqPrescaleRatio+0x17c>
    1e62:	42 c0       	rjmp	.+132    	; 0x1ee8 <GetFreqPrescaleRatio+0x15e>
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 e8       	ldi	r26, 0x80	; 128
    1e6a:	bd e3       	ldi	r27, 0x3D	; 61
    1e6c:	fb 01       	movw	r30, r22
    1e6e:	80 83       	st	Z, r24
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	a2 83       	std	Z+2, r26	; 0x02
    1e74:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e76:	80 e0       	ldi	r24, 0x00	; 0
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1e78:	08 95       	ret
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e0       	ldi	r26, 0x00	; 0
    1e80:	bf e3       	ldi	r27, 0x3F	; 63
    1e82:	fb 01       	movw	r30, r22
    1e84:	80 83       	st	Z, r24
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	a2 83       	std	Z+2, r26	; 0x02
    1e8a:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1e8e:	08 95       	ret
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 e0       	ldi	r26, 0x00	; 0
    1e96:	b0 e4       	ldi	r27, 0x40	; 64
    1e98:	fb 01       	movw	r30, r22
    1e9a:	80 83       	st	Z, r24
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	a2 83       	std	Z+2, r26	; 0x02
    1ea0:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1ea4:	08 95       	ret
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 e8       	ldi	r26, 0x80	; 128
    1eac:	b0 e4       	ldi	r27, 0x40	; 64
    1eae:	fb 01       	movw	r30, r22
    1eb0:	80 83       	st	Z, r24
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	a2 83       	std	Z+2, r26	; 0x02
    1eb6:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1eba:	08 95       	ret
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e0       	ldi	r26, 0x00	; 0
    1ec2:	b1 e4       	ldi	r27, 0x41	; 65
    1ec4:	fb 01       	movw	r30, r22
    1ec6:	80 83       	st	Z, r24
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	a2 83       	std	Z+2, r26	; 0x02
    1ecc:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1ece:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1ed0:	08 95       	ret
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a0 e8       	ldi	r26, 0x80	; 128
    1ed8:	b1 e4       	ldi	r27, 0x41	; 65
    1eda:	fb 01       	movw	r30, r22
    1edc:	80 83       	st	Z, r24
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	a2 83       	std	Z+2, r26	; 0x02
    1ee2:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1ee6:	08 95       	ret
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e8       	ldi	r26, 0x80	; 128
    1eee:	b2 e4       	ldi	r27, 0x42	; 66
    1ef0:	fb 01       	movw	r30, r22
    1ef2:	80 83       	st	Z, r24
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	a2 83       	std	Z+2, r26	; 0x02
    1ef8:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1efa:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1efc:	08 95       	ret
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1efe:	8c ef       	ldi	r24, 0xFC	; 252
    1f00:	08 95       	ret
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	08 95       	ret
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1f06:	8c ef       	ldi	r24, 0xFC	; 252
      }
   }
   
   return ERROR_OK;
}
    1f08:	08 95       	ret

00001f0a <TIM_Init>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_Init(TIM_CH_t TIM_channel)
{
   switch(TIM_channel)
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	81 f0       	breq	.+32     	; 0x1f2e <TIM_Init+0x24>
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	18 f0       	brcs	.+6      	; 0x1f18 <TIM_Init+0xe>
    1f12:	82 30       	cpi	r24, 0x02	; 2
    1f14:	49 f5       	brne	.+82     	; 0x1f68 <TIM_Init+0x5e>
    1f16:	19 c0       	rjmp	.+50     	; 0x1f4a <TIM_Init+0x40>
   {
      case TIMER_0:
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
    1f18:	80 91 b6 00 	lds	r24, 0x00B6
    1f1c:	83 bf       	out	0x33, r24	; 51
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
    1f1e:	89 b7       	in	r24, 0x39	; 57
    1f20:	8c 7f       	andi	r24, 0xFC	; 252
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
    1f22:	90 91 b7 00 	lds	r25, 0x00B7
    1f26:	89 2b       	or	r24, r25
    1f28:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
         break;
    1f2c:	08 95       	ret
      case TIMER_1:
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
    1f2e:	80 91 b9 00 	lds	r24, 0x00B9
    1f32:	8e bd       	out	0x2e, r24	; 46
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
    1f34:	99 b7       	in	r25, 0x39	; 57
    1f36:	97 7e       	andi	r25, 0xE7	; 231
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
    1f38:	80 91 ba 00 	lds	r24, 0x00BA
    1f3c:	88 0f       	add	r24, r24
    1f3e:	88 0f       	add	r24, r24
    1f40:	88 0f       	add	r24, r24
    1f42:	89 2b       	or	r24, r25
    1f44:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1f46:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
         break;
    1f48:	08 95       	ret
      case TIMER_2:
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
    1f4a:	80 91 bc 00 	lds	r24, 0x00BC
    1f4e:	85 bd       	out	0x25, r24	; 37
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
    1f50:	99 b7       	in	r25, 0x39	; 57
    1f52:	9f 73       	andi	r25, 0x3F	; 63
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
    1f54:	80 91 bd 00 	lds	r24, 0x00BD
    1f58:	82 95       	swap	r24
    1f5a:	88 0f       	add	r24, r24
    1f5c:	88 0f       	add	r24, r24
    1f5e:	80 7c       	andi	r24, 0xC0	; 192
    1f60:	89 2b       	or	r24, r25
    1f62:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1f64:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
         break;
    1f66:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
    1f68:	8e ef       	ldi	r24, 0xFE	; 254
   }
   
   /* return success message. */
   return ERROR_OK;
}
    1f6a:	08 95       	ret

00001f6c <TIM_Start>:
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   volatile uint8_t * ptr_TimerData = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	79 f0       	breq	.+30     	; 0x1f8e <TIM_Start+0x22>
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	18 f0       	brcs	.+6      	; 0x1f7a <TIM_Start+0xe>
    1f74:	82 30       	cpi	r24, 0x02	; 2
    1f76:	09 f5       	brne	.+66     	; 0x1fba <TIM_Start+0x4e>
    1f78:	05 c0       	rjmp	.+10     	; 0x1f84 <TIM_Start+0x18>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
    1f7a:	a2 e5       	ldi	r26, 0x52	; 82
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
    1f7e:	e3 e5       	ldi	r30, 0x53	; 83
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	09 c0       	rjmp	.+18     	; 0x1f96 <TIM_Start+0x2a>
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
    1f84:	a4 e4       	ldi	r26, 0x44	; 68
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
    1f88:	e5 e4       	ldi	r30, 0x45	; 69
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
         ptr_TimerData = &TCNT2;
         break;
    1f8c:	04 c0       	rjmp	.+8      	; 0x1f96 <TIM_Start+0x2a>
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
    1f8e:	ac e4       	ldi	r26, 0x4C	; 76
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
    1f92:	ee e4       	ldi	r30, 0x4E	; 78
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   /* set timer ticks */
   *ptr_TimerData = PreloadVal;
    1f96:	6c 93       	st	X, r22
   
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
    1f98:	20 81       	ld	r18, Z
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	aa 0f       	add	r26, r26
    1fa0:	bb 1f       	adc	r27, r27
    1fa2:	8a 0f       	add	r24, r26
    1fa4:	9b 1f       	adc	r25, r27
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	aa 54       	subi	r26, 0x4A	; 74
    1faa:	bf 4f       	sbci	r27, 0xFF	; 255
    1fac:	12 96       	adiw	r26, 0x02	; 2
    1fae:	8c 91       	ld	r24, X
    1fb0:	12 97       	sbiw	r26, 0x02	; 2
    1fb2:	82 2b       	or	r24, r18
    1fb4:	80 83       	st	Z, r24
   
   /* return success message. */
   return ERROR_OK;
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	08 95       	ret
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1fba:	8e ef       	ldi	r24, 0xFE	; 254
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
   
   /* return success message. */
   return ERROR_OK;
}
    1fbc:	08 95       	ret

00001fbe <TIM_Stop>:
{
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	59 f0       	breq	.+22     	; 0x1fd8 <TIM_Stop+0x1a>
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	18 f0       	brcs	.+6      	; 0x1fcc <TIM_Stop+0xe>
    1fc6:	82 30       	cpi	r24, 0x02	; 2
    1fc8:	71 f4       	brne	.+28     	; 0x1fe6 <TIM_Stop+0x28>
    1fca:	03 c0       	rjmp	.+6      	; 0x1fd2 <TIM_Stop+0x14>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
    1fcc:	e3 e5       	ldi	r30, 0x53	; 83
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	05 c0       	rjmp	.+10     	; 0x1fdc <TIM_Stop+0x1e>
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
    1fd2:	e5 e4       	ldi	r30, 0x45	; 69
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
         break;
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <TIM_Stop+0x1e>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
    1fd8:	ee e4       	ldi	r30, 0x4E	; 78
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
    1fdc:	80 81       	ld	r24, Z
    1fde:	88 7f       	andi	r24, 0xF8	; 248
    1fe0:	80 83       	st	Z, r24
   
   /* return success message. */
   return ERROR_OK;
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	08 95       	ret
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1fe6:	8e ef       	ldi	r24, 0xFE	; 254
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
    1fe8:	08 95       	ret

00001fea <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
    1fea:	61 15       	cp	r22, r1
    1fec:	71 05       	cpc	r23, r1
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <TIM_GetStatus+0x8>
    1ff0:	64 c0       	rjmp	.+200    	; 0x20ba <TIM_GetStatus+0xd0>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	11 f1       	breq	.+68     	; 0x203a <TIM_GetStatus+0x50>
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	20 f0       	brcs	.+8      	; 0x2002 <TIM_GetStatus+0x18>
    1ffa:	82 30       	cpi	r24, 0x02	; 2
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <TIM_GetStatus+0x16>
    1ffe:	5f c0       	rjmp	.+190    	; 0x20be <TIM_GetStatus+0xd4>
    2000:	41 c0       	rjmp	.+130    	; 0x2084 <TIM_GetStatus+0x9a>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    2002:	80 91 b6 00 	lds	r24, 0x00B6
    2006:	88 23       	and	r24, r24
    2008:	51 f4       	brne	.+20     	; 0x201e <TIM_GetStatus+0x34>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
    200a:	08 b6       	in	r0, 0x38	; 56
    200c:	00 fe       	sbrs	r0, 0
    200e:	59 c0       	rjmp	.+178    	; 0x20c2 <TIM_GetStatus+0xd8>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    2010:	fb 01       	movw	r30, r22
    2012:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
    2014:	88 b7       	in	r24, 0x38	; 56
    2016:	81 60       	ori	r24, 0x01	; 1
    2018:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    201e:	88 30       	cpi	r24, 0x08	; 8
    2020:	09 f0       	breq	.+2      	; 0x2024 <TIM_GetStatus+0x3a>
    2022:	51 c0       	rjmp	.+162    	; 0x20c6 <TIM_GetStatus+0xdc>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
    2024:	08 b6       	in	r0, 0x38	; 56
    2026:	01 fe       	sbrs	r0, 1
    2028:	50 c0       	rjmp	.+160    	; 0x20ca <TIM_GetStatus+0xe0>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	fb 01       	movw	r30, r22
    202e:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
    2030:	88 b7       	in	r24, 0x38	; 56
    2032:	82 60       	ori	r24, 0x02	; 2
    2034:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    203a:	80 91 b9 00 	lds	r24, 0x00B9
    203e:	88 23       	and	r24, r24
    2040:	51 f4       	brne	.+20     	; 0x2056 <TIM_GetStatus+0x6c>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
    2042:	08 b6       	in	r0, 0x38	; 56
    2044:	02 fe       	sbrs	r0, 2
    2046:	43 c0       	rjmp	.+134    	; 0x20ce <TIM_GetStatus+0xe4>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    2048:	fb 01       	movw	r30, r22
    204a:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
    204c:	88 b7       	in	r24, 0x38	; 56
    204e:	84 60       	ori	r24, 0x04	; 4
    2050:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    2056:	88 30       	cpi	r24, 0x08	; 8
    2058:	e1 f5       	brne	.+120    	; 0x20d2 <TIM_GetStatus+0xe8>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
    205a:	88 b7       	in	r24, 0x38	; 56
    205c:	84 ff       	sbrs	r24, 4
    205e:	08 c0       	rjmp	.+16     	; 0x2070 <TIM_GetStatus+0x86>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	fb 01       	movw	r30, r22
    2064:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
    2066:	88 b7       	in	r24, 0x38	; 56
    2068:	80 61       	ori	r24, 0x10	; 16
    206a:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
    2070:	83 ff       	sbrs	r24, 3
    2072:	31 c0       	rjmp	.+98     	; 0x20d6 <TIM_GetStatus+0xec>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	fb 01       	movw	r30, r22
    2078:	80 83       	st	Z, r24
               TIFR |= TIMER_1B_COMPARE_FLAG;
    207a:	88 b7       	in	r24, 0x38	; 56
    207c:	88 60       	ori	r24, 0x08	; 8
    207e:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    2084:	80 91 bc 00 	lds	r24, 0x00BC
    2088:	88 23       	and	r24, r24
    208a:	51 f4       	brne	.+20     	; 0x20a0 <TIM_GetStatus+0xb6>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    208c:	08 b6       	in	r0, 0x38	; 56
    208e:	06 fe       	sbrs	r0, 6
    2090:	24 c0       	rjmp	.+72     	; 0x20da <TIM_GetStatus+0xf0>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    2092:	fb 01       	movw	r30, r22
    2094:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    2096:	88 b7       	in	r24, 0x38	; 56
    2098:	80 64       	ori	r24, 0x40	; 64
    209a:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    20a0:	88 30       	cpi	r24, 0x08	; 8
    20a2:	e9 f4       	brne	.+58     	; 0x20de <TIM_GetStatus+0xf4>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    20a4:	08 b6       	in	r0, 0x38	; 56
    20a6:	07 fe       	sbrs	r0, 7
    20a8:	1c c0       	rjmp	.+56     	; 0x20e2 <TIM_GetStatus+0xf8>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	fb 01       	movw	r30, r22
    20ae:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
    20b0:	88 b7       	in	r24, 0x38	; 56
    20b2:	80 68       	ori	r24, 0x80	; 128
    20b4:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
    20ba:	8f ef       	ldi	r24, 0xFF	; 255
    20bc:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    20be:	8e ef       	ldi	r24, 0xFE	; 254
    20c0:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    20c2:	8d ef       	ldi	r24, 0xFD	; 253
    20c4:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    20ca:	8d ef       	ldi	r24, 0xFD	; 253
    20cc:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    20ce:	8d ef       	ldi	r24, 0xFD	; 253
    20d0:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    20d6:	8d ef       	ldi	r24, 0xFD	; 253
    20d8:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    20da:	8d ef       	ldi	r24, 0xFD	; 253
    20dc:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    20e2:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
    20e4:	08 95       	ret

000020e6 <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    20e6:	8f 92       	push	r8
    20e8:	9f 92       	push	r9
    20ea:	af 92       	push	r10
    20ec:	bf 92       	push	r11
    20ee:	cf 92       	push	r12
    20f0:	df 92       	push	r13
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <TIM_DelayUs+0x18>
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <TIM_DelayUs+0x1a>
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	18 2f       	mov	r17, r24
    2106:	6a 01       	movw	r12, r20
    2108:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    210a:	83 30       	cpi	r24, 0x03	; 3
    210c:	08 f0       	brcs	.+2      	; 0x2110 <TIM_DelayUs+0x2a>
    210e:	5c c0       	rjmp	.+184    	; 0x21c8 <TIM_DelayUs+0xe2>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    2110:	21 15       	cp	r18, r1
    2112:	31 05       	cpc	r19, r1
    2114:	09 f4       	brne	.+2      	; 0x2118 <TIM_DelayUs+0x32>
    2116:	5a c0       	rjmp	.+180    	; 0x21cc <TIM_DelayUs+0xe6>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    2118:	30 93 10 01 	sts	0x0110, r19
    211c:	20 93 0f 01 	sts	0x010F, r18
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    2120:	80 91 11 01 	lds	r24, 0x0111
    2124:	88 23       	and	r24, r24
    2126:	09 f0       	breq	.+2      	; 0x212a <TIM_DelayUs+0x44>
    2128:	53 c0       	rjmp	.+166    	; 0x21d0 <TIM_DelayUs+0xea>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    212a:	81 2f       	mov	r24, r17
    212c:	be 01       	movw	r22, r28
    212e:	6f 5f       	subi	r22, 0xFF	; 255
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    2136:	8c 3f       	cpi	r24, 0xFC	; 252
    2138:	09 f4       	brne	.+2      	; 0x213c <TIM_DelayUs+0x56>
    213a:	4c c0       	rjmp	.+152    	; 0x21d4 <TIM_DelayUs+0xee>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    213c:	89 80       	ldd	r8, Y+1	; 0x01
    213e:	9a 80       	ldd	r9, Y+2	; 0x02
    2140:	ab 80       	ldd	r10, Y+3	; 0x03
    2142:	bc 80       	ldd	r11, Y+4	; 0x04
    2144:	c5 01       	movw	r24, r10
    2146:	b4 01       	movw	r22, r8
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	a9 01       	movw	r20, r18
    214e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__cmpsf2>
    2152:	88 23       	and	r24, r24
    2154:	a1 f0       	breq	.+40     	; 0x217e <TIM_DelayUs+0x98>
      {
         TIM_Delay /= f32_FreqRatio;
    2156:	c7 01       	movw	r24, r14
    2158:	b6 01       	movw	r22, r12
    215a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__floatunsisf>
    215e:	a5 01       	movw	r20, r10
    2160:	94 01       	movw	r18, r8
    2162:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__divsf3>
    2166:	46 2f       	mov	r20, r22
    2168:	57 2f       	mov	r21, r23
    216a:	68 2f       	mov	r22, r24
    216c:	79 2f       	mov	r23, r25
    216e:	cb 01       	movw	r24, r22
    2170:	ba 01       	movw	r22, r20
    2172:	0e 94 c6 12 	call	0x258c	; 0x258c <__fixunssfsi>
    2176:	c6 2e       	mov	r12, r22
    2178:	d7 2e       	mov	r13, r23
    217a:	e8 2e       	mov	r14, r24
    217c:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    217e:	bb 27       	eor	r27, r27
    2180:	af 2d       	mov	r26, r15
    2182:	9e 2d       	mov	r25, r14
    2184:	8d 2d       	mov	r24, r13
    2186:	80 93 12 01 	sts	0x0112, r24
    218a:	90 93 13 01 	sts	0x0113, r25
    218e:	a0 93 14 01 	sts	0x0114, r26
    2192:	b0 93 15 01 	sts	0x0115, r27
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    2196:	6c 2d       	mov	r22, r12
    2198:	c0 92 16 01 	sts	0x0116, r12
      
      if(gu32_Overflows == 0)
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	a1 05       	cpc	r26, r1
    21a0:	b1 05       	cpc	r27, r1
    21a2:	41 f4       	brne	.+16     	; 0x21b4 <TIM_DelayUs+0xce>
      {
         gu8_OverflowsComplete = HIGH;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	80 93 17 01 	sts	0x0117, r24
         TIM_Start(TIM_channel, gu8_Remindar);
    21aa:	81 2f       	mov	r24, r17
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <TIM_Start>
    21b2:	05 c0       	rjmp	.+10     	; 0x21be <TIM_DelayUs+0xd8>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    21b4:	81 2f       	mov	r24, r17
    21b6:	6f ef       	ldi	r22, 0xFF	; 255
    21b8:	70 e0       	ldi	r23, 0x00	; 0
    21ba:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	80 93 11 01 	sts	0x0111, r24
      return TIMER_E_PENDING;
    21c4:	8d ef       	ldi	r24, 0xFD	; 253
    21c6:	07 c0       	rjmp	.+14     	; 0x21d6 <TIM_DelayUs+0xf0>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    21c8:	8e ef       	ldi	r24, 0xFE	; 254
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <TIM_DelayUs+0xf0>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <TIM_DelayUs+0xf0>
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <TIM_DelayUs+0xf0>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    21d4:	8c ef       	ldi	r24, 0xFC	; 252
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
}
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	ff 90       	pop	r15
    21e6:	ef 90       	pop	r14
    21e8:	df 90       	pop	r13
    21ea:	cf 90       	pop	r12
    21ec:	bf 90       	pop	r11
    21ee:	af 90       	pop	r10
    21f0:	9f 90       	pop	r9
    21f2:	8f 90       	pop	r8
    21f4:	08 95       	ret

000021f6 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    21f6:	8f 92       	push	r8
    21f8:	9f 92       	push	r9
    21fa:	af 92       	push	r10
    21fc:	bf 92       	push	r11
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	00 d0       	rcall	.+0      	; 0x220e <TIM_DelayMs+0x18>
    220e:	00 d0       	rcall	.+0      	; 0x2210 <TIM_DelayMs+0x1a>
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	18 2f       	mov	r17, r24
    2216:	04 2f       	mov	r16, r20
    2218:	f5 2e       	mov	r15, r21
    221a:	e6 2e       	mov	r14, r22
    221c:	d7 2e       	mov	r13, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    221e:	83 30       	cpi	r24, 0x03	; 3
    2220:	08 f0       	brcs	.+2      	; 0x2224 <TIM_DelayMs+0x2e>
    2222:	6d c0       	rjmp	.+218    	; 0x22fe <TIM_DelayMs+0x108>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    2224:	21 15       	cp	r18, r1
    2226:	31 05       	cpc	r19, r1
    2228:	09 f4       	brne	.+2      	; 0x222c <TIM_DelayMs+0x36>
    222a:	6b c0       	rjmp	.+214    	; 0x2302 <TIM_DelayMs+0x10c>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    222c:	30 93 10 01 	sts	0x0110, r19
    2230:	20 93 0f 01 	sts	0x010F, r18
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    2234:	80 91 11 01 	lds	r24, 0x0111
    2238:	88 23       	and	r24, r24
    223a:	09 f0       	breq	.+2      	; 0x223e <TIM_DelayMs+0x48>
    223c:	64 c0       	rjmp	.+200    	; 0x2306 <TIM_DelayMs+0x110>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    223e:	81 2f       	mov	r24, r17
    2240:	be 01       	movw	r22, r28
    2242:	6f 5f       	subi	r22, 0xFF	; 255
    2244:	7f 4f       	sbci	r23, 0xFF	; 255
    2246:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    224a:	8c 3f       	cpi	r24, 0xFC	; 252
    224c:	09 f4       	brne	.+2      	; 0x2250 <TIM_DelayMs+0x5a>
    224e:	5d c0       	rjmp	.+186    	; 0x230a <TIM_DelayMs+0x114>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    2250:	89 80       	ldd	r8, Y+1	; 0x01
    2252:	9a 80       	ldd	r9, Y+2	; 0x02
    2254:	ab 80       	ldd	r10, Y+3	; 0x03
    2256:	bc 80       	ldd	r11, Y+4	; 0x04
    2258:	c5 01       	movw	r24, r10
    225a:	b4 01       	movw	r22, r8
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	a9 01       	movw	r20, r18
    2262:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__cmpsf2>
    2266:	88 23       	and	r24, r24
    2268:	b1 f0       	breq	.+44     	; 0x2296 <TIM_DelayMs+0xa0>
      {
         TIM_Delay /= f32_FreqRatio;
    226a:	60 2f       	mov	r22, r16
    226c:	7f 2d       	mov	r23, r15
    226e:	8e 2d       	mov	r24, r14
    2270:	9d 2d       	mov	r25, r13
    2272:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__floatunsisf>
    2276:	a5 01       	movw	r20, r10
    2278:	94 01       	movw	r18, r8
    227a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__divsf3>
    227e:	46 2f       	mov	r20, r22
    2280:	57 2f       	mov	r21, r23
    2282:	68 2f       	mov	r22, r24
    2284:	79 2f       	mov	r23, r25
    2286:	cb 01       	movw	r24, r22
    2288:	ba 01       	movw	r22, r20
    228a:	0e 94 c6 12 	call	0x258c	; 0x258c <__fixunssfsi>
    228e:	06 2f       	mov	r16, r22
    2290:	f7 2e       	mov	r15, r23
    2292:	e8 2e       	mov	r14, r24
    2294:	d9 2e       	mov	r13, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    2296:	60 2f       	mov	r22, r16
    2298:	7f 2d       	mov	r23, r15
    229a:	8e 2d       	mov	r24, r14
    229c:	9d 2d       	mov	r25, r13
    229e:	28 ee       	ldi	r18, 0xE8	; 232
    22a0:	33 e0       	ldi	r19, 0x03	; 3
    22a2:	40 e0       	ldi	r20, 0x00	; 0
    22a4:	50 e0       	ldi	r21, 0x00	; 0
    22a6:	0e 94 49 14 	call	0x2892	; 0x2892 <__mulsi3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	89 2f       	mov	r24, r25
    22b0:	9a 2f       	mov	r25, r26
    22b2:	ab 2f       	mov	r26, r27
    22b4:	bb 27       	eor	r27, r27
    22b6:	80 93 12 01 	sts	0x0112, r24
    22ba:	90 93 13 01 	sts	0x0113, r25
    22be:	a0 93 14 01 	sts	0x0114, r26
    22c2:	b0 93 15 01 	sts	0x0115, r27
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    22c6:	68 ee       	ldi	r22, 0xE8	; 232
    22c8:	06 9f       	mul	r16, r22
    22ca:	60 2d       	mov	r22, r0
    22cc:	11 24       	eor	r1, r1
    22ce:	60 93 16 01 	sts	0x0116, r22
      
      if(gu32_Overflows == 0)
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	a1 05       	cpc	r26, r1
    22d6:	b1 05       	cpc	r27, r1
    22d8:	41 f4       	brne	.+16     	; 0x22ea <TIM_DelayMs+0xf4>
      {
         gu8_OverflowsComplete = HIGH;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	80 93 17 01 	sts	0x0117, r24
         TIM_Start(TIM_channel, gu8_Remindar);
    22e0:	81 2f       	mov	r24, r17
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <TIM_Start>
    22e8:	05 c0       	rjmp	.+10     	; 0x22f4 <TIM_DelayMs+0xfe>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    22ea:	81 2f       	mov	r24, r17
    22ec:	6f ef       	ldi	r22, 0xFF	; 255
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	80 93 11 01 	sts	0x0111, r24
      return TIMER_E_PENDING;
    22fa:	8d ef       	ldi	r24, 0xFD	; 253
    22fc:	07 c0       	rjmp	.+14     	; 0x230c <TIM_DelayMs+0x116>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    22fe:	8e ef       	ldi	r24, 0xFE	; 254
    2300:	05 c0       	rjmp	.+10     	; 0x230c <TIM_DelayMs+0x116>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	03 c0       	rjmp	.+6      	; 0x230c <TIM_DelayMs+0x116>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	01 c0       	rjmp	.+2      	; 0x230c <TIM_DelayMs+0x116>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    230a:	8c ef       	ldi	r24, 0xFC	; 252
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
}
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	1f 91       	pop	r17
    231a:	0f 91       	pop	r16
    231c:	ff 90       	pop	r15
    231e:	ef 90       	pop	r14
    2320:	df 90       	pop	r13
    2322:	bf 90       	pop	r11
    2324:	af 90       	pop	r10
    2326:	9f 90       	pop	r9
    2328:	8f 90       	pop	r8
    232a:	08 95       	ret

0000232c <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    232c:	1f 93       	push	r17
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	0f 92       	push	r0
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	18 2f       	mov	r17, r24
   if(DelayReady == gEnu_State)
    233a:	20 91 11 01 	lds	r18, 0x0111
    233e:	22 23       	and	r18, r18
    2340:	09 f4       	brne	.+2      	; 0x2344 <TIM_DelayStatus+0x18>
    2342:	49 c0       	rjmp	.+146    	; 0x23d6 <TIM_DelayStatus+0xaa>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
    2344:	80 91 0f 01 	lds	r24, 0x010F
    2348:	90 91 10 01 	lds	r25, 0x0110
    234c:	68 17       	cp	r22, r24
    234e:	79 07       	cpc	r23, r25
    2350:	09 f0       	breq	.+2      	; 0x2354 <TIM_DelayStatus+0x28>
    2352:	43 c0       	rjmp	.+134    	; 0x23da <TIM_DelayStatus+0xae>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    2354:	21 30       	cpi	r18, 0x01	; 1
    2356:	09 f0       	breq	.+2      	; 0x235a <TIM_DelayStatus+0x2e>
    2358:	42 c0       	rjmp	.+132    	; 0x23de <TIM_DelayStatus+0xb2>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    235a:	81 2f       	mov	r24, r17
    235c:	be 01       	movw	r22, r28
    235e:	6f 5f       	subi	r22, 0xFF	; 255
    2360:	7f 4f       	sbci	r23, 0xFF	; 255
    2362:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    2366:	88 23       	and	r24, r24
    2368:	a9 f5       	brne	.+106    	; 0x23d4 <TIM_DelayStatus+0xa8>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    236a:	80 91 17 01 	lds	r24, 0x0117
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	41 f4       	brne	.+16     	; 0x2382 <TIM_DelayStatus+0x56>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    2372:	10 92 11 01 	sts	0x0111, r1
            gu8_OverflowsComplete = LOW;
    2376:	10 92 17 01 	sts	0x0117, r1
            gu8_Remindar = 0;
    237a:	10 92 16 01 	sts	0x0116, r1
            /* return success message. */
            return ERROR_OK;
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	2f c0       	rjmp	.+94     	; 0x23e0 <TIM_DelayStatus+0xb4>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    2382:	80 91 12 01 	lds	r24, 0x0112
    2386:	90 91 13 01 	lds	r25, 0x0113
    238a:	a0 91 14 01 	lds	r26, 0x0114
    238e:	b0 91 15 01 	lds	r27, 0x0115
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	a1 09       	sbc	r26, r1
    2396:	b1 09       	sbc	r27, r1
    2398:	80 93 12 01 	sts	0x0112, r24
    239c:	90 93 13 01 	sts	0x0113, r25
    23a0:	a0 93 14 01 	sts	0x0114, r26
    23a4:	b0 93 15 01 	sts	0x0115, r27
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	a1 05       	cpc	r26, r1
    23ac:	b1 05       	cpc	r27, r1
    23ae:	59 f4       	brne	.+22     	; 0x23c6 <TIM_DelayStatus+0x9a>
         {
            gu8_OverflowsComplete = HIGH;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	80 93 17 01 	sts	0x0117, r24
            TIM_Start(TIM_channel, gu8_Remindar);
    23b6:	60 91 16 01 	lds	r22, 0x0116
    23ba:	81 2f       	mov	r24, r17
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
    23c2:	8d ef       	ldi	r24, 0xFD	; 253
    23c4:	0d c0       	rjmp	.+26     	; 0x23e0 <TIM_DelayStatus+0xb4>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    23c6:	81 2f       	mov	r24, r17
    23c8:	6f ef       	ldi	r22, 0xFF	; 255
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    23d0:	8d ef       	ldi	r24, 0xFD	; 253
    23d2:	06 c0       	rjmp	.+12     	; 0x23e0 <TIM_DelayStatus+0xb4>
    23d4:	05 c0       	rjmp	.+10     	; 0x23e0 <TIM_DelayStatus+0xb4>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
    23d6:	8b ef       	ldi	r24, 0xFB	; 251
    23d8:	03 c0       	rjmp	.+6      	; 0x23e0 <TIM_DelayStatus+0xb4>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	01 c0       	rjmp	.+2      	; 0x23e0 <TIM_DelayStatus+0xb4>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
    23de:	81 e0       	ldi	r24, 0x01	; 1
   }      
    23e0:	0f 90       	pop	r0
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	1f 91       	pop	r17
    23e8:	08 95       	ret

000023ea <__subsf3>:
    23ea:	50 58       	subi	r21, 0x80	; 128

000023ec <__addsf3>:
    23ec:	bb 27       	eor	r27, r27
    23ee:	aa 27       	eor	r26, r26
    23f0:	0e d0       	rcall	.+28     	; 0x240e <__addsf3x>
    23f2:	ae c1       	rjmp	.+860    	; 0x2750 <__fp_round>
    23f4:	9f d1       	rcall	.+830    	; 0x2734 <__fp_pscA>
    23f6:	30 f0       	brcs	.+12     	; 0x2404 <__addsf3+0x18>
    23f8:	a4 d1       	rcall	.+840    	; 0x2742 <__fp_pscB>
    23fa:	20 f0       	brcs	.+8      	; 0x2404 <__addsf3+0x18>
    23fc:	31 f4       	brne	.+12     	; 0x240a <__addsf3+0x1e>
    23fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2400:	11 f4       	brne	.+4      	; 0x2406 <__addsf3+0x1a>
    2402:	1e f4       	brtc	.+6      	; 0x240a <__addsf3+0x1e>
    2404:	94 c1       	rjmp	.+808    	; 0x272e <__fp_nan>
    2406:	0e f4       	brtc	.+2      	; 0x240a <__addsf3+0x1e>
    2408:	e0 95       	com	r30
    240a:	e7 fb       	bst	r30, 7
    240c:	8a c1       	rjmp	.+788    	; 0x2722 <__fp_inf>

0000240e <__addsf3x>:
    240e:	e9 2f       	mov	r30, r25
    2410:	b0 d1       	rcall	.+864    	; 0x2772 <__fp_split3>
    2412:	80 f3       	brcs	.-32     	; 0x23f4 <__addsf3+0x8>
    2414:	ba 17       	cp	r27, r26
    2416:	62 07       	cpc	r22, r18
    2418:	73 07       	cpc	r23, r19
    241a:	84 07       	cpc	r24, r20
    241c:	95 07       	cpc	r25, r21
    241e:	18 f0       	brcs	.+6      	; 0x2426 <__addsf3x+0x18>
    2420:	71 f4       	brne	.+28     	; 0x243e <__addsf3x+0x30>
    2422:	9e f5       	brtc	.+102    	; 0x248a <__addsf3x+0x7c>
    2424:	c8 c1       	rjmp	.+912    	; 0x27b6 <__fp_zero>
    2426:	0e f4       	brtc	.+2      	; 0x242a <__addsf3x+0x1c>
    2428:	e0 95       	com	r30
    242a:	0b 2e       	mov	r0, r27
    242c:	ba 2f       	mov	r27, r26
    242e:	a0 2d       	mov	r26, r0
    2430:	0b 01       	movw	r0, r22
    2432:	b9 01       	movw	r22, r18
    2434:	90 01       	movw	r18, r0
    2436:	0c 01       	movw	r0, r24
    2438:	ca 01       	movw	r24, r20
    243a:	a0 01       	movw	r20, r0
    243c:	11 24       	eor	r1, r1
    243e:	ff 27       	eor	r31, r31
    2440:	59 1b       	sub	r21, r25
    2442:	99 f0       	breq	.+38     	; 0x246a <__addsf3x+0x5c>
    2444:	59 3f       	cpi	r21, 0xF9	; 249
    2446:	50 f4       	brcc	.+20     	; 0x245c <__addsf3x+0x4e>
    2448:	50 3e       	cpi	r21, 0xE0	; 224
    244a:	68 f1       	brcs	.+90     	; 0x24a6 <__addsf3x+0x98>
    244c:	1a 16       	cp	r1, r26
    244e:	f0 40       	sbci	r31, 0x00	; 0
    2450:	a2 2f       	mov	r26, r18
    2452:	23 2f       	mov	r18, r19
    2454:	34 2f       	mov	r19, r20
    2456:	44 27       	eor	r20, r20
    2458:	58 5f       	subi	r21, 0xF8	; 248
    245a:	f3 cf       	rjmp	.-26     	; 0x2442 <__addsf3x+0x34>
    245c:	46 95       	lsr	r20
    245e:	37 95       	ror	r19
    2460:	27 95       	ror	r18
    2462:	a7 95       	ror	r26
    2464:	f0 40       	sbci	r31, 0x00	; 0
    2466:	53 95       	inc	r21
    2468:	c9 f7       	brne	.-14     	; 0x245c <__addsf3x+0x4e>
    246a:	7e f4       	brtc	.+30     	; 0x248a <__addsf3x+0x7c>
    246c:	1f 16       	cp	r1, r31
    246e:	ba 0b       	sbc	r27, r26
    2470:	62 0b       	sbc	r22, r18
    2472:	73 0b       	sbc	r23, r19
    2474:	84 0b       	sbc	r24, r20
    2476:	ba f0       	brmi	.+46     	; 0x24a6 <__addsf3x+0x98>
    2478:	91 50       	subi	r25, 0x01	; 1
    247a:	a1 f0       	breq	.+40     	; 0x24a4 <__addsf3x+0x96>
    247c:	ff 0f       	add	r31, r31
    247e:	bb 1f       	adc	r27, r27
    2480:	66 1f       	adc	r22, r22
    2482:	77 1f       	adc	r23, r23
    2484:	88 1f       	adc	r24, r24
    2486:	c2 f7       	brpl	.-16     	; 0x2478 <__addsf3x+0x6a>
    2488:	0e c0       	rjmp	.+28     	; 0x24a6 <__addsf3x+0x98>
    248a:	ba 0f       	add	r27, r26
    248c:	62 1f       	adc	r22, r18
    248e:	73 1f       	adc	r23, r19
    2490:	84 1f       	adc	r24, r20
    2492:	48 f4       	brcc	.+18     	; 0x24a6 <__addsf3x+0x98>
    2494:	87 95       	ror	r24
    2496:	77 95       	ror	r23
    2498:	67 95       	ror	r22
    249a:	b7 95       	ror	r27
    249c:	f7 95       	ror	r31
    249e:	9e 3f       	cpi	r25, 0xFE	; 254
    24a0:	08 f0       	brcs	.+2      	; 0x24a4 <__addsf3x+0x96>
    24a2:	b3 cf       	rjmp	.-154    	; 0x240a <__addsf3+0x1e>
    24a4:	93 95       	inc	r25
    24a6:	88 0f       	add	r24, r24
    24a8:	08 f0       	brcs	.+2      	; 0x24ac <__addsf3x+0x9e>
    24aa:	99 27       	eor	r25, r25
    24ac:	ee 0f       	add	r30, r30
    24ae:	97 95       	ror	r25
    24b0:	87 95       	ror	r24
    24b2:	08 95       	ret

000024b4 <__cmpsf2>:
    24b4:	12 d1       	rcall	.+548    	; 0x26da <__fp_cmp>
    24b6:	08 f4       	brcc	.+2      	; 0x24ba <__cmpsf2+0x6>
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	08 95       	ret

000024bc <__divsf3>:
    24bc:	0c d0       	rcall	.+24     	; 0x24d6 <__divsf3x>
    24be:	48 c1       	rjmp	.+656    	; 0x2750 <__fp_round>
    24c0:	40 d1       	rcall	.+640    	; 0x2742 <__fp_pscB>
    24c2:	40 f0       	brcs	.+16     	; 0x24d4 <__divsf3+0x18>
    24c4:	37 d1       	rcall	.+622    	; 0x2734 <__fp_pscA>
    24c6:	30 f0       	brcs	.+12     	; 0x24d4 <__divsf3+0x18>
    24c8:	21 f4       	brne	.+8      	; 0x24d2 <__divsf3+0x16>
    24ca:	5f 3f       	cpi	r21, 0xFF	; 255
    24cc:	19 f0       	breq	.+6      	; 0x24d4 <__divsf3+0x18>
    24ce:	29 c1       	rjmp	.+594    	; 0x2722 <__fp_inf>
    24d0:	51 11       	cpse	r21, r1
    24d2:	72 c1       	rjmp	.+740    	; 0x27b8 <__fp_szero>
    24d4:	2c c1       	rjmp	.+600    	; 0x272e <__fp_nan>

000024d6 <__divsf3x>:
    24d6:	4d d1       	rcall	.+666    	; 0x2772 <__fp_split3>
    24d8:	98 f3       	brcs	.-26     	; 0x24c0 <__divsf3+0x4>

000024da <__divsf3_pse>:
    24da:	99 23       	and	r25, r25
    24dc:	c9 f3       	breq	.-14     	; 0x24d0 <__divsf3+0x14>
    24de:	55 23       	and	r21, r21
    24e0:	b1 f3       	breq	.-20     	; 0x24ce <__divsf3+0x12>
    24e2:	95 1b       	sub	r25, r21
    24e4:	55 0b       	sbc	r21, r21
    24e6:	bb 27       	eor	r27, r27
    24e8:	aa 27       	eor	r26, r26
    24ea:	62 17       	cp	r22, r18
    24ec:	73 07       	cpc	r23, r19
    24ee:	84 07       	cpc	r24, r20
    24f0:	38 f0       	brcs	.+14     	; 0x2500 <__divsf3_pse+0x26>
    24f2:	9f 5f       	subi	r25, 0xFF	; 255
    24f4:	5f 4f       	sbci	r21, 0xFF	; 255
    24f6:	22 0f       	add	r18, r18
    24f8:	33 1f       	adc	r19, r19
    24fa:	44 1f       	adc	r20, r20
    24fc:	aa 1f       	adc	r26, r26
    24fe:	a9 f3       	breq	.-22     	; 0x24ea <__divsf3_pse+0x10>
    2500:	33 d0       	rcall	.+102    	; 0x2568 <__divsf3_pse+0x8e>
    2502:	0e 2e       	mov	r0, r30
    2504:	3a f0       	brmi	.+14     	; 0x2514 <__divsf3_pse+0x3a>
    2506:	e0 e8       	ldi	r30, 0x80	; 128
    2508:	30 d0       	rcall	.+96     	; 0x256a <__divsf3_pse+0x90>
    250a:	91 50       	subi	r25, 0x01	; 1
    250c:	50 40       	sbci	r21, 0x00	; 0
    250e:	e6 95       	lsr	r30
    2510:	00 1c       	adc	r0, r0
    2512:	ca f7       	brpl	.-14     	; 0x2506 <__divsf3_pse+0x2c>
    2514:	29 d0       	rcall	.+82     	; 0x2568 <__divsf3_pse+0x8e>
    2516:	fe 2f       	mov	r31, r30
    2518:	27 d0       	rcall	.+78     	; 0x2568 <__divsf3_pse+0x8e>
    251a:	66 0f       	add	r22, r22
    251c:	77 1f       	adc	r23, r23
    251e:	88 1f       	adc	r24, r24
    2520:	bb 1f       	adc	r27, r27
    2522:	26 17       	cp	r18, r22
    2524:	37 07       	cpc	r19, r23
    2526:	48 07       	cpc	r20, r24
    2528:	ab 07       	cpc	r26, r27
    252a:	b0 e8       	ldi	r27, 0x80	; 128
    252c:	09 f0       	breq	.+2      	; 0x2530 <__divsf3_pse+0x56>
    252e:	bb 0b       	sbc	r27, r27
    2530:	80 2d       	mov	r24, r0
    2532:	bf 01       	movw	r22, r30
    2534:	ff 27       	eor	r31, r31
    2536:	93 58       	subi	r25, 0x83	; 131
    2538:	5f 4f       	sbci	r21, 0xFF	; 255
    253a:	2a f0       	brmi	.+10     	; 0x2546 <__divsf3_pse+0x6c>
    253c:	9e 3f       	cpi	r25, 0xFE	; 254
    253e:	51 05       	cpc	r21, r1
    2540:	68 f0       	brcs	.+26     	; 0x255c <__divsf3_pse+0x82>
    2542:	ef c0       	rjmp	.+478    	; 0x2722 <__fp_inf>
    2544:	39 c1       	rjmp	.+626    	; 0x27b8 <__fp_szero>
    2546:	5f 3f       	cpi	r21, 0xFF	; 255
    2548:	ec f3       	brlt	.-6      	; 0x2544 <__divsf3_pse+0x6a>
    254a:	98 3e       	cpi	r25, 0xE8	; 232
    254c:	dc f3       	brlt	.-10     	; 0x2544 <__divsf3_pse+0x6a>
    254e:	86 95       	lsr	r24
    2550:	77 95       	ror	r23
    2552:	67 95       	ror	r22
    2554:	b7 95       	ror	r27
    2556:	f7 95       	ror	r31
    2558:	9f 5f       	subi	r25, 0xFF	; 255
    255a:	c9 f7       	brne	.-14     	; 0x254e <__divsf3_pse+0x74>
    255c:	88 0f       	add	r24, r24
    255e:	91 1d       	adc	r25, r1
    2560:	96 95       	lsr	r25
    2562:	87 95       	ror	r24
    2564:	97 f9       	bld	r25, 7
    2566:	08 95       	ret
    2568:	e1 e0       	ldi	r30, 0x01	; 1
    256a:	66 0f       	add	r22, r22
    256c:	77 1f       	adc	r23, r23
    256e:	88 1f       	adc	r24, r24
    2570:	bb 1f       	adc	r27, r27
    2572:	62 17       	cp	r22, r18
    2574:	73 07       	cpc	r23, r19
    2576:	84 07       	cpc	r24, r20
    2578:	ba 07       	cpc	r27, r26
    257a:	20 f0       	brcs	.+8      	; 0x2584 <__divsf3_pse+0xaa>
    257c:	62 1b       	sub	r22, r18
    257e:	73 0b       	sbc	r23, r19
    2580:	84 0b       	sbc	r24, r20
    2582:	ba 0b       	sbc	r27, r26
    2584:	ee 1f       	adc	r30, r30
    2586:	88 f7       	brcc	.-30     	; 0x256a <__divsf3_pse+0x90>
    2588:	e0 95       	com	r30
    258a:	08 95       	ret

0000258c <__fixunssfsi>:
    258c:	fa d0       	rcall	.+500    	; 0x2782 <__fp_splitA>
    258e:	88 f0       	brcs	.+34     	; 0x25b2 <__fixunssfsi+0x26>
    2590:	9f 57       	subi	r25, 0x7F	; 127
    2592:	90 f0       	brcs	.+36     	; 0x25b8 <__fixunssfsi+0x2c>
    2594:	b9 2f       	mov	r27, r25
    2596:	99 27       	eor	r25, r25
    2598:	b7 51       	subi	r27, 0x17	; 23
    259a:	a0 f0       	brcs	.+40     	; 0x25c4 <__fixunssfsi+0x38>
    259c:	d1 f0       	breq	.+52     	; 0x25d2 <__fixunssfsi+0x46>
    259e:	66 0f       	add	r22, r22
    25a0:	77 1f       	adc	r23, r23
    25a2:	88 1f       	adc	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	1a f0       	brmi	.+6      	; 0x25ae <__fixunssfsi+0x22>
    25a8:	ba 95       	dec	r27
    25aa:	c9 f7       	brne	.-14     	; 0x259e <__fixunssfsi+0x12>
    25ac:	12 c0       	rjmp	.+36     	; 0x25d2 <__fixunssfsi+0x46>
    25ae:	b1 30       	cpi	r27, 0x01	; 1
    25b0:	81 f0       	breq	.+32     	; 0x25d2 <__fixunssfsi+0x46>
    25b2:	01 d1       	rcall	.+514    	; 0x27b6 <__fp_zero>
    25b4:	b1 e0       	ldi	r27, 0x01	; 1
    25b6:	08 95       	ret
    25b8:	fe c0       	rjmp	.+508    	; 0x27b6 <__fp_zero>
    25ba:	67 2f       	mov	r22, r23
    25bc:	78 2f       	mov	r23, r24
    25be:	88 27       	eor	r24, r24
    25c0:	b8 5f       	subi	r27, 0xF8	; 248
    25c2:	39 f0       	breq	.+14     	; 0x25d2 <__fixunssfsi+0x46>
    25c4:	b9 3f       	cpi	r27, 0xF9	; 249
    25c6:	cc f3       	brlt	.-14     	; 0x25ba <__fixunssfsi+0x2e>
    25c8:	86 95       	lsr	r24
    25ca:	77 95       	ror	r23
    25cc:	67 95       	ror	r22
    25ce:	b3 95       	inc	r27
    25d0:	d9 f7       	brne	.-10     	; 0x25c8 <__fixunssfsi+0x3c>
    25d2:	3e f4       	brtc	.+14     	; 0x25e2 <__fixunssfsi+0x56>
    25d4:	90 95       	com	r25
    25d6:	80 95       	com	r24
    25d8:	70 95       	com	r23
    25da:	61 95       	neg	r22
    25dc:	7f 4f       	sbci	r23, 0xFF	; 255
    25de:	8f 4f       	sbci	r24, 0xFF	; 255
    25e0:	9f 4f       	sbci	r25, 0xFF	; 255
    25e2:	08 95       	ret

000025e4 <__floatunsisf>:
    25e4:	e8 94       	clt
    25e6:	09 c0       	rjmp	.+18     	; 0x25fa <__floatsisf+0x12>

000025e8 <__floatsisf>:
    25e8:	97 fb       	bst	r25, 7
    25ea:	3e f4       	brtc	.+14     	; 0x25fa <__floatsisf+0x12>
    25ec:	90 95       	com	r25
    25ee:	80 95       	com	r24
    25f0:	70 95       	com	r23
    25f2:	61 95       	neg	r22
    25f4:	7f 4f       	sbci	r23, 0xFF	; 255
    25f6:	8f 4f       	sbci	r24, 0xFF	; 255
    25f8:	9f 4f       	sbci	r25, 0xFF	; 255
    25fa:	99 23       	and	r25, r25
    25fc:	a9 f0       	breq	.+42     	; 0x2628 <__floatsisf+0x40>
    25fe:	f9 2f       	mov	r31, r25
    2600:	96 e9       	ldi	r25, 0x96	; 150
    2602:	bb 27       	eor	r27, r27
    2604:	93 95       	inc	r25
    2606:	f6 95       	lsr	r31
    2608:	87 95       	ror	r24
    260a:	77 95       	ror	r23
    260c:	67 95       	ror	r22
    260e:	b7 95       	ror	r27
    2610:	f1 11       	cpse	r31, r1
    2612:	f8 cf       	rjmp	.-16     	; 0x2604 <__floatsisf+0x1c>
    2614:	fa f4       	brpl	.+62     	; 0x2654 <__floatsisf+0x6c>
    2616:	bb 0f       	add	r27, r27
    2618:	11 f4       	brne	.+4      	; 0x261e <__floatsisf+0x36>
    261a:	60 ff       	sbrs	r22, 0
    261c:	1b c0       	rjmp	.+54     	; 0x2654 <__floatsisf+0x6c>
    261e:	6f 5f       	subi	r22, 0xFF	; 255
    2620:	7f 4f       	sbci	r23, 0xFF	; 255
    2622:	8f 4f       	sbci	r24, 0xFF	; 255
    2624:	9f 4f       	sbci	r25, 0xFF	; 255
    2626:	16 c0       	rjmp	.+44     	; 0x2654 <__floatsisf+0x6c>
    2628:	88 23       	and	r24, r24
    262a:	11 f0       	breq	.+4      	; 0x2630 <__floatsisf+0x48>
    262c:	96 e9       	ldi	r25, 0x96	; 150
    262e:	11 c0       	rjmp	.+34     	; 0x2652 <__floatsisf+0x6a>
    2630:	77 23       	and	r23, r23
    2632:	21 f0       	breq	.+8      	; 0x263c <__floatsisf+0x54>
    2634:	9e e8       	ldi	r25, 0x8E	; 142
    2636:	87 2f       	mov	r24, r23
    2638:	76 2f       	mov	r23, r22
    263a:	05 c0       	rjmp	.+10     	; 0x2646 <__floatsisf+0x5e>
    263c:	66 23       	and	r22, r22
    263e:	71 f0       	breq	.+28     	; 0x265c <__floatsisf+0x74>
    2640:	96 e8       	ldi	r25, 0x86	; 134
    2642:	86 2f       	mov	r24, r22
    2644:	70 e0       	ldi	r23, 0x00	; 0
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	2a f0       	brmi	.+10     	; 0x2654 <__floatsisf+0x6c>
    264a:	9a 95       	dec	r25
    264c:	66 0f       	add	r22, r22
    264e:	77 1f       	adc	r23, r23
    2650:	88 1f       	adc	r24, r24
    2652:	da f7       	brpl	.-10     	; 0x264a <__floatsisf+0x62>
    2654:	88 0f       	add	r24, r24
    2656:	96 95       	lsr	r25
    2658:	87 95       	ror	r24
    265a:	97 f9       	bld	r25, 7
    265c:	08 95       	ret

0000265e <__floatundisf>:
    265e:	e8 94       	clt

00002660 <__fp_di2sf>:
    2660:	f9 2f       	mov	r31, r25
    2662:	96 eb       	ldi	r25, 0xB6	; 182
    2664:	ff 23       	and	r31, r31
    2666:	81 f0       	breq	.+32     	; 0x2688 <__fp_di2sf+0x28>
    2668:	12 16       	cp	r1, r18
    266a:	13 06       	cpc	r1, r19
    266c:	14 06       	cpc	r1, r20
    266e:	44 0b       	sbc	r20, r20
    2670:	93 95       	inc	r25
    2672:	f6 95       	lsr	r31
    2674:	87 95       	ror	r24
    2676:	77 95       	ror	r23
    2678:	67 95       	ror	r22
    267a:	57 95       	ror	r21
    267c:	40 40       	sbci	r20, 0x00	; 0
    267e:	ff 23       	and	r31, r31
    2680:	b9 f7       	brne	.-18     	; 0x2670 <__fp_di2sf+0x10>
    2682:	1b c0       	rjmp	.+54     	; 0x26ba <__fp_di2sf+0x5a>
    2684:	99 27       	eor	r25, r25
    2686:	08 95       	ret
    2688:	88 23       	and	r24, r24
    268a:	51 f4       	brne	.+20     	; 0x26a0 <__fp_di2sf+0x40>
    268c:	98 50       	subi	r25, 0x08	; 8
    268e:	d2 f7       	brpl	.-12     	; 0x2684 <__fp_di2sf+0x24>
    2690:	87 2b       	or	r24, r23
    2692:	76 2f       	mov	r23, r22
    2694:	65 2f       	mov	r22, r21
    2696:	54 2f       	mov	r21, r20
    2698:	43 2f       	mov	r20, r19
    269a:	32 2f       	mov	r19, r18
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	b1 f3       	breq	.-20     	; 0x268c <__fp_di2sf+0x2c>
    26a0:	12 16       	cp	r1, r18
    26a2:	13 06       	cpc	r1, r19
    26a4:	14 06       	cpc	r1, r20
    26a6:	44 0b       	sbc	r20, r20
    26a8:	88 23       	and	r24, r24
    26aa:	3a f0       	brmi	.+14     	; 0x26ba <__fp_di2sf+0x5a>
    26ac:	9a 95       	dec	r25
    26ae:	44 0f       	add	r20, r20
    26b0:	55 1f       	adc	r21, r21
    26b2:	66 1f       	adc	r22, r22
    26b4:	77 1f       	adc	r23, r23
    26b6:	88 1f       	adc	r24, r24
    26b8:	ca f7       	brpl	.-14     	; 0x26ac <__fp_di2sf+0x4c>
    26ba:	55 23       	and	r21, r21
    26bc:	4a f4       	brpl	.+18     	; 0x26d0 <__fp_di2sf+0x70>
    26be:	44 0f       	add	r20, r20
    26c0:	55 1f       	adc	r21, r21
    26c2:	11 f4       	brne	.+4      	; 0x26c8 <__fp_di2sf+0x68>
    26c4:	60 ff       	sbrs	r22, 0
    26c6:	04 c0       	rjmp	.+8      	; 0x26d0 <__fp_di2sf+0x70>
    26c8:	6f 5f       	subi	r22, 0xFF	; 255
    26ca:	7f 4f       	sbci	r23, 0xFF	; 255
    26cc:	8f 4f       	sbci	r24, 0xFF	; 255
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	88 0f       	add	r24, r24
    26d2:	96 95       	lsr	r25
    26d4:	87 95       	ror	r24
    26d6:	97 f9       	bld	r25, 7
    26d8:	08 95       	ret

000026da <__fp_cmp>:
    26da:	99 0f       	add	r25, r25
    26dc:	00 08       	sbc	r0, r0
    26de:	55 0f       	add	r21, r21
    26e0:	aa 0b       	sbc	r26, r26
    26e2:	e0 e8       	ldi	r30, 0x80	; 128
    26e4:	fe ef       	ldi	r31, 0xFE	; 254
    26e6:	16 16       	cp	r1, r22
    26e8:	17 06       	cpc	r1, r23
    26ea:	e8 07       	cpc	r30, r24
    26ec:	f9 07       	cpc	r31, r25
    26ee:	c0 f0       	brcs	.+48     	; 0x2720 <__fp_cmp+0x46>
    26f0:	12 16       	cp	r1, r18
    26f2:	13 06       	cpc	r1, r19
    26f4:	e4 07       	cpc	r30, r20
    26f6:	f5 07       	cpc	r31, r21
    26f8:	98 f0       	brcs	.+38     	; 0x2720 <__fp_cmp+0x46>
    26fa:	62 1b       	sub	r22, r18
    26fc:	73 0b       	sbc	r23, r19
    26fe:	84 0b       	sbc	r24, r20
    2700:	95 0b       	sbc	r25, r21
    2702:	39 f4       	brne	.+14     	; 0x2712 <__fp_cmp+0x38>
    2704:	0a 26       	eor	r0, r26
    2706:	61 f0       	breq	.+24     	; 0x2720 <__fp_cmp+0x46>
    2708:	23 2b       	or	r18, r19
    270a:	24 2b       	or	r18, r20
    270c:	25 2b       	or	r18, r21
    270e:	21 f4       	brne	.+8      	; 0x2718 <__fp_cmp+0x3e>
    2710:	08 95       	ret
    2712:	0a 26       	eor	r0, r26
    2714:	09 f4       	brne	.+2      	; 0x2718 <__fp_cmp+0x3e>
    2716:	a1 40       	sbci	r26, 0x01	; 1
    2718:	a6 95       	lsr	r26
    271a:	8f ef       	ldi	r24, 0xFF	; 255
    271c:	81 1d       	adc	r24, r1
    271e:	81 1d       	adc	r24, r1
    2720:	08 95       	ret

00002722 <__fp_inf>:
    2722:	97 f9       	bld	r25, 7
    2724:	9f 67       	ori	r25, 0x7F	; 127
    2726:	80 e8       	ldi	r24, 0x80	; 128
    2728:	70 e0       	ldi	r23, 0x00	; 0
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	08 95       	ret

0000272e <__fp_nan>:
    272e:	9f ef       	ldi	r25, 0xFF	; 255
    2730:	80 ec       	ldi	r24, 0xC0	; 192
    2732:	08 95       	ret

00002734 <__fp_pscA>:
    2734:	00 24       	eor	r0, r0
    2736:	0a 94       	dec	r0
    2738:	16 16       	cp	r1, r22
    273a:	17 06       	cpc	r1, r23
    273c:	18 06       	cpc	r1, r24
    273e:	09 06       	cpc	r0, r25
    2740:	08 95       	ret

00002742 <__fp_pscB>:
    2742:	00 24       	eor	r0, r0
    2744:	0a 94       	dec	r0
    2746:	12 16       	cp	r1, r18
    2748:	13 06       	cpc	r1, r19
    274a:	14 06       	cpc	r1, r20
    274c:	05 06       	cpc	r0, r21
    274e:	08 95       	ret

00002750 <__fp_round>:
    2750:	09 2e       	mov	r0, r25
    2752:	03 94       	inc	r0
    2754:	00 0c       	add	r0, r0
    2756:	11 f4       	brne	.+4      	; 0x275c <__fp_round+0xc>
    2758:	88 23       	and	r24, r24
    275a:	52 f0       	brmi	.+20     	; 0x2770 <__fp_round+0x20>
    275c:	bb 0f       	add	r27, r27
    275e:	40 f4       	brcc	.+16     	; 0x2770 <__fp_round+0x20>
    2760:	bf 2b       	or	r27, r31
    2762:	11 f4       	brne	.+4      	; 0x2768 <__fp_round+0x18>
    2764:	60 ff       	sbrs	r22, 0
    2766:	04 c0       	rjmp	.+8      	; 0x2770 <__fp_round+0x20>
    2768:	6f 5f       	subi	r22, 0xFF	; 255
    276a:	7f 4f       	sbci	r23, 0xFF	; 255
    276c:	8f 4f       	sbci	r24, 0xFF	; 255
    276e:	9f 4f       	sbci	r25, 0xFF	; 255
    2770:	08 95       	ret

00002772 <__fp_split3>:
    2772:	57 fd       	sbrc	r21, 7
    2774:	90 58       	subi	r25, 0x80	; 128
    2776:	44 0f       	add	r20, r20
    2778:	55 1f       	adc	r21, r21
    277a:	59 f0       	breq	.+22     	; 0x2792 <__fp_splitA+0x10>
    277c:	5f 3f       	cpi	r21, 0xFF	; 255
    277e:	71 f0       	breq	.+28     	; 0x279c <__fp_splitA+0x1a>
    2780:	47 95       	ror	r20

00002782 <__fp_splitA>:
    2782:	88 0f       	add	r24, r24
    2784:	97 fb       	bst	r25, 7
    2786:	99 1f       	adc	r25, r25
    2788:	61 f0       	breq	.+24     	; 0x27a2 <__fp_splitA+0x20>
    278a:	9f 3f       	cpi	r25, 0xFF	; 255
    278c:	79 f0       	breq	.+30     	; 0x27ac <__fp_splitA+0x2a>
    278e:	87 95       	ror	r24
    2790:	08 95       	ret
    2792:	12 16       	cp	r1, r18
    2794:	13 06       	cpc	r1, r19
    2796:	14 06       	cpc	r1, r20
    2798:	55 1f       	adc	r21, r21
    279a:	f2 cf       	rjmp	.-28     	; 0x2780 <__fp_split3+0xe>
    279c:	46 95       	lsr	r20
    279e:	f1 df       	rcall	.-30     	; 0x2782 <__fp_splitA>
    27a0:	08 c0       	rjmp	.+16     	; 0x27b2 <__fp_splitA+0x30>
    27a2:	16 16       	cp	r1, r22
    27a4:	17 06       	cpc	r1, r23
    27a6:	18 06       	cpc	r1, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	f1 cf       	rjmp	.-30     	; 0x278e <__fp_splitA+0xc>
    27ac:	86 95       	lsr	r24
    27ae:	71 05       	cpc	r23, r1
    27b0:	61 05       	cpc	r22, r1
    27b2:	08 94       	sec
    27b4:	08 95       	ret

000027b6 <__fp_zero>:
    27b6:	e8 94       	clt

000027b8 <__fp_szero>:
    27b8:	bb 27       	eor	r27, r27
    27ba:	66 27       	eor	r22, r22
    27bc:	77 27       	eor	r23, r23
    27be:	cb 01       	movw	r24, r22
    27c0:	97 f9       	bld	r25, 7
    27c2:	08 95       	ret

000027c4 <__gesf2>:
    27c4:	8a df       	rcall	.-236    	; 0x26da <__fp_cmp>
    27c6:	08 f4       	brcc	.+2      	; 0x27ca <__gesf2+0x6>
    27c8:	8f ef       	ldi	r24, 0xFF	; 255
    27ca:	08 95       	ret

000027cc <__mulsf3>:
    27cc:	0b d0       	rcall	.+22     	; 0x27e4 <__mulsf3x>
    27ce:	c0 cf       	rjmp	.-128    	; 0x2750 <__fp_round>
    27d0:	b1 df       	rcall	.-158    	; 0x2734 <__fp_pscA>
    27d2:	28 f0       	brcs	.+10     	; 0x27de <__mulsf3+0x12>
    27d4:	b6 df       	rcall	.-148    	; 0x2742 <__fp_pscB>
    27d6:	18 f0       	brcs	.+6      	; 0x27de <__mulsf3+0x12>
    27d8:	95 23       	and	r25, r21
    27da:	09 f0       	breq	.+2      	; 0x27de <__mulsf3+0x12>
    27dc:	a2 cf       	rjmp	.-188    	; 0x2722 <__fp_inf>
    27de:	a7 cf       	rjmp	.-178    	; 0x272e <__fp_nan>
    27e0:	11 24       	eor	r1, r1
    27e2:	ea cf       	rjmp	.-44     	; 0x27b8 <__fp_szero>

000027e4 <__mulsf3x>:
    27e4:	c6 df       	rcall	.-116    	; 0x2772 <__fp_split3>
    27e6:	a0 f3       	brcs	.-24     	; 0x27d0 <__mulsf3+0x4>

000027e8 <__mulsf3_pse>:
    27e8:	95 9f       	mul	r25, r21
    27ea:	d1 f3       	breq	.-12     	; 0x27e0 <__mulsf3+0x14>
    27ec:	95 0f       	add	r25, r21
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	55 1f       	adc	r21, r21
    27f2:	62 9f       	mul	r22, r18
    27f4:	f0 01       	movw	r30, r0
    27f6:	72 9f       	mul	r23, r18
    27f8:	bb 27       	eor	r27, r27
    27fa:	f0 0d       	add	r31, r0
    27fc:	b1 1d       	adc	r27, r1
    27fe:	63 9f       	mul	r22, r19
    2800:	aa 27       	eor	r26, r26
    2802:	f0 0d       	add	r31, r0
    2804:	b1 1d       	adc	r27, r1
    2806:	aa 1f       	adc	r26, r26
    2808:	64 9f       	mul	r22, r20
    280a:	66 27       	eor	r22, r22
    280c:	b0 0d       	add	r27, r0
    280e:	a1 1d       	adc	r26, r1
    2810:	66 1f       	adc	r22, r22
    2812:	82 9f       	mul	r24, r18
    2814:	22 27       	eor	r18, r18
    2816:	b0 0d       	add	r27, r0
    2818:	a1 1d       	adc	r26, r1
    281a:	62 1f       	adc	r22, r18
    281c:	73 9f       	mul	r23, r19
    281e:	b0 0d       	add	r27, r0
    2820:	a1 1d       	adc	r26, r1
    2822:	62 1f       	adc	r22, r18
    2824:	83 9f       	mul	r24, r19
    2826:	a0 0d       	add	r26, r0
    2828:	61 1d       	adc	r22, r1
    282a:	22 1f       	adc	r18, r18
    282c:	74 9f       	mul	r23, r20
    282e:	33 27       	eor	r19, r19
    2830:	a0 0d       	add	r26, r0
    2832:	61 1d       	adc	r22, r1
    2834:	23 1f       	adc	r18, r19
    2836:	84 9f       	mul	r24, r20
    2838:	60 0d       	add	r22, r0
    283a:	21 1d       	adc	r18, r1
    283c:	82 2f       	mov	r24, r18
    283e:	76 2f       	mov	r23, r22
    2840:	6a 2f       	mov	r22, r26
    2842:	11 24       	eor	r1, r1
    2844:	9f 57       	subi	r25, 0x7F	; 127
    2846:	50 40       	sbci	r21, 0x00	; 0
    2848:	8a f0       	brmi	.+34     	; 0x286c <__mulsf3_pse+0x84>
    284a:	e1 f0       	breq	.+56     	; 0x2884 <__mulsf3_pse+0x9c>
    284c:	88 23       	and	r24, r24
    284e:	4a f0       	brmi	.+18     	; 0x2862 <__mulsf3_pse+0x7a>
    2850:	ee 0f       	add	r30, r30
    2852:	ff 1f       	adc	r31, r31
    2854:	bb 1f       	adc	r27, r27
    2856:	66 1f       	adc	r22, r22
    2858:	77 1f       	adc	r23, r23
    285a:	88 1f       	adc	r24, r24
    285c:	91 50       	subi	r25, 0x01	; 1
    285e:	50 40       	sbci	r21, 0x00	; 0
    2860:	a9 f7       	brne	.-22     	; 0x284c <__mulsf3_pse+0x64>
    2862:	9e 3f       	cpi	r25, 0xFE	; 254
    2864:	51 05       	cpc	r21, r1
    2866:	70 f0       	brcs	.+28     	; 0x2884 <__mulsf3_pse+0x9c>
    2868:	5c cf       	rjmp	.-328    	; 0x2722 <__fp_inf>
    286a:	a6 cf       	rjmp	.-180    	; 0x27b8 <__fp_szero>
    286c:	5f 3f       	cpi	r21, 0xFF	; 255
    286e:	ec f3       	brlt	.-6      	; 0x286a <__mulsf3_pse+0x82>
    2870:	98 3e       	cpi	r25, 0xE8	; 232
    2872:	dc f3       	brlt	.-10     	; 0x286a <__mulsf3_pse+0x82>
    2874:	86 95       	lsr	r24
    2876:	77 95       	ror	r23
    2878:	67 95       	ror	r22
    287a:	b7 95       	ror	r27
    287c:	f7 95       	ror	r31
    287e:	e7 95       	ror	r30
    2880:	9f 5f       	subi	r25, 0xFF	; 255
    2882:	c1 f7       	brne	.-16     	; 0x2874 <__mulsf3_pse+0x8c>
    2884:	fe 2b       	or	r31, r30
    2886:	88 0f       	add	r24, r24
    2888:	91 1d       	adc	r25, r1
    288a:	96 95       	lsr	r25
    288c:	87 95       	ror	r24
    288e:	97 f9       	bld	r25, 7
    2890:	08 95       	ret

00002892 <__mulsi3>:
    2892:	62 9f       	mul	r22, r18
    2894:	d0 01       	movw	r26, r0
    2896:	73 9f       	mul	r23, r19
    2898:	f0 01       	movw	r30, r0
    289a:	82 9f       	mul	r24, r18
    289c:	e0 0d       	add	r30, r0
    289e:	f1 1d       	adc	r31, r1
    28a0:	64 9f       	mul	r22, r20
    28a2:	e0 0d       	add	r30, r0
    28a4:	f1 1d       	adc	r31, r1
    28a6:	92 9f       	mul	r25, r18
    28a8:	f0 0d       	add	r31, r0
    28aa:	83 9f       	mul	r24, r19
    28ac:	f0 0d       	add	r31, r0
    28ae:	74 9f       	mul	r23, r20
    28b0:	f0 0d       	add	r31, r0
    28b2:	65 9f       	mul	r22, r21
    28b4:	f0 0d       	add	r31, r0
    28b6:	99 27       	eor	r25, r25
    28b8:	72 9f       	mul	r23, r18
    28ba:	b0 0d       	add	r27, r0
    28bc:	e1 1d       	adc	r30, r1
    28be:	f9 1f       	adc	r31, r25
    28c0:	63 9f       	mul	r22, r19
    28c2:	b0 0d       	add	r27, r0
    28c4:	e1 1d       	adc	r30, r1
    28c6:	f9 1f       	adc	r31, r25
    28c8:	bd 01       	movw	r22, r26
    28ca:	cf 01       	movw	r24, r30
    28cc:	11 24       	eor	r1, r1
    28ce:	08 95       	ret

000028d0 <__udivmodsi4>:
    28d0:	a1 e2       	ldi	r26, 0x21	; 33
    28d2:	1a 2e       	mov	r1, r26
    28d4:	aa 1b       	sub	r26, r26
    28d6:	bb 1b       	sub	r27, r27
    28d8:	fd 01       	movw	r30, r26
    28da:	0d c0       	rjmp	.+26     	; 0x28f6 <__udivmodsi4_ep>

000028dc <__udivmodsi4_loop>:
    28dc:	aa 1f       	adc	r26, r26
    28de:	bb 1f       	adc	r27, r27
    28e0:	ee 1f       	adc	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	a2 17       	cp	r26, r18
    28e6:	b3 07       	cpc	r27, r19
    28e8:	e4 07       	cpc	r30, r20
    28ea:	f5 07       	cpc	r31, r21
    28ec:	20 f0       	brcs	.+8      	; 0x28f6 <__udivmodsi4_ep>
    28ee:	a2 1b       	sub	r26, r18
    28f0:	b3 0b       	sbc	r27, r19
    28f2:	e4 0b       	sbc	r30, r20
    28f4:	f5 0b       	sbc	r31, r21

000028f6 <__udivmodsi4_ep>:
    28f6:	66 1f       	adc	r22, r22
    28f8:	77 1f       	adc	r23, r23
    28fa:	88 1f       	adc	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	1a 94       	dec	r1
    2900:	69 f7       	brne	.-38     	; 0x28dc <__udivmodsi4_loop>
    2902:	60 95       	com	r22
    2904:	70 95       	com	r23
    2906:	80 95       	com	r24
    2908:	90 95       	com	r25
    290a:	9b 01       	movw	r18, r22
    290c:	ac 01       	movw	r20, r24
    290e:	bd 01       	movw	r22, r26
    2910:	cf 01       	movw	r24, r30
    2912:	08 95       	ret

00002914 <_exit>:
    2914:	f8 94       	cli

00002916 <__stop_program>:
    2916:	ff cf       	rjmp	.-2      	; 0x2916 <__stop_program>
