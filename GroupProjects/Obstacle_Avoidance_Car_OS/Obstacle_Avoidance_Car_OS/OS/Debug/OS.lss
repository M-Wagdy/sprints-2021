
OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00002dca  00002e5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008d  008000c8  008000c8  00002ec6  2**0
                  ALLOC
  3 .stab         00002700  00000000  00000000  00002ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007ce  00000000  00000000  000055c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000300  00000000  00000000  00005d98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e12  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000154b  00000000  00000000  00009eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001735  00000000  00000000  0000b3f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009bc  00000000  00000000  0000cb2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015aa  00000000  00000000  0000d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002666  00000000  00000000  0000ea92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000110f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 af 12 	jmp	0x255e	; 0x255e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 35       	cpi	r26, 0x55	; 85
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b8 0a 	call	0x1570	; 0x1570 <main>
      8a:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CRASH_MainFunction>:
-----------------------------------*/
/**
* @brief: This is the main function of CRASH module.
*/
extern void CRASH_MainFunction(void)
{
      92:	cf 92       	push	r12
      94:	df 92       	push	r13
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
   ERROR_STATE_t CRASH_MainErrorState;
   
   /* Call Distance Getter Function */
   SENSING_Get(&gd64_distance);
      9a:	88 ec       	ldi	r24, 0xC8	; 200
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 8c 02 	call	0x518	; 0x518 <SENSING_Get>
static ERROR_STATE_t CRASH_Logic(void)
{
   static Enu_LogicStateMachine u8_CurrentState = CRASH_Ready;
   static Enu_LogicStateMachine u8_PreviousState = CRASH_Ready;

   if(gd64_distance > gd64_UpperDistanceLimit)
      a2:	c0 90 c8 00 	lds	r12, 0x00C8
      a6:	d0 90 c9 00 	lds	r13, 0x00C9
      aa:	e0 90 ca 00 	lds	r14, 0x00CA
      ae:	f0 90 cb 00 	lds	r15, 0x00CB
      b2:	c7 01       	movw	r24, r14
      b4:	b6 01       	movw	r22, r12
      b6:	20 91 64 00 	lds	r18, 0x0064
      ba:	30 91 65 00 	lds	r19, 0x0065
      be:	40 91 66 00 	lds	r20, 0x0066
      c2:	50 91 67 00 	lds	r21, 0x0067
      c6:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__gesf2>
      ca:	18 16       	cp	r1, r24
      cc:	24 f4       	brge	.+8      	; 0xd6 <CRASH_MainFunction+0x44>
   {
      u8_CurrentState = CRASH_Forward;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 93 cf 00 	sts	0x00CF, r24
      d4:	15 c0       	rjmp	.+42     	; 0x100 <CRASH_MainFunction+0x6e>
   }
   else if (gd64_distance < gd64_LowerDistanceLimit)
      d6:	c7 01       	movw	r24, r14
      d8:	b6 01       	movw	r22, r12
      da:	20 91 60 00 	lds	r18, 0x0060
      de:	30 91 61 00 	lds	r19, 0x0061
      e2:	40 91 62 00 	lds	r20, 0x0062
      e6:	50 91 63 00 	lds	r21, 0x0063
      ea:	0e 94 b3 14 	call	0x2966	; 0x2966 <__cmpsf2>
      ee:	88 23       	and	r24, r24
      f0:	24 f4       	brge	.+8      	; 0xfa <CRASH_MainFunction+0x68>
   {
		u8_CurrentState = CRASH_Backward;  
      f2:	82 e0       	ldi	r24, 0x02	; 2
      f4:	80 93 cf 00 	sts	0x00CF, r24
      f8:	03 c0       	rjmp	.+6      	; 0x100 <CRASH_MainFunction+0x6e>
   }
   else
   {
      u8_CurrentState = CRASH_RotateRight;
      fa:	83 e0       	ldi	r24, 0x03	; 3
      fc:	80 93 cf 00 	sts	0x00CF, r24
   }
   
   if(u8_PreviousState != u8_CurrentState)
     100:	80 91 cf 00 	lds	r24, 0x00CF
     104:	90 91 d0 00 	lds	r25, 0x00D0
     108:	98 17       	cp	r25, r24
     10a:	59 f1       	breq	.+86     	; 0x162 <CRASH_MainFunction+0xd0>
   {
      switch(u8_CurrentState)
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	81 f0       	breq	.+32     	; 0x130 <CRASH_MainFunction+0x9e>
     110:	83 30       	cpi	r24, 0x03	; 3
     112:	d9 f0       	breq	.+54     	; 0x14a <CRASH_MainFunction+0xb8>
     114:	81 30       	cpi	r24, 0x01	; 1
     116:	69 f5       	brne	.+90     	; 0x172 <CRASH_MainFunction+0xe0>
      {
         case CRASH_Forward:
            gu8_CarDirection = STEERING_FORWARD;
     118:	10 92 cc 00 	sts	0x00CC, r1
            gu8_CarSpeed = 15;
     11c:	8f e0       	ldi	r24, 0x0F	; 15
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	90 93 ce 00 	sts	0x00CE, r25
     124:	80 93 cd 00 	sts	0x00CD, r24
            u8_PreviousState = u8_CurrentState;
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	80 93 d0 00 	sts	0x00D0, r24
     12e:	19 c0       	rjmp	.+50     	; 0x162 <CRASH_MainFunction+0xd0>
            break;
         case CRASH_Backward:
            gu8_CarDirection = STEERING_BACKWARD;		
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	80 93 cc 00 	sts	0x00CC, r24
            gu8_CarSpeed = 15;
     136:	8f e0       	ldi	r24, 0x0F	; 15
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	90 93 ce 00 	sts	0x00CE, r25
     13e:	80 93 cd 00 	sts	0x00CD, r24
            u8_PreviousState = u8_CurrentState;
     142:	82 e0       	ldi	r24, 0x02	; 2
     144:	80 93 d0 00 	sts	0x00D0, r24
     148:	0c c0       	rjmp	.+24     	; 0x162 <CRASH_MainFunction+0xd0>
            break;
         case CRASH_RotateRight:
            gu8_CarDirection = STEERING_RIGHT;		
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	80 93 cc 00 	sts	0x00CC, r24
            gu8_CarSpeed = 100;
     150:	84 e6       	ldi	r24, 0x64	; 100
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	90 93 ce 00 	sts	0x00CE, r25
     158:	80 93 cd 00 	sts	0x00CD, r24
            u8_PreviousState = u8_CurrentState;
     15c:	83 e0       	ldi	r24, 0x03	; 3
     15e:	80 93 d0 00 	sts	0x00D0, r24
   CRASH_MainErrorState = CRASH_Logic();
   
   /* Call Speed and Direction Setters */
   if(ERROR_OK == CRASH_MainErrorState)
   {
      STEERING_Set(gu8_CarDirection, gu8_CarSpeed);
     162:	60 91 cd 00 	lds	r22, 0x00CD
     166:	70 91 ce 00 	lds	r23, 0x00CE
     16a:	80 91 cc 00 	lds	r24, 0x00CC
     16e:	0e 94 01 03 	call	0x602	; 0x602 <STEERING_Set>
   }
   return CRASH_MainErrorState;
}
     172:	ff 90       	pop	r15
     174:	ef 90       	pop	r14
     176:	df 90       	pop	r13
     178:	cf 90       	pop	r12
     17a:	08 95       	ret

0000017c <MONITOR_SendDataToDisplay>:
         }   
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
	uint8_t FunRetVal = OperationStarted;
	static uint8_t Position = 0;
   
	if(To_Display_Manager != NULL_PTR)
	{
		if((STR_ToDisplay.u32_MONITOR_Number != NULL_PTR) ^ (STR_ToDisplay.u8_MONITOR_String != NULL_PTR))
     180:	e0 91 dc 00 	lds	r30, 0x00DC
     184:	f0 91 dd 00 	lds	r31, 0x00DD
     188:	31 e0       	ldi	r19, 0x01	; 1
     18a:	30 97       	sbiw	r30, 0x00	; 0
     18c:	09 f4       	brne	.+2      	; 0x190 <MONITOR_SendDataToDisplay+0x14>
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	21 e0       	ldi	r18, 0x01	; 1
     192:	80 91 da 00 	lds	r24, 0x00DA
     196:	90 91 db 00 	lds	r25, 0x00DB
     19a:	00 97       	sbiw	r24, 0x00	; 0
     19c:	09 f4       	brne	.+2      	; 0x1a0 <MONITOR_SendDataToDisplay+0x24>
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	32 17       	cp	r19, r18
     1a2:	09 f4       	brne	.+2      	; 0x1a6 <MONITOR_SendDataToDisplay+0x2a>
     1a4:	c1 c0       	rjmp	.+386    	; 0x328 <MONITOR_SendDataToDisplay+0x1ac>
		{
			switch(State)
     1a6:	80 91 8c 00 	lds	r24, 0x008C
     1aa:	82 30       	cpi	r24, 0x02	; 2
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <MONITOR_SendDataToDisplay+0x34>
     1ae:	74 c0       	rjmp	.+232    	; 0x298 <MONITOR_SendDataToDisplay+0x11c>
     1b0:	83 30       	cpi	r24, 0x03	; 3
     1b2:	38 f4       	brcc	.+14     	; 0x1c2 <MONITOR_SendDataToDisplay+0x46>
     1b4:	88 23       	and	r24, r24
     1b6:	09 f4       	brne	.+2      	; 0x1ba <MONITOR_SendDataToDisplay+0x3e>
     1b8:	57 c0       	rjmp	.+174    	; 0x268 <MONITOR_SendDataToDisplay+0xec>
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <MONITOR_SendDataToDisplay+0x44>
     1be:	b6 c0       	rjmp	.+364    	; 0x32c <MONITOR_SendDataToDisplay+0x1b0>
     1c0:	5f c0       	rjmp	.+190    	; 0x280 <MONITOR_SendDataToDisplay+0x104>
     1c2:	84 30       	cpi	r24, 0x04	; 4
     1c4:	09 f4       	brne	.+2      	; 0x1c8 <MONITOR_SendDataToDisplay+0x4c>
     1c6:	87 c0       	rjmp	.+270    	; 0x2d6 <MONITOR_SendDataToDisplay+0x15a>
     1c8:	84 30       	cpi	r24, 0x04	; 4
     1ca:	08 f4       	brcc	.+2      	; 0x1ce <MONITOR_SendDataToDisplay+0x52>
     1cc:	42 c0       	rjmp	.+132    	; 0x252 <MONITOR_SendDataToDisplay+0xd6>
     1ce:	8f 3f       	cpi	r24, 0xFF	; 255
     1d0:	09 f0       	breq	.+2      	; 0x1d4 <MONITOR_SendDataToDisplay+0x58>
     1d2:	ac c0       	rjmp	.+344    	; 0x32c <MONITOR_SendDataToDisplay+0x1b0>
			{
         case OperationStarted:
            /*logic of data sending starts here*/
            /*Determine the Position*/
            if((STR_ToDisplay.u32_MONITOR_Ypos == 0) & (STR_ToDisplay.u32_MONITOR_Xpos < 16))
     1d4:	40 91 d6 00 	lds	r20, 0x00D6
     1d8:	50 91 d7 00 	lds	r21, 0x00D7
     1dc:	60 91 d8 00 	lds	r22, 0x00D8
     1e0:	70 91 d9 00 	lds	r23, 0x00D9
     1e4:	80 91 d2 00 	lds	r24, 0x00D2
     1e8:	90 91 d3 00 	lds	r25, 0x00D3
     1ec:	a0 91 d4 00 	lds	r26, 0x00D4
     1f0:	b0 91 d5 00 	lds	r27, 0x00D5
     1f4:	31 e0       	ldi	r19, 0x01	; 1
     1f6:	80 31       	cpi	r24, 0x10	; 16
     1f8:	91 05       	cpc	r25, r1
     1fa:	a1 05       	cpc	r26, r1
     1fc:	b1 05       	cpc	r27, r1
     1fe:	08 f0       	brcs	.+2      	; 0x202 <MONITOR_SendDataToDisplay+0x86>
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	41 15       	cp	r20, r1
     206:	51 05       	cpc	r21, r1
     208:	61 05       	cpc	r22, r1
     20a:	71 05       	cpc	r23, r1
     20c:	09 f0       	breq	.+2      	; 0x210 <MONITOR_SendDataToDisplay+0x94>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	22 23       	and	r18, r18
     212:	51 f0       	breq	.+20     	; 0x228 <MONITOR_SendDataToDisplay+0xac>
     214:	33 23       	and	r19, r19
     216:	41 f0       	breq	.+16     	; 0x228 <MONITOR_SendDataToDisplay+0xac>
            {
               Position = LCD_CURS_Position0 | STR_ToDisplay.u32_MONITOR_Xpos;
     218:	80 68       	ori	r24, 0x80	; 128
     21a:	80 93 ea 00 	sts	0x00EA, r24
               ErrRetVal = OperationRunning;
               State = GoToPosition;
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	80 93 8c 00 	sts	0x008C, r24
            /*logic of data sending starts here*/
            /*Determine the Position*/
            if((STR_ToDisplay.u32_MONITOR_Ypos == 0) & (STR_ToDisplay.u32_MONITOR_Xpos < 16))
            {
               Position = LCD_CURS_Position0 | STR_ToDisplay.u32_MONITOR_Xpos;
               ErrRetVal = OperationRunning;
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	91 c0       	rjmp	.+290    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
               State = GoToPosition;
            }
            else if((STR_ToDisplay.u32_MONITOR_Ypos == 1) & (STR_ToDisplay.u32_MONITOR_Xpos < 16))
     228:	33 23       	and	r19, r19
     22a:	09 f4       	brne	.+2      	; 0x22e <MONITOR_SendDataToDisplay+0xb2>
     22c:	81 c0       	rjmp	.+258    	; 0x330 <MONITOR_SendDataToDisplay+0x1b4>
     22e:	21 e0       	ldi	r18, 0x01	; 1
     230:	41 30       	cpi	r20, 0x01	; 1
     232:	51 05       	cpc	r21, r1
     234:	61 05       	cpc	r22, r1
     236:	71 05       	cpc	r23, r1
     238:	09 f0       	breq	.+2      	; 0x23c <MONITOR_SendDataToDisplay+0xc0>
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	22 23       	and	r18, r18
     23e:	09 f4       	brne	.+2      	; 0x242 <MONITOR_SendDataToDisplay+0xc6>
     240:	77 c0       	rjmp	.+238    	; 0x330 <MONITOR_SendDataToDisplay+0x1b4>
            {
               Position = LCD_CURS_LINE2 | STR_ToDisplay.u32_MONITOR_Xpos;
     242:	80 6c       	ori	r24, 0xC0	; 192
     244:	80 93 ea 00 	sts	0x00EA, r24
               ErrRetVal = OperationRunning;
               State = GoToPosition;
     248:	83 e0       	ldi	r24, 0x03	; 3
     24a:	80 93 8c 00 	sts	0x008C, r24
               State = GoToPosition;
            }
            else if((STR_ToDisplay.u32_MONITOR_Ypos == 1) & (STR_ToDisplay.u32_MONITOR_Xpos < 16))
            {
               Position = LCD_CURS_LINE2 | STR_ToDisplay.u32_MONITOR_Xpos;
               ErrRetVal = OperationRunning;
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	7c c0       	rjmp	.+248    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
               ErrRetVal = OperationFail;
            }
            break;
         case GoToPosition:
            /*go to position*/
				FunRetVal = LCD_SendCommand(Position);
     252:	80 91 ea 00 	lds	r24, 0x00EA
     256:	0e 94 28 03 	call	0x650	; 0x650 <LCD_SendCommand>
				if(FunRetVal==OperationSuccess)
     25a:	88 23       	and	r24, r24
     25c:	09 f0       	breq	.+2      	; 0x260 <MONITOR_SendDataToDisplay+0xe4>
     25e:	6a c0       	rjmp	.+212    	; 0x334 <MONITOR_SendDataToDisplay+0x1b8>
				{
					State = CursorAtPosition;//CursorAtPosition
     260:	10 92 8c 00 	sts	0x008C, r1
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	71 c0       	rjmp	.+226    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
				{
					State = CursorAtPosition;//CursorAtPosition
				}
				break;
			case CursorAtPosition:
				FunRetVal = LCD_SendString((uint8_t*)"          ");
     268:	88 e6       	ldi	r24, 0x68	; 104
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 70 06 	call	0xce0	; 0xce0 <LCD_SendString>
				if(FunRetVal == OperationSuccess)
     270:	88 23       	and	r24, r24
     272:	09 f0       	breq	.+2      	; 0x276 <MONITOR_SendDataToDisplay+0xfa>
     274:	61 c0       	rjmp	.+194    	; 0x338 <MONITOR_SendDataToDisplay+0x1bc>
				{
					State = SpaceCleared;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	80 93 8c 00 	sts	0x008C, r24
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     27c:	8f ef       	ldi	r24, 0xFF	; 255
     27e:	65 c0       	rjmp	.+202    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
				{
					State = SpaceCleared;
				}
				break;
			case SpaceCleared:
				FunRetVal = LCD_SendCommand(Position);
     280:	80 91 ea 00 	lds	r24, 0x00EA
     284:	0e 94 28 03 	call	0x650	; 0x650 <LCD_SendCommand>
				if(FunRetVal == OperationSuccess)
     288:	88 23       	and	r24, r24
     28a:	09 f0       	breq	.+2      	; 0x28e <MONITOR_SendDataToDisplay+0x112>
     28c:	57 c0       	rjmp	.+174    	; 0x33c <MONITOR_SendDataToDisplay+0x1c0>
				{
					State = CursorHoming;
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	80 93 8c 00 	sts	0x008C, r24
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     294:	8f ef       	ldi	r24, 0xFF	; 255
     296:	59 c0       	rjmp	.+178    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
				{
					State = CursorHoming;
				}
				break;
			case CursorHoming:
				if(To_Display_Manager->u32_MONITOR_Number==NULL_PTR)
     298:	30 97       	sbiw	r30, 0x00	; 0
     29a:	81 f4       	brne	.+32     	; 0x2bc <MONITOR_SendDataToDisplay+0x140>
				{
					FunRetVal = OperationStarted;
               while (OperationSuccess != FunRetVal)
               {
                  FunRetVal = LCD_SendString((To_Display_Manager->u8_MONITOR_String));
     29c:	ca ed       	ldi	r28, 0xDA	; 218
     29e:	d0 e0       	ldi	r29, 0x00	; 0
     2a0:	88 81       	ld	r24, Y
     2a2:	99 81       	ldd	r25, Y+1	; 0x01
     2a4:	0e 94 70 06 	call	0xce0	; 0xce0 <LCD_SendString>
				break;
			case CursorHoming:
				if(To_Display_Manager->u32_MONITOR_Number==NULL_PTR)
				{
					FunRetVal = OperationStarted;
               while (OperationSuccess != FunRetVal)
     2a8:	88 23       	and	r24, r24
     2aa:	d1 f7       	brne	.-12     	; 0x2a0 <MONITOR_SendDataToDisplay+0x124>
               {
                  FunRetVal = LCD_SendString((To_Display_Manager->u8_MONITOR_String));
               }                  
					if(FunRetVal == OperationSuccess)
     2ac:	88 23       	and	r24, r24
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <MONITOR_SendDataToDisplay+0x136>
     2b0:	47 c0       	rjmp	.+142    	; 0x340 <MONITOR_SendDataToDisplay+0x1c4>
					{
						State = MonitorDelay;
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	80 93 8c 00 	sts	0x008C, r24
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	47 c0       	rjmp	.+142    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
						State = MonitorDelay;
					}
				}
				else
				{
					FunRetVal = LCD_SendNumber(*(To_Display_Manager->u32_MONITOR_Number));
     2bc:	60 81       	ld	r22, Z
     2be:	71 81       	ldd	r23, Z+1	; 0x01
     2c0:	82 81       	ldd	r24, Z+2	; 0x02
     2c2:	93 81       	ldd	r25, Z+3	; 0x03
     2c4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <LCD_SendNumber>
					if(FunRetVal == OperationSuccess)
     2c8:	88 23       	and	r24, r24
     2ca:	e1 f5       	brne	.+120    	; 0x344 <MONITOR_SendDataToDisplay+0x1c8>
					{
						State = MonitorDelay;
     2cc:	84 e0       	ldi	r24, 0x04	; 4
     2ce:	80 93 8c 00 	sts	0x008C, r24
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
     2d4:	3a c0       	rjmp	.+116    	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
						State = MonitorDelay;
					}
				}
				break;
         case MonitorDelay:
            FunRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
     2d6:	c8 e2       	ldi	r28, 0x28	; 40
     2d8:	d3 e0       	ldi	r29, 0x03	; 3
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	be 01       	movw	r22, r28
     2de:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM_DelayStatus>
            if(TIMER_E_DELAY_EMPTY == FunRetVal)
     2e2:	8b 3f       	cpi	r24, 0xFB	; 251
     2e4:	51 f4       	brne	.+20     	; 0x2fa <MONITOR_SendDataToDisplay+0x17e>
            {
               TIM_DelayMs(TIMER_2,50, LCD_SendCommand);
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	42 e3       	ldi	r20, 0x32	; 50
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	9e 01       	movw	r18, r28
     2f2:	0e 94 34 11 	call	0x2268	; 0x2268 <TIM_DelayMs>
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	28 c0       	rjmp	.+80     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
            FunRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
            if(TIMER_E_DELAY_EMPTY == FunRetVal)
            {
               TIM_DelayMs(TIMER_2,50, LCD_SendCommand);
            }
            if(FunRetVal == ((uint8_t)ERROR_OK))
     2fa:	88 23       	and	r24, r24
     2fc:	29 f5       	brne	.+74     	; 0x348 <MONITOR_SendDataToDisplay+0x1cc>
            {
               ErrRetVal = OperationSuccess;
               u32_PrevNumber = u32_Number;
     2fe:	80 91 e2 00 	lds	r24, 0x00E2
     302:	90 91 e3 00 	lds	r25, 0x00E3
     306:	a0 91 e4 00 	lds	r26, 0x00E4
     30a:	b0 91 e5 00 	lds	r27, 0x00E5
     30e:	80 93 e6 00 	sts	0x00E6, r24
     312:	90 93 e7 00 	sts	0x00E7, r25
     316:	a0 93 e8 00 	sts	0x00E8, r26
     31a:	b0 93 e9 00 	sts	0x00E9, r27
               State = OperationStarted;
     31e:	8f ef       	ldi	r24, 0xFF	; 255
     320:	80 93 8c 00 	sts	0x008C, r24
            {
               TIM_DelayMs(TIMER_2,50, LCD_SendCommand);
            }
            if(FunRetVal == ((uint8_t)ERROR_OK))
            {
               ErrRetVal = OperationSuccess;
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	11 c0       	rjmp	.+34     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
            }
			}			
		}
		else
		{
			ErrRetVal = OperationFail;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	0f c0       	rjmp	.+30     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	0d c0       	rjmp	.+26     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
               ErrRetVal = OperationRunning;
               State = GoToPosition;
            }
            else
            {
               ErrRetVal = OperationFail;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	0b c0       	rjmp	.+22     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
      }
	}
}
ERROR_STATE_t MONITOR_SendDataToDisplay()
{
	ERROR_STATE_t ErrRetVal = OperationStarted;
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	09 c0       	rjmp	.+18     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	07 c0       	rjmp	.+14     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
     33c:	8f ef       	ldi	r24, 0xFF	; 255
     33e:	05 c0       	rjmp	.+10     	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	03 c0       	rjmp	.+6      	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	01 c0       	rjmp	.+2      	; 0x34a <MONITOR_SendDataToDisplay+0x1ce>
     348:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret

00000350 <MONITOR_MainFunction>:
#define InitializationFlag_3  (3)
void MONITOR_MainFunction(void)
{
   uint8_t FunRetVal = OperationStarted;
   
	if(InitializationFlag == InitializationFlag_0)
     350:	80 91 d1 00 	lds	r24, 0x00D1
     354:	88 23       	and	r24, r24
     356:	49 f4       	brne	.+18     	; 0x36a <MONITOR_MainFunction+0x1a>
	{
		FunRetVal = LCD_Init();
     358:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_Init>
		if(FunRetVal == OperationSuccess)
     35c:	88 23       	and	r24, r24
     35e:	09 f0       	breq	.+2      	; 0x362 <MONITOR_MainFunction+0x12>
     360:	a9 c0       	rjmp	.+338    	; 0x4b4 <MONITOR_MainFunction+0x164>
		{
			InitializationFlag = InitializationFlag_1;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 d1 00 	sts	0x00D1, r24
     368:	08 95       	ret
		}
	}
   else if (1 == InitializationFlag)
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	e9 f4       	brne	.+58     	; 0x3a8 <MONITOR_MainFunction+0x58>
   {
      STR_ToDisplay.u8_MONITOR_String = (uint8_t*)"Distance: ";
     36e:	83 e7       	ldi	r24, 0x73	; 115
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	90 93 db 00 	sts	0x00DB, r25
     376:	80 93 da 00 	sts	0x00DA, r24
      STR_ToDisplay.u32_MONITOR_Number = NULL_PTR;
     37a:	10 92 dd 00 	sts	0x00DD, r1
     37e:	10 92 dc 00 	sts	0x00DC, r1
      STR_ToDisplay.u32_MONITOR_Xpos = 0;
     382:	e2 ed       	ldi	r30, 0xD2	; 210
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	10 82       	st	Z, r1
     388:	11 82       	std	Z+1, r1	; 0x01
     38a:	12 82       	std	Z+2, r1	; 0x02
     38c:	13 82       	std	Z+3, r1	; 0x03
      STR_ToDisplay.u32_MONITOR_Ypos = 0;
     38e:	14 82       	std	Z+4, r1	; 0x04
     390:	15 82       	std	Z+5, r1	; 0x05
     392:	16 82       	std	Z+6, r1	; 0x06
     394:	17 82       	std	Z+7, r1	; 0x07
      FunRetVal = MONITOR_SendDataToDisplay();
     396:	0e 94 be 00 	call	0x17c	; 0x17c <MONITOR_SendDataToDisplay>
      if(FunRetVal == OperationSuccess)
     39a:	88 23       	and	r24, r24
     39c:	09 f0       	breq	.+2      	; 0x3a0 <MONITOR_MainFunction+0x50>
     39e:	8a c0       	rjmp	.+276    	; 0x4b4 <MONITOR_MainFunction+0x164>
      {
         InitializationFlag = InitializationFlag_2;
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	80 93 d1 00 	sts	0x00D1, r24
     3a6:	08 95       	ret
      }
   }      
   else if (2 == InitializationFlag)
     3a8:	82 30       	cpi	r24, 0x02	; 2
     3aa:	29 f5       	brne	.+74     	; 0x3f6 <MONITOR_MainFunction+0xa6>
   {
      STR_ToDisplay.u8_MONITOR_String = (uint8_t*)"AMR_TEAM";
     3ac:	8e e7       	ldi	r24, 0x7E	; 126
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 db 00 	sts	0x00DB, r25
     3b4:	80 93 da 00 	sts	0x00DA, r24
      STR_ToDisplay.u32_MONITOR_Number = NULL_PTR;
     3b8:	10 92 dd 00 	sts	0x00DD, r1
     3bc:	10 92 dc 00 	sts	0x00DC, r1
      STR_ToDisplay.u32_MONITOR_Xpos = 4;
     3c0:	e2 ed       	ldi	r30, 0xD2	; 210
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	84 e0       	ldi	r24, 0x04	; 4
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	80 83       	st	Z, r24
     3ce:	91 83       	std	Z+1, r25	; 0x01
     3d0:	a2 83       	std	Z+2, r26	; 0x02
     3d2:	b3 83       	std	Z+3, r27	; 0x03
      STR_ToDisplay.u32_MONITOR_Ypos = 1;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	a0 e0       	ldi	r26, 0x00	; 0
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	84 83       	std	Z+4, r24	; 0x04
     3de:	95 83       	std	Z+5, r25	; 0x05
     3e0:	a6 83       	std	Z+6, r26	; 0x06
     3e2:	b7 83       	std	Z+7, r27	; 0x07
      FunRetVal = MONITOR_SendDataToDisplay();
     3e4:	0e 94 be 00 	call	0x17c	; 0x17c <MONITOR_SendDataToDisplay>
      if(FunRetVal == OperationSuccess)
     3e8:	88 23       	and	r24, r24
     3ea:	09 f0       	breq	.+2      	; 0x3ee <MONITOR_MainFunction+0x9e>
     3ec:	63 c0       	rjmp	.+198    	; 0x4b4 <MONITOR_MainFunction+0x164>
      {
         InitializationFlag = InitializationFlag_3;
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	80 93 d1 00 	sts	0x00D1, r24
     3f4:	08 95       	ret
      }
   }      
	else
	{
		SENSING_Get(&number);
     3f6:	8e ed       	ldi	r24, 0xDE	; 222
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 8c 02 	call	0x518	; 0x518 <SENSING_Get>
		u32_Number=(uint32_t)number;
     3fe:	60 91 de 00 	lds	r22, 0x00DE
     402:	70 91 df 00 	lds	r23, 0x00DF
     406:	80 91 e0 00 	lds	r24, 0x00E0
     40a:	90 91 e1 00 	lds	r25, 0x00E1
     40e:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__fixunssfsi>
     412:	dc 01       	movw	r26, r24
     414:	cb 01       	movw	r24, r22
     416:	80 93 e2 00 	sts	0x00E2, r24
     41a:	90 93 e3 00 	sts	0x00E3, r25
     41e:	a0 93 e4 00 	sts	0x00E4, r26
     422:	b0 93 e5 00 	sts	0x00E5, r27
      if(u32_PrevNumber != u32_Number)
     426:	40 91 e6 00 	lds	r20, 0x00E6
     42a:	50 91 e7 00 	lds	r21, 0x00E7
     42e:	60 91 e8 00 	lds	r22, 0x00E8
     432:	70 91 e9 00 	lds	r23, 0x00E9
     436:	84 17       	cp	r24, r20
     438:	95 07       	cpc	r25, r21
     43a:	a6 07       	cpc	r26, r22
     43c:	b7 07       	cpc	r27, r23
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <MONITOR_MainFunction+0x164>
      {
         if(u32_Number<=150)
     440:	87 39       	cpi	r24, 0x97	; 151
     442:	91 05       	cpc	r25, r1
     444:	a1 05       	cpc	r26, r1
     446:	b1 05       	cpc	r27, r1
     448:	d8 f4       	brcc	.+54     	; 0x480 <MONITOR_MainFunction+0x130>
         {
            STR_ToDisplay.u8_MONITOR_String = NULL_PTR;
     44a:	10 92 db 00 	sts	0x00DB, r1
     44e:	10 92 da 00 	sts	0x00DA, r1
            STR_ToDisplay.u32_MONITOR_Number = &u32_Number;
     452:	82 ee       	ldi	r24, 0xE2	; 226
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	90 93 dd 00 	sts	0x00DD, r25
     45a:	80 93 dc 00 	sts	0x00DC, r24
            STR_ToDisplay.u32_MONITOR_Xpos = 10;
     45e:	e2 ed       	ldi	r30, 0xD2	; 210
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	8a e0       	ldi	r24, 0x0A	; 10
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	a0 e0       	ldi	r26, 0x00	; 0
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	80 83       	st	Z, r24
     46c:	91 83       	std	Z+1, r25	; 0x01
     46e:	a2 83       	std	Z+2, r26	; 0x02
     470:	b3 83       	std	Z+3, r27	; 0x03
            STR_ToDisplay.u32_MONITOR_Ypos = 0;
     472:	14 82       	std	Z+4, r1	; 0x04
     474:	15 82       	std	Z+5, r1	; 0x05
     476:	16 82       	std	Z+6, r1	; 0x06
     478:	17 82       	std	Z+7, r1	; 0x07
            FunRetVal = MONITOR_SendDataToDisplay();
     47a:	0e 94 be 00 	call	0x17c	; 0x17c <MONITOR_SendDataToDisplay>
     47e:	08 95       	ret
            
         }
         else
         {
            STR_ToDisplay.u8_MONITOR_String = (uint8_t*)"FREE";
     480:	87 e8       	ldi	r24, 0x87	; 135
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	90 93 db 00 	sts	0x00DB, r25
     488:	80 93 da 00 	sts	0x00DA, r24
            STR_ToDisplay.u32_MONITOR_Number = NULL_PTR;
     48c:	10 92 dd 00 	sts	0x00DD, r1
     490:	10 92 dc 00 	sts	0x00DC, r1
            STR_ToDisplay.u32_MONITOR_Xpos = 10;
     494:	e2 ed       	ldi	r30, 0xD2	; 210
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	8a e0       	ldi	r24, 0x0A	; 10
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	a0 e0       	ldi	r26, 0x00	; 0
     49e:	b0 e0       	ldi	r27, 0x00	; 0
     4a0:	80 83       	st	Z, r24
     4a2:	91 83       	std	Z+1, r25	; 0x01
     4a4:	a2 83       	std	Z+2, r26	; 0x02
     4a6:	b3 83       	std	Z+3, r27	; 0x03
            STR_ToDisplay.u32_MONITOR_Ypos = 0;
     4a8:	14 82       	std	Z+4, r1	; 0x04
     4aa:	15 82       	std	Z+5, r1	; 0x05
     4ac:	16 82       	std	Z+6, r1	; 0x06
     4ae:	17 82       	std	Z+7, r1	; 0x07
            FunRetVal = MONITOR_SendDataToDisplay();
     4b0:	0e 94 be 00 	call	0x17c	; 0x17c <MONITOR_SendDataToDisplay>
     4b4:	08 95       	ret

000004b6 <MONITOR_Set>:

static STR_MONITOR_data_t * From_Outside_To_Inside = NULL_PTR;
ERROR_STATE_t MONITOR_Set(STR_MONITOR_data_t * Data_To_Display)
{
	uint8_t ErrRetVal = 0;
	From_Outside_To_Inside = Data_To_Display;
     4b6:	90 93 ec 00 	sts	0x00EC, r25
     4ba:	80 93 eb 00 	sts	0x00EB, r24
	return ErrRetVal;
}
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	08 95       	ret

000004c2 <MONITOR_Get>:
	if(From_Outside_To_Inside != NULL_PTR)
	{
		Data_From_Display = From_Outside_To_Inside;	
	}
	return ErrRetVal;
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	08 95       	ret

000004c6 <SENSING_MainFunction>:

	return u8_ErrorState;
}

void SENSING_MainFunction(void)
{
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <SENSING_MainFunction+0x6>
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <SENSING_MainFunction+0x8>
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_UsonicState=ERROR_OK;
	double64_t d64_Distance;
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag)
     4d2:	80 91 ed 00 	lds	r24, 0x00ED
     4d6:	88 23       	and	r24, r24
     4d8:	41 f4       	brne	.+16     	; 0x4ea <SENSING_MainFunction+0x24>

static ERROR_STATE_t SENSING_Init(void);
static ERROR_STATE_t SENSING_Init(void)
{
	uint8_t u8_ErrorState=ERROR_NOK;
	u8_ErrorState = USONIC_Init();
     4da:	0e 94 9a 08 	call	0x1134	; 0x1134 <USONIC_Init>
	uint8_t u8_UsonicState=ERROR_OK;
	double64_t d64_Distance;
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag)
	{
		if(ERROR_OK==SENSING_Init())
     4de:	88 23       	and	r24, r24
     4e0:	21 f4       	brne	.+8      	; 0x4ea <SENSING_MainFunction+0x24>
		{
			u8_InitFlag=INIT;
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	80 93 ed 00 	sts	0x00ED, r24
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <SENSING_MainFunction+0x2c>
		else
		{	
					
		}
	}
	if(INIT==u8_InitFlag)
     4ea:	80 91 ed 00 	lds	r24, 0x00ED
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	61 f4       	brne	.+24     	; 0x50a <SENSING_MainFunction+0x44>
	{
		u8_UsonicState = USONIC_GetDistance(&d64_Distance);
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	0e 94 c4 08 	call	0x1188	; 0x1188 <USONIC_GetDistance>
		if(ERROR_OK==u8_UsonicState)
     4fa:	88 23       	and	r24, r24
     4fc:	31 f4       	brne	.+12     	; 0x50a <SENSING_MainFunction+0x44>
		{
			SENSING_Set(d64_Distance);
     4fe:	69 81       	ldd	r22, Y+1	; 0x01
     500:	7a 81       	ldd	r23, Y+2	; 0x02
     502:	8b 81       	ldd	r24, Y+3	; 0x03
     504:	9c 81       	ldd	r25, Y+4	; 0x04
     506:	0e 94 9f 02 	call	0x53e	; 0x53e <SENSING_Set>
		{
			/*Do Nothing*/			
		}		
	}	
	return u8_UsonicState;
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <SENSING_Get>:

ERROR_STATE_t SENSING_Get(ptr_double64_t Distance)
{
	uint8_t u8_ErrorState = ERROR_OK;
	
	if(NULL_PTR==Distance)
     518:	00 97       	sbiw	r24, 0x00	; 0
     51a:	79 f0       	breq	.+30     	; 0x53a <SENSING_Get+0x22>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		*Distance = gd64_Distance;
     51c:	40 91 ee 00 	lds	r20, 0x00EE
     520:	50 91 ef 00 	lds	r21, 0x00EF
     524:	60 91 f0 00 	lds	r22, 0x00F0
     528:	70 91 f1 00 	lds	r23, 0x00F1
     52c:	fc 01       	movw	r30, r24
     52e:	40 83       	st	Z, r20
     530:	51 83       	std	Z+1, r21	; 0x01
     532:	62 83       	std	Z+2, r22	; 0x02
     534:	73 83       	std	Z+3, r23	; 0x03
		u8_ErrorState = ERROR_OK;
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	08 95       	ret
{
	uint8_t u8_ErrorState = ERROR_OK;
	
	if(NULL_PTR==Distance)
	{
		u8_ErrorState = ERROR_NOK;
     53a:	81 e0       	ldi	r24, 0x01	; 1
	{
		*Distance = gd64_Distance;
		u8_ErrorState = ERROR_OK;
	}
	return u8_ErrorState;
}
     53c:	08 95       	ret

0000053e <SENSING_Set>:

ERROR_STATE_t SENSING_Set(double64_t Distance)
{
     53e:	dc 01       	movw	r26, r24
     540:	cb 01       	movw	r24, r22
	uint8_t u8_ErrorState=ERROR_OK;
	
	gd64_Distance = Distance;
     542:	80 93 ee 00 	sts	0x00EE, r24
     546:	90 93 ef 00 	sts	0x00EF, r25
     54a:	a0 93 f0 00 	sts	0x00F0, r26
     54e:	b0 93 f1 00 	sts	0x00F1, r27
	
	return u8_ErrorState;
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	08 95       	ret

00000556 <STEERING_MainFunction>:
* @brief: This function Moves the robot to a given direction.
*/
extern void STEERING_MainFunction(void)
{
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
     556:	80 91 f2 00 	lds	r24, 0x00F2
     55a:	88 23       	and	r24, r24
     55c:	41 f4       	brne	.+16     	; 0x56e <STEERING_MainFunction+0x18>
------------------------*/
static ERROR_STATE_t STEERING_Init(void)
{
   ERROR_STATE_t MOTOR_ErrorState = ERROR_NOK;
   
   MOTOR_ErrorState = MOTOR_init();
     55e:	0e 94 ab 06 	call	0xd56	; 0xd56 <MOTOR_init>
*/
extern void STEERING_MainFunction(void)
{
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
		if(ERROR_OK==STEERING_Init()){
     562:	88 23       	and	r24, r24
     564:	21 f4       	brne	.+8      	; 0x56e <STEERING_MainFunction+0x18>
			u8_InitFlag=INIT;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	80 93 f2 00 	sts	0x00F2, r24
     56c:	05 c0       	rjmp	.+10     	; 0x578 <STEERING_MainFunction+0x22>
		}
	}
	else{
        //DO Nothing
	}
    if(INIT==u8_InitFlag){
     56e:	80 91 f2 00 	lds	r24, 0x00F2
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	09 f0       	breq	.+2      	; 0x578 <STEERING_MainFunction+0x22>
     576:	44 c0       	rjmp	.+136    	; 0x600 <STEERING_MainFunction+0xaa>
		STEERING_Get(&gu8_dir,&gu16_speed);
     578:	83 ef       	ldi	r24, 0xF3	; 243
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	64 ef       	ldi	r22, 0xF4	; 244
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	0e 94 12 03 	call	0x624	; 0x624 <STEERING_Get>
		switch(gu8_dir)
     584:	80 91 f3 00 	lds	r24, 0x00F3
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	a1 f0       	breq	.+40     	; 0x5b4 <STEERING_MainFunction+0x5e>
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	28 f0       	brcs	.+10     	; 0x59a <STEERING_MainFunction+0x44>
     590:	82 30       	cpi	r24, 0x02	; 2
     592:	e9 f0       	breq	.+58     	; 0x5ce <STEERING_MainFunction+0x78>
     594:	83 30       	cpi	r24, 0x03	; 3
     596:	a1 f5       	brne	.+104    	; 0x600 <STEERING_MainFunction+0xaa>
     598:	27 c0       	rjmp	.+78     	; 0x5e8 <STEERING_MainFunction+0x92>
		{
		  case STEERING_FORWARD:
			MOTOR_start(MOTOR1, gu16_speed, MOTOR_FORWARD);
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	60 91 f4 00 	lds	r22, 0x00F4
     5a0:	41 e0       	ldi	r20, 0x01	; 1
     5a2:	0e 94 de 06 	call	0xdbc	; 0xdbc <MOTOR_start>
            MOTOR_start(MOTOR2, gu16_speed, MOTOR_FORWARD);
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	60 91 f4 00 	lds	r22, 0x00F4
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	0e 94 de 06 	call	0xdbc	; 0xdbc <MOTOR_start>
			 break;
     5b2:	08 95       	ret
		  case STEERING_BACKWARD:
			MOTOR_start(MOTOR1, gu16_speed, MOTOR_BACKWARD);
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	60 91 f4 00 	lds	r22, 0x00F4
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	0e 94 de 06 	call	0xdbc	; 0xdbc <MOTOR_start>
            MOTOR_start(MOTOR2, gu16_speed, MOTOR_BACKWARD);		 
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	60 91 f4 00 	lds	r22, 0x00F4
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	0e 94 de 06 	call	0xdbc	; 0xdbc <MOTOR_start>
			 break;
     5cc:	08 95       	ret
		  case STEERING_RIGHT:
			MOTOR_start(MOTOR1, gu16_speed, MOTOR_BACKWARD);
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	60 91 f4 00 	lds	r22, 0x00F4
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	0e 94 de 06 	call	0xdbc	; 0xdbc <MOTOR_start>
			MOTOR_start(MOTOR2, gu16_speed, MOTOR_FORWARD);	 
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	60 91 f4 00 	lds	r22, 0x00F4
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	0e 94 de 06 	call	0xdbc	; 0xdbc <MOTOR_start>
			 break;
     5e6:	08 95       	ret
		  case STEERING_LEFT:
			 MOTOR_start(MOTOR1, gu16_speed, MOTOR_FORWARD);
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	60 91 f4 00 	lds	r22, 0x00F4
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	0e 94 de 06 	call	0xdbc	; 0xdbc <MOTOR_start>
			 MOTOR_start(MOTOR2, gu16_speed, MOTOR_BACKWARD);
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	60 91 f4 00 	lds	r22, 0x00F4
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	0e 94 de 06 	call	0xdbc	; 0xdbc <MOTOR_start>
     600:	08 95       	ret

00000602 <STEERING_Set>:
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Set(uint8_t  Dir, uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF INVALID DIRECTION*/
	if(Dir >=INVALID_STEERING){
     602:	84 30       	cpi	r24, 0x04	; 4
     604:	58 f4       	brcc	.+22     	; 0x61c <STEERING_Set+0x1a>
		STEERING_ErrorState = ERROR_NOK;
	}
	/*CHECK IF INVLAID SPEED*/
	else if(Speed > STEERING_MAX_SPEED){
     606:	65 36       	cpi	r22, 0x65	; 101
     608:	71 05       	cpc	r23, r1
     60a:	50 f4       	brcc	.+20     	; 0x620 <STEERING_Set+0x1e>
		STEERING_ErrorState = ERROR_NOK;
	}
	else{
		/*SET THE SPEED*/
		gstr_Steering_State.u16_steering_Speed=Speed;
     60c:	70 93 f7 00 	sts	0x00F7, r23
     610:	60 93 f6 00 	sts	0x00F6, r22
		/*SET THE DIRECTION*/
		gstr_Steering_State.u8_steering_Dir=Dir;
     614:	80 93 f8 00 	sts	0x00F8, r24
* @param [in]  Direction -  Direction of Car to move.
* @param [in]  Speed -  Speed of Car to move.
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Set(uint8_t  Dir, uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	08 95       	ret
	/*CHECK IF INVALID DIRECTION*/
	if(Dir >=INVALID_STEERING){
		STEERING_ErrorState = ERROR_NOK;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	08 95       	ret
	}
	/*CHECK IF INVLAID SPEED*/
	else if(Speed > STEERING_MAX_SPEED){
		STEERING_ErrorState = ERROR_NOK;
     620:	81 e0       	ldi	r24, 0x01	; 1
		gstr_Steering_State.u16_steering_Speed=Speed;
		/*SET THE DIRECTION*/
		gstr_Steering_State.u8_steering_Dir=Dir;
	}
	return STEERING_ErrorState;
}
     622:	08 95       	ret

00000624 <STEERING_Get>:
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Get(ptr_uint8_t  Dir, ptr_uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
	/*CHECK IF NULL_PTR*/
	if((NULL_PTR==Dir)||(NULL_PTR==Speed))
     624:	00 97       	sbiw	r24, 0x00	; 0
     626:	81 f0       	breq	.+32     	; 0x648 <STEERING_Get+0x24>
     628:	61 15       	cp	r22, r1
     62a:	71 05       	cpc	r23, r1
     62c:	79 f0       	breq	.+30     	; 0x64c <STEERING_Get+0x28>
		STEERING_ErrorState=ERROR_NOK;
	}
	else
    {
		/*GET THE SPEED*/
		*(Speed)=gstr_Steering_State.u16_steering_Speed;
     62e:	20 91 f6 00 	lds	r18, 0x00F6
     632:	30 91 f7 00 	lds	r19, 0x00F7
     636:	fb 01       	movw	r30, r22
     638:	31 83       	std	Z+1, r19	; 0x01
     63a:	20 83       	st	Z, r18
		/*GET THE DIRECTION*/
		*(Dir)=gstr_Steering_State.u8_steering_Dir;
     63c:	20 91 f8 00 	lds	r18, 0x00F8
     640:	fc 01       	movw	r30, r24
     642:	20 83       	st	Z, r18
* @param [out]  Direction - Direction of Car.
* @param [out]  Speed -  Speed of Car.
* @return function error state.
*/
extern ERROR_STATE_t  STEERING_Get(ptr_uint8_t  Dir, ptr_uint16_t Speed){
	ERROR_STATE_t STEERING_ErrorState = ERROR_OK;
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	08 95       	ret
	/*CHECK IF NULL_PTR*/
	if((NULL_PTR==Dir)||(NULL_PTR==Speed))
    {
		STEERING_ErrorState=ERROR_NOK;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	08 95       	ret
     64c:	81 e0       	ldi	r24, 0x01	; 1
		*(Speed)=gstr_Steering_State.u16_steering_Speed;
		/*GET THE DIRECTION*/
		*(Dir)=gstr_Steering_State.u8_steering_Dir;
	}
	return STEERING_ErrorState;
     64e:	08 95       	ret

00000650 <LCD_SendCommand>:

/*Externed global variables*/
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch(State)
     65a:	80 91 8d 00 	lds	r24, 0x008D
     65e:	83 30       	cpi	r24, 0x03	; 3
     660:	09 f4       	brne	.+2      	; 0x664 <LCD_SendCommand+0x14>
     662:	ce c0       	rjmp	.+412    	; 0x800 <LCD_SendCommand+0x1b0>
     664:	84 30       	cpi	r24, 0x04	; 4
     666:	38 f4       	brcc	.+14     	; 0x676 <LCD_SendCommand+0x26>
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	09 f4       	brne	.+2      	; 0x66e <LCD_SendCommand+0x1e>
     66c:	60 c0       	rjmp	.+192    	; 0x72e <LCD_SendCommand+0xde>
     66e:	82 30       	cpi	r24, 0x02	; 2
     670:	09 f0       	breq	.+2      	; 0x674 <LCD_SendCommand+0x24>
     672:	01 c1       	rjmp	.+514    	; 0x876 <__stack+0x17>
     674:	7f c0       	rjmp	.+254    	; 0x774 <LCD_SendCommand+0x124>
     676:	84 30       	cpi	r24, 0x04	; 4
     678:	09 f4       	brne	.+2      	; 0x67c <LCD_SendCommand+0x2c>
     67a:	e4 c0       	rjmp	.+456    	; 0x844 <LCD_SendCommand+0x1f4>
     67c:	8f 3f       	cpi	r24, 0xFF	; 255
     67e:	09 f0       	breq	.+2      	; 0x682 <LCD_SendCommand+0x32>
     680:	fa c0       	rjmp	.+500    	; 0x876 <__stack+0x17>
	{
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     682:	d0 91 90 00 	lds	r29, 0x0090
     686:	8d 2f       	mov	r24, r29
     688:	60 91 91 00 	lds	r22, 0x0091
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     692:	8d 2f       	mov	r24, r29
     694:	60 91 92 00 	lds	r22, 0x0092
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>

		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(CMD, BIT_4));
     69e:	0c 2f       	mov	r16, r28
     6a0:	10 e0       	ldi	r17, 0x00	; 0
     6a2:	a8 01       	movw	r20, r16
     6a4:	40 71       	andi	r20, 0x10	; 16
     6a6:	50 70       	andi	r21, 0x00	; 0
     6a8:	55 95       	asr	r21
     6aa:	47 95       	ror	r20
     6ac:	55 95       	asr	r21
     6ae:	47 95       	ror	r20
     6b0:	55 95       	asr	r21
     6b2:	47 95       	ror	r20
     6b4:	55 95       	asr	r21
     6b6:	47 95       	ror	r20
     6b8:	8d 2f       	mov	r24, r29
     6ba:	60 91 97 00 	lds	r22, 0x0097
     6be:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(CMD, BIT_5));
     6c2:	a8 01       	movw	r20, r16
     6c4:	40 72       	andi	r20, 0x20	; 32
     6c6:	50 70       	andi	r21, 0x00	; 0
     6c8:	55 95       	asr	r21
     6ca:	47 95       	ror	r20
     6cc:	55 95       	asr	r21
     6ce:	47 95       	ror	r20
     6d0:	55 95       	asr	r21
     6d2:	47 95       	ror	r20
     6d4:	55 95       	asr	r21
     6d6:	47 95       	ror	r20
     6d8:	55 95       	asr	r21
     6da:	47 95       	ror	r20
     6dc:	8d 2f       	mov	r24, r29
     6de:	60 91 96 00 	lds	r22, 0x0096
     6e2:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(CMD, BIT_6));
     6e6:	00 74       	andi	r16, 0x40	; 64
     6e8:	10 70       	andi	r17, 0x00	; 0
     6ea:	a8 01       	movw	r20, r16
     6ec:	04 2e       	mov	r0, r20
     6ee:	45 2f       	mov	r20, r21
     6f0:	00 0c       	add	r0, r0
     6f2:	44 1f       	adc	r20, r20
     6f4:	55 0b       	sbc	r21, r21
     6f6:	00 0c       	add	r0, r0
     6f8:	44 1f       	adc	r20, r20
     6fa:	55 1f       	adc	r21, r21
     6fc:	8d 2f       	mov	r24, r29
     6fe:	60 91 95 00 	lds	r22, 0x0095
     702:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(CMD, BIT_7));
     706:	4c 2f       	mov	r20, r28
     708:	44 1f       	adc	r20, r20
     70a:	44 27       	eor	r20, r20
     70c:	44 1f       	adc	r20, r20
     70e:	8d 2f       	mov	r24, r29
     710:	60 91 94 00 	lds	r22, 0x0094
     714:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>


		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     718:	8d 2f       	mov	r24, r29
     71a:	60 91 93 00 	lds	r22, 0x0093
     71e:	41 e0       	ldi	r20, 0x01	; 1
     720:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	80 93 8d 00 	sts	0x008D, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     72a:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     72c:	ab c0       	rjmp	.+342    	; 0x884 <__stack+0x25>
	case Sending_First_Nibble:
		/*start timer delay in background*/
		if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     72e:	c8 e2       	ldi	r28, 0x28	; 40
     730:	d3 e0       	ldi	r29, 0x03	; 3
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	be 01       	movw	r22, r28
     736:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM_DelayStatus>
     73a:	8b 3f       	cpi	r24, 0xFB	; 251
     73c:	09 f0       	breq	.+2      	; 0x740 <LCD_SendCommand+0xf0>
     73e:	9d c0       	rjmp	.+314    	; 0x87a <__stack+0x1b>
		{
   		TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	41 e0       	ldi	r20, 0x01	; 1
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	9e 01       	movw	r18, r28
     74c:	0e 94 ac 10 	call	0x2158	; 0x2158 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	be 01       	movw	r22, r28
     754:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM_DelayStatus>
     758:	88 23       	and	r24, r24
     75a:	d1 f7       	brne	.-12     	; 0x750 <LCD_SendCommand+0x100>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     75c:	80 91 90 00 	lds	r24, 0x0090
     760:	60 91 93 00 	lds	r22, 0x0093
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	80 93 8d 00 	sts	0x008D, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     770:	8f ef       	ldi	r24, 0xFF	; 255
     772:	88 c0       	rjmp	.+272    	; 0x884 <__stack+0x25>
         State = First_Nibble_Sent;
		}
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs,PIN_LOW);
     774:	d0 91 90 00 	lds	r29, 0x0090
     778:	8d 2f       	mov	r24, r29
     77a:	60 91 91 00 	lds	r22, 0x0091
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw,PIN_LOW);
     784:	8d 2f       	mov	r24, r29
     786:	60 91 92 00 	lds	r22, 0x0092
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>

		/*copying lower nibble of the command to the pins*/

		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(CMD,BIT_0));
     790:	4c 2f       	mov	r20, r28
     792:	41 70       	andi	r20, 0x01	; 1
     794:	8d 2f       	mov	r24, r29
     796:	60 91 97 00 	lds	r22, 0x0097
     79a:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(CMD,BIT_1));
     79e:	0c 2f       	mov	r16, r28
     7a0:	10 e0       	ldi	r17, 0x00	; 0
     7a2:	a8 01       	movw	r20, r16
     7a4:	42 70       	andi	r20, 0x02	; 2
     7a6:	50 70       	andi	r21, 0x00	; 0
     7a8:	55 95       	asr	r21
     7aa:	47 95       	ror	r20
     7ac:	8d 2f       	mov	r24, r29
     7ae:	60 91 96 00 	lds	r22, 0x0096
     7b2:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(CMD,BIT_2));
     7b6:	a8 01       	movw	r20, r16
     7b8:	44 70       	andi	r20, 0x04	; 4
     7ba:	50 70       	andi	r21, 0x00	; 0
     7bc:	55 95       	asr	r21
     7be:	47 95       	ror	r20
     7c0:	55 95       	asr	r21
     7c2:	47 95       	ror	r20
     7c4:	8d 2f       	mov	r24, r29
     7c6:	60 91 95 00 	lds	r22, 0x0095
     7ca:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
     7ce:	08 70       	andi	r16, 0x08	; 8
     7d0:	10 70       	andi	r17, 0x00	; 0
     7d2:	a8 01       	movw	r20, r16
     7d4:	55 95       	asr	r21
     7d6:	47 95       	ror	r20
     7d8:	55 95       	asr	r21
     7da:	47 95       	ror	r20
     7dc:	55 95       	asr	r21
     7de:	47 95       	ror	r20
     7e0:	8d 2f       	mov	r24, r29
     7e2:	60 91 94 00 	lds	r22, 0x0094
     7e6:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
     7ea:	8d 2f       	mov	r24, r29
     7ec:	60 91 93 00 	lds	r22, 0x0093
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	80 93 8d 00 	sts	0x008D, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,BIT_3));
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     7fe:	42 c0       	rjmp	.+132    	; 0x884 <__stack+0x25>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     800:	c8 e2       	ldi	r28, 0x28	; 40
     802:	d3 e0       	ldi	r29, 0x03	; 3
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	be 01       	movw	r22, r28
     808:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM_DelayStatus>
     80c:	8b 3f       	cpi	r24, 0xFB	; 251
     80e:	b9 f5       	brne	.+110    	; 0x87e <__stack+0x1f>
      {
         TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	41 e0       	ldi	r20, 0x01	; 1
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	9e 01       	movw	r18, r28
     81c:	0e 94 ac 10 	call	0x2158	; 0x2158 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	be 01       	movw	r22, r28
     824:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM_DelayStatus>
     828:	88 23       	and	r24, r24
     82a:	d1 f7       	brne	.-12     	; 0x820 <LCD_SendCommand+0x1d0>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_LOW);
     82c:	80 91 90 00 	lds	r24, 0x0090
     830:	60 91 93 00 	lds	r22, 0x0093
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
         /*reset the function's state*/
         State = Second_Nibble_Sent;
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	80 93 8d 00 	sts	0x008D, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	20 c0       	rjmp	.+64     	; 0x884 <__stack+0x25>
         State = Second_Nibble_Sent;
      }
		break;
	case Second_Nibble_Sent:
		/*start timer delay in background*/
      TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
     844:	c8 e2       	ldi	r28, 0x28	; 40
     846:	d3 e0       	ldi	r29, 0x03	; 3
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	be 01       	movw	r22, r28
     84c:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM_DelayStatus>
      if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     850:	8b 3f       	cpi	r24, 0xFB	; 251
     852:	51 f4       	brne	.+20     	; 0x868 <__stack+0x9>
      {
         TIM_DelayMs(TIMER_2,2, LCD_SendCommand);
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	42 e0       	ldi	r20, 0x02	; 2
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	9e 01       	movw	r18, r28
     860:	0e 94 34 11 	call	0x2268	; 0x2268 <TIM_DelayMs>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	0e c0       	rjmp	.+28     	; 0x884 <__stack+0x25>
      TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
      if(TIMER_E_DELAY_EMPTY == TimerRetVal)
      {
         TIM_DelayMs(TIMER_2,2, LCD_SendCommand);
      }         
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     868:	88 23       	and	r24, r24
     86a:	59 f4       	brne	.+22     	; 0x882 <__stack+0x23>
		{
			/*reset the function's state*/
			State = OperationStarted;
     86c:	8f ef       	ldi	r24, 0xFF	; 255
     86e:	80 93 8d 00 	sts	0x008D, r24
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	07 c0       	rjmp	.+14     	; 0x884 <__stack+0x25>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	05 c0       	rjmp	.+10     	; 0x884 <__stack+0x25>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	03 c0       	rjmp	.+6      	; 0x884 <__stack+0x25>
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	01 c0       	rjmp	.+2      	; 0x884 <__stack+0x25>
     882:	8f ef       	ldi	r24, 0xFF	; 255
	default:
		ErrRetVal = OperationFail;
	}
	/*return from function*/
return ErrRetVal;
}
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	08 95       	ret

0000088e <LCD_SendData>:
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch (State) {
     898:	80 91 8e 00 	lds	r24, 0x008E
     89c:	82 30       	cpi	r24, 0x02	; 2
     89e:	09 f4       	brne	.+2      	; 0x8a2 <LCD_SendData+0x14>
     8a0:	85 c0       	rjmp	.+266    	; 0x9ac <LCD_SendData+0x11e>
     8a2:	83 30       	cpi	r24, 0x03	; 3
     8a4:	20 f4       	brcc	.+8      	; 0x8ae <LCD_SendData+0x20>
     8a6:	81 30       	cpi	r24, 0x01	; 1
     8a8:	09 f0       	breq	.+2      	; 0x8ac <LCD_SendData+0x1e>
     8aa:	e8 c0       	rjmp	.+464    	; 0xa7c <LCD_SendData+0x1ee>
     8ac:	5c c0       	rjmp	.+184    	; 0x966 <LCD_SendData+0xd8>
     8ae:	83 30       	cpi	r24, 0x03	; 3
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <LCD_SendData+0x26>
     8b2:	c2 c0       	rjmp	.+388    	; 0xa38 <LCD_SendData+0x1aa>
     8b4:	8f 3f       	cpi	r24, 0xFF	; 255
     8b6:	09 f0       	breq	.+2      	; 0x8ba <LCD_SendData+0x2c>
     8b8:	e1 c0       	rjmp	.+450    	; 0xa7c <LCD_SendData+0x1ee>
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     8ba:	d0 91 90 00 	lds	r29, 0x0090
     8be:	8d 2f       	mov	r24, r29
     8c0:	60 91 91 00 	lds	r22, 0x0091
     8c4:	41 e0       	ldi	r20, 0x01	; 1
     8c6:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     8ca:	8d 2f       	mov	r24, r29
     8cc:	60 91 92 00 	lds	r22, 0x0092
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_7));
     8d6:	4c 2f       	mov	r20, r28
     8d8:	44 1f       	adc	r20, r20
     8da:	44 27       	eor	r20, r20
     8dc:	44 1f       	adc	r20, r20
     8de:	8d 2f       	mov	r24, r29
     8e0:	60 91 94 00 	lds	r22, 0x0094
     8e4:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_6));
     8e8:	0c 2f       	mov	r16, r28
     8ea:	10 e0       	ldi	r17, 0x00	; 0
     8ec:	a8 01       	movw	r20, r16
     8ee:	40 74       	andi	r20, 0x40	; 64
     8f0:	50 70       	andi	r21, 0x00	; 0
     8f2:	04 2e       	mov	r0, r20
     8f4:	45 2f       	mov	r20, r21
     8f6:	00 0c       	add	r0, r0
     8f8:	44 1f       	adc	r20, r20
     8fa:	55 0b       	sbc	r21, r21
     8fc:	00 0c       	add	r0, r0
     8fe:	44 1f       	adc	r20, r20
     900:	55 1f       	adc	r21, r21
     902:	8d 2f       	mov	r24, r29
     904:	60 91 95 00 	lds	r22, 0x0095
     908:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_5));
     90c:	a8 01       	movw	r20, r16
     90e:	40 72       	andi	r20, 0x20	; 32
     910:	50 70       	andi	r21, 0x00	; 0
     912:	55 95       	asr	r21
     914:	47 95       	ror	r20
     916:	55 95       	asr	r21
     918:	47 95       	ror	r20
     91a:	55 95       	asr	r21
     91c:	47 95       	ror	r20
     91e:	55 95       	asr	r21
     920:	47 95       	ror	r20
     922:	55 95       	asr	r21
     924:	47 95       	ror	r20
     926:	8d 2f       	mov	r24, r29
     928:	60 91 96 00 	lds	r22, 0x0096
     92c:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_4));
     930:	00 71       	andi	r16, 0x10	; 16
     932:	10 70       	andi	r17, 0x00	; 0
     934:	a8 01       	movw	r20, r16
     936:	55 95       	asr	r21
     938:	47 95       	ror	r20
     93a:	55 95       	asr	r21
     93c:	47 95       	ror	r20
     93e:	55 95       	asr	r21
     940:	47 95       	ror	r20
     942:	55 95       	asr	r21
     944:	47 95       	ror	r20
     946:	8d 2f       	mov	r24, r29
     948:	60 91 97 00 	lds	r22, 0x0097
     94c:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     950:	8d 2f       	mov	r24, r29
     952:	60 91 93 00 	lds	r22, 0x0093
     956:	41 e0       	ldi	r20, 0x01	; 1
     958:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	80 93 8e 00 	sts	0x008E, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     962:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     964:	90 c0       	rjmp	.+288    	; 0xa86 <LCD_SendData+0x1f8>
	case Sending_First_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     966:	c8 e2       	ldi	r28, 0x28	; 40
     968:	d3 e0       	ldi	r29, 0x03	; 3
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	be 01       	movw	r22, r28
     96e:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM_DelayStatus>
     972:	8b 3f       	cpi	r24, 0xFB	; 251
     974:	09 f0       	breq	.+2      	; 0x978 <LCD_SendData+0xea>
     976:	84 c0       	rjmp	.+264    	; 0xa80 <LCD_SendData+0x1f2>
      {
         TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	41 e0       	ldi	r20, 0x01	; 1
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	9e 01       	movw	r18, r28
     984:	0e 94 ac 10 	call	0x2158	; 0x2158 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	be 01       	movw	r22, r28
     98c:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM_DelayStatus>
     990:	88 23       	and	r24, r24
     992:	d1 f7       	brne	.-12     	; 0x988 <LCD_SendData+0xfa>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     994:	80 91 90 00 	lds	r24, 0x0090
     998:	60 91 93 00 	lds	r22, 0x0093
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
         /*update the function's state*/
         State = First_Nibble_Sent;
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	80 93 8e 00 	sts	0x008E, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	6d c0       	rjmp	.+218    	; 0xa86 <LCD_SendData+0x1f8>
         State = First_Nibble_Sent;
      }
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     9ac:	d0 91 90 00 	lds	r29, 0x0090
     9b0:	8d 2f       	mov	r24, r29
     9b2:	60 91 91 00 	lds	r22, 0x0091
     9b6:	41 e0       	ldi	r20, 0x01	; 1
     9b8:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     9bc:	8d 2f       	mov	r24, r29
     9be:	60 91 92 00 	lds	r22, 0x0092
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, BIT_3));
     9c8:	0c 2f       	mov	r16, r28
     9ca:	10 e0       	ldi	r17, 0x00	; 0
     9cc:	a8 01       	movw	r20, r16
     9ce:	48 70       	andi	r20, 0x08	; 8
     9d0:	50 70       	andi	r21, 0x00	; 0
     9d2:	55 95       	asr	r21
     9d4:	47 95       	ror	r20
     9d6:	55 95       	asr	r21
     9d8:	47 95       	ror	r20
     9da:	55 95       	asr	r21
     9dc:	47 95       	ror	r20
     9de:	8d 2f       	mov	r24, r29
     9e0:	60 91 94 00 	lds	r22, 0x0094
     9e4:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, BIT_2));
     9e8:	a8 01       	movw	r20, r16
     9ea:	44 70       	andi	r20, 0x04	; 4
     9ec:	50 70       	andi	r21, 0x00	; 0
     9ee:	55 95       	asr	r21
     9f0:	47 95       	ror	r20
     9f2:	55 95       	asr	r21
     9f4:	47 95       	ror	r20
     9f6:	8d 2f       	mov	r24, r29
     9f8:	60 91 95 00 	lds	r22, 0x0095
     9fc:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, BIT_1));
     a00:	02 70       	andi	r16, 0x02	; 2
     a02:	10 70       	andi	r17, 0x00	; 0
     a04:	a8 01       	movw	r20, r16
     a06:	55 95       	asr	r21
     a08:	47 95       	ror	r20
     a0a:	8d 2f       	mov	r24, r29
     a0c:	60 91 96 00 	lds	r22, 0x0096
     a10:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, BIT_0));
     a14:	4c 2f       	mov	r20, r28
     a16:	41 70       	andi	r20, 0x01	; 1
     a18:	8d 2f       	mov	r24, r29
     a1a:	60 91 97 00 	lds	r22, 0x0097
     a1e:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     a22:	8d 2f       	mov	r24, r29
     a24:	60 91 93 00 	lds	r22, 0x0093
     a28:	41 e0       	ldi	r20, 0x01	; 1
     a2a:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	80 93 8e 00 	sts	0x008E, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a34:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     a36:	27 c0       	rjmp	.+78     	; 0xa86 <LCD_SendData+0x1f8>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
      if(TIMER_E_DELAY_EMPTY == TIM_DelayStatus(TIMER_2, LCD_SendCommand))
     a38:	c8 e2       	ldi	r28, 0x28	; 40
     a3a:	d3 e0       	ldi	r29, 0x03	; 3
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	be 01       	movw	r22, r28
     a40:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM_DelayStatus>
     a44:	8b 3f       	cpi	r24, 0xFB	; 251
     a46:	f1 f4       	brne	.+60     	; 0xa84 <LCD_SendData+0x1f6>
      {
         TIM_DelayUs(TIMER_2, 1, LCD_SendCommand);
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	41 e0       	ldi	r20, 0x01	; 1
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	9e 01       	movw	r18, r28
     a54:	0e 94 ac 10 	call	0x2158	; 0x2158 <TIM_DelayUs>
         while(ERROR_OK != TIM_DelayStatus(TIMER_2, LCD_SendCommand));
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	be 01       	movw	r22, r28
     a5c:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM_DelayStatus>
     a60:	88 23       	and	r24, r24
     a62:	d1 f7       	brne	.-12     	; 0xa58 <LCD_SendData+0x1ca>
         /*if timer delay function finished correctly pull enable pin low*/
         DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     a64:	80 91 90 00 	lds	r24, 0x0090
     a68:	60 91 93 00 	lds	r22, 0x0093
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
         /*reset the function's state*/
         State = OperationStarted;
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	80 93 8e 00 	sts	0x008E, r24
         /*process finished successfully*/
         ErrRetVal = OperationSuccess;
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	05 c0       	rjmp	.+10     	; 0xa86 <LCD_SendData+0x1f8>
      }
		break;
	default:
		ErrRetVal = OperationFail;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	03 c0       	rjmp	.+6      	; 0xa86 <LCD_SendData+0x1f8>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <LCD_SendData+0x1f8>
     a84:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
	}
	/*return from function*/
	return ErrRetVal;

}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	08 95       	ret

00000a90 <LCD_Init>:
ERROR_STATE_t LCD_Init()
{
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	uint8_t LCD_SendCommandRetVal = OperationStarted;
	switch (State) {
     aa0:	80 91 8f 00 	lds	r24, 0x008F
     aa4:	8b 30       	cpi	r24, 0x0B	; 11
     aa6:	09 f4       	brne	.+2      	; 0xaaa <LCD_Init+0x1a>
     aa8:	cb c0       	rjmp	.+406    	; 0xc40 <LCD_Init+0x1b0>
     aaa:	8c 30       	cpi	r24, 0x0C	; 12
     aac:	98 f4       	brcc	.+38     	; 0xad4 <LCD_Init+0x44>
     aae:	88 30       	cpi	r24, 0x08	; 8
     ab0:	09 f4       	brne	.+2      	; 0xab4 <LCD_Init+0x24>
     ab2:	a5 c0       	rjmp	.+330    	; 0xbfe <LCD_Init+0x16e>
     ab4:	89 30       	cpi	r24, 0x09	; 9
     ab6:	38 f4       	brcc	.+14     	; 0xac6 <LCD_Init+0x36>
     ab8:	85 30       	cpi	r24, 0x05	; 5
     aba:	09 f4       	brne	.+2      	; 0xabe <LCD_Init+0x2e>
     abc:	7b c0       	rjmp	.+246    	; 0xbb4 <LCD_Init+0x124>
     abe:	86 30       	cpi	r24, 0x06	; 6
     ac0:	09 f0       	breq	.+2      	; 0xac4 <LCD_Init+0x34>
     ac2:	f0 c0       	rjmp	.+480    	; 0xca4 <LCD_Init+0x214>
     ac4:	91 c0       	rjmp	.+290    	; 0xbe8 <LCD_Init+0x158>
     ac6:	89 30       	cpi	r24, 0x09	; 9
     ac8:	09 f4       	brne	.+2      	; 0xacc <LCD_Init+0x3c>
     aca:	a4 c0       	rjmp	.+328    	; 0xc14 <LCD_Init+0x184>
     acc:	8a 30       	cpi	r24, 0x0A	; 10
     ace:	09 f0       	breq	.+2      	; 0xad2 <LCD_Init+0x42>
     ad0:	e9 c0       	rjmp	.+466    	; 0xca4 <LCD_Init+0x214>
     ad2:	ab c0       	rjmp	.+342    	; 0xc2a <LCD_Init+0x19a>
     ad4:	8e 30       	cpi	r24, 0x0E	; 14
     ad6:	09 f4       	brne	.+2      	; 0xada <LCD_Init+0x4a>
     ad8:	d1 c0       	rjmp	.+418    	; 0xc7c <LCD_Init+0x1ec>
     ada:	8f 30       	cpi	r24, 0x0F	; 15
     adc:	38 f4       	brcc	.+14     	; 0xaec <LCD_Init+0x5c>
     ade:	8c 30       	cpi	r24, 0x0C	; 12
     ae0:	09 f4       	brne	.+2      	; 0xae4 <LCD_Init+0x54>
     ae2:	b8 c0       	rjmp	.+368    	; 0xc54 <LCD_Init+0x1c4>
     ae4:	8d 30       	cpi	r24, 0x0D	; 13
     ae6:	09 f0       	breq	.+2      	; 0xaea <LCD_Init+0x5a>
     ae8:	dd c0       	rjmp	.+442    	; 0xca4 <LCD_Init+0x214>
     aea:	be c0       	rjmp	.+380    	; 0xc68 <LCD_Init+0x1d8>
     aec:	8f 30       	cpi	r24, 0x0F	; 15
     aee:	09 f4       	brne	.+2      	; 0xaf2 <LCD_Init+0x62>
     af0:	cf c0       	rjmp	.+414    	; 0xc90 <LCD_Init+0x200>
     af2:	8f 3f       	cpi	r24, 0xFF	; 255
     af4:	09 f0       	breq	.+2      	; 0xaf8 <LCD_Init+0x68>
     af6:	d6 c0       	rjmp	.+428    	; 0xca4 <LCD_Init+0x214>
	case OperationStarted:
		/*Dio Initialize for the*/
		TIM_Init(TIMER_2);
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TIM_Init>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     afe:	c0 91 90 00 	lds	r28, 0x0090
     b02:	e0 90 94 00 	lds	r14, 0x0094
     b06:	8c 2f       	mov	r24, r28
     b08:	6e 2d       	mov	r22, r14
     b0a:	41 e0       	ldi	r20, 0x01	; 1
     b0c:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     b10:	f0 90 95 00 	lds	r15, 0x0095
     b14:	8c 2f       	mov	r24, r28
     b16:	6f 2d       	mov	r22, r15
     b18:	41 e0       	ldi	r20, 0x01	; 1
     b1a:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     b1e:	00 91 96 00 	lds	r16, 0x0096
     b22:	8c 2f       	mov	r24, r28
     b24:	60 2f       	mov	r22, r16
     b26:	41 e0       	ldi	r20, 0x01	; 1
     b28:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     b2c:	10 91 97 00 	lds	r17, 0x0097
     b30:	8c 2f       	mov	r24, r28
     b32:	61 2f       	mov	r22, r17
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     b3a:	d0 91 91 00 	lds	r29, 0x0091
     b3e:	8c 2f       	mov	r24, r28
     b40:	6d 2f       	mov	r22, r29
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     b48:	d0 90 92 00 	lds	r13, 0x0092
     b4c:	8c 2f       	mov	r24, r28
     b4e:	6d 2d       	mov	r22, r13
     b50:	41 e0       	ldi	r20, 0x01	; 1
     b52:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     b56:	c0 90 93 00 	lds	r12, 0x0093
     b5a:	8c 2f       	mov	r24, r28
     b5c:	6c 2d       	mov	r22, r12
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     b64:	8c 2f       	mov	r24, r28
     b66:	6e 2d       	mov	r22, r14
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     b6e:	8c 2f       	mov	r24, r28
     b70:	6f 2d       	mov	r22, r15
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     b78:	8c 2f       	mov	r24, r28
     b7a:	60 2f       	mov	r22, r16
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     b82:	8c 2f       	mov	r24, r28
     b84:	61 2f       	mov	r22, r17
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     b8c:	8c 2f       	mov	r24, r28
     b8e:	6d 2f       	mov	r22, r29
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     b96:	8c 2f       	mov	r24, r28
     b98:	6d 2d       	mov	r22, r13
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     ba0:	8c 2f       	mov	r24, r28
     ba2:	6c 2d       	mov	r22, r12
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
		/*set status of the function*/
		State = LCD_Pin_Initializing;
     baa:	85 e0       	ldi	r24, 0x05	; 5
     bac:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
		/*set status of the function*/
		State = LCD_Pin_Initializing;
		break;
     bb2:	8d c0       	rjmp	.+282    	; 0xcce <LCD_Init+0x23e>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
     bb4:	c8 e2       	ldi	r28, 0x28	; 40
     bb6:	d3 e0       	ldi	r29, 0x03	; 3
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	be 01       	movw	r22, r28
     bbc:	0e 94 cf 11 	call	0x239e	; 0x239e <TIM_DelayStatus>
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
     bc0:	8b 3f       	cpi	r24, 0xFB	; 251
     bc2:	51 f4       	brne	.+20     	; 0xbd8 <LCD_Init+0x148>
		{
   		TIM_DelayMs(TIMER_2,15, LCD_SendCommand);
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	4f e0       	ldi	r20, 0x0F	; 15
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	9e 01       	movw	r18, r28
     bd0:	0e 94 34 11 	call	0x2268	; 0x2268 <TIM_DelayMs>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	7b c0       	rjmp	.+246    	; 0xcce <LCD_Init+0x23e>
		TimerRetVal = TIM_DelayStatus(TIMER_2, LCD_SendCommand);
		if(TIMER_E_DELAY_EMPTY == TimerRetVal)
		{
   		TIM_DelayMs(TIMER_2,15, LCD_SendCommand);
		}
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     bd8:	88 23       	and	r24, r24
     bda:	09 f0       	breq	.+2      	; 0xbde <LCD_Init+0x14e>
     bdc:	65 c0       	rjmp	.+202    	; 0xca8 <LCD_Init+0x218>
		{
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
     bde:	86 e0       	ldi	r24, 0x06	; 6
     be0:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	73 c0       	rjmp	.+230    	; 0xcce <LCD_Init+0x23e>
   		/*if timer delay function finished correctly Start the initialization sequence*/
   		State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
	case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     be8:	83 e0       	ldi	r24, 0x03	; 3
     bea:	0e 94 28 03 	call	0x650	; 0x650 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     bee:	88 23       	and	r24, r24
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <LCD_Init+0x164>
     bf2:	5c c0       	rjmp	.+184    	; 0xcac <LCD_Init+0x21c>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     bf4:	88 e0       	ldi	r24, 0x08	; 8
     bf6:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	68 c0       	rjmp	.+208    	; 0xcce <LCD_Init+0x23e>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	0e 94 28 03 	call	0x650	; 0x650 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c04:	88 23       	and	r24, r24
     c06:	09 f0       	breq	.+2      	; 0xc0a <LCD_Init+0x17a>
     c08:	53 c0       	rjmp	.+166    	; 0xcb0 <LCD_Init+0x220>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     c0a:	89 e0       	ldi	r24, 0x09	; 9
     c0c:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c10:	8f ef       	ldi	r24, 0xFF	; 255
     c12:	5d c0       	rjmp	.+186    	; 0xcce <LCD_Init+0x23e>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	0e 94 28 03 	call	0x650	; 0x650 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c1a:	88 23       	and	r24, r24
     c1c:	09 f0       	breq	.+2      	; 0xc20 <LCD_Init+0x190>
     c1e:	4a c0       	rjmp	.+148    	; 0xcb4 <LCD_Init+0x224>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     c20:	8a e0       	ldi	r24, 0x0A	; 10
     c22:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	52 c0       	rjmp	.+164    	; 0xcce <LCD_Init+0x23e>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	0e 94 28 03 	call	0x650	; 0x650 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c30:	88 23       	and	r24, r24
     c32:	09 f0       	breq	.+2      	; 0xc36 <LCD_Init+0x1a6>
     c34:	41 c0       	rjmp	.+130    	; 0xcb8 <LCD_Init+0x228>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     c36:	8b e0       	ldi	r24, 0x0B	; 11
     c38:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	47 c0       	rjmp	.+142    	; 0xcce <LCD_Init+0x23e>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);
     c40:	88 e2       	ldi	r24, 0x28	; 40
     c42:	0e 94 28 03 	call	0x650	; 0x650 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c46:	88 23       	and	r24, r24
     c48:	c9 f5       	brne	.+114    	; 0xcbc <LCD_Init+0x22c>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     c4a:	8c e0       	ldi	r24, 0x0C	; 12
     c4c:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	3d c0       	rjmp	.+122    	; 0xcce <LCD_Init+0x23e>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     c54:	8c e0       	ldi	r24, 0x0C	; 12
     c56:	0e 94 28 03 	call	0x650	; 0x650 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c5a:	88 23       	and	r24, r24
     c5c:	89 f5       	brne	.+98     	; 0xcc0 <LCD_Init+0x230>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     c5e:	8d e0       	ldi	r24, 0x0D	; 13
     c60:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c64:	8f ef       	ldi	r24, 0xFF	; 255
     c66:	33 c0       	rjmp	.+102    	; 0xcce <LCD_Init+0x23e>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);
     c68:	86 e0       	ldi	r24, 0x06	; 6
     c6a:	0e 94 28 03 	call	0x650	; 0x650 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c6e:	88 23       	and	r24, r24
     c70:	49 f5       	brne	.+82     	; 0xcc4 <LCD_Init+0x234>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     c72:	8e e0       	ldi	r24, 0x0E	; 14
     c74:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	29 c0       	rjmp	.+82     	; 0xcce <LCD_Init+0x23e>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	0e 94 28 03 	call	0x650	; 0x650 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c82:	88 23       	and	r24, r24
     c84:	09 f5       	brne	.+66     	; 0xcc8 <LCD_Init+0x238>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     c86:	8f e0       	ldi	r24, 0x0F	; 15
     c88:	80 93 8f 00 	sts	0x008F, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     c8c:	8f ef       	ldi	r24, 0xFF	; 255
     c8e:	1f c0       	rjmp	.+62     	; 0xcce <LCD_Init+0x23e>
		{
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     c90:	80 e8       	ldi	r24, 0x80	; 128
     c92:	0e 94 28 03 	call	0x650	; 0x650 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     c96:	88 23       	and	r24, r24
     c98:	c9 f4       	brne	.+50     	; 0xccc <LCD_Init+0x23c>
		{
			State = OperationStarted;
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	80 93 8f 00 	sts	0x008F, r24
			ErrRetVal = OperationSuccess;
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	15 c0       	rjmp	.+42     	; 0xcce <LCD_Init+0x23e>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	13 c0       	rjmp	.+38     	; 0xcce <LCD_Init+0x23e>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	11 c0       	rjmp	.+34     	; 0xcce <LCD_Init+0x23e>
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	0f c0       	rjmp	.+30     	; 0xcce <LCD_Init+0x23e>
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	0d c0       	rjmp	.+26     	; 0xcce <LCD_Init+0x23e>
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	0b c0       	rjmp	.+22     	; 0xcce <LCD_Init+0x23e>
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	09 c0       	rjmp	.+18     	; 0xcce <LCD_Init+0x23e>
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	07 c0       	rjmp	.+14     	; 0xcce <LCD_Init+0x23e>
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <LCD_Init+0x23e>
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <LCD_Init+0x23e>
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	01 c0       	rjmp	.+2      	; 0xcce <LCD_Init+0x23e>
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	default:
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	08 95       	ret

00000ce0 <LCD_SendString>:
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	b9 f0       	breq	.+46     	; 0xd12 <LCD_SendString+0x32>
		if (String[Number] != NULL_TERMINATOR ) {
     ce4:	20 91 f9 00 	lds	r18, 0x00F9
     ce8:	82 0f       	add	r24, r18
     cea:	91 1d       	adc	r25, r1
     cec:	fc 01       	movw	r30, r24
     cee:	80 81       	ld	r24, Z
     cf0:	88 23       	and	r24, r24
     cf2:	59 f0       	breq	.+22     	; 0xd0a <LCD_SendString+0x2a>
			ErrRetVal = OperationRunning;
			LCD_SendDataRetVal = LCD_SendData(String[Number]);
     cf4:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_SendData>
			if(LCD_SendDataRetVal == OperationSuccess)
     cf8:	88 23       	and	r24, r24
     cfa:	69 f4       	brne	.+26     	; 0xd16 <LCD_SendString+0x36>
			{
				Number++;
     cfc:	80 91 f9 00 	lds	r24, 0x00F9
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	80 93 f9 00 	sts	0x00F9, r24
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	08 95       	ret
				Number++;
			}
		}
		else
		{
			Number = 0;
     d0a:	10 92 f9 00 	sts	0x00F9, r1
			ErrRetVal = OperationSuccess;
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	08 95       	ret
		}
	} else {
		ErrRetVal = OperationFail;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	08 95       	ret
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	static uint8_t Number = 0;
	if (String != NULL_PTR) {
		if (String[Number] != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
     d16:	82 e0       	ldi	r24, 0x02	; 2
		}
	} else {
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     d18:	08 95       	ret

00000d1a <LCD_SendNumber>:
ERROR_STATE_t LCD_SendNumber(uint32_t Number)
{
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	2a 97       	sbiw	r28, 0x0a	; 10
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrRetVal = OperationStarted;
	uint8_t FunRetVal = OperationStarted;
	uint8_t String[10];
	STR_Number2String((uint32_t)Number,String);
     d2e:	ae 01       	movw	r20, r28
     d30:	4f 5f       	subi	r20, 0xFF	; 255
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
     d34:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <STR_Number2String>
	while(FunRetVal != OperationSuccess)
   {
      FunRetVal = LCD_SendString((uint8_t*)String);
     d38:	ce 01       	movw	r24, r28
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	0e 94 70 06 	call	0xce0	; 0xce0 <LCD_SendString>
      if(FunRetVal == OperationSuccess)
     d40:	88 23       	and	r24, r24
     d42:	d1 f7       	brne	.-12     	; 0xd38 <LCD_SendNumber+0x1e>
      {
         ErrRetVal = OperationFail;
      }
   }
	return ErrRetVal;
}
     d44:	2a 96       	adiw	r28, 0x0a	; 10
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <MOTOR_init>:
extern const STR_MOTOR_config_t gastr_Motor_Config[MOTORS_NUMBER];

/*APIs IMPLEMENTATION------------------------*/
ERROR_STATE_t MOTOR_init(void) {
		/*CHECK IF MOTORS HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) {//IF MOTORS IS INITIALIZED
     d56:	80 91 fa 00 	lds	r24, 0x00FA
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	21 f4       	brne	.+8      	; 0xd66 <MOTOR_init+0x10>
		gu8_ERROR_STAT = MOTOR_SEC_INIT;//STORE SEC INIT IN ERRROR STAT
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	80 93 fb 00 	sts	0x00FB, r24
     d64:	28 c0       	rjmp	.+80     	; 0xdb6 <MOTOR_init+0x60>
	} else if (NOT_INIT == gu8_InitFlag) {//IF MOTORS IS NOT INITIALIZED
     d66:	88 23       	and	r24, r24
     d68:	31 f5       	brne	.+76     	; 0xdb6 <MOTOR_init+0x60>
	PWM_Init(PWM_CHANNEL_OC0);
     d6a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <PWM_Init>
   /*SETTING MOTOR1 DIR PINS TO OUTPUT*/
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA, PIN_OUTPUT);
     d6e:	80 91 98 00 	lds	r24, 0x0098
     d72:	60 91 99 00 	lds	r22, 0x0099
     d76:	41 e0       	ldi	r20, 0x01	; 1
     d78:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB, PIN_OUTPUT);
     d7c:	80 91 9a 00 	lds	r24, 0x009A
     d80:	60 91 9b 00 	lds	r22, 0x009B
     d84:	41 e0       	ldi	r20, 0x01	; 1
     d86:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
	/*SETTING MOTOR2 DIR PINS TO OUTPUT*/
	
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA, PIN_OUTPUT);
     d8a:	80 91 9c 00 	lds	r24, 0x009C
     d8e:	60 91 9d 00 	lds	r22, 0x009D
     d92:	41 e0       	ldi	r20, 0x01	; 1
     d94:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB, PIN_OUTPUT);
     d98:	80 91 9e 00 	lds	r24, 0x009E
     d9c:	60 91 9f 00 	lds	r22, 0x009F
     da0:	41 e0       	ldi	r20, 0x01	; 1
     da2:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
   /*START THE PWM WAVE*/
   PWM_Start(PWM_CHANNEL_OC0);
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <PWM_Start>
	gu8_InitFlag = INIT;//SET INIT FLAG
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 fa 00 	sts	0x00FA, r24
	gu8_ERROR_STAT = ERROR_OK;//STORE ERROR_OK IN ERRROR STAT
     db2:	10 92 fb 00 	sts	0x00FB, r1
	}
	/*STOP MOTOER EN PINS AT THE START*/
	return gu8_ERROR_STAT ;//RETURN FROM THE API
}
     db6:	80 91 fb 00 	lds	r24, 0x00FB
     dba:	08 95       	ret

00000dbc <MOTOR_start>:
ERROR_STATE_t MOTOR_start(uint8_t motor_no, uint8_t speed,  uint8_t dir) {
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	c8 2f       	mov	r28, r24
     dc2:	d4 2f       	mov	r29, r20
	if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     dc4:	80 91 fa 00 	lds	r24, 0x00FA
     dc8:	88 23       	and	r24, r24
     dca:	21 f4       	brne	.+8      	; 0xdd4 <MOTOR_start+0x18>
		gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     dcc:	8e ef       	ldi	r24, 0xFE	; 254
     dce:	80 93 fb 00 	sts	0x00FB, r24
     dd2:	66 c0       	rjmp	.+204    	; 0xea0 <MOTOR_start+0xe4>
	} else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	09 f0       	breq	.+2      	; 0xdda <MOTOR_start+0x1e>
     dd8:	63 c0       	rjmp	.+198    	; 0xea0 <MOTOR_start+0xe4>
      PWM_SetDuty(PWM_CHANNEL_OC0, speed);
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <PWM_SetDuty>
      PWM_Connect(PWM_CHANNEL_OC0);
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <PWM_Connect>
	switch (motor_no) {
     de6:	cc 23       	and	r28, r28
     de8:	21 f0       	breq	.+8      	; 0xdf2 <MOTOR_start+0x36>
     dea:	c1 30       	cpi	r28, 0x01	; 1
     dec:	09 f0       	breq	.+2      	; 0xdf0 <MOTOR_start+0x34>
     dee:	55 c0       	rjmp	.+170    	; 0xe9a <MOTOR_start+0xde>
     df0:	2a c0       	rjmp	.+84     	; 0xe46 <MOTOR_start+0x8a>
	case MOTOR1 :
		switch (dir) {
     df2:	dd 23       	and	r29, r29
     df4:	99 f0       	breq	.+38     	; 0xe1c <MOTOR_start+0x60>
     df6:	d1 30       	cpi	r29, 0x01	; 1
     df8:	11 f5       	brne	.+68     	; 0xe3e <MOTOR_start+0x82>
		case MOTOR_FORWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     dfa:	80 91 98 00 	lds	r24, 0x0098
     dfe:	60 91 99 00 	lds	r22, 0x0099
     e02:	41 e0       	ldi	r20, 0x01	; 1
     e04:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_LOW);
     e08:	80 91 9a 00 	lds	r24, 0x009A
     e0c:	60 91 9b 00 	lds	r22, 0x009B
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
			gu8_ERROR_STAT = ERROR_OK;
     e16:	10 92 fb 00 	sts	0x00FB, r1
			break;
     e1a:	42 c0       	rjmp	.+132    	; 0xea0 <MOTOR_start+0xe4>
		case MOTOR_BACKWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_LOW);
     e1c:	80 91 98 00 	lds	r24, 0x0098
     e20:	60 91 99 00 	lds	r22, 0x0099
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     e2a:	80 91 9a 00 	lds	r24, 0x009A
     e2e:	60 91 9b 00 	lds	r22, 0x009B
     e32:	41 e0       	ldi	r20, 0x01	; 1
     e34:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     e38:	10 92 fb 00 	sts	0x00FB, r1

			break;
     e3c:	31 c0       	rjmp	.+98     	; 0xea0 <MOTOR_start+0xe4>
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     e3e:	8d ef       	ldi	r24, 0xFD	; 253
     e40:	80 93 fb 00 	sts	0x00FB, r24
			break;
     e44:	2d c0       	rjmp	.+90     	; 0xea0 <MOTOR_start+0xe4>
		}
		break;
	case MOTOR2 :
		switch (dir) {
     e46:	dd 23       	and	r29, r29
     e48:	99 f0       	breq	.+38     	; 0xe70 <MOTOR_start+0xb4>
     e4a:	d1 30       	cpi	r29, 0x01	; 1
     e4c:	11 f5       	brne	.+68     	; 0xe92 <MOTOR_start+0xd6>
		case MOTOR_FORWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     e4e:	80 91 9c 00 	lds	r24, 0x009C
     e52:	60 91 9d 00 	lds	r22, 0x009D
     e56:	41 e0       	ldi	r20, 0x01	; 1
     e58:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_LOW);
     e5c:	80 91 9e 00 	lds	r24, 0x009E
     e60:	60 91 9f 00 	lds	r22, 0x009F
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     e6a:	10 92 fb 00 	sts	0x00FB, r1

			break;
     e6e:	18 c0       	rjmp	.+48     	; 0xea0 <MOTOR_start+0xe4>
		case MOTOR_BACKWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_LOW);
     e70:	80 91 9c 00 	lds	r24, 0x009C
     e74:	60 91 9d 00 	lds	r22, 0x009D
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     e7e:	80 91 9e 00 	lds	r24, 0x009E
     e82:	60 91 9f 00 	lds	r22, 0x009F
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     e8c:	10 92 fb 00 	sts	0x00FB, r1

			break;
     e90:	07 c0       	rjmp	.+14     	; 0xea0 <MOTOR_start+0xe4>
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     e92:	8d ef       	ldi	r24, 0xFD	; 253
     e94:	80 93 fb 00 	sts	0x00FB, r24
			break;
     e98:	03 c0       	rjmp	.+6      	; 0xea0 <MOTOR_start+0xe4>
		}
		break;
	default:
	gu8_ERROR_STAT=MOTOR_INVALID_CH;
     e9a:	8c ef       	ldi	r24, 0xFC	; 252
     e9c:	80 93 fb 00 	sts	0x00FB, r24
		break;
	}
	}
	return gu8_ERROR_STAT ;
}
     ea0:	80 91 fb 00 	lds	r24, 0x00FB
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <MOTOR_stop>:
ERROR_STATE_t MOTOR_stop(uint8_t motor_no) {
     eaa:	cf 93       	push	r28
     eac:	c8 2f       	mov	r28, r24
    if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     eae:	80 91 fa 00 	lds	r24, 0x00FA
     eb2:	88 23       	and	r24, r24
     eb4:	21 f4       	brne	.+8      	; 0xebe <MOTOR_stop+0x14>
		gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     eb6:	8e ef       	ldi	r24, 0xFE	; 254
     eb8:	80 93 fb 00 	sts	0x00FB, r24
     ebc:	2f c0       	rjmp	.+94     	; 0xf1c <MOTOR_stop+0x72>
        } else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	69 f5       	brne	.+90     	; 0xf1c <MOTOR_stop+0x72>
		PWM_Disconnect(PWM_CHANNEL_OC0);
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <PWM_Disconnect>
       switch (motor_no){
     ec8:	cc 23       	and	r28, r28
     eca:	19 f0       	breq	.+6      	; 0xed2 <MOTOR_stop+0x28>
     ecc:	c1 30       	cpi	r28, 0x01	; 1
     ece:	19 f5       	brne	.+70     	; 0xf16 <MOTOR_stop+0x6c>
     ed0:	11 c0       	rjmp	.+34     	; 0xef4 <MOTOR_stop+0x4a>
        case MOTOR1:
            DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     ed2:	80 91 98 00 	lds	r24, 0x0098
     ed6:	60 91 99 00 	lds	r22, 0x0099
     eda:	41 e0       	ldi	r20, 0x01	; 1
     edc:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
            DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     ee0:	80 91 9a 00 	lds	r24, 0x009A
     ee4:	60 91 9b 00 	lds	r22, 0x009B
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     eee:	10 92 fb 00 	sts	0x00FB, r1
            break;
     ef2:	14 c0       	rjmp	.+40     	; 0xf1c <MOTOR_stop+0x72>
        case MOTOR2:
            DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     ef4:	80 91 9c 00 	lds	r24, 0x009C
     ef8:	60 91 9d 00 	lds	r22, 0x009D
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
            DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     f02:	80 91 9e 00 	lds	r24, 0x009E
     f06:	60 91 9f 00 	lds	r22, 0x009F
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     f10:	10 92 fb 00 	sts	0x00FB, r1
            break;
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <MOTOR_stop+0x72>
        default:
        gu8_ERROR_STAT=MOTOR_INVALID_CH;
     f16:	8c ef       	ldi	r24, 0xFC	; 252
     f18:	80 93 fb 00 	sts	0x00FB, r24
            break;
        }
	}
	return gu8_ERROR_STAT ;
}
     f1c:	80 91 fb 00 	lds	r24, 0x00FB
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <MOTOR_Update_dir>:
ERROR_STATE_t MOTOR_Update_dir(uint8_t motor_no, uint8_t dir) {
    if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     f24:	90 91 fa 00 	lds	r25, 0x00FA
     f28:	99 23       	and	r25, r25
     f2a:	21 f4       	brne	.+8      	; 0xf34 <MOTOR_Update_dir+0x10>
    gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     f2c:	8e ef       	ldi	r24, 0xFE	; 254
     f2e:	80 93 fb 00 	sts	0x00FB, r24
     f32:	60 c0       	rjmp	.+192    	; 0xff4 <MOTOR_Update_dir+0xd0>
    } else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     f34:	91 30       	cpi	r25, 0x01	; 1
     f36:	09 f0       	breq	.+2      	; 0xf3a <MOTOR_Update_dir+0x16>
     f38:	5d c0       	rjmp	.+186    	; 0xff4 <MOTOR_Update_dir+0xd0>
        switch (motor_no) {
     f3a:	88 23       	and	r24, r24
     f3c:	21 f0       	breq	.+8      	; 0xf46 <MOTOR_Update_dir+0x22>
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	09 f0       	breq	.+2      	; 0xf44 <MOTOR_Update_dir+0x20>
     f42:	55 c0       	rjmp	.+170    	; 0xfee <MOTOR_Update_dir+0xca>
     f44:	2a c0       	rjmp	.+84     	; 0xf9a <MOTOR_Update_dir+0x76>
            case MOTOR1 :
                switch (dir) {
     f46:	66 23       	and	r22, r22
     f48:	99 f0       	breq	.+38     	; 0xf70 <MOTOR_Update_dir+0x4c>
     f4a:	61 30       	cpi	r22, 0x01	; 1
     f4c:	11 f5       	brne	.+68     	; 0xf92 <MOTOR_Update_dir+0x6e>
                case MOTOR_FORWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     f4e:	80 91 98 00 	lds	r24, 0x0098
     f52:	60 91 99 00 	lds	r22, 0x0099
     f56:	41 e0       	ldi	r20, 0x01	; 1
     f58:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_LOW);
     f5c:	80 91 9a 00 	lds	r24, 0x009A
     f60:	60 91 9b 00 	lds	r22, 0x009B
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     f6a:	10 92 fb 00 	sts	0x00FB, r1

                    break;
     f6e:	42 c0       	rjmp	.+132    	; 0xff4 <MOTOR_Update_dir+0xd0>
                case MOTOR_BACKWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_LOW);
     f70:	80 91 98 00 	lds	r24, 0x0098
     f74:	60 91 99 00 	lds	r22, 0x0099
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     f7e:	80 91 9a 00 	lds	r24, 0x009A
     f82:	60 91 9b 00 	lds	r22, 0x009B
     f86:	41 e0       	ldi	r20, 0x01	; 1
     f88:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     f8c:	10 92 fb 00 	sts	0x00FB, r1

                    break;
     f90:	31 c0       	rjmp	.+98     	; 0xff4 <MOTOR_Update_dir+0xd0>
                default:
                gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     f92:	8d ef       	ldi	r24, 0xFD	; 253
     f94:	80 93 fb 00 	sts	0x00FB, r24
                    break;
     f98:	2d c0       	rjmp	.+90     	; 0xff4 <MOTOR_Update_dir+0xd0>
                }
                break;
            case MOTOR2 :
                switch (dir) {
     f9a:	66 23       	and	r22, r22
     f9c:	99 f0       	breq	.+38     	; 0xfc4 <MOTOR_Update_dir+0xa0>
     f9e:	61 30       	cpi	r22, 0x01	; 1
     fa0:	11 f5       	brne	.+68     	; 0xfe6 <MOTOR_Update_dir+0xc2>
                case MOTOR_FORWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     fa2:	80 91 9c 00 	lds	r24, 0x009C
     fa6:	60 91 9d 00 	lds	r22, 0x009D
     faa:	41 e0       	ldi	r20, 0x01	; 1
     fac:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_LOW);
     fb0:	80 91 9e 00 	lds	r24, 0x009E
     fb4:	60 91 9f 00 	lds	r22, 0x009F
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     fbe:	10 92 fb 00 	sts	0x00FB, r1

                    break;
     fc2:	18 c0       	rjmp	.+48     	; 0xff4 <MOTOR_Update_dir+0xd0>
                case MOTOR_BACKWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_LOW);
     fc4:	80 91 9c 00 	lds	r24, 0x009C
     fc8:	60 91 9d 00 	lds	r22, 0x009D
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     fd2:	80 91 9e 00 	lds	r24, 0x009E
     fd6:	60 91 9f 00 	lds	r22, 0x009F
     fda:	41 e0       	ldi	r20, 0x01	; 1
     fdc:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     fe0:	10 92 fb 00 	sts	0x00FB, r1

                    break;
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <MOTOR_Update_dir+0xd0>
                default:
                   gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     fe6:	8d ef       	ldi	r24, 0xFD	; 253
     fe8:	80 93 fb 00 	sts	0x00FB, r24
                    break;
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <MOTOR_Update_dir+0xd0>
                }
                break;
            default:
               gu8_ERROR_STAT=MOTOR_INVALID_CH;
     fee:	8c ef       	ldi	r24, 0xFC	; 252
     ff0:	80 93 fb 00 	sts	0x00FB, r24
                break;
            }
    }

		return gu8_ERROR_STAT ;
}
     ff4:	80 91 fb 00 	lds	r24, 0x00FB
     ff8:	08 95       	ret

00000ffa <USONIC_OVF1Callback>:
	}
}

static void USONIC_OVF1Callback(void)
{
	gu16_OverflowCounter++; 
     ffa:	80 91 00 01 	lds	r24, 0x0100
     ffe:	90 91 01 01 	lds	r25, 0x0101
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	90 93 01 01 	sts	0x0101, r25
    1008:	80 93 00 01 	sts	0x0100, r24
    100c:	08 95       	ret

0000100e <USONIC_ICU1Callback>:
	}
	return gu8_ERROR_STATE;	
}

static void USONIC_ICU1Callback(void)
{
    100e:	8f 92       	push	r8
    1010:	9f 92       	push	r9
    1012:	af 92       	push	r10
    1014:	bf 92       	push	r11
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
	volatile static  uint64_t CounterNumber;
	volatile static  uint16_t ICR1_Register;
 
	switch(gu8_ICU_State)
    1022:	80 91 0c 01 	lds	r24, 0x010C
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	21 f0       	breq	.+8      	; 0x1032 <USONIC_ICU1Callback+0x24>
    102a:	82 30       	cpi	r24, 0x02	; 2
    102c:	09 f0       	breq	.+2      	; 0x1030 <USONIC_ICU1Callback+0x22>
    102e:	77 c0       	rjmp	.+238    	; 0x111e <USONIC_ICU1Callback+0x110>
    1030:	0c c0       	rjmp	.+24     	; 0x104a <USONIC_ICU1Callback+0x3c>
	{
			case WAITING_RISING_EDGE_STATE: //Rising 
			{
				gu16_OverflowCounter=0;
    1032:	10 92 01 01 	sts	0x0101, r1
    1036:	10 92 00 01 	sts	0x0100, r1
				gu8_ICU_State=WAITING_FALLING_EDGE_STATE;
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	80 93 0c 01 	sts	0x010C, r24
				ICU_Reset(ICU_1,ICU1_FALLING_EDGE);
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <ICU_Reset>
				break;
    1048:	6a c0       	rjmp	.+212    	; 0x111e <USONIC_ICU1Callback+0x110>
			}		 
			case WAITING_FALLING_EDGE_STATE: //Falling
			{
				ICU_GetICR1Registert(ICU_1,&ICR1_Register);
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	6a e0       	ldi	r22, 0x0A	; 10
    104e:	71 e0       	ldi	r23, 0x01	; 1
    1050:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <ICU_GetICR1Registert>
				CounterNumber=(uint64_t)(ICR1_Register+(gu16_OverflowCounter*ICU1_MAX_COUNT));			
    1054:	80 91 0a 01 	lds	r24, 0x010A
    1058:	90 91 0b 01 	lds	r25, 0x010B
    105c:	20 91 00 01 	lds	r18, 0x0100
    1060:	30 91 01 01 	lds	r19, 0x0101
    1064:	82 1b       	sub	r24, r18
    1066:	93 0b       	sbc	r25, r19
    1068:	80 93 02 01 	sts	0x0102, r24
    106c:	90 93 03 01 	sts	0x0103, r25
    1070:	10 92 04 01 	sts	0x0104, r1
    1074:	10 92 05 01 	sts	0x0105, r1
    1078:	10 92 06 01 	sts	0x0106, r1
    107c:	10 92 07 01 	sts	0x0107, r1
    1080:	10 92 08 01 	sts	0x0108, r1
    1084:	10 92 09 01 	sts	0x0109, r1
				TimeOnValue = (CounterNumber*((double)gastr_ICUConfig[ICU_1].ICUPrescaler/gu32_USONIC_SystemFreq));
    1088:	20 91 02 01 	lds	r18, 0x0102
    108c:	30 91 03 01 	lds	r19, 0x0103
    1090:	40 91 04 01 	lds	r20, 0x0104
    1094:	50 91 05 01 	lds	r21, 0x0105
    1098:	60 91 06 01 	lds	r22, 0x0106
    109c:	70 91 07 01 	lds	r23, 0x0107
    10a0:	80 91 08 01 	lds	r24, 0x0108
    10a4:	90 91 09 01 	lds	r25, 0x0109
    10a8:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatundisf>
    10ac:	4b 01       	movw	r8, r22
    10ae:	5c 01       	movw	r10, r24
    10b0:	60 91 a8 00 	lds	r22, 0x00A8
    10b4:	70 91 a9 00 	lds	r23, 0x00A9
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__floatunsisf>
    10c0:	6b 01       	movw	r12, r22
    10c2:	7c 01       	movw	r14, r24
    10c4:	60 91 a0 00 	lds	r22, 0x00A0
    10c8:	70 91 a1 00 	lds	r23, 0x00A1
    10cc:	80 91 a2 00 	lds	r24, 0x00A2
    10d0:	90 91 a3 00 	lds	r25, 0x00A3
    10d4:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__floatunsisf>
    10d8:	9b 01       	movw	r18, r22
    10da:	ac 01       	movw	r20, r24
    10dc:	c7 01       	movw	r24, r14
    10de:	b6 01       	movw	r22, r12
    10e0:	0e 94 b7 14 	call	0x296e	; 0x296e <__divsf3>
    10e4:	9b 01       	movw	r18, r22
    10e6:	ac 01       	movw	r20, r24
    10e8:	c5 01       	movw	r24, r10
    10ea:	b4 01       	movw	r22, r8
    10ec:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__mulsf3>
    10f0:	46 2f       	mov	r20, r22
    10f2:	57 2f       	mov	r21, r23
    10f4:	68 2f       	mov	r22, r24
    10f6:	79 2f       	mov	r23, r25
    10f8:	40 93 fc 00 	sts	0x00FC, r20
    10fc:	50 93 fd 00 	sts	0x00FD, r21
    1100:	60 93 fe 00 	sts	0x00FE, r22
    1104:	70 93 ff 00 	sts	0x00FF, r23
				gu8_ICU_State=END_STATE;
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	80 93 0c 01 	sts	0x010C, r24
				ICU_DisableInterrupt(ICU_1,ICU1_INPUTCAPTURE_INT);
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <ICU_DisableInterrupt>
				ICU_DisableInterrupt(ICU_1,ICU1_OVERFLOW_INT);
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <ICU_DisableInterrupt>
				break;
			}			
			default:
				break;
	}
}
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	cf 90       	pop	r12
    112a:	bf 90       	pop	r11
    112c:	af 90       	pop	r10
    112e:	9f 90       	pop	r9
    1130:	8f 90       	pop	r8
    1132:	08 95       	ret

00001134 <USONIC_Init>:
/*
 * THIS API INITIALIZE THE ULTRASONIC
 * */
ERROR_STATE_t USONIC_Init(void) {
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) //IF ULTRA SONIC IS INITIALIZED
    1134:	80 91 0d 01 	lds	r24, 0x010D
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	21 f4       	brne	.+8      	; 0x1144 <USONIC_Init+0x10>
	{
		gu8_ERROR_STATE = USONIC_SEC_INIT; //STORE SEC INIT IN ERRROR STAT
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	80 93 0e 01 	sts	0x010E, r24
    1142:	1f c0       	rjmp	.+62     	; 0x1182 <USONIC_Init+0x4e>
	} 
	else if (NOT_INIT == gu8_InitFlag) //IF ULTRA SONIC IS NOT INITIALIZED
    1144:	88 23       	and	r24, r24
    1146:	e9 f4       	brne	.+58     	; 0x1182 <USONIC_Init+0x4e>
	{
		DIO_SetPinDirection(gastr_USONIC_Config[USONIC1].USONIC_TRIG_PORT, gastr_USONIC_Config[USONIC1].USONIC_TRIG_PIN, PIN_OUTPUT);//SET THE TRIGGER PIN AS AN OUTPUT
    1148:	80 91 a4 00 	lds	r24, 0x00A4
    114c:	60 91 a5 00 	lds	r22, 0x00A5
    1150:	41 e0       	ldi	r20, 0x01	; 1
    1152:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
		ICU_Init(ICU_1); //INIT THE ICU CH 1
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	0e 94 c6 0c 	call	0x198c	; 0x198c <ICU_Init>
		
		ICU_SetCallback(ICU_1,ICU1_INPUTCAPTURE_INT,USONIC_ICU1Callback);
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	47 e0       	ldi	r20, 0x07	; 7
    1162:	58 e0       	ldi	r21, 0x08	; 8
    1164:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <ICU_SetCallback>
		ICU_SetCallback(ICU_1,ICU1_OVERFLOW_INT,USONIC_OVF1Callback);
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	4d ef       	ldi	r20, 0xFD	; 253
    116e:	57 e0       	ldi	r21, 0x07	; 7
    1170:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <ICU_SetCallback>
		GLOBALINTTERUPTS_Enable();
    1174:	0e 94 be 0c 	call	0x197c	; 0x197c <GLOBALINTTERUPTS_Enable>
	
		gu8_InitFlag = INIT;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	80 93 0d 01 	sts	0x010D, r24
		gu8_ERROR_STATE=ERROR_OK;
    117e:	10 92 0e 01 	sts	0x010E, r1
	else 
	{
		//DO NOTHING
	}
	return gu8_ERROR_STATE ;
}
    1182:	80 91 0e 01 	lds	r24, 0x010E
    1186:	08 95       	ret

00001188 <USONIC_GetDistance>:

ERROR_STATE_t USONIC_GetDistance(ptr_double64_t distance)
{
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	ec 01       	movw	r28, r24
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (NOT_INIT == gu8_InitFlag) //IF ULTRA SONIC IS NOT INITIALIZED
    118e:	80 91 0d 01 	lds	r24, 0x010D
    1192:	88 23       	and	r24, r24
    1194:	21 f4       	brne	.+8      	; 0x119e <USONIC_GetDistance+0x16>
	{ 
		gu8_ERROR_STATE = USONIC_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
    1196:	8e ef       	ldi	r24, 0xFE	; 254
    1198:	80 93 0e 01 	sts	0x010E, r24
    119c:	5b c0       	rjmp	.+182    	; 0x1254 <USONIC_GetDistance+0xcc>
	} 
	else if(INIT == gu8_InitFlag) //IF ULTRA SONIC IS INITIALIZED
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <USONIC_GetDistance+0x1c>
    11a2:	58 c0       	rjmp	.+176    	; 0x1254 <USONIC_GetDistance+0xcc>
	{ 
		/* CHECK IF ptr_float32_t distance EQUALS NULL */
		if (NULL_PTR == distance) 
    11a4:	20 97       	sbiw	r28, 0x00	; 0
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <USONIC_GetDistance+0x28>
		{
			gu8_ERROR_STATE = USONIC_NULL_POINTER; //STORE NOT INIT IN ERRROR STAT
    11a8:	8d ef       	ldi	r24, 0xFD	; 253
    11aa:	80 93 0e 01 	sts	0x010E, r24
    11ae:	52 c0       	rjmp	.+164    	; 0x1254 <USONIC_GetDistance+0xcc>
		} 
		else 
		{
			switch(gu8_ICU_State)
    11b0:	80 91 0c 01 	lds	r24, 0x010C
    11b4:	88 23       	and	r24, r24
    11b6:	21 f0       	breq	.+8      	; 0x11c0 <USONIC_GetDistance+0x38>
    11b8:	83 30       	cpi	r24, 0x03	; 3
    11ba:	09 f0       	breq	.+2      	; 0x11be <USONIC_GetDistance+0x36>
    11bc:	4b c0       	rjmp	.+150    	; 0x1254 <USONIC_GetDistance+0xcc>
    11be:	2c c0       	rjmp	.+88     	; 0x1218 <USONIC_GetDistance+0x90>
			{
				case START_STATE:
				{
					gu8_ICU_State=WAITING_RISING_EDGE_STATE;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	80 93 0c 01 	sts	0x010C, r24
					DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_HIGH); //SET TRIGGER PIN
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
					gu16_OverflowCounter=COUNTER_RESET;
    11d0:	10 92 01 01 	sts	0x0101, r1
    11d4:	10 92 00 01 	sts	0x0100, r1
					ICU_SetTCNT1Registert(ICU_1,PRELOAD_10U);
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	6e ef       	ldi	r22, 0xFE	; 254
    11dc:	7f ef       	ldi	r23, 0xFF	; 255
    11de:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <ICU_SetTCNT1Registert>
					ICU_EnableInterrupt(ICU_1,ICU1_OVERFLOW_INT);
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <ICU_EnableInterrupt>
					while(gu16_OverflowCounter<1);
    11ea:	80 91 00 01 	lds	r24, 0x0100
    11ee:	90 91 01 01 	lds	r25, 0x0101
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	d1 f3       	breq	.-12     	; 0x11ea <USONIC_GetDistance+0x62>
					DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_LOW);
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	0e 94 5f 0b 	call	0x16be	; 0x16be <DIO_WritePin>
					ICU_Reset(ICU_1,ICU1_RISING_EDGE);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <ICU_Reset>
					ICU_EnableInterrupt(ICU_1,ICU1_INPUTCAPTURE_INT);
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <ICU_EnableInterrupt>
					gu8_ERROR_STATE=ERROR_NOK;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	80 93 0e 01 	sts	0x010E, r24
					break;
    1216:	1e c0       	rjmp	.+60     	; 0x1254 <USONIC_GetDistance+0xcc>
				}
				case END_STATE:
				{
					*distance = (((SOUND_SPPED) * TimeOnValue) / HALF_DISTANCE);
    1218:	60 91 fc 00 	lds	r22, 0x00FC
    121c:	70 91 fd 00 	lds	r23, 0x00FD
    1220:	80 91 fe 00 	lds	r24, 0x00FE
    1224:	90 91 ff 00 	lds	r25, 0x00FF
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	3c ef       	ldi	r19, 0xFC	; 252
    122c:	45 e0       	ldi	r20, 0x05	; 5
    122e:	57 e4       	ldi	r21, 0x47	; 71
    1230:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__mulsf3>
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	88 83       	st	Y, r24
    1246:	99 83       	std	Y+1, r25	; 0x01
    1248:	aa 83       	std	Y+2, r26	; 0x02
    124a:	bb 83       	std	Y+3, r27	; 0x03
					gu8_ERROR_STATE=ERROR_OK;
    124c:	10 92 0e 01 	sts	0x010E, r1
					gu8_ICU_State=START_STATE;
    1250:	10 92 0c 01 	sts	0x010C, r1
	else
	{
			
	}
	return gu8_ERROR_STATE;	
}
    1254:	80 91 0e 01 	lds	r24, 0x010E
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	00 d0       	rcall	.+0      	; 0x1264 <dummy_delay+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <dummy_delay+0x8>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
    126a:	1c 82       	std	Y+4, r1	; 0x04
    126c:	1b 82       	std	Y+3, r1	; 0x03
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	84 36       	cpi	r24, 0x64	; 100
    1274:	91 05       	cpc	r25, r1
    1276:	f0 f4       	brcc	.+60     	; 0x12b4 <dummy_delay+0x56>
   {
      for(volatile uint8_t j=0; j<32; j++)
    1278:	1a 82       	std	Y+2, r1	; 0x02
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	80 32       	cpi	r24, 0x20	; 32
    127e:	80 f4       	brcc	.+32     	; 0x12a0 <dummy_delay+0x42>
      {
         for(volatile uint8_t k=0; k<2; k++)
    1280:	19 82       	std	Y+1, r1	; 0x01
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	82 30       	cpi	r24, 0x02	; 2
    1286:	30 f4       	brcc	.+12     	; 0x1294 <dummy_delay+0x36>
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	8f 5f       	subi	r24, 0xFF	; 255
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	d0 f3       	brcs	.-12     	; 0x1288 <dummy_delay+0x2a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	8a 83       	std	Y+2, r24	; 0x02
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 32       	cpi	r24, 0x20	; 32
    129e:	80 f3       	brcs	.-32     	; 0x1280 <dummy_delay+0x22>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	84 36       	cpi	r24, 0x64	; 100
    12b0:	91 05       	cpc	r25, r1
    12b2:	10 f3       	brcs	.-60     	; 0x1278 <dummy_delay+0x1a>
         {
            
         }
      }
   }
}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <StringCompare>:
* @param [in]  str2   -  pointer to the second string.
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
    12c2:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
    12c4:	8c 91       	ld	r24, X
    12c6:	88 23       	and	r24, r24
    12c8:	01 f1       	breq	.+64     	; 0x130a <StringCompare+0x48>
    12ca:	8d 30       	cpi	r24, 0x0D	; 13
    12cc:	09 f1       	breq	.+66     	; 0x1310 <StringCompare+0x4e>
   {
      if(str1[u8_counter] != str2[u8_counter])
    12ce:	fb 01       	movw	r30, r22
    12d0:	90 81       	ld	r25, Z
    12d2:	89 17       	cp	r24, r25
    12d4:	49 f4       	brne	.+18     	; 0x12e8 <StringCompare+0x26>
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	0b c0       	rjmp	.+22     	; 0x12f0 <StringCompare+0x2e>
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
    12da:	86 0f       	add	r24, r22
    12dc:	97 1f       	adc	r25, r23
    12de:	fc 01       	movw	r30, r24
    12e0:	80 81       	ld	r24, Z
    12e2:	28 17       	cp	r18, r24
    12e4:	29 f0       	breq	.+10     	; 0x12f0 <StringCompare+0x2e>
    12e6:	01 c0       	rjmp	.+2      	; 0x12ea <StringCompare+0x28>
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
    12e8:	30 e0       	ldi	r19, 0x00	; 0
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
         u8_counter++;
    12ea:	3f 5f       	subi	r19, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
    12ec:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
    12ee:	14 c0       	rjmp	.+40     	; 0x1318 <StringCompare+0x56>
      }
      u8_counter++;
    12f0:	3f 5f       	subi	r19, 0xFF	; 255
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
    12f2:	83 2f       	mov	r24, r19
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	fd 01       	movw	r30, r26
    12f8:	e8 0f       	add	r30, r24
    12fa:	f9 1f       	adc	r31, r25
    12fc:	20 81       	ld	r18, Z
    12fe:	22 23       	and	r18, r18
    1300:	51 f0       	breq	.+20     	; 0x1316 <StringCompare+0x54>
    1302:	2d 30       	cpi	r18, 0x0D	; 13
    1304:	51 f7       	brne	.-44     	; 0x12da <StringCompare+0x18>
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	07 c0       	rjmp	.+14     	; 0x1318 <StringCompare+0x56>
    130a:	81 e0       	ldi	r24, 0x01	; 1
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <StringCompare+0x56>
   uint8_t u8_isEqual = TRUE;
    1310:	81 e0       	ldi	r24, 0x01	; 1
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <StringCompare+0x56>
   uint8_t u8_isEqual = TRUE;
    1316:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
    1318:	63 0f       	add	r22, r19
    131a:	71 1d       	adc	r23, r1
    131c:	fb 01       	movw	r30, r22
    131e:	90 81       	ld	r25, Z
    1320:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
    1322:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
}
    1324:	08 95       	ret

00001326 <STR_Length>:
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
    1326:	fb 01       	movw	r30, r22
	*StringLength = 0;
    1328:	11 82       	std	Z+1, r1	; 0x01
    132a:	10 82       	st	Z, r1
	while(*String!='\0')
    132c:	dc 01       	movw	r26, r24
    132e:	2c 91       	ld	r18, X
    1330:	22 23       	and	r18, r18
    1332:	49 f0       	breq	.+18     	; 0x1346 <STR_Length+0x20>
   return u8_isEqual;
}
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
    1334:	11 96       	adiw	r26, 0x01	; 1
{
	*StringLength = 0;
	while(*String!='\0')
	{
		(*StringLength)++;
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	91 83       	std	Z+1, r25	; 0x01
    133e:	80 83       	st	Z, r24
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
	*StringLength = 0;
	while(*String!='\0')
    1340:	8d 91       	ld	r24, X+
    1342:	88 23       	and	r24, r24
    1344:	c1 f7       	brne	.-16     	; 0x1336 <STR_Length+0x10>
	{
		(*StringLength)++;
		String++;
	}
	return 0;
}
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	08 95       	ret

0000134a <STR_CharIsNumeric>:
uint8_t STR_CharIsNumeric(uint8_t Character, uint8_t* Result)
{
	if(Character>=48 && Character<=57)
    134a:	80 53       	subi	r24, 0x30	; 48
    134c:	8a 30       	cpi	r24, 0x0A	; 10
    134e:	20 f4       	brcc	.+8      	; 0x1358 <STR_CharIsNumeric+0xe>
	{
		*Result=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	fb 01       	movw	r30, r22
    1354:	80 83       	st	Z, r24
    1356:	02 c0       	rjmp	.+4      	; 0x135c <STR_CharIsNumeric+0x12>
	}
	else
	{
		*Result=0;
    1358:	fb 01       	movw	r30, r22
    135a:	10 82       	st	Z, r1
	}
	return 0;
}
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	08 95       	ret

00001360 <STR_StringIsNumeric>:
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	0f 92       	push	r0
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	fc 01       	movw	r30, r24
    1376:	7b 01       	movw	r14, r22
	uint8_t FunRetVal = 0;
    1378:	19 82       	std	Y+1, r1	; 0x01
	while(*String!='\0')
    137a:	80 81       	ld	r24, Z
    137c:	88 23       	and	r24, r24
    137e:	b9 f0       	breq	.+46     	; 0x13ae <STR_StringIsNumeric+0x4e>
	{
		*Result=0;
	}
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
    1380:	8f 01       	movw	r16, r30
    1382:	0f 5f       	subi	r16, 0xFF	; 255
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
			*Result = 0;
			break;
		}
		else
		{
			*Result = 1;
    1386:	dd 24       	eor	r13, r13
    1388:	d3 94       	inc	r13
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
	{
		STR_CharIsNumeric(*String,&FunRetVal);
    138a:	be 01       	movw	r22, r28
    138c:	6f 5f       	subi	r22, 0xFF	; 255
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	0e 94 a5 09 	call	0x134a	; 0x134a <STR_CharIsNumeric>
		if(!FunRetVal)
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	88 23       	and	r24, r24
    1398:	19 f4       	brne	.+6      	; 0x13a0 <STR_StringIsNumeric+0x40>
		{
			*Result = 0;
    139a:	f7 01       	movw	r30, r14
    139c:	10 82       	st	Z, r1
			break;
    139e:	07 c0       	rjmp	.+14     	; 0x13ae <STR_StringIsNumeric+0x4e>
		}
		else
		{
			*Result = 1;
    13a0:	f7 01       	movw	r30, r14
    13a2:	d0 82       	st	Z, r13
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
    13a4:	f8 01       	movw	r30, r16
    13a6:	81 91       	ld	r24, Z+
    13a8:	8f 01       	movw	r16, r30
    13aa:	88 23       	and	r24, r24
    13ac:	71 f7       	brne	.-36     	; 0x138a <STR_StringIsNumeric+0x2a>
			String++;
			continue;
		}
	}
	return 0;
}
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	0f 90       	pop	r0
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
    13c0:	08 95       	ret

000013c2 <STR_CompareString>:
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	fc 01       	movw	r30, r24
    13cc:	ec 01       	movw	r28, r24
    13ce:	cb 01       	movw	r24, r22
			continue;
		}
	}
	return 0;
}
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
    13d0:	db 01       	movw	r26, r22
    13d2:	11 96       	adiw	r26, 0x01	; 1
    13d4:	8f 01       	movw	r16, r30
    13d6:	0f 5f       	subi	r16, 0xFF	; 255
    13d8:	1f 4f       	sbci	r17, 0xFF	; 255
{
	while(1)
	{
		if(*String_1==*String_2)
		{
			*Result = 1;
    13da:	61 e0       	ldi	r22, 0x01	; 1
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <STR_CompareString+0x1e>
		}
	}
	return 0;
}
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
    13de:	11 96       	adiw	r26, 0x01	; 1
	while(1)
	{
		if(*String_1==*String_2)
    13e0:	29 91       	ld	r18, Y+
    13e2:	fc 01       	movw	r30, r24
    13e4:	31 91       	ld	r19, Z+
    13e6:	cf 01       	movw	r24, r30
    13e8:	23 17       	cp	r18, r19
    13ea:	59 f4       	brne	.+22     	; 0x1402 <STR_CompareString+0x40>
		{
			*Result = 1;
    13ec:	fa 01       	movw	r30, r20
    13ee:	60 83       	st	Z, r22
			String_1++;
			String_2++;
			if(*String_1=='\0'&&*String_2=='\0')
    13f0:	f8 01       	movw	r30, r16
    13f2:	21 91       	ld	r18, Z+
    13f4:	8f 01       	movw	r16, r30
    13f6:	22 23       	and	r18, r18
    13f8:	91 f7       	brne	.-28     	; 0x13de <STR_CompareString+0x1c>
    13fa:	2c 91       	ld	r18, X
    13fc:	22 23       	and	r18, r18
    13fe:	79 f7       	brne	.-34     	; 0x13de <STR_CompareString+0x1c>
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <STR_CompareString+0x54>
				break;
			continue;
		}
		else if(*String_1=='\0'&&*String_2=='\0')
    1402:	22 23       	and	r18, r18
    1404:	31 f4       	brne	.+12     	; 0x1412 <STR_CompareString+0x50>
    1406:	33 23       	and	r19, r19
    1408:	21 f4       	brne	.+8      	; 0x1412 <STR_CompareString+0x50>
		{
			*Result = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	fa 01       	movw	r30, r20
    140e:	80 83       	st	Z, r24
			break;
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <STR_CompareString+0x54>
		}
		else
		{
			*Result = 0;
    1412:	fa 01       	movw	r30, r20
    1414:	10 82       	st	Z, r1
			break;
		}
	}
	return 0;
}
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	08 95       	ret

00001422 <STR_String2Number>:
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
    1422:	ef 92       	push	r14
    1424:	ff 92       	push	r15
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	8b 01       	movw	r16, r22
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
    1430:	fb 01       	movw	r30, r22
    1432:	11 82       	std	Z+1, r1	; 0x01
    1434:	10 82       	st	Z, r1
	while(*String!='\0')
    1436:	fc 01       	movw	r30, r24
    1438:	20 81       	ld	r18, Z
    143a:	22 23       	and	r18, r18
    143c:	39 f0       	breq	.+14     	; 0x144c <STR_String2Number+0x2a>
			break;
		}
	}
	return 0;
}
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
    143e:	31 96       	adiw	r30, 0x01	; 1
    1440:	ec 01       	movw	r28, r24
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
	{
		String++;
    1442:	21 96       	adiw	r28, 0x01	; 1
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
    1444:	21 91       	ld	r18, Z+
    1446:	22 23       	and	r18, r18
    1448:	e1 f7       	brne	.-8      	; 0x1442 <STR_String2Number+0x20>
    144a:	01 c0       	rjmp	.+2      	; 0x144e <STR_String2Number+0x2c>
    144c:	ec 01       	movw	r28, r24
			break;
		}
	}
	return 0;
}
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
    144e:	7c 01       	movw	r14, r24
    1450:	41 e0       	ldi	r20, 0x01	; 1
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	70 e0       	ldi	r23, 0x00	; 0
	}

	do
	{
		String--;
		(*Number)+=((*String-48)*Multiplier);
    1458:	8a 91       	ld	r24, -Y
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	c0 97       	sbiw	r24, 0x30	; 48
    145e:	84 9f       	mul	r24, r20
    1460:	90 01       	movw	r18, r0
    1462:	85 9f       	mul	r24, r21
    1464:	30 0d       	add	r19, r0
    1466:	94 9f       	mul	r25, r20
    1468:	30 0d       	add	r19, r0
    146a:	11 24       	eor	r1, r1
    146c:	f8 01       	movw	r30, r16
    146e:	80 81       	ld	r24, Z
    1470:	91 81       	ldd	r25, Z+1	; 0x01
    1472:	82 0f       	add	r24, r18
    1474:	93 1f       	adc	r25, r19
    1476:	91 83       	std	Z+1, r25	; 0x01
    1478:	80 83       	st	Z, r24
		Multiplier*=10;
    147a:	cb 01       	movw	r24, r22
    147c:	ba 01       	movw	r22, r20
    147e:	2a e0       	ldi	r18, 0x0A	; 10
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsi3>
    148a:	ab 01       	movw	r20, r22
    148c:	bc 01       	movw	r22, r24
	}while(String!=StartOfString);
    148e:	ce 15       	cp	r28, r14
    1490:	df 05       	cpc	r29, r15
    1492:	11 f7       	brne	.-60     	; 0x1458 <STR_String2Number+0x36>
	return 0;
}
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	08 95       	ret

000014a4 <STR_StringReverse>:
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 81       	ld	r18, Z
    14a8:	22 23       	and	r18, r18
    14aa:	39 f0       	breq	.+14     	; 0x14ba <STR_StringReverse+0x16>
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
    14ac:	dc 01       	movw	r26, r24
    14ae:	11 96       	adiw	r26, 0x01	; 1
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
	{
		B++;
    14b0:	31 96       	adiw	r30, 0x01	; 1
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    14b2:	2d 91       	ld	r18, X+
    14b4:	22 23       	and	r18, r18
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <STR_StringReverse+0xc>
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <STR_StringReverse+0x18>
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
    14ba:	fc 01       	movw	r30, r24
	uint8_t Temp = 0;
	while(*B != '\0')
	{
		B++;
	}
	B--;
    14bc:	9f 01       	movw	r18, r30
    14be:	21 50       	subi	r18, 0x01	; 1
    14c0:	30 40       	sbci	r19, 0x00	; 0
	while(A<B)
    14c2:	82 17       	cp	r24, r18
    14c4:	93 07       	cpc	r25, r19
    14c6:	50 f4       	brcc	.+20     	; 0x14dc <STR_StringReverse+0x38>
    14c8:	dc 01       	movw	r26, r24
	{
		//swap
		Temp=*A;
    14ca:	8c 91       	ld	r24, X
		*A=*B;
    14cc:	92 91       	ld	r25, -Z
    14ce:	9d 93       	st	X+, r25
		*B=Temp;
    14d0:	80 83       	st	Z, r24
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
    14d2:	cf 01       	movw	r24, r30
    14d4:	01 97       	sbiw	r24, 0x01	; 1
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
    14d6:	a8 17       	cp	r26, r24
    14d8:	b9 07       	cpc	r27, r25
    14da:	b8 f3       	brcs	.-18     	; 0x14ca <STR_StringReverse+0x26>
		*A=*B;
		*B=Temp;
		A++;B--;
	}
	return 0;
}
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	08 95       	ret

000014e0 <STR_Number2String>:
		Multiplier*=10;
	}while(String!=StartOfString);
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	8a 01       	movw	r16, r20
	uint8_t* SringCpy = String;
	if(Number==0)
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	a1 05       	cpc	r26, r1
    14fa:	b1 05       	cpc	r27, r1
    14fc:	21 f4       	brne	.+8      	; 0x1506 <STR_Number2String+0x26>
	{
		*String='0';
    14fe:	80 e3       	ldi	r24, 0x30	; 48
    1500:	fa 01       	movw	r30, r20
    1502:	80 83       	st	Z, r24
    1504:	1f c0       	rjmp	.+62     	; 0x1544 <STR_Number2String+0x64>
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
	uint8_t* SringCpy = String;
	if(Number==0)
    1506:	ea 01       	movw	r28, r20
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
    1508:	0f 2e       	mov	r0, r31
    150a:	fa e0       	ldi	r31, 0x0A	; 10
    150c:	cf 2e       	mov	r12, r31
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	df 2e       	mov	r13, r31
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	ef 2e       	mov	r14, r31
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	ff 2e       	mov	r15, r31
    151a:	f0 2d       	mov	r31, r0
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <STR_Number2String+0x40>
			String++;
    151e:	ef 01       	movw	r28, r30
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
    1520:	bc 01       	movw	r22, r24
    1522:	cd 01       	movw	r24, r26
    1524:	a7 01       	movw	r20, r14
    1526:	96 01       	movw	r18, r12
    1528:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__udivmodsi4>
    152c:	60 5d       	subi	r22, 0xD0	; 208
    152e:	fe 01       	movw	r30, r28
    1530:	61 93       	st	Z+, r22
			String++;
			Number/=10;
    1532:	82 2f       	mov	r24, r18
    1534:	93 2f       	mov	r25, r19
    1536:	a4 2f       	mov	r26, r20
    1538:	b5 2f       	mov	r27, r21
		}while(Number);
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	a1 05       	cpc	r26, r1
    153e:	b1 05       	cpc	r27, r1
    1540:	71 f7       	brne	.-36     	; 0x151e <STR_Number2String+0x3e>
		*String = NULL_TERMINATOR;
    1542:	19 82       	std	Y+1, r1	; 0x01
	}
	STR_StringReverse(SringCpy);
    1544:	c8 01       	movw	r24, r16
    1546:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <STR_StringReverse>
	return 0;
}
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	df 90       	pop	r13
    155a:	cf 90       	pop	r12
    155c:	08 95       	ret

0000155e <SteeringTask>:
	CRASH_MainFunction();
}

void SteeringTask(void)
{
	STEERING_MainFunction();
    155e:	0e 94 ab 02 	call	0x556	; 0x556 <STEERING_MainFunction>
}
    1562:	08 95       	ret

00001564 <CrashingTask>:
	SENSING_MainFunction();	
}

void CrashingTask(void)
{
	CRASH_MainFunction();
    1564:	0e 94 49 00 	call	0x92	; 0x92 <CRASH_MainFunction>
}
    1568:	08 95       	ret

0000156a <SensingTask>:
void CrashingTask(void);
void SteeringTask(void);

void SensingTask(void)
{
	SENSING_MainFunction();	
    156a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SENSING_MainFunction>
}
    156e:	08 95       	ret

00001570 <main>:
	STEERING_MainFunction();
}

int main(void)
{
	OS_Init();
    1570:	0e 94 2e 12 	call	0x245c	; 0x245c <OS_Init>

	OS_CreateTask(SENSING_TASK_PRIORITY,SENSING_TASK_FIREST_DELAY,SENSING_TASK_PERIODICITY,SensingTask,&SensingTaskHandler);	
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	21 e0       	ldi	r18, 0x01	; 1
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	05 eb       	ldi	r16, 0xB5	; 181
    1582:	1a e0       	ldi	r17, 0x0A	; 10
    1584:	0f 2e       	mov	r0, r31
    1586:	ff e4       	ldi	r31, 0x4F	; 79
    1588:	ef 2e       	mov	r14, r31
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	ff 2e       	mov	r15, r31
    158e:	f0 2d       	mov	r31, r0
    1590:	0e 94 2b 13 	call	0x2656	; 0x2656 <OS_CreateTask>
	OS_CreateTask(CARSHING_TASK_PRIORITY,CARSHING_TASK_FIREST_DELAY,CARSHING_TASK_PERIODICITY,CrashingTask,&CrashingTaskHandler);	
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	61 e0       	ldi	r22, 0x01	; 1
    1598:	22 e0       	ldi	r18, 0x02	; 2
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	02 eb       	ldi	r16, 0xB2	; 178
    15a2:	1a e0       	ldi	r17, 0x0A	; 10
    15a4:	0f 2e       	mov	r0, r31
    15a6:	f3 e5       	ldi	r31, 0x53	; 83
    15a8:	ef 2e       	mov	r14, r31
    15aa:	f1 e0       	ldi	r31, 0x01	; 1
    15ac:	ff 2e       	mov	r15, r31
    15ae:	f0 2d       	mov	r31, r0
    15b0:	0e 94 2b 13 	call	0x2656	; 0x2656 <OS_CreateTask>
	OS_CreateTask(STEERING_TASK_PRIORITY,STEERING_TASK_FIREST_DELAY,STEERING_TASK_PERIODICITY,SteeringTask,&SteeringTaskHandler);
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	22 e0       	ldi	r18, 0x02	; 2
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	0f ea       	ldi	r16, 0xAF	; 175
    15c2:	1a e0       	ldi	r17, 0x0A	; 10
    15c4:	0f 2e       	mov	r0, r31
    15c6:	f1 e5       	ldi	r31, 0x51	; 81
    15c8:	ef 2e       	mov	r14, r31
    15ca:	f1 e0       	ldi	r31, 0x01	; 1
    15cc:	ff 2e       	mov	r15, r31
    15ce:	f0 2d       	mov	r31, r0
    15d0:	0e 94 2b 13 	call	0x2656	; 0x2656 <OS_CreateTask>

	OS_Run();
    15d4:	0e 94 67 12 	call	0x24ce	; 0x24ce <OS_Run>
    15d8:	ff cf       	rjmp	.-2      	; 0x15d8 <main+0x68>

000015da <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
    15da:	42 30       	cpi	r20, 0x02	; 2
    15dc:	08 f0       	brcs	.+2      	; 0x15e0 <DIO_SetPinDirection+0x6>
    15de:	69 c0       	rjmp	.+210    	; 0x16b2 <DIO_SetPinDirection+0xd8>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
    15e0:	68 30       	cpi	r22, 0x08	; 8
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <DIO_SetPinDirection+0xc>
    15e4:	68 c0       	rjmp	.+208    	; 0x16b6 <DIO_SetPinDirection+0xdc>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	f9 f0       	breq	.+62     	; 0x1628 <DIO_SetPinDirection+0x4e>
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	30 f0       	brcs	.+12     	; 0x15fa <DIO_SetPinDirection+0x20>
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	91 f1       	breq	.+100    	; 0x1656 <DIO_SetPinDirection+0x7c>
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <DIO_SetPinDirection+0x1e>
    15f6:	61 c0       	rjmp	.+194    	; 0x16ba <DIO_SetPinDirection+0xe0>
    15f8:	45 c0       	rjmp	.+138    	; 0x1684 <DIO_SetPinDirection+0xaa>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	06 2e       	mov	r0, r22
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_SetPinDirection+0x2c>
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	0a 94       	dec	r0
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_SetPinDirection+0x28>
    160a:	80 95       	com	r24
    160c:	9a b3       	in	r25, 0x1a	; 26
    160e:	89 23       	and	r24, r25
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	9a 01       	movw	r18, r20
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_SetPinDirection+0x40>
    1616:	22 0f       	add	r18, r18
    1618:	33 1f       	adc	r19, r19
    161a:	6a 95       	dec	r22
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_SetPinDirection+0x3c>
    161e:	b9 01       	movw	r22, r18
    1620:	68 2b       	or	r22, r24
    1622:	6a bb       	out	0x1a, r22	; 26
				u8_ErrorState=ERROR_OK;
    1624:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1626:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	06 2e       	mov	r0, r22
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_SetPinDirection+0x5a>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_SetPinDirection+0x56>
    1638:	80 95       	com	r24
    163a:	97 b3       	in	r25, 0x17	; 23
    163c:	89 23       	and	r24, r25
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	9a 01       	movw	r18, r20
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <DIO_SetPinDirection+0x6e>
    1644:	22 0f       	add	r18, r18
    1646:	33 1f       	adc	r19, r19
    1648:	6a 95       	dec	r22
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <DIO_SetPinDirection+0x6a>
    164c:	b9 01       	movw	r22, r18
    164e:	68 2b       	or	r22, r24
    1650:	67 bb       	out	0x17, r22	; 23
				u8_ErrorState=ERROR_OK;
    1652:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1654:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	06 2e       	mov	r0, r22
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_SetPinDirection+0x88>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_SetPinDirection+0x84>
    1666:	80 95       	com	r24
    1668:	94 b3       	in	r25, 0x14	; 20
    166a:	89 23       	and	r24, r25
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	9a 01       	movw	r18, r20
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <DIO_SetPinDirection+0x9c>
    1672:	22 0f       	add	r18, r18
    1674:	33 1f       	adc	r19, r19
    1676:	6a 95       	dec	r22
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <DIO_SetPinDirection+0x98>
    167a:	b9 01       	movw	r22, r18
    167c:	68 2b       	or	r22, r24
    167e:	64 bb       	out	0x14, r22	; 20
				u8_ErrorState=ERROR_OK;
    1680:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1682:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	06 2e       	mov	r0, r22
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_SetPinDirection+0xb6>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_SetPinDirection+0xb2>
    1694:	80 95       	com	r24
    1696:	91 b3       	in	r25, 0x11	; 17
    1698:	89 23       	and	r24, r25
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	9a 01       	movw	r18, r20
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <DIO_SetPinDirection+0xca>
    16a0:	22 0f       	add	r18, r18
    16a2:	33 1f       	adc	r19, r19
    16a4:	6a 95       	dec	r22
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <DIO_SetPinDirection+0xc6>
    16a8:	b9 01       	movw	r22, r18
    16aa:	68 2b       	or	r22, r24
    16ac:	61 bb       	out	0x11, r22	; 17
				u8_ErrorState=ERROR_OK;
    16ae:	80 e0       	ldi	r24, 0x00	; 0
				break;
    16b0:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
    16bc:	08 95       	ret

000016be <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
    16be:	42 30       	cpi	r20, 0x02	; 2
    16c0:	08 f0       	brcs	.+2      	; 0x16c4 <DIO_WritePin+0x6>
    16c2:	69 c0       	rjmp	.+210    	; 0x1796 <DIO_WritePin+0xd8>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
    16c4:	68 30       	cpi	r22, 0x08	; 8
    16c6:	08 f0       	brcs	.+2      	; 0x16ca <DIO_WritePin+0xc>
    16c8:	68 c0       	rjmp	.+208    	; 0x179a <DIO_WritePin+0xdc>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	f9 f0       	breq	.+62     	; 0x170c <DIO_WritePin+0x4e>
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	30 f0       	brcs	.+12     	; 0x16de <DIO_WritePin+0x20>
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	91 f1       	breq	.+100    	; 0x173a <DIO_WritePin+0x7c>
    16d6:	83 30       	cpi	r24, 0x03	; 3
    16d8:	09 f0       	breq	.+2      	; 0x16dc <DIO_WritePin+0x1e>
    16da:	61 c0       	rjmp	.+194    	; 0x179e <DIO_WritePin+0xe0>
    16dc:	45 c0       	rjmp	.+138    	; 0x1768 <DIO_WritePin+0xaa>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	06 2e       	mov	r0, r22
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <DIO_WritePin+0x2c>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <DIO_WritePin+0x28>
    16ee:	80 95       	com	r24
    16f0:	9b b3       	in	r25, 0x1b	; 27
    16f2:	89 23       	and	r24, r25
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	9a 01       	movw	r18, r20
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <DIO_WritePin+0x40>
    16fa:	22 0f       	add	r18, r18
    16fc:	33 1f       	adc	r19, r19
    16fe:	6a 95       	dec	r22
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <DIO_WritePin+0x3c>
    1702:	b9 01       	movw	r22, r18
    1704:	68 2b       	or	r22, r24
    1706:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    1708:	80 e0       	ldi	r24, 0x00	; 0
				break;
    170a:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	06 2e       	mov	r0, r22
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_WritePin+0x5a>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_WritePin+0x56>
    171c:	80 95       	com	r24
    171e:	98 b3       	in	r25, 0x18	; 24
    1720:	89 23       	and	r24, r25
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	9a 01       	movw	r18, r20
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_WritePin+0x6e>
    1728:	22 0f       	add	r18, r18
    172a:	33 1f       	adc	r19, r19
    172c:	6a 95       	dec	r22
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <DIO_WritePin+0x6a>
    1730:	b9 01       	movw	r22, r18
    1732:	68 2b       	or	r22, r24
    1734:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    1736:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1738:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	06 2e       	mov	r0, r22
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_WritePin+0x88>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_WritePin+0x84>
    174a:	80 95       	com	r24
    174c:	95 b3       	in	r25, 0x15	; 21
    174e:	89 23       	and	r24, r25
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	9a 01       	movw	r18, r20
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_WritePin+0x9c>
    1756:	22 0f       	add	r18, r18
    1758:	33 1f       	adc	r19, r19
    175a:	6a 95       	dec	r22
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_WritePin+0x98>
    175e:	b9 01       	movw	r22, r18
    1760:	68 2b       	or	r22, r24
    1762:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    1764:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1766:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	06 2e       	mov	r0, r22
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <DIO_WritePin+0xb6>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <DIO_WritePin+0xb2>
    1778:	80 95       	com	r24
    177a:	92 b3       	in	r25, 0x12	; 18
    177c:	89 23       	and	r24, r25
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	9a 01       	movw	r18, r20
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <DIO_WritePin+0xca>
    1784:	22 0f       	add	r18, r18
    1786:	33 1f       	adc	r19, r19
    1788:	6a 95       	dec	r22
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <DIO_WritePin+0xc6>
    178c:	b9 01       	movw	r22, r18
    178e:	68 2b       	or	r22, r24
    1790:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    1792:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1794:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    179e:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    17a0:	08 95       	ret

000017a2 <DIO_TogglePin>:
ERROR_STATE_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    17a2:	68 30       	cpi	r22, 0x08	; 8
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <DIO_TogglePin+0x6>
    17a6:	42 c0       	rjmp	.+132    	; 0x182c <DIO_TogglePin+0x8a>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	b1 f0       	breq	.+44     	; 0x17d8 <DIO_TogglePin+0x36>
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	30 f0       	brcs	.+12     	; 0x17bc <DIO_TogglePin+0x1a>
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	01 f1       	breq	.+64     	; 0x17f4 <DIO_TogglePin+0x52>
    17b4:	83 30       	cpi	r24, 0x03	; 3
    17b6:	09 f0       	breq	.+2      	; 0x17ba <DIO_TogglePin+0x18>
    17b8:	3b c0       	rjmp	.+118    	; 0x1830 <DIO_TogglePin+0x8e>
    17ba:	2a c0       	rjmp	.+84     	; 0x1810 <DIO_TogglePin+0x6e>
		{
			case PORT_A:
				BIT_TOGGLE(PORTA,PinNo);
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9c 01       	movw	r18, r24
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_TogglePin+0x26>
    17c4:	22 0f       	add	r18, r18
    17c6:	33 1f       	adc	r19, r19
    17c8:	6a 95       	dec	r22
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_TogglePin+0x22>
    17cc:	b9 01       	movw	r22, r18
    17ce:	8b b3       	in	r24, 0x1b	; 27
    17d0:	68 27       	eor	r22, r24
    17d2:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    17d4:	80 e0       	ldi	r24, 0x00	; 0
				break;
    17d6:	08 95       	ret
			case PORT_B:
				BIT_TOGGLE(PORTB,PinNo);
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9c 01       	movw	r18, r24
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <DIO_TogglePin+0x42>
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	6a 95       	dec	r22
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <DIO_TogglePin+0x3e>
    17e8:	b9 01       	movw	r22, r18
    17ea:	88 b3       	in	r24, 0x18	; 24
    17ec:	68 27       	eor	r22, r24
    17ee:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    17f0:	80 e0       	ldi	r24, 0x00	; 0
				break;
    17f2:	08 95       	ret
			case PORT_C:
				BIT_TOGGLE(PORTC,PinNo);
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9c 01       	movw	r18, r24
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <DIO_TogglePin+0x5e>
    17fc:	22 0f       	add	r18, r18
    17fe:	33 1f       	adc	r19, r19
    1800:	6a 95       	dec	r22
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <DIO_TogglePin+0x5a>
    1804:	b9 01       	movw	r22, r18
    1806:	85 b3       	in	r24, 0x15	; 21
    1808:	68 27       	eor	r22, r24
    180a:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    180c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    180e:	08 95       	ret
			case PORT_D:
				BIT_TOGGLE(PORTD,PinNo);
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9c 01       	movw	r18, r24
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_TogglePin+0x7a>
    1818:	22 0f       	add	r18, r18
    181a:	33 1f       	adc	r19, r19
    181c:	6a 95       	dec	r22
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_TogglePin+0x76>
    1820:	b9 01       	movw	r22, r18
    1822:	82 b3       	in	r24, 0x12	; 18
    1824:	68 27       	eor	r22, r24
    1826:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    1828:	80 e0       	ldi	r24, 0x00	; 0
				break;
    182a:	08 95       	ret
ERROR_STATE_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	08 95       	ret
			case PORT_D:
				BIT_TOGGLE(PORTD,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    1830:	81 e0       	ldi	r24, 0x01	; 1
				break;	
		}	
	}	
	return u8_ErrorState;
}
    1832:	08 95       	ret

00001834 <DIO_ReadPin>:
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    1834:	68 30       	cpi	r22, 0x08	; 8
    1836:	08 f0       	brcs	.+2      	; 0x183a <DIO_ReadPin+0x6>
    1838:	46 c0       	rjmp	.+140    	; 0x18c6 <DIO_ReadPin+0x92>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(NULL_PTR==PinData)
    183a:	41 15       	cp	r20, r1
    183c:	51 05       	cpc	r21, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <DIO_ReadPin+0xe>
    1840:	44 c0       	rjmp	.+136    	; 0x18ca <DIO_ReadPin+0x96>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	b1 f0       	breq	.+44     	; 0x1872 <DIO_ReadPin+0x3e>
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	30 f0       	brcs	.+12     	; 0x1856 <DIO_ReadPin+0x22>
    184a:	82 30       	cpi	r24, 0x02	; 2
    184c:	01 f1       	breq	.+64     	; 0x188e <DIO_ReadPin+0x5a>
    184e:	83 30       	cpi	r24, 0x03	; 3
    1850:	09 f0       	breq	.+2      	; 0x1854 <DIO_ReadPin+0x20>
    1852:	3d c0       	rjmp	.+122    	; 0x18ce <DIO_ReadPin+0x9a>
    1854:	2a c0       	rjmp	.+84     	; 0x18aa <DIO_ReadPin+0x76>
		{
			case PORT_A:
				* PinData=BIT_GET(PINA,PinNo);
    1856:	89 b3       	in	r24, 0x19	; 25
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	9c 01       	movw	r18, r24
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <DIO_ReadPin+0x2e>
    185e:	35 95       	asr	r19
    1860:	27 95       	ror	r18
    1862:	6a 95       	dec	r22
    1864:	e2 f7       	brpl	.-8      	; 0x185e <DIO_ReadPin+0x2a>
    1866:	b9 01       	movw	r22, r18
    1868:	61 70       	andi	r22, 0x01	; 1
    186a:	fa 01       	movw	r30, r20
    186c:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    186e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1870:	08 95       	ret
			case PORT_B:
				* PinData=BIT_GET(PINB,PinNo);
    1872:	86 b3       	in	r24, 0x16	; 22
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	9c 01       	movw	r18, r24
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_ReadPin+0x4a>
    187a:	35 95       	asr	r19
    187c:	27 95       	ror	r18
    187e:	6a 95       	dec	r22
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_ReadPin+0x46>
    1882:	b9 01       	movw	r22, r18
    1884:	61 70       	andi	r22, 0x01	; 1
    1886:	fa 01       	movw	r30, r20
    1888:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    188a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    188c:	08 95       	ret
			case PORT_C:
				* PinData=BIT_GET(PINC,PinNo);
    188e:	83 b3       	in	r24, 0x13	; 19
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9c 01       	movw	r18, r24
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_ReadPin+0x66>
    1896:	35 95       	asr	r19
    1898:	27 95       	ror	r18
    189a:	6a 95       	dec	r22
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <DIO_ReadPin+0x62>
    189e:	b9 01       	movw	r22, r18
    18a0:	61 70       	andi	r22, 0x01	; 1
    18a2:	fa 01       	movw	r30, r20
    18a4:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    18a6:	80 e0       	ldi	r24, 0x00	; 0
				break;
    18a8:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
    18aa:	80 b3       	in	r24, 0x10	; 16
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9c 01       	movw	r18, r24
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <DIO_ReadPin+0x82>
    18b2:	35 95       	asr	r19
    18b4:	27 95       	ror	r18
    18b6:	6a 95       	dec	r22
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <DIO_ReadPin+0x7e>
    18ba:	b9 01       	movw	r22, r18
    18bc:	61 70       	andi	r22, 0x01	; 1
    18be:	fa 01       	movw	r30, r20
    18c0:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    18c2:	80 e0       	ldi	r24, 0x00	; 0
				break;
    18c4:	08 95       	ret
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	08 95       	ret
	}
	else if(NULL_PTR==PinData)
	{
		u8_ErrorState=ERROR_NOK;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    18d0:	08 95       	ret

000018d2 <DIO_EnablePinPullup>:


ERROR_STATE_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    18d2:	68 30       	cpi	r22, 0x08	; 8
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <DIO_EnablePinPullup+0x6>
    18d6:	4e c0       	rjmp	.+156    	; 0x1974 <DIO_EnablePinPullup+0xa2>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{	
		switch(PortName)
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	c9 f0       	breq	.+50     	; 0x190e <DIO_EnablePinPullup+0x3c>
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	30 f0       	brcs	.+12     	; 0x18ec <DIO_EnablePinPullup+0x1a>
    18e0:	82 30       	cpi	r24, 0x02	; 2
    18e2:	31 f1       	breq	.+76     	; 0x1930 <DIO_EnablePinPullup+0x5e>
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	09 f0       	breq	.+2      	; 0x18ea <DIO_EnablePinPullup+0x18>
    18e8:	47 c0       	rjmp	.+142    	; 0x1978 <DIO_EnablePinPullup+0xa6>
    18ea:	33 c0       	rjmp	.+102    	; 0x1952 <DIO_EnablePinPullup+0x80>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PIN_HIGH);
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9c 01       	movw	r18, r24
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_EnablePinPullup+0x26>
    18f4:	22 0f       	add	r18, r18
    18f6:	33 1f       	adc	r19, r19
    18f8:	6a 95       	dec	r22
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_EnablePinPullup+0x22>
    18fc:	b9 01       	movw	r22, r18
    18fe:	92 2f       	mov	r25, r18
    1900:	90 95       	com	r25
    1902:	8b b3       	in	r24, 0x1b	; 27
    1904:	89 23       	and	r24, r25
    1906:	68 2b       	or	r22, r24
    1908:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    190a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    190c:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PIN_HIGH);
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9c 01       	movw	r18, r24
    1914:	02 c0       	rjmp	.+4      	; 0x191a <DIO_EnablePinPullup+0x48>
    1916:	22 0f       	add	r18, r18
    1918:	33 1f       	adc	r19, r19
    191a:	6a 95       	dec	r22
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <DIO_EnablePinPullup+0x44>
    191e:	b9 01       	movw	r22, r18
    1920:	92 2f       	mov	r25, r18
    1922:	90 95       	com	r25
    1924:	88 b3       	in	r24, 0x18	; 24
    1926:	89 23       	and	r24, r25
    1928:	68 2b       	or	r22, r24
    192a:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    192c:	80 e0       	ldi	r24, 0x00	; 0
				break;                            
    192e:	08 95       	ret
			case PORT_C:                          
				BIT_WRITE(PORTC,PinNo,PIN_HIGH);
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9c 01       	movw	r18, r24
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_EnablePinPullup+0x6a>
    1938:	22 0f       	add	r18, r18
    193a:	33 1f       	adc	r19, r19
    193c:	6a 95       	dec	r22
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <DIO_EnablePinPullup+0x66>
    1940:	b9 01       	movw	r22, r18
    1942:	92 2f       	mov	r25, r18
    1944:	90 95       	com	r25
    1946:	85 b3       	in	r24, 0x15	; 21
    1948:	89 23       	and	r24, r25
    194a:	68 2b       	or	r22, r24
    194c:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    194e:	80 e0       	ldi	r24, 0x00	; 0
				break;                            
    1950:	08 95       	ret
			case PORT_D:                          
				BIT_WRITE(PORTD,PinNo,PIN_HIGH);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	9c 01       	movw	r18, r24
    1958:	02 c0       	rjmp	.+4      	; 0x195e <DIO_EnablePinPullup+0x8c>
    195a:	22 0f       	add	r18, r18
    195c:	33 1f       	adc	r19, r19
    195e:	6a 95       	dec	r22
    1960:	e2 f7       	brpl	.-8      	; 0x195a <DIO_EnablePinPullup+0x88>
    1962:	b9 01       	movw	r22, r18
    1964:	92 2f       	mov	r25, r18
    1966:	90 95       	com	r25
    1968:	82 b3       	in	r24, 0x12	; 18
    196a:	89 23       	and	r24, r25
    196c:	68 2b       	or	r22, r24
    196e:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    1970:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1972:	08 95       	ret
ERROR_STATE_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	08 95       	ret
			case PORT_D:                          
				BIT_WRITE(PORTD,PinNo,PIN_HIGH);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    1978:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}	
	}	
	return u8_ErrorState;
    197a:	08 95       	ret

0000197c <GLOBALINTTERUPTS_Enable>:
/**
* @brief: This function enables global interrupts.
*/
void GLOBALINTTERUPTS_Enable(void)
{
   SET_BIT(SREG, I);
    197c:	8f b7       	in	r24, 0x3f	; 63
    197e:	80 68       	ori	r24, 0x80	; 128
    1980:	8f bf       	out	0x3f, r24	; 63
}
    1982:	08 95       	ret

00001984 <GLOBALINTTERUPTS_Disable>:
/**
* @brief: This function disables global interrupts.
*/
void GLOBALINTTERUPTS_Disable(void)
{
   CLEAR_BIT(SREG, I);
    1984:	8f b7       	in	r24, 0x3f	; 63
    1986:	8f 77       	andi	r24, 0x7F	; 127
    1988:	8f bf       	out	0x3f, r24	; 63
    198a:	08 95       	ret

0000198c <ICU_Init>:

//APIs Implementation
ERROR_STATE_t ICU_Init(uint8_t ICUNumber)
{	
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    198c:	88 23       	and	r24, r24
    198e:	11 f5       	brne	.+68     	; 0x19d4 <ICU_Init+0x48>
	{
		#if  ICU1
			case ICU_1:
				DIO_SetPinDirection(ICU1_PORT,ICU1_PIN,PIN_INPUT);
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	66 e0       	ldi	r22, 0x06	; 6
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
				TWO_BITS_WRITE(TCCR1A,WGM10,TWO_BITS_GET(gastr_ICUConfig[ICU_1].ICUMode,BIT_0));
    199a:	80 91 a6 00 	lds	r24, 0x00A6
    199e:	28 2f       	mov	r18, r24
    19a0:	23 70       	andi	r18, 0x03	; 3
    19a2:	9f b5       	in	r25, 0x2f	; 47
    19a4:	9c 7f       	andi	r25, 0xFC	; 252
    19a6:	92 2b       	or	r25, r18
    19a8:	9f bd       	out	0x2f, r25	; 47
				TWO_BITS_WRITE(TCCR1B,WGM12,TWO_BITS_GET(gastr_ICUConfig[ICU_1].ICUMode,BIT_2));
    19aa:	86 95       	lsr	r24
    19ac:	86 95       	lsr	r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	83 70       	andi	r24, 0x03	; 3
    19b2:	90 70       	andi	r25, 0x00	; 0
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	9e b5       	in	r25, 0x2e	; 46
    19c2:	97 7e       	andi	r25, 0xE7	; 231
    19c4:	89 2b       	or	r24, r25
				THREE_BITS_WRITE(TCCR1B,CS10,gastr_ICUConfig[ICU_1].ICUClkSource);
    19c6:	88 7f       	andi	r24, 0xF8	; 248
    19c8:	90 91 a7 00 	lds	r25, 0x00A7
    19cc:	89 2b       	or	r24, r25
    19ce:	8e bd       	out	0x2e, r24	; 46
				u8_ErrorState=ERROR_OK;
    19d0:	80 e0       	ldi	r24, 0x00	; 0
				break;
    19d2:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}	
	return u8_ErrorState;
}
    19d6:	08 95       	ret

000019d8 <ICU_Reset>:

ERROR_STATE_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((ICU1_FALLING_EDGE!=ICUEdgeDetector )&&(ICU1_RISING_EDGE!=ICUEdgeDetector ))
    19d8:	62 30       	cpi	r22, 0x02	; 2
    19da:	70 f4       	brcc	.+28     	; 0x19f8 <ICU_Reset+0x20>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    19dc:	88 23       	and	r24, r24
    19de:	71 f4       	brne	.+28     	; 0x19fc <ICU_Reset+0x24>
		{
			#if  ICU1
			case ICU_1:
			REG_WRITE(TCNT1,CLEAR_REGISTER);
    19e0:	1d bc       	out	0x2d, r1	; 45
    19e2:	1c bc       	out	0x2c, r1	; 44
			BIT_WRITE(TCCR1B,ICES1,ICUEdgeDetector);
    19e4:	62 95       	swap	r22
    19e6:	66 0f       	add	r22, r22
    19e8:	66 0f       	add	r22, r22
    19ea:	60 7c       	andi	r22, 0xC0	; 192
    19ec:	8e b5       	in	r24, 0x2e	; 46
    19ee:	8f 7b       	andi	r24, 0xBF	; 191
    19f0:	68 2b       	or	r22, r24
    19f2:	6e bd       	out	0x2e, r22	; 46
			//BIT_WRITE(TIFR,TOV1,BIT_HIGH);
			//BIT_WRITE(TIFR,ICF1,BIT_HIGH);
			u8_ErrorState = ERROR_OK;
    19f4:	80 e0       	ldi	r24, 0x00	; 0
			break;
    19f6:	08 95       	ret
ERROR_STATE_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((ICU1_FALLING_EDGE!=ICUEdgeDetector )&&(ICU1_RISING_EDGE!=ICUEdgeDetector ))
	{
		u8_ErrorState = ERROR_NOK;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	08 95       	ret
			//BIT_WRITE(TIFR,ICF1,BIT_HIGH);
			u8_ErrorState = ERROR_OK;
			break;
			#endif
			default:
			u8_ErrorState = ERROR_NOK;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	return u8_ErrorState;
}
    19fe:	08 95       	ret

00001a00 <ICU_UpdateTimeOn>:

ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
    1a00:	8f 92       	push	r8
    1a02:	9f 92       	push	r9
    1a04:	af 92       	push	r10
    1a06:	bf 92       	push	r11
    1a08:	ef 92       	push	r14
    1a0a:	ff 92       	push	r15
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	8b 01       	movw	r16, r22
    1a16:	7a 01       	movw	r14, r20
	uint8_t u8_ErrorState=ERROR_OK;
	if((NULL_PTR==ICUState) || (NULL_PTR==TimeOnValue))
    1a18:	61 15       	cp	r22, r1
    1a1a:	71 05       	cpc	r23, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <ICU_UpdateTimeOn+0x20>
    1a1e:	9c c0       	rjmp	.+312    	; 0x1b58 <ICU_UpdateTimeOn+0x158>
    1a20:	41 15       	cp	r20, r1
    1a22:	51 05       	cpc	r21, r1
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <ICU_UpdateTimeOn+0x28>
    1a26:	9a c0       	rjmp	.+308    	; 0x1b5c <ICU_UpdateTimeOn+0x15c>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    1a28:	88 23       	and	r24, r24
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <ICU_UpdateTimeOn+0x2e>
    1a2c:	99 c0       	rjmp	.+306    	; 0x1b60 <ICU_UpdateTimeOn+0x160>
		{
			#if  ICU1
				case ICU_1:
				{
					switch(*ICUState)
    1a2e:	fb 01       	movw	r30, r22
    1a30:	80 81       	ld	r24, Z
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	91 f0       	breq	.+36     	; 0x1a5a <ICU_UpdateTimeOn+0x5a>
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	20 f0       	brcs	.+8      	; 0x1a42 <ICU_UpdateTimeOn+0x42>
    1a3a:	82 30       	cpi	r24, 0x02	; 2
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <ICU_UpdateTimeOn+0x40>
    1a3e:	92 c0       	rjmp	.+292    	; 0x1b64 <ICU_UpdateTimeOn+0x164>
    1a40:	26 c0       	rjmp	.+76     	; 0x1a8e <ICU_UpdateTimeOn+0x8e>
					{
						case START_STATE:
						{
							if(ERROR_OK != ICU_Reset(ICU_1,ICU1_RISING_EDGE))
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	61 e0       	ldi	r22, 0x01	; 1
    1a46:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <ICU_Reset>
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <ICU_UpdateTimeOn+0x50>
    1a4e:	8c c0       	rjmp	.+280    	; 0x1b68 <ICU_UpdateTimeOn+0x168>
							{
								u8_ErrorState = ERROR_NOK;
							}
							else
							{
								*ICUState=WAITING_RISING_EDGE_STATE;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	f8 01       	movw	r30, r16
    1a54:	80 83       	st	Z, r24
								u8_ErrorState = ERROR_OK;															
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	8e c0       	rjmp	.+284    	; 0x1b76 <ICU_UpdateTimeOn+0x176>
							}
							break;
						}
						case WAITING_RISING_EDGE_STATE:
						{
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    1a5a:	88 b7       	in	r24, 0x38	; 56
    1a5c:	82 95       	swap	r24
    1a5e:	86 95       	lsr	r24
    1a60:	87 70       	andi	r24, 0x07	; 7
    1a62:	80 ff       	sbrs	r24, 0
    1a64:	83 c0       	rjmp	.+262    	; 0x1b6c <ICU_UpdateTimeOn+0x16c>
							{
								if(ERROR_OK!=ICU_Reset(ICU_1,ICU1_FALLING_EDGE))
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <ICU_Reset>
    1a6e:	88 23       	and	r24, r24
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <ICU_UpdateTimeOn+0x74>
    1a72:	7e c0       	rjmp	.+252    	; 0x1b70 <ICU_UpdateTimeOn+0x170>
								{
									u8_ErrorState = ERROR_NOK;
								}
								else
								{
									OverflowCounter=0;
    1a74:	10 92 0f 01 	sts	0x010F, r1
    1a78:	10 92 10 01 	sts	0x0110, r1
    1a7c:	10 92 11 01 	sts	0x0111, r1
    1a80:	10 92 12 01 	sts	0x0112, r1
									*ICUState=WAITING_FALLING_EDGE_STATE;
    1a84:	82 e0       	ldi	r24, 0x02	; 2
    1a86:	f8 01       	movw	r30, r16
    1a88:	80 83       	st	Z, r24
									u8_ErrorState = ERROR_OK;									
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	74 c0       	rjmp	.+232    	; 0x1b76 <ICU_UpdateTimeOn+0x176>
							}
							break;
						}
						case WAITING_FALLING_EDGE_STATE:
						{
							if(OVERFLOW_FLAG_UP==(BIT_GET(TIFR,TOV1)))
    1a8e:	88 b7       	in	r24, 0x38	; 56
    1a90:	86 95       	lsr	r24
    1a92:	86 95       	lsr	r24
    1a94:	80 ff       	sbrs	r24, 0
    1a96:	16 c0       	rjmp	.+44     	; 0x1ac4 <ICU_UpdateTimeOn+0xc4>
							{
								OverflowCounter++;
    1a98:	80 91 0f 01 	lds	r24, 0x010F
    1a9c:	90 91 10 01 	lds	r25, 0x0110
    1aa0:	a0 91 11 01 	lds	r26, 0x0111
    1aa4:	b0 91 12 01 	lds	r27, 0x0112
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	a1 1d       	adc	r26, r1
    1aac:	b1 1d       	adc	r27, r1
    1aae:	80 93 0f 01 	sts	0x010F, r24
    1ab2:	90 93 10 01 	sts	0x0110, r25
    1ab6:	a0 93 11 01 	sts	0x0111, r26
    1aba:	b0 93 12 01 	sts	0x0112, r27
								BIT_WRITE(TIFR,TOV1,BIT_HIGH);
    1abe:	88 b7       	in	r24, 0x38	; 56
    1ac0:	84 60       	ori	r24, 0x04	; 4
    1ac2:	88 bf       	out	0x38, r24	; 56
								u8_ErrorState = ERROR_OK;
							}
							
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    1ac4:	88 b7       	in	r24, 0x38	; 56
    1ac6:	82 95       	swap	r24
    1ac8:	86 95       	lsr	r24
    1aca:	87 70       	andi	r24, 0x07	; 7
    1acc:	80 ff       	sbrs	r24, 0
    1ace:	52 c0       	rjmp	.+164    	; 0x1b74 <ICU_UpdateTimeOn+0x174>
	{
		switch(ICUNumber)
		{
			#if  ICU1
				case ICU_1:
					CounterNumber=(uint64_t)(REG_GET(ICR1)+(OverflowCounter*ICU1_MAX_COUNT));
    1ad0:	60 91 0f 01 	lds	r22, 0x010F
    1ad4:	70 91 10 01 	lds	r23, 0x0110
    1ad8:	80 91 11 01 	lds	r24, 0x0111
    1adc:	90 91 12 01 	lds	r25, 0x0112
    1ae0:	2f ef       	ldi	r18, 0xFF	; 255
    1ae2:	3f ef       	ldi	r19, 0xFF	; 255
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsi3>
    1aec:	ab 01       	movw	r20, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	86 b5       	in	r24, 0x26	; 38
    1af2:	97 b5       	in	r25, 0x27	; 39
    1af4:	a0 e0       	ldi	r26, 0x00	; 0
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	84 0f       	add	r24, r20
    1afa:	95 1f       	adc	r25, r21
    1afc:	a6 1f       	adc	r26, r22
    1afe:	b7 1f       	adc	r27, r23
					*TimeOnValue = (CounterNumber*((double64_t)gastr_ICUConfig[ICU_1].ICUPrescaler/F_CPU));
    1b00:	28 2f       	mov	r18, r24
    1b02:	39 2f       	mov	r19, r25
    1b04:	4a 2f       	mov	r20, r26
    1b06:	5b 2f       	mov	r21, r27
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__floatundisf>
    1b14:	4b 01       	movw	r8, r22
    1b16:	5c 01       	movw	r10, r24
    1b18:	60 91 a8 00 	lds	r22, 0x00A8
    1b1c:	70 91 a9 00 	lds	r23, 0x00A9
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__floatunsisf>
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	34 e2       	ldi	r19, 0x24	; 36
    1b2c:	44 e7       	ldi	r20, 0x74	; 116
    1b2e:	5b e4       	ldi	r21, 0x4B	; 75
    1b30:	0e 94 b7 14 	call	0x296e	; 0x296e <__divsf3>
    1b34:	9b 01       	movw	r18, r22
    1b36:	ac 01       	movw	r20, r24
    1b38:	c5 01       	movw	r24, r10
    1b3a:	b4 01       	movw	r22, r8
    1b3c:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	f7 01       	movw	r30, r14
    1b46:	80 83       	st	Z, r24
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	a2 83       	std	Z+2, r26	; 0x02
    1b4c:	b3 83       	std	Z+3, r27	; 0x03
								{
									u8_ErrorState = ERROR_NOK;
								}
								else
								{
									*ICUState=END_STATE;
    1b4e:	83 e0       	ldi	r24, 0x03	; 3
    1b50:	f8 01       	movw	r30, r16
    1b52:	80 83       	st	Z, r24
									u8_ErrorState = ERROR_OK;	
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	0f c0       	rjmp	.+30     	; 0x1b76 <ICU_UpdateTimeOn+0x176>
ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((NULL_PTR==ICUState) || (NULL_PTR==TimeOnValue))
	{
		u8_ErrorState = ERROR_NOK;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	0d c0       	rjmp	.+26     	; 0x1b76 <ICU_UpdateTimeOn+0x176>
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	0b c0       	rjmp	.+22     	; 0x1b76 <ICU_UpdateTimeOn+0x176>
					}
					break;
				}
			#endif
			default:
				u8_ErrorState= ERROR_NOK;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	09 c0       	rjmp	.+18     	; 0x1b76 <ICU_UpdateTimeOn+0x176>
								
							}
							break;
						}
						default:
							u8_ErrorState = ERROR_NOK;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	07 c0       	rjmp	.+14     	; 0x1b76 <ICU_UpdateTimeOn+0x176>
					{
						case START_STATE:
						{
							if(ERROR_OK != ICU_Reset(ICU_1,ICU1_RISING_EDGE))
							{
								u8_ErrorState = ERROR_NOK;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	05 c0       	rjmp	.+10     	; 0x1b76 <ICU_UpdateTimeOn+0x176>
	return u8_ErrorState;
}

ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	03 c0       	rjmp	.+6      	; 0x1b76 <ICU_UpdateTimeOn+0x176>
						{
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
							{
								if(ERROR_OK!=ICU_Reset(ICU_1,ICU1_FALLING_EDGE))
								{
									u8_ErrorState = ERROR_NOK;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <ICU_UpdateTimeOn+0x176>
								OverflowCounter++;
								BIT_WRITE(TIFR,TOV1,BIT_HIGH);
								u8_ErrorState = ERROR_OK;
							}
							
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    1b74:	80 e0       	ldi	r24, 0x00	; 0
				u8_ErrorState= ERROR_NOK;
				break;
		}
	}
	return u8_ErrorState;
}
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	bf 90       	pop	r11
    1b84:	af 90       	pop	r10
    1b86:	9f 90       	pop	r9
    1b88:	8f 90       	pop	r8
    1b8a:	08 95       	ret

00001b8c <ICU_GetICR1Registert>:

ERROR_STATE_t ICU_GetICR1Registert(uint8_t ICUNumber,ptr_uint16_t Register)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1b8c:	88 23       	and	r24, r24
    1b8e:	39 f4       	brne	.+14     	; 0x1b9e <ICU_GetICR1Registert+0x12>
	{
		#if  ICU1
			case ICU_1:
				*Register=ICR1;
    1b90:	86 b5       	in	r24, 0x26	; 38
    1b92:	97 b5       	in	r25, 0x27	; 39
    1b94:	fb 01       	movw	r30, r22
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1b9c:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;
}
    1ba0:	08 95       	ret

00001ba2 <ICU_GetTIFRRegistert>:

ERROR_STATE_t ICU_GetTIFRRegistert(uint8_t ICUNumber,ptr_uint8_t Register)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1ba2:	88 23       	and	r24, r24
    1ba4:	29 f4       	brne	.+10     	; 0x1bb0 <ICU_GetTIFRRegistert+0xe>
	{
		#if  ICU1
			case ICU_1:
				*Register=TIFR;
    1ba6:	88 b7       	in	r24, 0x38	; 56
    1ba8:	fb 01       	movw	r30, r22
    1baa:	80 83       	st	Z, r24
				u8_ErrorState=ERROR_OK;
    1bac:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1bae:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;
}
    1bb2:	08 95       	ret

00001bb4 <ICU_SetTCNT1Registert>:

ERROR_STATE_t ICU_SetTCNT1Registert(uint8_t ICUNumber,uint16_t RegisterValue)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1bb4:	88 23       	and	r24, r24
    1bb6:	19 f4       	brne	.+6      	; 0x1bbe <ICU_SetTCNT1Registert+0xa>
	{
		#if  ICU1
			case ICU_1:
				TCNT1=RegisterValue;
    1bb8:	7d bd       	out	0x2d, r23	; 45
    1bba:	6c bd       	out	0x2c, r22	; 44
				u8_ErrorState=ERROR_OK;
				break;
    1bbc:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;	
}
    1bc0:	08 95       	ret

00001bc2 <ICU_EnableInterrupt>:

ERROR_STATE_t ICU_EnableInterrupt(uint8_t ICUNumber,uint8_t ICUInterruptType)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1bc2:	88 23       	and	r24, r24
    1bc4:	79 f4       	brne	.+30     	; 0x1be4 <ICU_EnableInterrupt+0x22>
	{
		#if  ICU1
			case ICU_1:
				switch(ICUInterruptType)
    1bc6:	66 23       	and	r22, r22
    1bc8:	19 f0       	breq	.+6      	; 0x1bd0 <ICU_EnableInterrupt+0xe>
    1bca:	61 30       	cpi	r22, 0x01	; 1
    1bcc:	69 f4       	brne	.+26     	; 0x1be8 <ICU_EnableInterrupt+0x26>
    1bce:	05 c0       	rjmp	.+10     	; 0x1bda <ICU_EnableInterrupt+0x18>
				{
					case ICU1_OVERFLOW_INT:
						BIT_WRITE(TIMSK,TOIE1,BIT_HIGH);
    1bd0:	89 b7       	in	r24, 0x39	; 57
    1bd2:	84 60       	ori	r24, 0x04	; 4
    1bd4:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1bd8:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_HIGH);
    1bda:	89 b7       	in	r24, 0x39	; 57
    1bdc:	80 62       	ori	r24, 0x20	; 32
    1bde:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1be0:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1be2:	08 95       	ret
						break;
				}
				break;
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_HIGH);
						u8_ErrorState=ERROR_OK;
						break;
					default:
						u8_ErrorState=ERROR_NOK;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
    1bea:	08 95       	ret

00001bec <ICU_DisableInterrupt>:

ERROR_STATE_t ICU_DisableInterrupt(uint8_t ICUNumber,uint8_t ICUInterruptType)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1bec:	88 23       	and	r24, r24
    1bee:	79 f4       	brne	.+30     	; 0x1c0e <ICU_DisableInterrupt+0x22>
	{
		#if  ICU1
			case ICU_1:
				switch(ICUInterruptType)
    1bf0:	66 23       	and	r22, r22
    1bf2:	19 f0       	breq	.+6      	; 0x1bfa <ICU_DisableInterrupt+0xe>
    1bf4:	61 30       	cpi	r22, 0x01	; 1
    1bf6:	69 f4       	brne	.+26     	; 0x1c12 <ICU_DisableInterrupt+0x26>
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <ICU_DisableInterrupt+0x18>
				{
					case ICU1_OVERFLOW_INT:
						BIT_WRITE(TIMSK,TOIE1,BIT_LOW);
    1bfa:	89 b7       	in	r24, 0x39	; 57
    1bfc:	8b 7f       	andi	r24, 0xFB	; 251
    1bfe:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1c00:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1c02:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_LOW);
    1c04:	89 b7       	in	r24, 0x39	; 57
    1c06:	8f 7d       	andi	r24, 0xDF	; 223
    1c08:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
						break;
    1c0c:	08 95       	ret
						break;
				}
				break;
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_LOW);
						u8_ErrorState=ERROR_OK;
						break;
					default:
						u8_ErrorState=ERROR_NOK;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
    1c14:	08 95       	ret

00001c16 <ICU_SetCallback>:

ERROR_STATE_t ICU_SetCallback(uint8_t ICUNumber,uint8_t ICUInterruptType,Ptr_VoidFuncVoid_t Callback)
{
	uint8_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Callback)
    1c16:	41 15       	cp	r20, r1
    1c18:	51 05       	cpc	r21, r1
    1c1a:	99 f0       	breq	.+38     	; 0x1c42 <ICU_SetCallback+0x2c>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    1c1c:	88 23       	and	r24, r24
    1c1e:	99 f4       	brne	.+38     	; 0x1c46 <ICU_SetCallback+0x30>
		{
			#if  ICU1
				case ICU_1:
					switch(ICUInterruptType)
    1c20:	66 23       	and	r22, r22
    1c22:	19 f0       	breq	.+6      	; 0x1c2a <ICU_SetCallback+0x14>
    1c24:	61 30       	cpi	r22, 0x01	; 1
    1c26:	89 f4       	brne	.+34     	; 0x1c4a <ICU_SetCallback+0x34>
    1c28:	06 c0       	rjmp	.+12     	; 0x1c36 <ICU_SetCallback+0x20>
					{
						case ICU1_OVERFLOW_INT:
							gptr_CallbackOverflow=Callback;
    1c2a:	50 93 14 01 	sts	0x0114, r21
    1c2e:	40 93 13 01 	sts	0x0113, r20
							u8_ErrorState=ERROR_OK;
    1c32:	80 e0       	ldi	r24, 0x00	; 0
							break;
    1c34:	08 95       	ret
						case ICU1_INPUTCAPTURE_INT:
							gptr_CallbackInputCapture=Callback;
    1c36:	50 93 16 01 	sts	0x0116, r21
    1c3a:	40 93 15 01 	sts	0x0115, r20
							u8_ErrorState=ERROR_OK;
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
							break;
    1c40:	08 95       	ret
ERROR_STATE_t ICU_SetCallback(uint8_t ICUNumber,uint8_t ICUInterruptType,Ptr_VoidFuncVoid_t Callback)
{
	uint8_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Callback)
	{
		u8_ErrorState=ERROR_NOK;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	08 95       	ret
							break;
					}
					break;
			#endif
			default:
				u8_ErrorState=ERROR_NOK;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	08 95       	ret
						case ICU1_INPUTCAPTURE_INT:
							gptr_CallbackInputCapture=Callback;
							u8_ErrorState=ERROR_OK;
							break;
						default:
							u8_ErrorState=ERROR_NOK;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
				u8_ErrorState=ERROR_NOK;
				break;
		}				
	}
	return u8_ErrorState;
}
    1c4c:	08 95       	ret

00001c4e <__vector_9>:

void __vector_9(void) __attribute__((signal)); //TIMER1_OVF_vect
void __vector_9(void) 
{
    1c4e:	1f 92       	push	r1
    1c50:	0f 92       	push	r0
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	0f 92       	push	r0
    1c56:	11 24       	eor	r1, r1
    1c58:	2f 93       	push	r18
    1c5a:	3f 93       	push	r19
    1c5c:	4f 93       	push	r20
    1c5e:	5f 93       	push	r21
    1c60:	6f 93       	push	r22
    1c62:	7f 93       	push	r23
    1c64:	8f 93       	push	r24
    1c66:	9f 93       	push	r25
    1c68:	af 93       	push	r26
    1c6a:	bf 93       	push	r27
    1c6c:	ef 93       	push	r30
    1c6e:	ff 93       	push	r31
   gptr_CallbackOverflow();
    1c70:	e0 91 13 01 	lds	r30, 0x0113
    1c74:	f0 91 14 01 	lds	r31, 0x0114
    1c78:	09 95       	icall
}
    1c7a:	ff 91       	pop	r31
    1c7c:	ef 91       	pop	r30
    1c7e:	bf 91       	pop	r27
    1c80:	af 91       	pop	r26
    1c82:	9f 91       	pop	r25
    1c84:	8f 91       	pop	r24
    1c86:	7f 91       	pop	r23
    1c88:	6f 91       	pop	r22
    1c8a:	5f 91       	pop	r21
    1c8c:	4f 91       	pop	r20
    1c8e:	3f 91       	pop	r19
    1c90:	2f 91       	pop	r18
    1c92:	0f 90       	pop	r0
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	0f 90       	pop	r0
    1c98:	1f 90       	pop	r1
    1c9a:	18 95       	reti

00001c9c <__vector_6>:

void __vector_6(void) __attribute__((signal)); //TIMER1_CAPT_vect
void __vector_6(void) 
{
    1c9c:	1f 92       	push	r1
    1c9e:	0f 92       	push	r0
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	0f 92       	push	r0
    1ca4:	11 24       	eor	r1, r1
    1ca6:	2f 93       	push	r18
    1ca8:	3f 93       	push	r19
    1caa:	4f 93       	push	r20
    1cac:	5f 93       	push	r21
    1cae:	6f 93       	push	r22
    1cb0:	7f 93       	push	r23
    1cb2:	8f 93       	push	r24
    1cb4:	9f 93       	push	r25
    1cb6:	af 93       	push	r26
    1cb8:	bf 93       	push	r27
    1cba:	ef 93       	push	r30
    1cbc:	ff 93       	push	r31
   gptr_CallbackInputCapture();
    1cbe:	e0 91 15 01 	lds	r30, 0x0115
    1cc2:	f0 91 16 01 	lds	r31, 0x0116
    1cc6:	09 95       	icall
}
    1cc8:	ff 91       	pop	r31
    1cca:	ef 91       	pop	r30
    1ccc:	bf 91       	pop	r27
    1cce:	af 91       	pop	r26
    1cd0:	9f 91       	pop	r25
    1cd2:	8f 91       	pop	r24
    1cd4:	7f 91       	pop	r23
    1cd6:	6f 91       	pop	r22
    1cd8:	5f 91       	pop	r21
    1cda:	4f 91       	pop	r20
    1cdc:	3f 91       	pop	r19
    1cde:	2f 91       	pop	r18
    1ce0:	0f 90       	pop	r0
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	0f 90       	pop	r0
    1ce6:	1f 90       	pop	r1
    1ce8:	18 95       	reti

00001cea <PWM_Init>:
extern Str_PWMConfig_t gastr_PWMConfig[PWM_CHANNEL_NUMBERS];

ERROR_STATE_t PWM_Init(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1cea:	88 23       	and	r24, r24
    1cec:	69 f5       	brne	.+90     	; 0x1d48 <PWM_Init+0x5e>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				BIT_WRITE(TCCR0,WGM00,BIT_GET(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMMode,BIT0));
    1cee:	20 91 ab 00 	lds	r18, 0x00AB
    1cf2:	42 2f       	mov	r20, r18
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	41 70       	andi	r20, 0x01	; 1
    1cf8:	50 70       	andi	r21, 0x00	; 0
    1cfa:	00 24       	eor	r0, r0
    1cfc:	56 95       	lsr	r21
    1cfe:	47 95       	ror	r20
    1d00:	07 94       	ror	r0
    1d02:	56 95       	lsr	r21
    1d04:	47 95       	ror	r20
    1d06:	07 94       	ror	r0
    1d08:	54 2f       	mov	r21, r20
    1d0a:	40 2d       	mov	r20, r0
    1d0c:	83 b7       	in	r24, 0x33	; 51
    1d0e:	8f 7b       	andi	r24, 0xBF	; 191
    1d10:	48 2b       	or	r20, r24
				BIT_WRITE(TCCR0,WGM01,BIT_GET(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMMode,BIT1));
    1d12:	47 7f       	andi	r20, 0xF7	; 247
    1d14:	26 95       	lsr	r18
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	21 70       	andi	r18, 0x01	; 1
    1d1a:	30 70       	andi	r19, 0x00	; 0
    1d1c:	c9 01       	movw	r24, r18
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	84 2b       	or	r24, r20
				
				TWO_BITS_WRITE(TCCR0,COM00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode);
    1d2c:	8f 7c       	andi	r24, 0xCF	; 207
    1d2e:	90 91 ac 00 	lds	r25, 0x00AC
    1d32:	92 95       	swap	r25
    1d34:	90 7f       	andi	r25, 0xF0	; 240
    1d36:	89 2b       	or	r24, r25
    1d38:	83 bf       	out	0x33, r24	; 51
				
				DIO_SetPinDirection(PWM0_PORT,PWM0_PIN,PIN_OUTPUT);
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	63 e0       	ldi	r22, 0x03	; 3
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	0e 94 ed 0a 	call	0x15da	; 0x15da <DIO_SetPinDirection>
				
				u8_ErrorState=ERROR_OK;
    1d44:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1d46:	08 95       	ret
				
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1d4a:	08 95       	ret

00001d4c <PWM_Start>:

ERROR_STATE_t PWM_Start(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1d4c:	88 23       	and	r24, r24
    1d4e:	41 f4       	brne	.+16     	; 0x1d60 <PWM_Start+0x14>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				THREE_BITS_WRITE(TCCR0,CS00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMFrequancy);	
    1d50:	83 b7       	in	r24, 0x33	; 51
    1d52:	88 7f       	andi	r24, 0xF8	; 248
    1d54:	90 91 aa 00 	lds	r25, 0x00AA
    1d58:	89 2b       	or	r24, r25
    1d5a:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;	
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1d5e:	08 95       	ret
				THREE_BITS_WRITE(TCCR2,CS20,gastr_PWMConfig[PWM_CHANNEL_OC2].PWMFrequancy);
				u8_ErrorState=ERROR_OK;				
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1d62:	08 95       	ret

00001d64 <PWM_Stop>:

ERROR_STATE_t PWM_Stop(uint8_t PwmChannelNumber )
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1d64:	88 23       	and	r24, r24
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <PWM_Stop+0xe>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				THREE_BITS_WRITE(TCCR0,CS00,OC0_NO_CLK);
    1d68:	83 b7       	in	r24, 0x33	; 51
    1d6a:	88 7f       	andi	r24, 0xF8	; 248
    1d6c:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;	
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1d70:	08 95       	ret
				THREE_BITS_WRITE(TCCR2,CS20,OC2_NO_CLK);	
				u8_ErrorState=ERROR_OK;	
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;	
    1d72:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1d74:	08 95       	ret

00001d76 <PWM_Connect>:

ERROR_STATE_t PWM_Connect(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1d76:	88 23       	and	r24, r24
    1d78:	51 f4       	brne	.+20     	; 0x1d8e <PWM_Connect+0x18>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				TWO_BITS_WRITE(TCCR0,COM00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode);
    1d7a:	90 91 ac 00 	lds	r25, 0x00AC
    1d7e:	92 95       	swap	r25
    1d80:	90 7f       	andi	r25, 0xF0	; 240
    1d82:	83 b7       	in	r24, 0x33	; 51
    1d84:	8f 7c       	andi	r24, 0xCF	; 207
    1d86:	89 2b       	or	r24, r25
    1d88:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1d8c:	08 95       	ret
				TWO_BITS_WRITE(TCCR2,COM20,gastr_PWMConfig[PWM_CHANNEL_OC2].PWMWaveformMode);
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;	
}
    1d90:	08 95       	ret

00001d92 <PWM_Disconnect>:

ERROR_STATE_t PWM_Disconnect(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1d92:	88 23       	and	r24, r24
    1d94:	29 f4       	brne	.+10     	; 0x1da0 <PWM_Disconnect+0xe>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				TWO_BITS_WRITE(TCCR0,COM00,DISCONNECT);
    1d96:	83 b7       	in	r24, 0x33	; 51
    1d98:	8f 7c       	andi	r24, 0xCF	; 207
    1d9a:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1d9e:	08 95       	ret
				TWO_BITS_WRITE(TCCR2,COM20,DISCONNECT);	
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1da2:	08 95       	ret

00001da4 <PWM_SetDuty>:

ERROR_STATE_t PWM_SetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PwmDuty==0||PwmDuty>100)
    1da4:	96 2f       	mov	r25, r22
    1da6:	91 50       	subi	r25, 0x01	; 1
    1da8:	94 36       	cpi	r25, 0x64	; 100
    1daa:	10 f5       	brcc	.+68     	; 0x1df0 <PWM_SetDuty+0x4c>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PwmChannelNumber)
    1dac:	88 23       	and	r24, r24
    1dae:	11 f5       	brne	.+68     	; 0x1df4 <PWM_SetDuty+0x50>
		{
			#if OC0
				case PWM_CHANNEL_OC0:
					switch(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode)
    1db0:	80 91 ac 00 	lds	r24, 0x00AC
    1db4:	82 30       	cpi	r24, 0x02	; 2
    1db6:	01 f5       	brne	.+64     	; 0x1df8 <PWM_SetDuty+0x54>
					{
						case NON_INVERTING:
							OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__floatsisf>
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	48 ec       	ldi	r20, 0xC8	; 200
    1dc8:	52 e4       	ldi	r21, 0x42	; 66
    1dca:	0e 94 b7 14 	call	0x296e	; 0x296e <__divsf3>
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e8       	ldi	r20, 0x80	; 128
    1dd4:	53 e4       	ldi	r21, 0x43	; 67
    1dd6:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__mulsf3>
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 4e 14 	call	0x289c	; 0x289c <__subsf3>
    1de6:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__fixunssfsi>
    1dea:	6c bf       	out	0x3c, r22	; 60
							u8_ErrorState=ERROR_OK;
    1dec:	80 e0       	ldi	r24, 0x00	; 0
							break;
    1dee:	08 95       	ret
ERROR_STATE_t PWM_SetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PwmDuty==0||PwmDuty>100)
	{
		u8_ErrorState=ERROR_NOK;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	08 95       	ret
							break;
					}
					break;
			#endif	
			default:
				u8_ErrorState=ERROR_NOK;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	08 95       	ret
						case NON_INVERTING:
							OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
							u8_ErrorState=ERROR_OK;
							break;
						default:
							u8_ErrorState=ERROR_NOK;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
				u8_ErrorState=ERROR_NOK;
				break;			
		}		
	}
	return u8_ErrorState;
    1dfa:	08 95       	ret

00001dfc <GetFreqPrescaleRatio>:
* @return function error state.
*/
static ERROR_STATE_t GetFreqPrescaleRatio(TIM_CH_t TIM_channel, float32_t * Ratio)
{
   /* For Timer 0 and 1 */
   if(TIMER_0 == TIM_channel || TIMER_1 == TIM_channel)
    1dfc:	82 30       	cpi	r24, 0x02	; 2
    1dfe:	08 f0       	brcs	.+2      	; 0x1e02 <GetFreqPrescaleRatio+0x6>
    1e00:	51 c0       	rjmp	.+162    	; 0x1ea4 <GetFreqPrescaleRatio+0xa8>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	fc 01       	movw	r30, r24
    1e06:	ee 0f       	add	r30, r30
    1e08:	ff 1f       	adc	r31, r31
    1e0a:	8e 0f       	add	r24, r30
    1e0c:	9f 1f       	adc	r25, r31
    1e0e:	fc 01       	movw	r30, r24
    1e10:	ea 54       	subi	r30, 0x4A	; 74
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	83 30       	cpi	r24, 0x03	; 3
    1e18:	21 f1       	breq	.+72     	; 0x1e62 <GetFreqPrescaleRatio+0x66>
    1e1a:	84 30       	cpi	r24, 0x04	; 4
    1e1c:	30 f4       	brcc	.+12     	; 0x1e2a <GetFreqPrescaleRatio+0x2e>
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	51 f0       	breq	.+20     	; 0x1e36 <GetFreqPrescaleRatio+0x3a>
    1e22:	82 30       	cpi	r24, 0x02	; 2
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <GetFreqPrescaleRatio+0x2c>
    1e26:	a4 c0       	rjmp	.+328    	; 0x1f70 <GetFreqPrescaleRatio+0x174>
    1e28:	11 c0       	rjmp	.+34     	; 0x1e4c <GetFreqPrescaleRatio+0x50>
    1e2a:	84 30       	cpi	r24, 0x04	; 4
    1e2c:	29 f1       	breq	.+74     	; 0x1e78 <GetFreqPrescaleRatio+0x7c>
    1e2e:	85 30       	cpi	r24, 0x05	; 5
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <GetFreqPrescaleRatio+0x38>
    1e32:	9e c0       	rjmp	.+316    	; 0x1f70 <GetFreqPrescaleRatio+0x174>
    1e34:	2c c0       	rjmp	.+88     	; 0x1e8e <GetFreqPrescaleRatio+0x92>
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a0 e8       	ldi	r26, 0x80	; 128
    1e3c:	bd e3       	ldi	r27, 0x3D	; 61
    1e3e:	fb 01       	movw	r30, r22
    1e40:	80 83       	st	Z, r24
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	a2 83       	std	Z+2, r26	; 0x02
    1e46:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e48:	80 e0       	ldi	r24, 0x00	; 0
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1e4a:	08 95       	ret
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a0 e0       	ldi	r26, 0x00	; 0
    1e52:	bf e3       	ldi	r27, 0x3F	; 63
    1e54:	fb 01       	movw	r30, r22
    1e56:	80 83       	st	Z, r24
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	a2 83       	std	Z+2, r26	; 0x02
    1e5c:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1e60:	08 95       	ret
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e8       	ldi	r26, 0x80	; 128
    1e68:	b0 e4       	ldi	r27, 0x40	; 64
    1e6a:	fb 01       	movw	r30, r22
    1e6c:	80 83       	st	Z, r24
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	a2 83       	std	Z+2, r26	; 0x02
    1e72:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e74:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1e76:	08 95       	ret
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a0 e8       	ldi	r26, 0x80	; 128
    1e7e:	b1 e4       	ldi	r27, 0x41	; 65
    1e80:	fb 01       	movw	r30, r22
    1e82:	80 83       	st	Z, r24
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	a2 83       	std	Z+2, r26	; 0x02
    1e88:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1e8c:	08 95       	ret
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	a0 e8       	ldi	r26, 0x80	; 128
    1e94:	b2 e4       	ldi	r27, 0x42	; 66
    1e96:	fb 01       	movw	r30, r22
    1e98:	80 83       	st	Z, r24
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	a2 83       	std	Z+2, r26	; 0x02
    1e9e:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
    1ea2:	08 95       	ret
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   /* For Timer 2 */
   else if(TIMER_2 == TIM_channel)
    1ea4:	82 30       	cpi	r24, 0x02	; 2
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <GetFreqPrescaleRatio+0xae>
    1ea8:	65 c0       	rjmp	.+202    	; 0x1f74 <GetFreqPrescaleRatio+0x178>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
    1eaa:	80 91 be 00 	lds	r24, 0x00BE
    1eae:	84 30       	cpi	r24, 0x04	; 4
    1eb0:	99 f1       	breq	.+102    	; 0x1f18 <GetFreqPrescaleRatio+0x11c>
    1eb2:	85 30       	cpi	r24, 0x05	; 5
    1eb4:	40 f4       	brcc	.+16     	; 0x1ec6 <GetFreqPrescaleRatio+0xca>
    1eb6:	82 30       	cpi	r24, 0x02	; 2
    1eb8:	c9 f0       	breq	.+50     	; 0x1eec <GetFreqPrescaleRatio+0xf0>
    1eba:	83 30       	cpi	r24, 0x03	; 3
    1ebc:	10 f5       	brcc	.+68     	; 0x1f02 <GetFreqPrescaleRatio+0x106>
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <GetFreqPrescaleRatio+0xc8>
    1ec2:	5a c0       	rjmp	.+180    	; 0x1f78 <GetFreqPrescaleRatio+0x17c>
    1ec4:	08 c0       	rjmp	.+16     	; 0x1ed6 <GetFreqPrescaleRatio+0xda>
    1ec6:	86 30       	cpi	r24, 0x06	; 6
    1ec8:	e9 f1       	breq	.+122    	; 0x1f44 <GetFreqPrescaleRatio+0x148>
    1eca:	86 30       	cpi	r24, 0x06	; 6
    1ecc:	80 f1       	brcs	.+96     	; 0x1f2e <GetFreqPrescaleRatio+0x132>
    1ece:	87 30       	cpi	r24, 0x07	; 7
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <GetFreqPrescaleRatio+0xd8>
    1ed2:	52 c0       	rjmp	.+164    	; 0x1f78 <GetFreqPrescaleRatio+0x17c>
    1ed4:	42 c0       	rjmp	.+132    	; 0x1f5a <GetFreqPrescaleRatio+0x15e>
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e8       	ldi	r26, 0x80	; 128
    1edc:	bd e3       	ldi	r27, 0x3D	; 61
    1ede:	fb 01       	movw	r30, r22
    1ee0:	80 83       	st	Z, r24
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	a2 83       	std	Z+2, r26	; 0x02
    1ee6:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1eea:	08 95       	ret
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a0 e0       	ldi	r26, 0x00	; 0
    1ef2:	bf e3       	ldi	r27, 0x3F	; 63
    1ef4:	fb 01       	movw	r30, r22
    1ef6:	80 83       	st	Z, r24
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	a2 83       	std	Z+2, r26	; 0x02
    1efc:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1efe:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1f00:	08 95       	ret
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e0       	ldi	r26, 0x00	; 0
    1f08:	b0 e4       	ldi	r27, 0x40	; 64
    1f0a:	fb 01       	movw	r30, r22
    1f0c:	80 83       	st	Z, r24
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	a2 83       	std	Z+2, r26	; 0x02
    1f12:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f14:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1f16:	08 95       	ret
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 e8       	ldi	r26, 0x80	; 128
    1f1e:	b0 e4       	ldi	r27, 0x40	; 64
    1f20:	fb 01       	movw	r30, r22
    1f22:	80 83       	st	Z, r24
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	a2 83       	std	Z+2, r26	; 0x02
    1f28:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1f2c:	08 95       	ret
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e0       	ldi	r26, 0x00	; 0
    1f34:	b1 e4       	ldi	r27, 0x41	; 65
    1f36:	fb 01       	movw	r30, r22
    1f38:	80 83       	st	Z, r24
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	a2 83       	std	Z+2, r26	; 0x02
    1f3e:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f40:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1f42:	08 95       	ret
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e8       	ldi	r26, 0x80	; 128
    1f4a:	b1 e4       	ldi	r27, 0x41	; 65
    1f4c:	fb 01       	movw	r30, r22
    1f4e:	80 83       	st	Z, r24
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	a2 83       	std	Z+2, r26	; 0x02
    1f54:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f56:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1f58:	08 95       	ret
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e8       	ldi	r26, 0x80	; 128
    1f60:	b2 e4       	ldi	r27, 0x42	; 66
    1f62:	fb 01       	movw	r30, r22
    1f64:	80 83       	st	Z, r24
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	a2 83       	std	Z+2, r26	; 0x02
    1f6a:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
    1f6e:	08 95       	ret
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
            break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1f70:	8c ef       	ldi	r24, 0xFC	; 252
    1f72:	08 95       	ret
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	08 95       	ret
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * SECOND_TO_MICROSECOND / F_CPU;
         break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1f78:	8c ef       	ldi	r24, 0xFC	; 252
      }
   }
   
   return ERROR_OK;
}
    1f7a:	08 95       	ret

00001f7c <TIM_Init>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_Init(TIM_CH_t TIM_channel)
{
   switch(TIM_channel)
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	81 f0       	breq	.+32     	; 0x1fa0 <TIM_Init+0x24>
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	18 f0       	brcs	.+6      	; 0x1f8a <TIM_Init+0xe>
    1f84:	82 30       	cpi	r24, 0x02	; 2
    1f86:	49 f5       	brne	.+82     	; 0x1fda <TIM_Init+0x5e>
    1f88:	19 c0       	rjmp	.+50     	; 0x1fbc <TIM_Init+0x40>
   {
      case TIMER_0:
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
    1f8a:	80 91 b6 00 	lds	r24, 0x00B6
    1f8e:	83 bf       	out	0x33, r24	; 51
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
    1f90:	89 b7       	in	r24, 0x39	; 57
    1f92:	8c 7f       	andi	r24, 0xFC	; 252
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
    1f94:	90 91 b7 00 	lds	r25, 0x00B7
    1f98:	89 2b       	or	r24, r25
    1f9a:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
         break;
    1f9e:	08 95       	ret
      case TIMER_1:
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
    1fa0:	80 91 b9 00 	lds	r24, 0x00B9
    1fa4:	8e bd       	out	0x2e, r24	; 46
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
    1fa6:	99 b7       	in	r25, 0x39	; 57
    1fa8:	97 7e       	andi	r25, 0xE7	; 231
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
    1faa:	80 91 ba 00 	lds	r24, 0x00BA
    1fae:	88 0f       	add	r24, r24
    1fb0:	88 0f       	add	r24, r24
    1fb2:	88 0f       	add	r24, r24
    1fb4:	89 2b       	or	r24, r25
    1fb6:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
         break;
    1fba:	08 95       	ret
      case TIMER_2:
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
    1fbc:	80 91 bc 00 	lds	r24, 0x00BC
    1fc0:	85 bd       	out	0x25, r24	; 37
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
    1fc2:	99 b7       	in	r25, 0x39	; 57
    1fc4:	9f 73       	andi	r25, 0x3F	; 63
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
    1fc6:	80 91 bd 00 	lds	r24, 0x00BD
    1fca:	82 95       	swap	r24
    1fcc:	88 0f       	add	r24, r24
    1fce:	88 0f       	add	r24, r24
    1fd0:	80 7c       	andi	r24, 0xC0	; 192
    1fd2:	89 2b       	or	r24, r25
    1fd4:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
         break;
    1fd8:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
    1fda:	8e ef       	ldi	r24, 0xFE	; 254
   }
   
   /* return success message. */
   return ERROR_OK;
}
    1fdc:	08 95       	ret

00001fde <TIM_Start>:
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   volatile uint8_t * ptr_TimerData = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	79 f0       	breq	.+30     	; 0x2000 <TIM_Start+0x22>
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	18 f0       	brcs	.+6      	; 0x1fec <TIM_Start+0xe>
    1fe6:	82 30       	cpi	r24, 0x02	; 2
    1fe8:	09 f5       	brne	.+66     	; 0x202c <TIM_Start+0x4e>
    1fea:	05 c0       	rjmp	.+10     	; 0x1ff6 <TIM_Start+0x18>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
    1fec:	a2 e5       	ldi	r26, 0x52	; 82
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
    1ff0:	e3 e5       	ldi	r30, 0x53	; 83
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	09 c0       	rjmp	.+18     	; 0x2008 <TIM_Start+0x2a>
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
    1ff6:	a4 e4       	ldi	r26, 0x44	; 68
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
    1ffa:	e5 e4       	ldi	r30, 0x45	; 69
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
         ptr_TimerData = &TCNT2;
         break;
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <TIM_Start+0x2a>
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
    2000:	ac e4       	ldi	r26, 0x4C	; 76
    2002:	b0 e0       	ldi	r27, 0x00	; 0
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
    2004:	ee e4       	ldi	r30, 0x4E	; 78
    2006:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   /* set timer ticks */
   *ptr_TimerData = PreloadVal;
    2008:	6c 93       	st	X, r22
   
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
    200a:	20 81       	ld	r18, Z
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	dc 01       	movw	r26, r24
    2010:	aa 0f       	add	r26, r26
    2012:	bb 1f       	adc	r27, r27
    2014:	8a 0f       	add	r24, r26
    2016:	9b 1f       	adc	r25, r27
    2018:	dc 01       	movw	r26, r24
    201a:	aa 54       	subi	r26, 0x4A	; 74
    201c:	bf 4f       	sbci	r27, 0xFF	; 255
    201e:	12 96       	adiw	r26, 0x02	; 2
    2020:	8c 91       	ld	r24, X
    2022:	12 97       	sbiw	r26, 0x02	; 2
    2024:	82 2b       	or	r24, r18
    2026:	80 83       	st	Z, r24
   
   /* return success message. */
   return ERROR_OK;
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	08 95       	ret
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    202c:	8e ef       	ldi	r24, 0xFE	; 254
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
   
   /* return success message. */
   return ERROR_OK;
}
    202e:	08 95       	ret

00002030 <TIM_Stop>:
{
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	59 f0       	breq	.+22     	; 0x204a <TIM_Stop+0x1a>
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	18 f0       	brcs	.+6      	; 0x203e <TIM_Stop+0xe>
    2038:	82 30       	cpi	r24, 0x02	; 2
    203a:	71 f4       	brne	.+28     	; 0x2058 <TIM_Stop+0x28>
    203c:	03 c0       	rjmp	.+6      	; 0x2044 <TIM_Stop+0x14>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
    203e:	e3 e5       	ldi	r30, 0x53	; 83
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	05 c0       	rjmp	.+10     	; 0x204e <TIM_Stop+0x1e>
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
    2044:	e5 e4       	ldi	r30, 0x45	; 69
    2046:	f0 e0       	ldi	r31, 0x00	; 0
         break;
    2048:	02 c0       	rjmp	.+4      	; 0x204e <TIM_Stop+0x1e>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
    204a:	ee e4       	ldi	r30, 0x4E	; 78
    204c:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
    204e:	80 81       	ld	r24, Z
    2050:	88 7f       	andi	r24, 0xF8	; 248
    2052:	80 83       	st	Z, r24
   
   /* return success message. */
   return ERROR_OK;
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	08 95       	ret
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    2058:	8e ef       	ldi	r24, 0xFE	; 254
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
    205a:	08 95       	ret

0000205c <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
    205c:	61 15       	cp	r22, r1
    205e:	71 05       	cpc	r23, r1
    2060:	09 f4       	brne	.+2      	; 0x2064 <TIM_GetStatus+0x8>
    2062:	64 c0       	rjmp	.+200    	; 0x212c <TIM_GetStatus+0xd0>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    2064:	81 30       	cpi	r24, 0x01	; 1
    2066:	11 f1       	breq	.+68     	; 0x20ac <TIM_GetStatus+0x50>
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	20 f0       	brcs	.+8      	; 0x2074 <TIM_GetStatus+0x18>
    206c:	82 30       	cpi	r24, 0x02	; 2
    206e:	09 f0       	breq	.+2      	; 0x2072 <TIM_GetStatus+0x16>
    2070:	5f c0       	rjmp	.+190    	; 0x2130 <TIM_GetStatus+0xd4>
    2072:	41 c0       	rjmp	.+130    	; 0x20f6 <TIM_GetStatus+0x9a>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    2074:	80 91 b6 00 	lds	r24, 0x00B6
    2078:	88 23       	and	r24, r24
    207a:	51 f4       	brne	.+20     	; 0x2090 <TIM_GetStatus+0x34>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
    207c:	08 b6       	in	r0, 0x38	; 56
    207e:	00 fe       	sbrs	r0, 0
    2080:	59 c0       	rjmp	.+178    	; 0x2134 <TIM_GetStatus+0xd8>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    2082:	fb 01       	movw	r30, r22
    2084:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
    2086:	88 b7       	in	r24, 0x38	; 56
    2088:	81 60       	ori	r24, 0x01	; 1
    208a:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    2090:	88 30       	cpi	r24, 0x08	; 8
    2092:	09 f0       	breq	.+2      	; 0x2096 <TIM_GetStatus+0x3a>
    2094:	51 c0       	rjmp	.+162    	; 0x2138 <TIM_GetStatus+0xdc>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
    2096:	08 b6       	in	r0, 0x38	; 56
    2098:	01 fe       	sbrs	r0, 1
    209a:	50 c0       	rjmp	.+160    	; 0x213c <TIM_GetStatus+0xe0>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	fb 01       	movw	r30, r22
    20a0:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
    20a2:	88 b7       	in	r24, 0x38	; 56
    20a4:	82 60       	ori	r24, 0x02	; 2
    20a6:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    20ac:	80 91 b9 00 	lds	r24, 0x00B9
    20b0:	88 23       	and	r24, r24
    20b2:	51 f4       	brne	.+20     	; 0x20c8 <TIM_GetStatus+0x6c>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
    20b4:	08 b6       	in	r0, 0x38	; 56
    20b6:	02 fe       	sbrs	r0, 2
    20b8:	43 c0       	rjmp	.+134    	; 0x2140 <TIM_GetStatus+0xe4>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    20ba:	fb 01       	movw	r30, r22
    20bc:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
    20be:	88 b7       	in	r24, 0x38	; 56
    20c0:	84 60       	ori	r24, 0x04	; 4
    20c2:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    20c8:	88 30       	cpi	r24, 0x08	; 8
    20ca:	e1 f5       	brne	.+120    	; 0x2144 <TIM_GetStatus+0xe8>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
    20cc:	88 b7       	in	r24, 0x38	; 56
    20ce:	84 ff       	sbrs	r24, 4
    20d0:	08 c0       	rjmp	.+16     	; 0x20e2 <TIM_GetStatus+0x86>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	fb 01       	movw	r30, r22
    20d6:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
    20d8:	88 b7       	in	r24, 0x38	; 56
    20da:	80 61       	ori	r24, 0x10	; 16
    20dc:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
    20e2:	83 ff       	sbrs	r24, 3
    20e4:	31 c0       	rjmp	.+98     	; 0x2148 <TIM_GetStatus+0xec>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	fb 01       	movw	r30, r22
    20ea:	80 83       	st	Z, r24
               TIFR |= TIMER_1B_COMPARE_FLAG;
    20ec:	88 b7       	in	r24, 0x38	; 56
    20ee:	88 60       	ori	r24, 0x08	; 8
    20f0:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    20f6:	80 91 bc 00 	lds	r24, 0x00BC
    20fa:	88 23       	and	r24, r24
    20fc:	51 f4       	brne	.+20     	; 0x2112 <TIM_GetStatus+0xb6>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    20fe:	08 b6       	in	r0, 0x38	; 56
    2100:	06 fe       	sbrs	r0, 6
    2102:	24 c0       	rjmp	.+72     	; 0x214c <TIM_GetStatus+0xf0>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    2104:	fb 01       	movw	r30, r22
    2106:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    2108:	88 b7       	in	r24, 0x38	; 56
    210a:	80 64       	ori	r24, 0x40	; 64
    210c:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    2112:	88 30       	cpi	r24, 0x08	; 8
    2114:	e9 f4       	brne	.+58     	; 0x2150 <TIM_GetStatus+0xf4>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    2116:	08 b6       	in	r0, 0x38	; 56
    2118:	07 fe       	sbrs	r0, 7
    211a:	1c c0       	rjmp	.+56     	; 0x2154 <TIM_GetStatus+0xf8>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	fb 01       	movw	r30, r22
    2120:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
    2122:	88 b7       	in	r24, 0x38	; 56
    2124:	80 68       	ori	r24, 0x80	; 128
    2126:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
    212c:	8f ef       	ldi	r24, 0xFF	; 255
    212e:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    2130:	8e ef       	ldi	r24, 0xFE	; 254
    2132:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    2134:	8d ef       	ldi	r24, 0xFD	; 253
    2136:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    213c:	8d ef       	ldi	r24, 0xFD	; 253
    213e:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    2140:	8d ef       	ldi	r24, 0xFD	; 253
    2142:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    2148:	8d ef       	ldi	r24, 0xFD	; 253
    214a:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    214c:	8d ef       	ldi	r24, 0xFD	; 253
    214e:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    2154:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
    2156:	08 95       	ret

00002158 <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    2158:	8f 92       	push	r8
    215a:	9f 92       	push	r9
    215c:	af 92       	push	r10
    215e:	bf 92       	push	r11
    2160:	cf 92       	push	r12
    2162:	df 92       	push	r13
    2164:	ef 92       	push	r14
    2166:	ff 92       	push	r15
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	00 d0       	rcall	.+0      	; 0x2170 <TIM_DelayUs+0x18>
    2170:	00 d0       	rcall	.+0      	; 0x2172 <TIM_DelayUs+0x1a>
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	18 2f       	mov	r17, r24
    2178:	6a 01       	movw	r12, r20
    217a:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    217c:	83 30       	cpi	r24, 0x03	; 3
    217e:	08 f0       	brcs	.+2      	; 0x2182 <TIM_DelayUs+0x2a>
    2180:	5c c0       	rjmp	.+184    	; 0x223a <TIM_DelayUs+0xe2>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    2182:	21 15       	cp	r18, r1
    2184:	31 05       	cpc	r19, r1
    2186:	09 f4       	brne	.+2      	; 0x218a <TIM_DelayUs+0x32>
    2188:	5a c0       	rjmp	.+180    	; 0x223e <TIM_DelayUs+0xe6>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    218a:	30 93 18 01 	sts	0x0118, r19
    218e:	20 93 17 01 	sts	0x0117, r18
   
   /* Static variables used */
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    2192:	80 91 19 01 	lds	r24, 0x0119
    2196:	88 23       	and	r24, r24
    2198:	09 f0       	breq	.+2      	; 0x219c <TIM_DelayUs+0x44>
    219a:	53 c0       	rjmp	.+166    	; 0x2242 <TIM_DelayUs+0xea>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    219c:	81 2f       	mov	r24, r17
    219e:	be 01       	movw	r22, r28
    21a0:	6f 5f       	subi	r22, 0xFF	; 255
    21a2:	7f 4f       	sbci	r23, 0xFF	; 255
    21a4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    21a8:	8c 3f       	cpi	r24, 0xFC	; 252
    21aa:	09 f4       	brne	.+2      	; 0x21ae <TIM_DelayUs+0x56>
    21ac:	4c c0       	rjmp	.+152    	; 0x2246 <TIM_DelayUs+0xee>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    21ae:	89 80       	ldd	r8, Y+1	; 0x01
    21b0:	9a 80       	ldd	r9, Y+2	; 0x02
    21b2:	ab 80       	ldd	r10, Y+3	; 0x03
    21b4:	bc 80       	ldd	r11, Y+4	; 0x04
    21b6:	c5 01       	movw	r24, r10
    21b8:	b4 01       	movw	r22, r8
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	a9 01       	movw	r20, r18
    21c0:	0e 94 b3 14 	call	0x2966	; 0x2966 <__cmpsf2>
    21c4:	88 23       	and	r24, r24
    21c6:	a1 f0       	breq	.+40     	; 0x21f0 <TIM_DelayUs+0x98>
      {
         TIM_Delay /= f32_FreqRatio;
    21c8:	c7 01       	movw	r24, r14
    21ca:	b6 01       	movw	r22, r12
    21cc:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__floatunsisf>
    21d0:	a5 01       	movw	r20, r10
    21d2:	94 01       	movw	r18, r8
    21d4:	0e 94 b7 14 	call	0x296e	; 0x296e <__divsf3>
    21d8:	46 2f       	mov	r20, r22
    21da:	57 2f       	mov	r21, r23
    21dc:	68 2f       	mov	r22, r24
    21de:	79 2f       	mov	r23, r25
    21e0:	cb 01       	movw	r24, r22
    21e2:	ba 01       	movw	r22, r20
    21e4:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__fixunssfsi>
    21e8:	c6 2e       	mov	r12, r22
    21ea:	d7 2e       	mov	r13, r23
    21ec:	e8 2e       	mov	r14, r24
    21ee:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay / TIMER_OVERFLOW_FACTOR;
    21f0:	bb 27       	eor	r27, r27
    21f2:	af 2d       	mov	r26, r15
    21f4:	9e 2d       	mov	r25, r14
    21f6:	8d 2d       	mov	r24, r13
    21f8:	80 93 1a 01 	sts	0x011A, r24
    21fc:	90 93 1b 01 	sts	0x011B, r25
    2200:	a0 93 1c 01 	sts	0x011C, r26
    2204:	b0 93 1d 01 	sts	0x011D, r27
      gu8_Remindar = TIM_Delay % TIMER_OVERFLOW_FACTOR;
    2208:	6c 2d       	mov	r22, r12
    220a:	c0 92 1e 01 	sts	0x011E, r12
      
      if(gu32_Overflows == 0)
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	a1 05       	cpc	r26, r1
    2212:	b1 05       	cpc	r27, r1
    2214:	41 f4       	brne	.+16     	; 0x2226 <TIM_DelayUs+0xce>
      {
         gu8_OverflowsComplete = HIGH;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	80 93 1f 01 	sts	0x011F, r24
         TIM_Start(TIM_channel, gu8_Remindar);
    221c:	81 2f       	mov	r24, r17
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <TIM_Start>
    2224:	05 c0       	rjmp	.+10     	; 0x2230 <TIM_DelayUs+0xd8>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    2226:	81 2f       	mov	r24, r17
    2228:	6f ef       	ldi	r22, 0xFF	; 255
    222a:	70 e0       	ldi	r23, 0x00	; 0
    222c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <TIM_Start>
      }     
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	80 93 19 01 	sts	0x0119, r24
      return TIMER_E_PENDING;
    2236:	8d ef       	ldi	r24, 0xFD	; 253
    2238:	07 c0       	rjmp	.+14     	; 0x2248 <TIM_DelayUs+0xf0>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    223a:	8e ef       	ldi	r24, 0xFE	; 254
    223c:	05 c0       	rjmp	.+10     	; 0x2248 <TIM_DelayUs+0xf0>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <TIM_DelayUs+0xf0>
      /* Change to timer pending state */ 
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	01 c0       	rjmp	.+2      	; 0x2248 <TIM_DelayUs+0xf0>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    2246:	8c ef       	ldi	r24, 0xFC	; 252
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
}
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	ff 90       	pop	r15
    2258:	ef 90       	pop	r14
    225a:	df 90       	pop	r13
    225c:	cf 90       	pop	r12
    225e:	bf 90       	pop	r11
    2260:	af 90       	pop	r10
    2262:	9f 90       	pop	r9
    2264:	8f 90       	pop	r8
    2266:	08 95       	ret

00002268 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
    2268:	8f 92       	push	r8
    226a:	9f 92       	push	r9
    226c:	af 92       	push	r10
    226e:	bf 92       	push	r11
    2270:	df 92       	push	r13
    2272:	ef 92       	push	r14
    2274:	ff 92       	push	r15
    2276:	0f 93       	push	r16
    2278:	1f 93       	push	r17
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	00 d0       	rcall	.+0      	; 0x2280 <TIM_DelayMs+0x18>
    2280:	00 d0       	rcall	.+0      	; 0x2282 <TIM_DelayMs+0x1a>
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	18 2f       	mov	r17, r24
    2288:	04 2f       	mov	r16, r20
    228a:	f5 2e       	mov	r15, r21
    228c:	e6 2e       	mov	r14, r22
    228e:	d7 2e       	mov	r13, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    2290:	83 30       	cpi	r24, 0x03	; 3
    2292:	08 f0       	brcs	.+2      	; 0x2296 <TIM_DelayMs+0x2e>
    2294:	6d c0       	rjmp	.+218    	; 0x2370 <TIM_DelayMs+0x108>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
    2296:	21 15       	cp	r18, r1
    2298:	31 05       	cpc	r19, r1
    229a:	09 f4       	brne	.+2      	; 0x229e <TIM_DelayMs+0x36>
    229c:	6b c0       	rjmp	.+214    	; 0x2374 <TIM_DelayMs+0x10c>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
    229e:	30 93 18 01 	sts	0x0118, r19
    22a2:	20 93 17 01 	sts	0x0117, r18
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
    22a6:	80 91 19 01 	lds	r24, 0x0119
    22aa:	88 23       	and	r24, r24
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <TIM_DelayMs+0x48>
    22ae:	64 c0       	rjmp	.+200    	; 0x2378 <TIM_DelayMs+0x110>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    22b0:	81 2f       	mov	r24, r17
    22b2:	be 01       	movw	r22, r28
    22b4:	6f 5f       	subi	r22, 0xFF	; 255
    22b6:	7f 4f       	sbci	r23, 0xFF	; 255
    22b8:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    22bc:	8c 3f       	cpi	r24, 0xFC	; 252
    22be:	09 f4       	brne	.+2      	; 0x22c2 <TIM_DelayMs+0x5a>
    22c0:	5d c0       	rjmp	.+186    	; 0x237c <TIM_DelayMs+0x114>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    22c2:	89 80       	ldd	r8, Y+1	; 0x01
    22c4:	9a 80       	ldd	r9, Y+2	; 0x02
    22c6:	ab 80       	ldd	r10, Y+3	; 0x03
    22c8:	bc 80       	ldd	r11, Y+4	; 0x04
    22ca:	c5 01       	movw	r24, r10
    22cc:	b4 01       	movw	r22, r8
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	a9 01       	movw	r20, r18
    22d4:	0e 94 b3 14 	call	0x2966	; 0x2966 <__cmpsf2>
    22d8:	88 23       	and	r24, r24
    22da:	b1 f0       	breq	.+44     	; 0x2308 <TIM_DelayMs+0xa0>
      {
         TIM_Delay /= f32_FreqRatio;
    22dc:	60 2f       	mov	r22, r16
    22de:	7f 2d       	mov	r23, r15
    22e0:	8e 2d       	mov	r24, r14
    22e2:	9d 2d       	mov	r25, r13
    22e4:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__floatunsisf>
    22e8:	a5 01       	movw	r20, r10
    22ea:	94 01       	movw	r18, r8
    22ec:	0e 94 b7 14 	call	0x296e	; 0x296e <__divsf3>
    22f0:	46 2f       	mov	r20, r22
    22f2:	57 2f       	mov	r21, r23
    22f4:	68 2f       	mov	r22, r24
    22f6:	79 2f       	mov	r23, r25
    22f8:	cb 01       	movw	r24, r22
    22fa:	ba 01       	movw	r22, r20
    22fc:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__fixunssfsi>
    2300:	06 2f       	mov	r16, r22
    2302:	f7 2e       	mov	r15, r23
    2304:	e8 2e       	mov	r14, r24
    2306:	d9 2e       	mov	r13, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
    2308:	60 2f       	mov	r22, r16
    230a:	7f 2d       	mov	r23, r15
    230c:	8e 2d       	mov	r24, r14
    230e:	9d 2d       	mov	r25, r13
    2310:	28 ee       	ldi	r18, 0xE8	; 232
    2312:	33 e0       	ldi	r19, 0x03	; 3
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsi3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	89 2f       	mov	r24, r25
    2322:	9a 2f       	mov	r25, r26
    2324:	ab 2f       	mov	r26, r27
    2326:	bb 27       	eor	r27, r27
    2328:	80 93 1a 01 	sts	0x011A, r24
    232c:	90 93 1b 01 	sts	0x011B, r25
    2330:	a0 93 1c 01 	sts	0x011C, r26
    2334:	b0 93 1d 01 	sts	0x011D, r27
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
    2338:	68 ee       	ldi	r22, 0xE8	; 232
    233a:	06 9f       	mul	r16, r22
    233c:	60 2d       	mov	r22, r0
    233e:	11 24       	eor	r1, r1
    2340:	60 93 1e 01 	sts	0x011E, r22
      
      if(gu32_Overflows == 0)
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	a1 05       	cpc	r26, r1
    2348:	b1 05       	cpc	r27, r1
    234a:	41 f4       	brne	.+16     	; 0x235c <TIM_DelayMs+0xf4>
      {
         gu8_OverflowsComplete = HIGH;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	80 93 1f 01 	sts	0x011F, r24
         TIM_Start(TIM_channel, gu8_Remindar);
    2352:	81 2f       	mov	r24, r17
    2354:	70 e0       	ldi	r23, 0x00	; 0
    2356:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <TIM_Start>
    235a:	05 c0       	rjmp	.+10     	; 0x2366 <TIM_DelayMs+0xfe>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
    235c:	81 2f       	mov	r24, r17
    235e:	6f ef       	ldi	r22, 0xFF	; 255
    2360:	70 e0       	ldi	r23, 0x00	; 0
    2362:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	80 93 19 01 	sts	0x0119, r24
      return TIMER_E_PENDING;
    236c:	8d ef       	ldi	r24, 0xFD	; 253
    236e:	07 c0       	rjmp	.+14     	; 0x237e <TIM_DelayMs+0x116>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    2370:	8e ef       	ldi	r24, 0xFE	; 254
    2372:	05 c0       	rjmp	.+10     	; 0x237e <TIM_DelayMs+0x116>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	03 c0       	rjmp	.+6      	; 0x237e <TIM_DelayMs+0x116>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	01 c0       	rjmp	.+2      	; 0x237e <TIM_DelayMs+0x116>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    237c:	8c ef       	ldi	r24, 0xFC	; 252
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
}
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	ff 90       	pop	r15
    2390:	ef 90       	pop	r14
    2392:	df 90       	pop	r13
    2394:	bf 90       	pop	r11
    2396:	af 90       	pop	r10
    2398:	9f 90       	pop	r9
    239a:	8f 90       	pop	r8
    239c:	08 95       	ret

0000239e <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
    239e:	1f 93       	push	r17
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	0f 92       	push	r0
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	18 2f       	mov	r17, r24
   if(DelayReady == gEnu_State)
    23ac:	20 91 19 01 	lds	r18, 0x0119
    23b0:	22 23       	and	r18, r18
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <TIM_DelayStatus+0x18>
    23b4:	49 c0       	rjmp	.+146    	; 0x2448 <TIM_DelayStatus+0xaa>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
    23b6:	80 91 17 01 	lds	r24, 0x0117
    23ba:	90 91 18 01 	lds	r25, 0x0118
    23be:	68 17       	cp	r22, r24
    23c0:	79 07       	cpc	r23, r25
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <TIM_DelayStatus+0x28>
    23c4:	43 c0       	rjmp	.+134    	; 0x244c <TIM_DelayStatus+0xae>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
    23c6:	21 30       	cpi	r18, 0x01	; 1
    23c8:	09 f0       	breq	.+2      	; 0x23cc <TIM_DelayStatus+0x2e>
    23ca:	42 c0       	rjmp	.+132    	; 0x2450 <TIM_DelayStatus+0xb2>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    23cc:	81 2f       	mov	r24, r17
    23ce:	be 01       	movw	r22, r28
    23d0:	6f 5f       	subi	r22, 0xFF	; 255
    23d2:	7f 4f       	sbci	r23, 0xFF	; 255
    23d4:	0e 94 2e 10 	call	0x205c	; 0x205c <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    23d8:	88 23       	and	r24, r24
    23da:	a9 f5       	brne	.+106    	; 0x2446 <TIM_DelayStatus+0xa8>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
    23dc:	80 91 1f 01 	lds	r24, 0x011F
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	41 f4       	brne	.+16     	; 0x23f4 <TIM_DelayStatus+0x56>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
    23e4:	10 92 19 01 	sts	0x0119, r1
            gu8_OverflowsComplete = LOW;
    23e8:	10 92 1f 01 	sts	0x011F, r1
            gu8_Remindar = 0;
    23ec:	10 92 1e 01 	sts	0x011E, r1
            /* return success message. */
            return ERROR_OK;
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	2f c0       	rjmp	.+94     	; 0x2452 <TIM_DelayStatus+0xb4>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
    23f4:	80 91 1a 01 	lds	r24, 0x011A
    23f8:	90 91 1b 01 	lds	r25, 0x011B
    23fc:	a0 91 1c 01 	lds	r26, 0x011C
    2400:	b0 91 1d 01 	lds	r27, 0x011D
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	a1 09       	sbc	r26, r1
    2408:	b1 09       	sbc	r27, r1
    240a:	80 93 1a 01 	sts	0x011A, r24
    240e:	90 93 1b 01 	sts	0x011B, r25
    2412:	a0 93 1c 01 	sts	0x011C, r26
    2416:	b0 93 1d 01 	sts	0x011D, r27
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	a1 05       	cpc	r26, r1
    241e:	b1 05       	cpc	r27, r1
    2420:	59 f4       	brne	.+22     	; 0x2438 <TIM_DelayStatus+0x9a>
         {
            gu8_OverflowsComplete = HIGH;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	80 93 1f 01 	sts	0x011F, r24
            TIM_Start(TIM_channel, gu8_Remindar);
    2428:	60 91 1e 01 	lds	r22, 0x011E
    242c:	81 2f       	mov	r24, r17
    242e:	70 e0       	ldi	r23, 0x00	; 0
    2430:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
    2434:	8d ef       	ldi	r24, 0xFD	; 253
    2436:	0d c0       	rjmp	.+26     	; 0x2452 <TIM_DelayStatus+0xb4>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
    2438:	81 2f       	mov	r24, r17
    243a:	6f ef       	ldi	r22, 0xFF	; 255
    243c:	70 e0       	ldi	r23, 0x00	; 0
    243e:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    2442:	8d ef       	ldi	r24, 0xFD	; 253
    2444:	06 c0       	rjmp	.+12     	; 0x2452 <TIM_DelayStatus+0xb4>
    2446:	05 c0       	rjmp	.+10     	; 0x2452 <TIM_DelayStatus+0xb4>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
    2448:	8b ef       	ldi	r24, 0xFB	; 251
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <TIM_DelayStatus+0xb4>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	01 c0       	rjmp	.+2      	; 0x2452 <TIM_DelayStatus+0xb4>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
    2450:	81 e0       	ldi	r24, 0x01	; 1
   }      
    2452:	0f 90       	pop	r0
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	1f 91       	pop	r17
    245a:	08 95       	ret

0000245c <OS_Init>:
	
	SET_BIT(SREG,I);
}

extern ERROR_STATE_t OS_Init(void)
{	
    245c:	cf 93       	push	r28
			/*Do Nothing*/
		}
	#endif
	
	#if OS_TIMER_2
		switch(gstr_OS_SchedulerCfg.u8_OS_TimerResolution)
    245e:	80 91 c2 00 	lds	r24, 0x00C2
    2462:	8a 30       	cpi	r24, 0x0A	; 10
    2464:	39 f0       	breq	.+14     	; 0x2474 <OS_Init+0x18>
    2466:	84 31       	cpi	r24, 0x14	; 20
    2468:	41 f0       	breq	.+16     	; 0x247a <OS_Init+0x1e>
    246a:	85 30       	cpi	r24, 0x05	; 5
    246c:	49 f4       	brne	.+18     	; 0x2480 <OS_Init+0x24>
		{
			case OS_TIMER_RESOLUATION_5U:
				REG_WRITE(OCR2,OS_RES_5U_PRESCALER_8);
    246e:	8a e0       	ldi	r24, 0x0A	; 10
    2470:	83 bd       	out	0x23, r24	; 35
				break;	
    2472:	25 c0       	rjmp	.+74     	; 0x24be <OS_Init+0x62>
			case OS_TIMER_RESOLUATION_10U:
				REG_WRITE(OCR2,OS_RES_10U_PRESCALER_8);
    2474:	84 e1       	ldi	r24, 0x14	; 20
    2476:	83 bd       	out	0x23, r24	; 35
				break;
    2478:	22 c0       	rjmp	.+68     	; 0x24be <OS_Init+0x62>
			case OS_TIMER_RESOLUATION_20U:
				REG_WRITE(OCR2,OS_RES_20U_PRESCALER_8);
    247a:	88 e2       	ldi	r24, 0x28	; 40
    247c:	83 bd       	out	0x23, r24	; 35
				break;
    247e:	1f c0       	rjmp	.+62     	; 0x24be <OS_Init+0x62>
		else
		{
			/*Do Nothing*/
		}
	#endif
	u8_ErrorState=OS_Get(&gpstr_Task);
    2480:	80 e2       	ldi	r24, 0x20	; 32
    2482:	91 e0       	ldi	r25, 0x01	; 1
    2484:	0e 94 43 14 	call	0x2886	; 0x2886 <OS_Get>
    2488:	c8 2f       	mov	r28, r24
	gu32_OS_TicksNumber = gstr_OS_SchedulerCfg.u32_OS_TickTime_Us/gstr_OS_SchedulerCfg.u8_OS_TimerResolution;
    248a:	20 91 c2 00 	lds	r18, 0x00C2
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	60 91 c3 00 	lds	r22, 0x00C3
    2498:	70 91 c4 00 	lds	r23, 0x00C4
    249c:	80 91 c5 00 	lds	r24, 0x00C5
    24a0:	90 91 c6 00 	lds	r25, 0x00C6
    24a4:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__udivmodsi4>
    24a8:	20 93 26 01 	sts	0x0126, r18
    24ac:	30 93 27 01 	sts	0x0127, r19
    24b0:	40 93 28 01 	sts	0x0128, r20
    24b4:	50 93 29 01 	sts	0x0129, r21
	return u8_ErrorState;
}
    24b8:	8c 2f       	mov	r24, r28
    24ba:	cf 91       	pop	r28
    24bc:	08 95       	ret
				u8_ErrorState=OS_UNSUPPORTED_RESOLUTION;
				break;
		}
		if(ERROR_OK==u8_ErrorState)
		{
			SET_BIT(TCCR2,WGM21);
    24be:	85 b5       	in	r24, 0x25	; 37
			CLR_BIT(TCCR2,WGM20);
			THREE_BITS_WRITE(TCCR2,CS20,OS_T2_PRESCALER_8);		
    24c0:	80 7b       	andi	r24, 0xB0	; 176
    24c2:	8a 60       	ori	r24, 0x0A	; 10
    24c4:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TIMSK,OCIE2); 	
    24c6:	89 b7       	in	r24, 0x39	; 57
    24c8:	80 68       	ori	r24, 0x80	; 128
    24ca:	89 bf       	out	0x39, r24	; 57
    24cc:	d9 cf       	rjmp	.-78     	; 0x2480 <OS_Init+0x24>

000024ce <OS_Run>:
	#if OS_TIMER_1
		REG_WRITE(TCNT1,ZERO);
	#endif
		
	#if OS_TIMER_2
		REG_WRITE(TCNT2,ZERO);
    24ce:	14 bc       	out	0x24, r1	; 36
	#endif
	
	SET_BIT(SREG,I);
    24d0:	8f b7       	in	r24, 0x3f	; 63
    24d2:	80 68       	ori	r24, 0x80	; 128
    24d4:	8f bf       	out	0x3f, r24	; 63
	OS_Start();
	while(1)
	{	
		for(u8_TaskCounter=ZERO;u8_TaskCounter<OS_TASKS_NUMBER;u8_TaskCounter++)
		{
			if(NULL_PTR==(gpstr_Task[u8_TaskCounter].ptr_OS_TaskCallback))
    24d6:	00 e0       	ldi	r16, 0x00	; 0
    24d8:	10 e0       	ldi	r17, 0x00	; 0
			{
				continue ;
			}
			else if(OS_TASKREADY==gpstr_Task[u8_TaskCounter].u8_OS_TaskState)
			{
				gpstr_Task[u8_TaskCounter].u8_OS_TaskState=OS_TASKRUNING;
    24da:	ff 24       	eor	r15, r15
    24dc:	f3 94       	inc	r15
				
				if(ZERO!=gpstr_Task[u8_TaskCounter].u32_OS_TaskPeriodicity)
				{
					if(OS_TASKRUNING==gpstr_Task[u8_TaskCounter].u8_OS_TaskState)
					{
						gpstr_Task[u8_TaskCounter].u8_OS_TaskState=OS_TASKWAIT;						
    24de:	ee 24       	eor	r14, r14
    24e0:	68 94       	set
    24e2:	e1 f8       	bld	r14, 1
		
	#if OS_TIMER_2
		REG_WRITE(TCNT2,ZERO);
	#endif
	
	SET_BIT(SREG,I);
    24e4:	e0 91 20 01 	lds	r30, 0x0120
    24e8:	f0 91 21 01 	lds	r31, 0x0121
	OS_Start();
	while(1)
	{	
		for(u8_TaskCounter=ZERO;u8_TaskCounter<OS_TASKS_NUMBER;u8_TaskCounter++)
		{
			if(NULL_PTR==(gpstr_Task[u8_TaskCounter].ptr_OS_TaskCallback))
    24ec:	98 01       	movw	r18, r16
    24ee:	e9 01       	movw	r28, r18
    24f0:	80 85       	ldd	r24, Z+8	; 0x08
    24f2:	91 85       	ldd	r25, Z+9	; 0x09
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	21 f1       	breq	.+72     	; 0x2540 <OS_Run+0x72>
			{
				continue ;
			}
			else if(OS_TASKREADY==gpstr_Task[u8_TaskCounter].u8_OS_TaskState)
    24f8:	83 81       	ldd	r24, Z+3	; 0x03
    24fa:	88 23       	and	r24, r24
    24fc:	09 f5       	brne	.+66     	; 0x2540 <OS_Run+0x72>
			{
				gpstr_Task[u8_TaskCounter].u8_OS_TaskState=OS_TASKRUNING;
    24fe:	f3 82       	std	Z+3, r15	; 0x03
				(gpstr_Task[u8_TaskCounter].ptr_OS_TaskCallback)();
    2500:	00 84       	ldd	r0, Z+8	; 0x08
    2502:	f1 85       	ldd	r31, Z+9	; 0x09
    2504:	e0 2d       	mov	r30, r0
    2506:	09 95       	icall
				gu8_OS_ReadyTasksCounter--;
    2508:	80 91 2a 01 	lds	r24, 0x012A
    250c:	81 50       	subi	r24, 0x01	; 1
    250e:	80 93 2a 01 	sts	0x012A, r24
				
				if(ZERO!=gpstr_Task[u8_TaskCounter].u32_OS_TaskPeriodicity)
    2512:	80 91 20 01 	lds	r24, 0x0120
    2516:	90 91 21 01 	lds	r25, 0x0121
    251a:	c8 0f       	add	r28, r24
    251c:	d9 1f       	adc	r29, r25
    251e:	8c 81       	ldd	r24, Y+4	; 0x04
    2520:	9d 81       	ldd	r25, Y+5	; 0x05
    2522:	ae 81       	ldd	r26, Y+6	; 0x06
    2524:	bf 81       	ldd	r27, Y+7	; 0x07
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	a1 05       	cpc	r26, r1
    252a:	b1 05       	cpc	r27, r1
    252c:	29 f0       	breq	.+10     	; 0x2538 <OS_Run+0x6a>
				{
					if(OS_TASKRUNING==gpstr_Task[u8_TaskCounter].u8_OS_TaskState)
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	61 f4       	brne	.+24     	; 0x254c <OS_Run+0x7e>
					{
						gpstr_Task[u8_TaskCounter].u8_OS_TaskState=OS_TASKWAIT;						
    2534:	eb 82       	std	Y+3, r14	; 0x03
    2536:	0a c0       	rjmp	.+20     	; 0x254c <OS_Run+0x7e>
						/*Do Nothing*/
					}
				}
				else
				{
					OS_DeleteTask((gpstr_Task+u8_TaskCounter));
    2538:	ce 01       	movw	r24, r28
    253a:	0e 94 1a 14 	call	0x2834	; 0x2834 <OS_DeleteTask>
    253e:	06 c0       	rjmp	.+12     	; 0x254c <OS_Run+0x7e>
    2540:	26 5f       	subi	r18, 0xF6	; 246
    2542:	3f 4f       	sbci	r19, 0xFF	; 255
    2544:	3a 96       	adiw	r30, 0x0a	; 10
{
	uint8_t u8_TaskCounter;
	OS_Start();
	while(1)
	{	
		for(u8_TaskCounter=ZERO;u8_TaskCounter<OS_TASKS_NUMBER;u8_TaskCounter++)
    2546:	2e 31       	cpi	r18, 0x1E	; 30
    2548:	31 05       	cpc	r19, r1
    254a:	89 f6       	brne	.-94     	; 0x24ee <OS_Run+0x20>
			else
			{
				/*Do Nothing*/
			}
		}
		if(ZERO==gu8_OS_ReadyTasksCounter)
    254c:	80 91 2a 01 	lds	r24, 0x012A
    2550:	88 23       	and	r24, r24
    2552:	41 f6       	brne	.-112    	; 0x24e4 <OS_Run+0x16>

static void OS_IdealTask(void)
{
	while(TRUE)
	{
		if(ZERO!=gu8_OS_ReadyTasksCounter)
    2554:	80 91 2a 01 	lds	r24, 0x012A
    2558:	88 23       	and	r24, r24
    255a:	e1 f3       	breq	.-8      	; 0x2554 <OS_Run+0x86>
    255c:	c3 cf       	rjmp	.-122    	; 0x24e4 <OS_Run+0x16>

0000255e <__vector_4>:
#endif

#if OS_TIMER_2
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    255e:	1f 92       	push	r1
    2560:	0f 92       	push	r0
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	0f 92       	push	r0
    2566:	11 24       	eor	r1, r1
    2568:	2f 93       	push	r18
    256a:	3f 93       	push	r19
    256c:	4f 93       	push	r20
    256e:	5f 93       	push	r21
    2570:	6f 93       	push	r22
    2572:	7f 93       	push	r23
    2574:	8f 93       	push	r24
    2576:	9f 93       	push	r25
    2578:	af 93       	push	r26
    257a:	bf 93       	push	r27
    257c:	ef 93       	push	r30
    257e:	ff 93       	push	r31
	static volatile uint32_t u32_ISRsCounter=ZERO;
	uint8_t u8_TaskCounter;
	u32_ISRsCounter++;
    2580:	80 91 22 01 	lds	r24, 0x0122
    2584:	90 91 23 01 	lds	r25, 0x0123
    2588:	a0 91 24 01 	lds	r26, 0x0124
    258c:	b0 91 25 01 	lds	r27, 0x0125
    2590:	01 96       	adiw	r24, 0x01	; 1
    2592:	a1 1d       	adc	r26, r1
    2594:	b1 1d       	adc	r27, r1
    2596:	80 93 22 01 	sts	0x0122, r24
    259a:	90 93 23 01 	sts	0x0123, r25
    259e:	a0 93 24 01 	sts	0x0124, r26
    25a2:	b0 93 25 01 	sts	0x0125, r27
	if(gu32_OS_TicksNumber==u32_ISRsCounter)
    25a6:	80 91 22 01 	lds	r24, 0x0122
    25aa:	90 91 23 01 	lds	r25, 0x0123
    25ae:	a0 91 24 01 	lds	r26, 0x0124
    25b2:	b0 91 25 01 	lds	r27, 0x0125
    25b6:	40 91 26 01 	lds	r20, 0x0126
    25ba:	50 91 27 01 	lds	r21, 0x0127
    25be:	60 91 28 01 	lds	r22, 0x0128
    25c2:	70 91 29 01 	lds	r23, 0x0129
    25c6:	48 17       	cp	r20, r24
    25c8:	59 07       	cpc	r21, r25
    25ca:	6a 07       	cpc	r22, r26
    25cc:	7b 07       	cpc	r23, r27
    25ce:	91 f5       	brne	.+100    	; 0x2634 <__vector_4+0xd6>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(u8_TaskCounter=ZERO;u8_TaskCounter<OS_TASKS_NUMBER;u8_TaskCounter++)
		{
			if(NULL_PTR==gpstr_Task[u8_TaskCounter].ptr_OS_TaskCallback)
    25d4:	e0 91 20 01 	lds	r30, 0x0120
    25d8:	f0 91 21 01 	lds	r31, 0x0121
    25dc:	e8 0f       	add	r30, r24
    25de:	f9 1f       	adc	r31, r25
    25e0:	20 85       	ldd	r18, Z+8	; 0x08
    25e2:	31 85       	ldd	r19, Z+9	; 0x09
    25e4:	21 15       	cp	r18, r1
    25e6:	31 05       	cpc	r19, r1
    25e8:	c9 f0       	breq	.+50     	; 0x261c <__vector_4+0xbe>
			{
				continue ;
			}
			else if((OS_TASKWAIT==gpstr_Task[u8_TaskCounter].u8_OS_TaskState)||(OS_TASKRUNING==gpstr_Task[u8_TaskCounter].u8_OS_TaskState))
    25ea:	23 81       	ldd	r18, Z+3	; 0x03
    25ec:	21 50       	subi	r18, 0x01	; 1
    25ee:	22 30       	cpi	r18, 0x02	; 2
    25f0:	a8 f4       	brcc	.+42     	; 0x261c <__vector_4+0xbe>
			{
				if(ZERO==gpstr_Task[u8_TaskCounter].u8_OS_TaskDelay)
    25f2:	21 81       	ldd	r18, Z+1	; 0x01
    25f4:	22 23       	and	r18, r18
    25f6:	81 f4       	brne	.+32     	; 0x2618 <__vector_4+0xba>
				{
					gpstr_Task[u8_TaskCounter].u8_OS_TaskState=OS_TASKREADY;
    25f8:	13 82       	std	Z+3, r1	; 0x03
					gu8_OS_ReadyTasksCounter++;
    25fa:	20 91 2a 01 	lds	r18, 0x012A
    25fe:	2f 5f       	subi	r18, 0xFF	; 255
    2600:	20 93 2a 01 	sts	0x012A, r18
					gpstr_Task[u8_TaskCounter].u8_OS_TaskDelay=gpstr_Task[u8_TaskCounter].u32_OS_TaskPeriodicity-1;
    2604:	e0 91 20 01 	lds	r30, 0x0120
    2608:	f0 91 21 01 	lds	r31, 0x0121
    260c:	e8 0f       	add	r30, r24
    260e:	f9 1f       	adc	r31, r25
    2610:	24 81       	ldd	r18, Z+4	; 0x04
    2612:	21 50       	subi	r18, 0x01	; 1
    2614:	21 83       	std	Z+1, r18	; 0x01
    2616:	02 c0       	rjmp	.+4      	; 0x261c <__vector_4+0xbe>
				}
				else
				{
					gpstr_Task[u8_TaskCounter].u8_OS_TaskDelay--;
    2618:	21 50       	subi	r18, 0x01	; 1
    261a:	21 83       	std	Z+1, r18	; 0x01
    261c:	0a 96       	adiw	r24, 0x0a	; 10
	static volatile uint32_t u32_ISRsCounter=ZERO;
	uint8_t u8_TaskCounter;
	u32_ISRsCounter++;
	if(gu32_OS_TicksNumber==u32_ISRsCounter)
	{
		for(u8_TaskCounter=ZERO;u8_TaskCounter<OS_TASKS_NUMBER;u8_TaskCounter++)
    261e:	8e 31       	cpi	r24, 0x1E	; 30
    2620:	91 05       	cpc	r25, r1
    2622:	c1 f6       	brne	.-80     	; 0x25d4 <__vector_4+0x76>
			else
			{
				/*Do Nothing*/
			}
		}
		u32_ISRsCounter=ZERO;
    2624:	10 92 22 01 	sts	0x0122, r1
    2628:	10 92 23 01 	sts	0x0123, r1
    262c:	10 92 24 01 	sts	0x0124, r1
    2630:	10 92 25 01 	sts	0x0125, r1
	}
	else
	{
		/*Do Nothing*/
	}   
}
    2634:	ff 91       	pop	r31
    2636:	ef 91       	pop	r30
    2638:	bf 91       	pop	r27
    263a:	af 91       	pop	r26
    263c:	9f 91       	pop	r25
    263e:	8f 91       	pop	r24
    2640:	7f 91       	pop	r23
    2642:	6f 91       	pop	r22
    2644:	5f 91       	pop	r21
    2646:	4f 91       	pop	r20
    2648:	3f 91       	pop	r19
    264a:	2f 91       	pop	r18
    264c:	0f 90       	pop	r0
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	0f 90       	pop	r0
    2652:	1f 90       	pop	r1
    2654:	18 95       	reti

00002656 <OS_CreateTask>:
								uint8_t Delay,
								uint32_t Periodicity,
								Ptr_VoidFuncVoid_t TaskCallback,
								TaskHandler_t* TaskHandler
							)
{
    2656:	6f 92       	push	r6
    2658:	7f 92       	push	r7
    265a:	8f 92       	push	r8
    265c:	9f 92       	push	r9
    265e:	af 92       	push	r10
    2660:	bf 92       	push	r11
    2662:	cf 92       	push	r12
    2664:	df 92       	push	r13
    2666:	ef 92       	push	r14
    2668:	ff 92       	push	r15
    266a:	0f 93       	push	r16
    266c:	1f 93       	push	r17
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	78 2f       	mov	r23, r24
    2674:	49 01       	movw	r8, r18
    2676:	5a 01       	movw	r10, r20
    2678:	67 01       	movw	r12, r14
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
	uint8_t u8_TempArrayIndex=ZERO;
	uint8_t u8_Counter;
	uint8_t u8_CurrentPrioritySize=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[Priority];
    267a:	c8 2f       	mov	r28, r24
    267c:	d0 e0       	ldi	r29, 0x00	; 0
    267e:	fe 01       	movw	r30, r28
    2680:	e1 54       	subi	r30, 0x41	; 65
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	e0 80       	ld	r14, Z
	if(NULL_PTR==TaskCallback)
    2686:	01 15       	cp	r16, r1
    2688:	11 05       	cpc	r17, r1
    268a:	09 f4       	brne	.+2      	; 0x268e <OS_CreateTask+0x38>
    268c:	bd c0       	rjmp	.+378    	; 0x2808 <OS_CreateTask+0x1b2>
	{
		u8_ErrorState=ERROR_NULL_PTR;
	}
	else if(Priority>=OS_PRIORITIES_NUMBER)
    268e:	83 30       	cpi	r24, 0x03	; 3
    2690:	08 f0       	brcs	.+2      	; 0x2694 <OS_CreateTask+0x3e>
    2692:	bc c0       	rjmp	.+376    	; 0x280c <OS_CreateTask+0x1b6>
	{
		u8_ErrorState=OS_UNSUPPORTED_PRIORITY;
	}
	else if(gau8_OS_TaskCounter[Priority]>=u8_CurrentPrioritySize)
    2694:	ff 24       	eor	r15, r15
    2696:	fe 01       	movw	r30, r28
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	e5 5d       	subi	r30, 0xD5	; 213
    269e:	fe 4f       	sbci	r31, 0xFE	; 254
    26a0:	80 81       	ld	r24, Z
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	8e 15       	cp	r24, r14
    26a6:	9f 05       	cpc	r25, r15
    26a8:	0c f0       	brlt	.+2      	; 0x26ac <OS_CreateTask+0x56>
    26aa:	b2 c0       	rjmp	.+356    	; 0x2810 <OS_CreateTask+0x1ba>
	{
		u8_ErrorState=OS_MEMORY_FULL;	
	}
	else
	{
		for(u8_Counter=ZERO;u8_Counter<Priority;u8_Counter++)
    26ac:	77 23       	and	r23, r23
    26ae:	59 f0       	breq	.+22     	; 0x26c6 <OS_CreateTask+0x70>
    26b0:	ef eb       	ldi	r30, 0xBF	; 191
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	80 e0       	ldi	r24, 0x00	; 0
		{
			u8_TempArrayIndex+=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[u8_Counter];
    26b8:	21 91       	ld	r18, Z+
    26ba:	82 0f       	add	r24, r18
	{
		u8_ErrorState=OS_MEMORY_FULL;	
	}
	else
	{
		for(u8_Counter=ZERO;u8_Counter<Priority;u8_Counter++)
    26bc:	9f 5f       	subi	r25, 0xFF	; 255
    26be:	97 17       	cp	r25, r23
    26c0:	d9 f7       	brne	.-10     	; 0x26b8 <OS_CreateTask+0x62>
		{
			u8_TempArrayIndex+=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[u8_Counter];
    26c2:	48 2f       	mov	r20, r24
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <OS_CreateTask+0x74>
	{
		u8_ErrorState=OS_MEMORY_FULL;	
	}
	else
	{
		for(u8_Counter=ZERO;u8_Counter<Priority;u8_Counter++)
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	40 e0       	ldi	r20, 0x00	; 0
		{
			u8_TempArrayIndex+=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[u8_Counter];
		}
		
		for(u8_Counter=u8_TempArrayIndex;(u8_Counter<(u8_TempArrayIndex+u8_CurrentPrioritySize));u8_Counter++)
    26ca:	a4 2f       	mov	r26, r20
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	e8 0e       	add	r14, r24
    26d0:	f1 1c       	adc	r15, r1
    26d2:	ae 15       	cp	r26, r14
    26d4:	bf 05       	cpc	r27, r15
    26d6:	0c f0       	brlt	.+2      	; 0x26da <OS_CreateTask+0x84>
    26d8:	9d c0       	rjmp	.+314    	; 0x2814 <OS_CreateTask+0x1be>
		{
			if(NULL_PTR==gastr_OS_TaskCfg[u8_Counter].ptr_OS_TaskCallback)
    26da:	cd 01       	movw	r24, r26
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	9d 01       	movw	r18, r26
    26e2:	22 0f       	add	r18, r18
    26e4:	33 1f       	adc	r19, r19
    26e6:	22 0f       	add	r18, r18
    26e8:	33 1f       	adc	r19, r19
    26ea:	22 0f       	add	r18, r18
    26ec:	33 1f       	adc	r19, r19
    26ee:	82 0f       	add	r24, r18
    26f0:	93 1f       	adc	r25, r19
    26f2:	8f 5c       	subi	r24, 0xCF	; 207
    26f4:	9e 4f       	sbci	r25, 0xFE	; 254
    26f6:	fc 01       	movw	r30, r24
    26f8:	80 85       	ldd	r24, Z+8	; 0x08
    26fa:	91 85       	ldd	r25, Z+9	; 0x09
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	09 f0       	breq	.+2      	; 0x2702 <OS_CreateTask+0xac>
    2700:	74 c0       	rjmp	.+232    	; 0x27ea <OS_CreateTask+0x194>
    2702:	14 c0       	rjmp	.+40     	; 0x272c <OS_CreateTask+0xd6>
    2704:	cd 01       	movw	r24, r26
    2706:	88 0f       	add	r24, r24
    2708:	99 1f       	adc	r25, r25
    270a:	9d 01       	movw	r18, r26
    270c:	22 0f       	add	r18, r18
    270e:	33 1f       	adc	r19, r19
    2710:	22 0f       	add	r18, r18
    2712:	33 1f       	adc	r19, r19
    2714:	22 0f       	add	r18, r18
    2716:	33 1f       	adc	r19, r19
    2718:	82 0f       	add	r24, r18
    271a:	93 1f       	adc	r25, r19
    271c:	86 0d       	add	r24, r6
    271e:	97 1d       	adc	r25, r7
    2720:	fc 01       	movw	r30, r24
    2722:	80 85       	ldd	r24, Z+8	; 0x08
    2724:	91 85       	ldd	r25, Z+9	; 0x09
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	09 f0       	breq	.+2      	; 0x272c <OS_CreateTask+0xd6>
    272a:	65 c0       	rjmp	.+202    	; 0x27f6 <OS_CreateTask+0x1a0>
			{
				gastr_OS_TaskCfg[u8_Counter].u8_OS_TaskPriority=Priority;
    272c:	cd 01       	movw	r24, r26
    272e:	88 0f       	add	r24, r24
    2730:	99 1f       	adc	r25, r25
    2732:	9d 01       	movw	r18, r26
    2734:	22 0f       	add	r18, r18
    2736:	33 1f       	adc	r19, r19
    2738:	22 0f       	add	r18, r18
    273a:	33 1f       	adc	r19, r19
    273c:	22 0f       	add	r18, r18
    273e:	33 1f       	adc	r19, r19
    2740:	82 0f       	add	r24, r18
    2742:	93 1f       	adc	r25, r19
    2744:	fc 01       	movw	r30, r24
    2746:	ef 5c       	subi	r30, 0xCF	; 207
    2748:	fe 4f       	sbci	r31, 0xFE	; 254
    274a:	70 83       	st	Z, r23
				gastr_OS_TaskCfg[u8_Counter].u8_OS_TaskDelay=Delay;
    274c:	61 83       	std	Z+1, r22	; 0x01
				gastr_OS_TaskCfg[u8_Counter].u32_OS_TaskPeriodicity=Periodicity;
    274e:	84 82       	std	Z+4, r8	; 0x04
    2750:	95 82       	std	Z+5, r9	; 0x05
    2752:	a6 82       	std	Z+6, r10	; 0x06
    2754:	b7 82       	std	Z+7, r11	; 0x07
				gastr_OS_TaskCfg[u8_Counter].ptr_OS_TaskCallback=TaskCallback;
    2756:	11 87       	std	Z+9, r17	; 0x09
    2758:	00 87       	std	Z+8, r16	; 0x08
				gastr_OS_TaskCfg[u8_Counter].u8_OS_TaskID=u8_Counter;
    275a:	42 83       	std	Z+2, r20	; 0x02
				
				if(NULL_PTR!=TaskHandler)
    275c:	c1 14       	cp	r12, r1
    275e:	d1 04       	cpc	r13, r1
    2760:	81 f0       	breq	.+32     	; 0x2782 <OS_CreateTask+0x12c>
				{
					*TaskHandler=gastr_OS_TaskCfg+u8_Counter;				
    2762:	84 2f       	mov	r24, r20
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	9c 01       	movw	r18, r24
    276c:	22 0f       	add	r18, r18
    276e:	33 1f       	adc	r19, r19
    2770:	22 0f       	add	r18, r18
    2772:	33 1f       	adc	r19, r19
    2774:	82 0f       	add	r24, r18
    2776:	93 1f       	adc	r25, r19
    2778:	8f 5c       	subi	r24, 0xCF	; 207
    277a:	9e 4f       	sbci	r25, 0xFE	; 254
    277c:	f6 01       	movw	r30, r12
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	80 83       	st	Z, r24
				else
				{
					/*Do Nothing*/
				}
				
				if(ZERO==Delay)
    2782:	66 23       	and	r22, r22
    2784:	b1 f4       	brne	.+44     	; 0x27b2 <OS_CreateTask+0x15c>
				{
					gastr_OS_TaskCfg[u8_Counter].u8_OS_TaskState=OS_TASKREADY;
    2786:	cd 01       	movw	r24, r26
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	aa 0f       	add	r26, r26
    278e:	bb 1f       	adc	r27, r27
    2790:	aa 0f       	add	r26, r26
    2792:	bb 1f       	adc	r27, r27
    2794:	aa 0f       	add	r26, r26
    2796:	bb 1f       	adc	r27, r27
    2798:	a8 0f       	add	r26, r24
    279a:	b9 1f       	adc	r27, r25
    279c:	af 5c       	subi	r26, 0xCF	; 207
    279e:	be 4f       	sbci	r27, 0xFE	; 254
    27a0:	13 96       	adiw	r26, 0x03	; 3
    27a2:	1c 92       	st	X, r1
    27a4:	13 97       	sbiw	r26, 0x03	; 3
					gu8_OS_ReadyTasksCounter++;
    27a6:	80 91 2a 01 	lds	r24, 0x012A
    27aa:	8f 5f       	subi	r24, 0xFF	; 255
    27ac:	80 93 2a 01 	sts	0x012A, r24
    27b0:	11 c0       	rjmp	.+34     	; 0x27d4 <OS_CreateTask+0x17e>
				}
				else
				{
					gastr_OS_TaskCfg[u8_Counter].u8_OS_TaskState=OS_TASKWAIT;
    27b2:	cd 01       	movw	r24, r26
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	aa 0f       	add	r26, r26
    27ba:	bb 1f       	adc	r27, r27
    27bc:	aa 0f       	add	r26, r26
    27be:	bb 1f       	adc	r27, r27
    27c0:	aa 0f       	add	r26, r26
    27c2:	bb 1f       	adc	r27, r27
    27c4:	a8 0f       	add	r26, r24
    27c6:	b9 1f       	adc	r27, r25
    27c8:	af 5c       	subi	r26, 0xCF	; 207
    27ca:	be 4f       	sbci	r27, 0xFE	; 254
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	13 96       	adiw	r26, 0x03	; 3
    27d0:	8c 93       	st	X, r24
    27d2:	13 97       	sbiw	r26, 0x03	; 3
				}
				gau8_OS_TaskCounter[Priority]++;
    27d4:	cc 0f       	add	r28, r28
    27d6:	dd 1f       	adc	r29, r29
    27d8:	c5 5d       	subi	r28, 0xD5	; 213
    27da:	de 4f       	sbci	r29, 0xFE	; 254
    27dc:	88 81       	ld	r24, Y
    27de:	99 81       	ldd	r25, Y+1	; 0x01
    27e0:	01 96       	adiw	r24, 0x01	; 1
    27e2:	99 83       	std	Y+1, r25	; 0x01
    27e4:	88 83       	st	Y, r24
								uint32_t Periodicity,
								Ptr_VoidFuncVoid_t TaskCallback,
								TaskHandler_t* TaskHandler
							)
{
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
    27e6:	80 e0       	ldi	r24, 0x00	; 0
				else
				{
					gastr_OS_TaskCfg[u8_Counter].u8_OS_TaskState=OS_TASKWAIT;
				}
				gau8_OS_TaskCounter[Priority]++;
				break;
    27e8:	16 c0       	rjmp	.+44     	; 0x2816 <OS_CreateTask+0x1c0>
			u8_TempArrayIndex+=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[u8_Counter];
		}
		
		for(u8_Counter=u8_TempArrayIndex;(u8_Counter<(u8_TempArrayIndex+u8_CurrentPrioritySize));u8_Counter++)
		{
			if(NULL_PTR==gastr_OS_TaskCfg[u8_Counter].ptr_OS_TaskCallback)
    27ea:	0f 2e       	mov	r0, r31
    27ec:	f1 e3       	ldi	r31, 0x31	; 49
    27ee:	6f 2e       	mov	r6, r31
    27f0:	f1 e0       	ldi	r31, 0x01	; 1
    27f2:	7f 2e       	mov	r7, r31
    27f4:	f0 2d       	mov	r31, r0
		for(u8_Counter=ZERO;u8_Counter<Priority;u8_Counter++)
		{
			u8_TempArrayIndex+=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[u8_Counter];
		}
		
		for(u8_Counter=u8_TempArrayIndex;(u8_Counter<(u8_TempArrayIndex+u8_CurrentPrioritySize));u8_Counter++)
    27f6:	4f 5f       	subi	r20, 0xFF	; 255
    27f8:	a4 2f       	mov	r26, r20
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	ae 15       	cp	r26, r14
    27fe:	bf 05       	cpc	r27, r15
    2800:	0c f4       	brge	.+2      	; 0x2804 <OS_CreateTask+0x1ae>
    2802:	80 cf       	rjmp	.-256    	; 0x2704 <OS_CreateTask+0xae>
								uint32_t Periodicity,
								Ptr_VoidFuncVoid_t TaskCallback,
								TaskHandler_t* TaskHandler
							)
{
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	07 c0       	rjmp	.+14     	; 0x2816 <OS_CreateTask+0x1c0>
	uint8_t u8_TempArrayIndex=ZERO;
	uint8_t u8_Counter;
	uint8_t u8_CurrentPrioritySize=gstr_OS_SchedulerCfg.au8_OS_PrioritiesSizes[Priority];
	if(NULL_PTR==TaskCallback)
	{
		u8_ErrorState=ERROR_NULL_PTR;
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	05 c0       	rjmp	.+10     	; 0x2816 <OS_CreateTask+0x1c0>
	}
	else if(Priority>=OS_PRIORITIES_NUMBER)
	{
		u8_ErrorState=OS_UNSUPPORTED_PRIORITY;
    280c:	8e ef       	ldi	r24, 0xFE	; 254
    280e:	03 c0       	rjmp	.+6      	; 0x2816 <OS_CreateTask+0x1c0>
	}
	else if(gau8_OS_TaskCounter[Priority]>=u8_CurrentPrioritySize)
	{
		u8_ErrorState=OS_MEMORY_FULL;	
    2810:	8f ef       	ldi	r24, 0xFF	; 255
    2812:	01 c0       	rjmp	.+2      	; 0x2816 <OS_CreateTask+0x1c0>
								uint32_t Periodicity,
								Ptr_VoidFuncVoid_t TaskCallback,
								TaskHandler_t* TaskHandler
							)
{
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
    2814:	80 e0       	ldi	r24, 0x00	; 0
			}
			
		}			
	}
	return u8_ErrorState;
}
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	1f 91       	pop	r17
    281c:	0f 91       	pop	r16
    281e:	ff 90       	pop	r15
    2820:	ef 90       	pop	r14
    2822:	df 90       	pop	r13
    2824:	cf 90       	pop	r12
    2826:	bf 90       	pop	r11
    2828:	af 90       	pop	r10
    282a:	9f 90       	pop	r9
    282c:	8f 90       	pop	r8
    282e:	7f 90       	pop	r7
    2830:	6f 90       	pop	r6
    2832:	08 95       	ret

00002834 <OS_DeleteTask>:

extern ERROR_STATE_t OS_DeleteTask(TaskHandler_t TaskHandler)
{
    2834:	fc 01       	movw	r30, r24
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR!=TaskHandler)
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	79 f0       	breq	.+30     	; 0x2858 <OS_DeleteTask+0x24>
	{
		TaskHandler->ptr_OS_TaskCallback=NULL_PTR;
    283a:	11 86       	std	Z+9, r1	; 0x09
    283c:	10 86       	std	Z+8, r1	; 0x08
		TaskHandler->u8_OS_TaskState=OS_TASKDELETED;
    283e:	84 e0       	ldi	r24, 0x04	; 4
    2840:	83 83       	std	Z+3, r24	; 0x03
		gau8_OS_TaskCounter[TaskHandler->u8_OS_TaskPriority]--;
    2842:	e0 81       	ld	r30, Z
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	ee 0f       	add	r30, r30
    2848:	ff 1f       	adc	r31, r31
    284a:	e5 5d       	subi	r30, 0xD5	; 213
    284c:	fe 4f       	sbci	r31, 0xFE	; 254
    284e:	80 81       	ld	r24, Z
    2850:	91 81       	ldd	r25, Z+1	; 0x01
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	80 83       	st	Z, r24
	else
	{
		
	}
	return u8_ErrorState;
}
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	08 95       	ret

0000285c <OS_SuspandTask>:

extern ERROR_STATE_t OS_SuspandTask(TaskHandler_t TaskHandler)
{
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR!=TaskHandler)
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	19 f0       	breq	.+6      	; 0x2866 <OS_SuspandTask+0xa>
	{
		TaskHandler->u8_OS_TaskState=OS_TASKSUSPEND;
    2860:	23 e0       	ldi	r18, 0x03	; 3
    2862:	fc 01       	movw	r30, r24
    2864:	23 83       	std	Z+3, r18	; 0x03
	else
	{
		
	}
	return u8_ErrorState;	
}
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	08 95       	ret

0000286a <OS_UnsuspandTask>:

extern ERROR_STATE_t OS_UnsuspandTask(TaskHandler_t TaskHandler)
{
    286a:	fc 01       	movw	r30, r24
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR!=TaskHandler)
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	49 f0       	breq	.+18     	; 0x2882 <OS_UnsuspandTask+0x18>
	{
		TaskHandler->u8_OS_TaskState=OS_TASKREADY;
    2870:	13 82       	std	Z+3, r1	; 0x03
		TaskHandler->u8_OS_TaskDelay=TaskHandler->u32_OS_TaskPeriodicity-1;
    2872:	84 81       	ldd	r24, Z+4	; 0x04
    2874:	81 50       	subi	r24, 0x01	; 1
    2876:	81 83       	std	Z+1, r24	; 0x01
		gu8_OS_ReadyTasksCounter++;
    2878:	80 91 2a 01 	lds	r24, 0x012A
    287c:	8f 5f       	subi	r24, 0xFF	; 255
    287e:	80 93 2a 01 	sts	0x012A, r24
	else
	{
		
	}
	return u8_ErrorState;	
}
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	08 95       	ret

00002886 <OS_Get>:

extern ERROR_STATE_t OS_Get(TaskHandler_t* Task)
{
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Task)
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	39 f0       	breq	.+14     	; 0x2898 <OS_Get+0x12>
	{
		u8_ErrorState=ERROR_NULL_PTR;
	}
	else
	{
		*Task=gastr_OS_TaskCfg;
    288a:	21 e3       	ldi	r18, 0x31	; 49
    288c:	31 e0       	ldi	r19, 0x01	; 1
    288e:	fc 01       	movw	r30, r24
    2890:	31 83       	std	Z+1, r19	; 0x01
    2892:	20 83       	st	Z, r18
	return u8_ErrorState;	
}

extern ERROR_STATE_t OS_Get(TaskHandler_t* Task)
{
	ERROR_STATE_t u8_ErrorState = ERROR_OK;
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	08 95       	ret
	if(NULL_PTR==Task)
	{
		u8_ErrorState=ERROR_NULL_PTR;
    2898:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		*Task=gastr_OS_TaskCfg;
	}
	return u8_ErrorState;	
    289a:	08 95       	ret

0000289c <__subsf3>:
    289c:	50 58       	subi	r21, 0x80	; 128

0000289e <__addsf3>:
    289e:	bb 27       	eor	r27, r27
    28a0:	aa 27       	eor	r26, r26
    28a2:	0e d0       	rcall	.+28     	; 0x28c0 <__addsf3x>
    28a4:	ae c1       	rjmp	.+860    	; 0x2c02 <__fp_round>
    28a6:	9f d1       	rcall	.+830    	; 0x2be6 <__fp_pscA>
    28a8:	30 f0       	brcs	.+12     	; 0x28b6 <__addsf3+0x18>
    28aa:	a4 d1       	rcall	.+840    	; 0x2bf4 <__fp_pscB>
    28ac:	20 f0       	brcs	.+8      	; 0x28b6 <__addsf3+0x18>
    28ae:	31 f4       	brne	.+12     	; 0x28bc <__addsf3+0x1e>
    28b0:	9f 3f       	cpi	r25, 0xFF	; 255
    28b2:	11 f4       	brne	.+4      	; 0x28b8 <__addsf3+0x1a>
    28b4:	1e f4       	brtc	.+6      	; 0x28bc <__addsf3+0x1e>
    28b6:	94 c1       	rjmp	.+808    	; 0x2be0 <__fp_nan>
    28b8:	0e f4       	brtc	.+2      	; 0x28bc <__addsf3+0x1e>
    28ba:	e0 95       	com	r30
    28bc:	e7 fb       	bst	r30, 7
    28be:	8a c1       	rjmp	.+788    	; 0x2bd4 <__fp_inf>

000028c0 <__addsf3x>:
    28c0:	e9 2f       	mov	r30, r25
    28c2:	b0 d1       	rcall	.+864    	; 0x2c24 <__fp_split3>
    28c4:	80 f3       	brcs	.-32     	; 0x28a6 <__addsf3+0x8>
    28c6:	ba 17       	cp	r27, r26
    28c8:	62 07       	cpc	r22, r18
    28ca:	73 07       	cpc	r23, r19
    28cc:	84 07       	cpc	r24, r20
    28ce:	95 07       	cpc	r25, r21
    28d0:	18 f0       	brcs	.+6      	; 0x28d8 <__addsf3x+0x18>
    28d2:	71 f4       	brne	.+28     	; 0x28f0 <__addsf3x+0x30>
    28d4:	9e f5       	brtc	.+102    	; 0x293c <__addsf3x+0x7c>
    28d6:	c8 c1       	rjmp	.+912    	; 0x2c68 <__fp_zero>
    28d8:	0e f4       	brtc	.+2      	; 0x28dc <__addsf3x+0x1c>
    28da:	e0 95       	com	r30
    28dc:	0b 2e       	mov	r0, r27
    28de:	ba 2f       	mov	r27, r26
    28e0:	a0 2d       	mov	r26, r0
    28e2:	0b 01       	movw	r0, r22
    28e4:	b9 01       	movw	r22, r18
    28e6:	90 01       	movw	r18, r0
    28e8:	0c 01       	movw	r0, r24
    28ea:	ca 01       	movw	r24, r20
    28ec:	a0 01       	movw	r20, r0
    28ee:	11 24       	eor	r1, r1
    28f0:	ff 27       	eor	r31, r31
    28f2:	59 1b       	sub	r21, r25
    28f4:	99 f0       	breq	.+38     	; 0x291c <__addsf3x+0x5c>
    28f6:	59 3f       	cpi	r21, 0xF9	; 249
    28f8:	50 f4       	brcc	.+20     	; 0x290e <__addsf3x+0x4e>
    28fa:	50 3e       	cpi	r21, 0xE0	; 224
    28fc:	68 f1       	brcs	.+90     	; 0x2958 <__addsf3x+0x98>
    28fe:	1a 16       	cp	r1, r26
    2900:	f0 40       	sbci	r31, 0x00	; 0
    2902:	a2 2f       	mov	r26, r18
    2904:	23 2f       	mov	r18, r19
    2906:	34 2f       	mov	r19, r20
    2908:	44 27       	eor	r20, r20
    290a:	58 5f       	subi	r21, 0xF8	; 248
    290c:	f3 cf       	rjmp	.-26     	; 0x28f4 <__addsf3x+0x34>
    290e:	46 95       	lsr	r20
    2910:	37 95       	ror	r19
    2912:	27 95       	ror	r18
    2914:	a7 95       	ror	r26
    2916:	f0 40       	sbci	r31, 0x00	; 0
    2918:	53 95       	inc	r21
    291a:	c9 f7       	brne	.-14     	; 0x290e <__addsf3x+0x4e>
    291c:	7e f4       	brtc	.+30     	; 0x293c <__addsf3x+0x7c>
    291e:	1f 16       	cp	r1, r31
    2920:	ba 0b       	sbc	r27, r26
    2922:	62 0b       	sbc	r22, r18
    2924:	73 0b       	sbc	r23, r19
    2926:	84 0b       	sbc	r24, r20
    2928:	ba f0       	brmi	.+46     	; 0x2958 <__addsf3x+0x98>
    292a:	91 50       	subi	r25, 0x01	; 1
    292c:	a1 f0       	breq	.+40     	; 0x2956 <__addsf3x+0x96>
    292e:	ff 0f       	add	r31, r31
    2930:	bb 1f       	adc	r27, r27
    2932:	66 1f       	adc	r22, r22
    2934:	77 1f       	adc	r23, r23
    2936:	88 1f       	adc	r24, r24
    2938:	c2 f7       	brpl	.-16     	; 0x292a <__addsf3x+0x6a>
    293a:	0e c0       	rjmp	.+28     	; 0x2958 <__addsf3x+0x98>
    293c:	ba 0f       	add	r27, r26
    293e:	62 1f       	adc	r22, r18
    2940:	73 1f       	adc	r23, r19
    2942:	84 1f       	adc	r24, r20
    2944:	48 f4       	brcc	.+18     	; 0x2958 <__addsf3x+0x98>
    2946:	87 95       	ror	r24
    2948:	77 95       	ror	r23
    294a:	67 95       	ror	r22
    294c:	b7 95       	ror	r27
    294e:	f7 95       	ror	r31
    2950:	9e 3f       	cpi	r25, 0xFE	; 254
    2952:	08 f0       	brcs	.+2      	; 0x2956 <__addsf3x+0x96>
    2954:	b3 cf       	rjmp	.-154    	; 0x28bc <__addsf3+0x1e>
    2956:	93 95       	inc	r25
    2958:	88 0f       	add	r24, r24
    295a:	08 f0       	brcs	.+2      	; 0x295e <__addsf3x+0x9e>
    295c:	99 27       	eor	r25, r25
    295e:	ee 0f       	add	r30, r30
    2960:	97 95       	ror	r25
    2962:	87 95       	ror	r24
    2964:	08 95       	ret

00002966 <__cmpsf2>:
    2966:	12 d1       	rcall	.+548    	; 0x2b8c <__fp_cmp>
    2968:	08 f4       	brcc	.+2      	; 0x296c <__cmpsf2+0x6>
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	08 95       	ret

0000296e <__divsf3>:
    296e:	0c d0       	rcall	.+24     	; 0x2988 <__divsf3x>
    2970:	48 c1       	rjmp	.+656    	; 0x2c02 <__fp_round>
    2972:	40 d1       	rcall	.+640    	; 0x2bf4 <__fp_pscB>
    2974:	40 f0       	brcs	.+16     	; 0x2986 <__divsf3+0x18>
    2976:	37 d1       	rcall	.+622    	; 0x2be6 <__fp_pscA>
    2978:	30 f0       	brcs	.+12     	; 0x2986 <__divsf3+0x18>
    297a:	21 f4       	brne	.+8      	; 0x2984 <__divsf3+0x16>
    297c:	5f 3f       	cpi	r21, 0xFF	; 255
    297e:	19 f0       	breq	.+6      	; 0x2986 <__divsf3+0x18>
    2980:	29 c1       	rjmp	.+594    	; 0x2bd4 <__fp_inf>
    2982:	51 11       	cpse	r21, r1
    2984:	72 c1       	rjmp	.+740    	; 0x2c6a <__fp_szero>
    2986:	2c c1       	rjmp	.+600    	; 0x2be0 <__fp_nan>

00002988 <__divsf3x>:
    2988:	4d d1       	rcall	.+666    	; 0x2c24 <__fp_split3>
    298a:	98 f3       	brcs	.-26     	; 0x2972 <__divsf3+0x4>

0000298c <__divsf3_pse>:
    298c:	99 23       	and	r25, r25
    298e:	c9 f3       	breq	.-14     	; 0x2982 <__divsf3+0x14>
    2990:	55 23       	and	r21, r21
    2992:	b1 f3       	breq	.-20     	; 0x2980 <__divsf3+0x12>
    2994:	95 1b       	sub	r25, r21
    2996:	55 0b       	sbc	r21, r21
    2998:	bb 27       	eor	r27, r27
    299a:	aa 27       	eor	r26, r26
    299c:	62 17       	cp	r22, r18
    299e:	73 07       	cpc	r23, r19
    29a0:	84 07       	cpc	r24, r20
    29a2:	38 f0       	brcs	.+14     	; 0x29b2 <__divsf3_pse+0x26>
    29a4:	9f 5f       	subi	r25, 0xFF	; 255
    29a6:	5f 4f       	sbci	r21, 0xFF	; 255
    29a8:	22 0f       	add	r18, r18
    29aa:	33 1f       	adc	r19, r19
    29ac:	44 1f       	adc	r20, r20
    29ae:	aa 1f       	adc	r26, r26
    29b0:	a9 f3       	breq	.-22     	; 0x299c <__divsf3_pse+0x10>
    29b2:	33 d0       	rcall	.+102    	; 0x2a1a <__divsf3_pse+0x8e>
    29b4:	0e 2e       	mov	r0, r30
    29b6:	3a f0       	brmi	.+14     	; 0x29c6 <__divsf3_pse+0x3a>
    29b8:	e0 e8       	ldi	r30, 0x80	; 128
    29ba:	30 d0       	rcall	.+96     	; 0x2a1c <__divsf3_pse+0x90>
    29bc:	91 50       	subi	r25, 0x01	; 1
    29be:	50 40       	sbci	r21, 0x00	; 0
    29c0:	e6 95       	lsr	r30
    29c2:	00 1c       	adc	r0, r0
    29c4:	ca f7       	brpl	.-14     	; 0x29b8 <__divsf3_pse+0x2c>
    29c6:	29 d0       	rcall	.+82     	; 0x2a1a <__divsf3_pse+0x8e>
    29c8:	fe 2f       	mov	r31, r30
    29ca:	27 d0       	rcall	.+78     	; 0x2a1a <__divsf3_pse+0x8e>
    29cc:	66 0f       	add	r22, r22
    29ce:	77 1f       	adc	r23, r23
    29d0:	88 1f       	adc	r24, r24
    29d2:	bb 1f       	adc	r27, r27
    29d4:	26 17       	cp	r18, r22
    29d6:	37 07       	cpc	r19, r23
    29d8:	48 07       	cpc	r20, r24
    29da:	ab 07       	cpc	r26, r27
    29dc:	b0 e8       	ldi	r27, 0x80	; 128
    29de:	09 f0       	breq	.+2      	; 0x29e2 <__divsf3_pse+0x56>
    29e0:	bb 0b       	sbc	r27, r27
    29e2:	80 2d       	mov	r24, r0
    29e4:	bf 01       	movw	r22, r30
    29e6:	ff 27       	eor	r31, r31
    29e8:	93 58       	subi	r25, 0x83	; 131
    29ea:	5f 4f       	sbci	r21, 0xFF	; 255
    29ec:	2a f0       	brmi	.+10     	; 0x29f8 <__divsf3_pse+0x6c>
    29ee:	9e 3f       	cpi	r25, 0xFE	; 254
    29f0:	51 05       	cpc	r21, r1
    29f2:	68 f0       	brcs	.+26     	; 0x2a0e <__divsf3_pse+0x82>
    29f4:	ef c0       	rjmp	.+478    	; 0x2bd4 <__fp_inf>
    29f6:	39 c1       	rjmp	.+626    	; 0x2c6a <__fp_szero>
    29f8:	5f 3f       	cpi	r21, 0xFF	; 255
    29fa:	ec f3       	brlt	.-6      	; 0x29f6 <__divsf3_pse+0x6a>
    29fc:	98 3e       	cpi	r25, 0xE8	; 232
    29fe:	dc f3       	brlt	.-10     	; 0x29f6 <__divsf3_pse+0x6a>
    2a00:	86 95       	lsr	r24
    2a02:	77 95       	ror	r23
    2a04:	67 95       	ror	r22
    2a06:	b7 95       	ror	r27
    2a08:	f7 95       	ror	r31
    2a0a:	9f 5f       	subi	r25, 0xFF	; 255
    2a0c:	c9 f7       	brne	.-14     	; 0x2a00 <__divsf3_pse+0x74>
    2a0e:	88 0f       	add	r24, r24
    2a10:	91 1d       	adc	r25, r1
    2a12:	96 95       	lsr	r25
    2a14:	87 95       	ror	r24
    2a16:	97 f9       	bld	r25, 7
    2a18:	08 95       	ret
    2a1a:	e1 e0       	ldi	r30, 0x01	; 1
    2a1c:	66 0f       	add	r22, r22
    2a1e:	77 1f       	adc	r23, r23
    2a20:	88 1f       	adc	r24, r24
    2a22:	bb 1f       	adc	r27, r27
    2a24:	62 17       	cp	r22, r18
    2a26:	73 07       	cpc	r23, r19
    2a28:	84 07       	cpc	r24, r20
    2a2a:	ba 07       	cpc	r27, r26
    2a2c:	20 f0       	brcs	.+8      	; 0x2a36 <__divsf3_pse+0xaa>
    2a2e:	62 1b       	sub	r22, r18
    2a30:	73 0b       	sbc	r23, r19
    2a32:	84 0b       	sbc	r24, r20
    2a34:	ba 0b       	sbc	r27, r26
    2a36:	ee 1f       	adc	r30, r30
    2a38:	88 f7       	brcc	.-30     	; 0x2a1c <__divsf3_pse+0x90>
    2a3a:	e0 95       	com	r30
    2a3c:	08 95       	ret

00002a3e <__fixunssfsi>:
    2a3e:	fa d0       	rcall	.+500    	; 0x2c34 <__fp_splitA>
    2a40:	88 f0       	brcs	.+34     	; 0x2a64 <__fixunssfsi+0x26>
    2a42:	9f 57       	subi	r25, 0x7F	; 127
    2a44:	90 f0       	brcs	.+36     	; 0x2a6a <__fixunssfsi+0x2c>
    2a46:	b9 2f       	mov	r27, r25
    2a48:	99 27       	eor	r25, r25
    2a4a:	b7 51       	subi	r27, 0x17	; 23
    2a4c:	a0 f0       	brcs	.+40     	; 0x2a76 <__fixunssfsi+0x38>
    2a4e:	d1 f0       	breq	.+52     	; 0x2a84 <__fixunssfsi+0x46>
    2a50:	66 0f       	add	r22, r22
    2a52:	77 1f       	adc	r23, r23
    2a54:	88 1f       	adc	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	1a f0       	brmi	.+6      	; 0x2a60 <__fixunssfsi+0x22>
    2a5a:	ba 95       	dec	r27
    2a5c:	c9 f7       	brne	.-14     	; 0x2a50 <__fixunssfsi+0x12>
    2a5e:	12 c0       	rjmp	.+36     	; 0x2a84 <__fixunssfsi+0x46>
    2a60:	b1 30       	cpi	r27, 0x01	; 1
    2a62:	81 f0       	breq	.+32     	; 0x2a84 <__fixunssfsi+0x46>
    2a64:	01 d1       	rcall	.+514    	; 0x2c68 <__fp_zero>
    2a66:	b1 e0       	ldi	r27, 0x01	; 1
    2a68:	08 95       	ret
    2a6a:	fe c0       	rjmp	.+508    	; 0x2c68 <__fp_zero>
    2a6c:	67 2f       	mov	r22, r23
    2a6e:	78 2f       	mov	r23, r24
    2a70:	88 27       	eor	r24, r24
    2a72:	b8 5f       	subi	r27, 0xF8	; 248
    2a74:	39 f0       	breq	.+14     	; 0x2a84 <__fixunssfsi+0x46>
    2a76:	b9 3f       	cpi	r27, 0xF9	; 249
    2a78:	cc f3       	brlt	.-14     	; 0x2a6c <__fixunssfsi+0x2e>
    2a7a:	86 95       	lsr	r24
    2a7c:	77 95       	ror	r23
    2a7e:	67 95       	ror	r22
    2a80:	b3 95       	inc	r27
    2a82:	d9 f7       	brne	.-10     	; 0x2a7a <__fixunssfsi+0x3c>
    2a84:	3e f4       	brtc	.+14     	; 0x2a94 <__fixunssfsi+0x56>
    2a86:	90 95       	com	r25
    2a88:	80 95       	com	r24
    2a8a:	70 95       	com	r23
    2a8c:	61 95       	neg	r22
    2a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a90:	8f 4f       	sbci	r24, 0xFF	; 255
    2a92:	9f 4f       	sbci	r25, 0xFF	; 255
    2a94:	08 95       	ret

00002a96 <__floatunsisf>:
    2a96:	e8 94       	clt
    2a98:	09 c0       	rjmp	.+18     	; 0x2aac <__floatsisf+0x12>

00002a9a <__floatsisf>:
    2a9a:	97 fb       	bst	r25, 7
    2a9c:	3e f4       	brtc	.+14     	; 0x2aac <__floatsisf+0x12>
    2a9e:	90 95       	com	r25
    2aa0:	80 95       	com	r24
    2aa2:	70 95       	com	r23
    2aa4:	61 95       	neg	r22
    2aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    2aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2aac:	99 23       	and	r25, r25
    2aae:	a9 f0       	breq	.+42     	; 0x2ada <__floatsisf+0x40>
    2ab0:	f9 2f       	mov	r31, r25
    2ab2:	96 e9       	ldi	r25, 0x96	; 150
    2ab4:	bb 27       	eor	r27, r27
    2ab6:	93 95       	inc	r25
    2ab8:	f6 95       	lsr	r31
    2aba:	87 95       	ror	r24
    2abc:	77 95       	ror	r23
    2abe:	67 95       	ror	r22
    2ac0:	b7 95       	ror	r27
    2ac2:	f1 11       	cpse	r31, r1
    2ac4:	f8 cf       	rjmp	.-16     	; 0x2ab6 <__floatsisf+0x1c>
    2ac6:	fa f4       	brpl	.+62     	; 0x2b06 <__floatsisf+0x6c>
    2ac8:	bb 0f       	add	r27, r27
    2aca:	11 f4       	brne	.+4      	; 0x2ad0 <__floatsisf+0x36>
    2acc:	60 ff       	sbrs	r22, 0
    2ace:	1b c0       	rjmp	.+54     	; 0x2b06 <__floatsisf+0x6c>
    2ad0:	6f 5f       	subi	r22, 0xFF	; 255
    2ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad8:	16 c0       	rjmp	.+44     	; 0x2b06 <__floatsisf+0x6c>
    2ada:	88 23       	and	r24, r24
    2adc:	11 f0       	breq	.+4      	; 0x2ae2 <__floatsisf+0x48>
    2ade:	96 e9       	ldi	r25, 0x96	; 150
    2ae0:	11 c0       	rjmp	.+34     	; 0x2b04 <__floatsisf+0x6a>
    2ae2:	77 23       	and	r23, r23
    2ae4:	21 f0       	breq	.+8      	; 0x2aee <__floatsisf+0x54>
    2ae6:	9e e8       	ldi	r25, 0x8E	; 142
    2ae8:	87 2f       	mov	r24, r23
    2aea:	76 2f       	mov	r23, r22
    2aec:	05 c0       	rjmp	.+10     	; 0x2af8 <__floatsisf+0x5e>
    2aee:	66 23       	and	r22, r22
    2af0:	71 f0       	breq	.+28     	; 0x2b0e <__floatsisf+0x74>
    2af2:	96 e8       	ldi	r25, 0x86	; 134
    2af4:	86 2f       	mov	r24, r22
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	2a f0       	brmi	.+10     	; 0x2b06 <__floatsisf+0x6c>
    2afc:	9a 95       	dec	r25
    2afe:	66 0f       	add	r22, r22
    2b00:	77 1f       	adc	r23, r23
    2b02:	88 1f       	adc	r24, r24
    2b04:	da f7       	brpl	.-10     	; 0x2afc <__floatsisf+0x62>
    2b06:	88 0f       	add	r24, r24
    2b08:	96 95       	lsr	r25
    2b0a:	87 95       	ror	r24
    2b0c:	97 f9       	bld	r25, 7
    2b0e:	08 95       	ret

00002b10 <__floatundisf>:
    2b10:	e8 94       	clt

00002b12 <__fp_di2sf>:
    2b12:	f9 2f       	mov	r31, r25
    2b14:	96 eb       	ldi	r25, 0xB6	; 182
    2b16:	ff 23       	and	r31, r31
    2b18:	81 f0       	breq	.+32     	; 0x2b3a <__fp_di2sf+0x28>
    2b1a:	12 16       	cp	r1, r18
    2b1c:	13 06       	cpc	r1, r19
    2b1e:	14 06       	cpc	r1, r20
    2b20:	44 0b       	sbc	r20, r20
    2b22:	93 95       	inc	r25
    2b24:	f6 95       	lsr	r31
    2b26:	87 95       	ror	r24
    2b28:	77 95       	ror	r23
    2b2a:	67 95       	ror	r22
    2b2c:	57 95       	ror	r21
    2b2e:	40 40       	sbci	r20, 0x00	; 0
    2b30:	ff 23       	and	r31, r31
    2b32:	b9 f7       	brne	.-18     	; 0x2b22 <__fp_di2sf+0x10>
    2b34:	1b c0       	rjmp	.+54     	; 0x2b6c <__fp_di2sf+0x5a>
    2b36:	99 27       	eor	r25, r25
    2b38:	08 95       	ret
    2b3a:	88 23       	and	r24, r24
    2b3c:	51 f4       	brne	.+20     	; 0x2b52 <__fp_di2sf+0x40>
    2b3e:	98 50       	subi	r25, 0x08	; 8
    2b40:	d2 f7       	brpl	.-12     	; 0x2b36 <__fp_di2sf+0x24>
    2b42:	87 2b       	or	r24, r23
    2b44:	76 2f       	mov	r23, r22
    2b46:	65 2f       	mov	r22, r21
    2b48:	54 2f       	mov	r21, r20
    2b4a:	43 2f       	mov	r20, r19
    2b4c:	32 2f       	mov	r19, r18
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	b1 f3       	breq	.-20     	; 0x2b3e <__fp_di2sf+0x2c>
    2b52:	12 16       	cp	r1, r18
    2b54:	13 06       	cpc	r1, r19
    2b56:	14 06       	cpc	r1, r20
    2b58:	44 0b       	sbc	r20, r20
    2b5a:	88 23       	and	r24, r24
    2b5c:	3a f0       	brmi	.+14     	; 0x2b6c <__fp_di2sf+0x5a>
    2b5e:	9a 95       	dec	r25
    2b60:	44 0f       	add	r20, r20
    2b62:	55 1f       	adc	r21, r21
    2b64:	66 1f       	adc	r22, r22
    2b66:	77 1f       	adc	r23, r23
    2b68:	88 1f       	adc	r24, r24
    2b6a:	ca f7       	brpl	.-14     	; 0x2b5e <__fp_di2sf+0x4c>
    2b6c:	55 23       	and	r21, r21
    2b6e:	4a f4       	brpl	.+18     	; 0x2b82 <__fp_di2sf+0x70>
    2b70:	44 0f       	add	r20, r20
    2b72:	55 1f       	adc	r21, r21
    2b74:	11 f4       	brne	.+4      	; 0x2b7a <__fp_di2sf+0x68>
    2b76:	60 ff       	sbrs	r22, 0
    2b78:	04 c0       	rjmp	.+8      	; 0x2b82 <__fp_di2sf+0x70>
    2b7a:	6f 5f       	subi	r22, 0xFF	; 255
    2b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b80:	9f 4f       	sbci	r25, 0xFF	; 255
    2b82:	88 0f       	add	r24, r24
    2b84:	96 95       	lsr	r25
    2b86:	87 95       	ror	r24
    2b88:	97 f9       	bld	r25, 7
    2b8a:	08 95       	ret

00002b8c <__fp_cmp>:
    2b8c:	99 0f       	add	r25, r25
    2b8e:	00 08       	sbc	r0, r0
    2b90:	55 0f       	add	r21, r21
    2b92:	aa 0b       	sbc	r26, r26
    2b94:	e0 e8       	ldi	r30, 0x80	; 128
    2b96:	fe ef       	ldi	r31, 0xFE	; 254
    2b98:	16 16       	cp	r1, r22
    2b9a:	17 06       	cpc	r1, r23
    2b9c:	e8 07       	cpc	r30, r24
    2b9e:	f9 07       	cpc	r31, r25
    2ba0:	c0 f0       	brcs	.+48     	; 0x2bd2 <__fp_cmp+0x46>
    2ba2:	12 16       	cp	r1, r18
    2ba4:	13 06       	cpc	r1, r19
    2ba6:	e4 07       	cpc	r30, r20
    2ba8:	f5 07       	cpc	r31, r21
    2baa:	98 f0       	brcs	.+38     	; 0x2bd2 <__fp_cmp+0x46>
    2bac:	62 1b       	sub	r22, r18
    2bae:	73 0b       	sbc	r23, r19
    2bb0:	84 0b       	sbc	r24, r20
    2bb2:	95 0b       	sbc	r25, r21
    2bb4:	39 f4       	brne	.+14     	; 0x2bc4 <__fp_cmp+0x38>
    2bb6:	0a 26       	eor	r0, r26
    2bb8:	61 f0       	breq	.+24     	; 0x2bd2 <__fp_cmp+0x46>
    2bba:	23 2b       	or	r18, r19
    2bbc:	24 2b       	or	r18, r20
    2bbe:	25 2b       	or	r18, r21
    2bc0:	21 f4       	brne	.+8      	; 0x2bca <__fp_cmp+0x3e>
    2bc2:	08 95       	ret
    2bc4:	0a 26       	eor	r0, r26
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <__fp_cmp+0x3e>
    2bc8:	a1 40       	sbci	r26, 0x01	; 1
    2bca:	a6 95       	lsr	r26
    2bcc:	8f ef       	ldi	r24, 0xFF	; 255
    2bce:	81 1d       	adc	r24, r1
    2bd0:	81 1d       	adc	r24, r1
    2bd2:	08 95       	ret

00002bd4 <__fp_inf>:
    2bd4:	97 f9       	bld	r25, 7
    2bd6:	9f 67       	ori	r25, 0x7F	; 127
    2bd8:	80 e8       	ldi	r24, 0x80	; 128
    2bda:	70 e0       	ldi	r23, 0x00	; 0
    2bdc:	60 e0       	ldi	r22, 0x00	; 0
    2bde:	08 95       	ret

00002be0 <__fp_nan>:
    2be0:	9f ef       	ldi	r25, 0xFF	; 255
    2be2:	80 ec       	ldi	r24, 0xC0	; 192
    2be4:	08 95       	ret

00002be6 <__fp_pscA>:
    2be6:	00 24       	eor	r0, r0
    2be8:	0a 94       	dec	r0
    2bea:	16 16       	cp	r1, r22
    2bec:	17 06       	cpc	r1, r23
    2bee:	18 06       	cpc	r1, r24
    2bf0:	09 06       	cpc	r0, r25
    2bf2:	08 95       	ret

00002bf4 <__fp_pscB>:
    2bf4:	00 24       	eor	r0, r0
    2bf6:	0a 94       	dec	r0
    2bf8:	12 16       	cp	r1, r18
    2bfa:	13 06       	cpc	r1, r19
    2bfc:	14 06       	cpc	r1, r20
    2bfe:	05 06       	cpc	r0, r21
    2c00:	08 95       	ret

00002c02 <__fp_round>:
    2c02:	09 2e       	mov	r0, r25
    2c04:	03 94       	inc	r0
    2c06:	00 0c       	add	r0, r0
    2c08:	11 f4       	brne	.+4      	; 0x2c0e <__fp_round+0xc>
    2c0a:	88 23       	and	r24, r24
    2c0c:	52 f0       	brmi	.+20     	; 0x2c22 <__fp_round+0x20>
    2c0e:	bb 0f       	add	r27, r27
    2c10:	40 f4       	brcc	.+16     	; 0x2c22 <__fp_round+0x20>
    2c12:	bf 2b       	or	r27, r31
    2c14:	11 f4       	brne	.+4      	; 0x2c1a <__fp_round+0x18>
    2c16:	60 ff       	sbrs	r22, 0
    2c18:	04 c0       	rjmp	.+8      	; 0x2c22 <__fp_round+0x20>
    2c1a:	6f 5f       	subi	r22, 0xFF	; 255
    2c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c20:	9f 4f       	sbci	r25, 0xFF	; 255
    2c22:	08 95       	ret

00002c24 <__fp_split3>:
    2c24:	57 fd       	sbrc	r21, 7
    2c26:	90 58       	subi	r25, 0x80	; 128
    2c28:	44 0f       	add	r20, r20
    2c2a:	55 1f       	adc	r21, r21
    2c2c:	59 f0       	breq	.+22     	; 0x2c44 <__fp_splitA+0x10>
    2c2e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c30:	71 f0       	breq	.+28     	; 0x2c4e <__fp_splitA+0x1a>
    2c32:	47 95       	ror	r20

00002c34 <__fp_splitA>:
    2c34:	88 0f       	add	r24, r24
    2c36:	97 fb       	bst	r25, 7
    2c38:	99 1f       	adc	r25, r25
    2c3a:	61 f0       	breq	.+24     	; 0x2c54 <__fp_splitA+0x20>
    2c3c:	9f 3f       	cpi	r25, 0xFF	; 255
    2c3e:	79 f0       	breq	.+30     	; 0x2c5e <__fp_splitA+0x2a>
    2c40:	87 95       	ror	r24
    2c42:	08 95       	ret
    2c44:	12 16       	cp	r1, r18
    2c46:	13 06       	cpc	r1, r19
    2c48:	14 06       	cpc	r1, r20
    2c4a:	55 1f       	adc	r21, r21
    2c4c:	f2 cf       	rjmp	.-28     	; 0x2c32 <__fp_split3+0xe>
    2c4e:	46 95       	lsr	r20
    2c50:	f1 df       	rcall	.-30     	; 0x2c34 <__fp_splitA>
    2c52:	08 c0       	rjmp	.+16     	; 0x2c64 <__fp_splitA+0x30>
    2c54:	16 16       	cp	r1, r22
    2c56:	17 06       	cpc	r1, r23
    2c58:	18 06       	cpc	r1, r24
    2c5a:	99 1f       	adc	r25, r25
    2c5c:	f1 cf       	rjmp	.-30     	; 0x2c40 <__fp_splitA+0xc>
    2c5e:	86 95       	lsr	r24
    2c60:	71 05       	cpc	r23, r1
    2c62:	61 05       	cpc	r22, r1
    2c64:	08 94       	sec
    2c66:	08 95       	ret

00002c68 <__fp_zero>:
    2c68:	e8 94       	clt

00002c6a <__fp_szero>:
    2c6a:	bb 27       	eor	r27, r27
    2c6c:	66 27       	eor	r22, r22
    2c6e:	77 27       	eor	r23, r23
    2c70:	cb 01       	movw	r24, r22
    2c72:	97 f9       	bld	r25, 7
    2c74:	08 95       	ret

00002c76 <__gesf2>:
    2c76:	8a df       	rcall	.-236    	; 0x2b8c <__fp_cmp>
    2c78:	08 f4       	brcc	.+2      	; 0x2c7c <__gesf2+0x6>
    2c7a:	8f ef       	ldi	r24, 0xFF	; 255
    2c7c:	08 95       	ret

00002c7e <__mulsf3>:
    2c7e:	0b d0       	rcall	.+22     	; 0x2c96 <__mulsf3x>
    2c80:	c0 cf       	rjmp	.-128    	; 0x2c02 <__fp_round>
    2c82:	b1 df       	rcall	.-158    	; 0x2be6 <__fp_pscA>
    2c84:	28 f0       	brcs	.+10     	; 0x2c90 <__mulsf3+0x12>
    2c86:	b6 df       	rcall	.-148    	; 0x2bf4 <__fp_pscB>
    2c88:	18 f0       	brcs	.+6      	; 0x2c90 <__mulsf3+0x12>
    2c8a:	95 23       	and	r25, r21
    2c8c:	09 f0       	breq	.+2      	; 0x2c90 <__mulsf3+0x12>
    2c8e:	a2 cf       	rjmp	.-188    	; 0x2bd4 <__fp_inf>
    2c90:	a7 cf       	rjmp	.-178    	; 0x2be0 <__fp_nan>
    2c92:	11 24       	eor	r1, r1
    2c94:	ea cf       	rjmp	.-44     	; 0x2c6a <__fp_szero>

00002c96 <__mulsf3x>:
    2c96:	c6 df       	rcall	.-116    	; 0x2c24 <__fp_split3>
    2c98:	a0 f3       	brcs	.-24     	; 0x2c82 <__mulsf3+0x4>

00002c9a <__mulsf3_pse>:
    2c9a:	95 9f       	mul	r25, r21
    2c9c:	d1 f3       	breq	.-12     	; 0x2c92 <__mulsf3+0x14>
    2c9e:	95 0f       	add	r25, r21
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	55 1f       	adc	r21, r21
    2ca4:	62 9f       	mul	r22, r18
    2ca6:	f0 01       	movw	r30, r0
    2ca8:	72 9f       	mul	r23, r18
    2caa:	bb 27       	eor	r27, r27
    2cac:	f0 0d       	add	r31, r0
    2cae:	b1 1d       	adc	r27, r1
    2cb0:	63 9f       	mul	r22, r19
    2cb2:	aa 27       	eor	r26, r26
    2cb4:	f0 0d       	add	r31, r0
    2cb6:	b1 1d       	adc	r27, r1
    2cb8:	aa 1f       	adc	r26, r26
    2cba:	64 9f       	mul	r22, r20
    2cbc:	66 27       	eor	r22, r22
    2cbe:	b0 0d       	add	r27, r0
    2cc0:	a1 1d       	adc	r26, r1
    2cc2:	66 1f       	adc	r22, r22
    2cc4:	82 9f       	mul	r24, r18
    2cc6:	22 27       	eor	r18, r18
    2cc8:	b0 0d       	add	r27, r0
    2cca:	a1 1d       	adc	r26, r1
    2ccc:	62 1f       	adc	r22, r18
    2cce:	73 9f       	mul	r23, r19
    2cd0:	b0 0d       	add	r27, r0
    2cd2:	a1 1d       	adc	r26, r1
    2cd4:	62 1f       	adc	r22, r18
    2cd6:	83 9f       	mul	r24, r19
    2cd8:	a0 0d       	add	r26, r0
    2cda:	61 1d       	adc	r22, r1
    2cdc:	22 1f       	adc	r18, r18
    2cde:	74 9f       	mul	r23, r20
    2ce0:	33 27       	eor	r19, r19
    2ce2:	a0 0d       	add	r26, r0
    2ce4:	61 1d       	adc	r22, r1
    2ce6:	23 1f       	adc	r18, r19
    2ce8:	84 9f       	mul	r24, r20
    2cea:	60 0d       	add	r22, r0
    2cec:	21 1d       	adc	r18, r1
    2cee:	82 2f       	mov	r24, r18
    2cf0:	76 2f       	mov	r23, r22
    2cf2:	6a 2f       	mov	r22, r26
    2cf4:	11 24       	eor	r1, r1
    2cf6:	9f 57       	subi	r25, 0x7F	; 127
    2cf8:	50 40       	sbci	r21, 0x00	; 0
    2cfa:	8a f0       	brmi	.+34     	; 0x2d1e <__mulsf3_pse+0x84>
    2cfc:	e1 f0       	breq	.+56     	; 0x2d36 <__mulsf3_pse+0x9c>
    2cfe:	88 23       	and	r24, r24
    2d00:	4a f0       	brmi	.+18     	; 0x2d14 <__mulsf3_pse+0x7a>
    2d02:	ee 0f       	add	r30, r30
    2d04:	ff 1f       	adc	r31, r31
    2d06:	bb 1f       	adc	r27, r27
    2d08:	66 1f       	adc	r22, r22
    2d0a:	77 1f       	adc	r23, r23
    2d0c:	88 1f       	adc	r24, r24
    2d0e:	91 50       	subi	r25, 0x01	; 1
    2d10:	50 40       	sbci	r21, 0x00	; 0
    2d12:	a9 f7       	brne	.-22     	; 0x2cfe <__mulsf3_pse+0x64>
    2d14:	9e 3f       	cpi	r25, 0xFE	; 254
    2d16:	51 05       	cpc	r21, r1
    2d18:	70 f0       	brcs	.+28     	; 0x2d36 <__mulsf3_pse+0x9c>
    2d1a:	5c cf       	rjmp	.-328    	; 0x2bd4 <__fp_inf>
    2d1c:	a6 cf       	rjmp	.-180    	; 0x2c6a <__fp_szero>
    2d1e:	5f 3f       	cpi	r21, 0xFF	; 255
    2d20:	ec f3       	brlt	.-6      	; 0x2d1c <__mulsf3_pse+0x82>
    2d22:	98 3e       	cpi	r25, 0xE8	; 232
    2d24:	dc f3       	brlt	.-10     	; 0x2d1c <__mulsf3_pse+0x82>
    2d26:	86 95       	lsr	r24
    2d28:	77 95       	ror	r23
    2d2a:	67 95       	ror	r22
    2d2c:	b7 95       	ror	r27
    2d2e:	f7 95       	ror	r31
    2d30:	e7 95       	ror	r30
    2d32:	9f 5f       	subi	r25, 0xFF	; 255
    2d34:	c1 f7       	brne	.-16     	; 0x2d26 <__mulsf3_pse+0x8c>
    2d36:	fe 2b       	or	r31, r30
    2d38:	88 0f       	add	r24, r24
    2d3a:	91 1d       	adc	r25, r1
    2d3c:	96 95       	lsr	r25
    2d3e:	87 95       	ror	r24
    2d40:	97 f9       	bld	r25, 7
    2d42:	08 95       	ret

00002d44 <__mulsi3>:
    2d44:	62 9f       	mul	r22, r18
    2d46:	d0 01       	movw	r26, r0
    2d48:	73 9f       	mul	r23, r19
    2d4a:	f0 01       	movw	r30, r0
    2d4c:	82 9f       	mul	r24, r18
    2d4e:	e0 0d       	add	r30, r0
    2d50:	f1 1d       	adc	r31, r1
    2d52:	64 9f       	mul	r22, r20
    2d54:	e0 0d       	add	r30, r0
    2d56:	f1 1d       	adc	r31, r1
    2d58:	92 9f       	mul	r25, r18
    2d5a:	f0 0d       	add	r31, r0
    2d5c:	83 9f       	mul	r24, r19
    2d5e:	f0 0d       	add	r31, r0
    2d60:	74 9f       	mul	r23, r20
    2d62:	f0 0d       	add	r31, r0
    2d64:	65 9f       	mul	r22, r21
    2d66:	f0 0d       	add	r31, r0
    2d68:	99 27       	eor	r25, r25
    2d6a:	72 9f       	mul	r23, r18
    2d6c:	b0 0d       	add	r27, r0
    2d6e:	e1 1d       	adc	r30, r1
    2d70:	f9 1f       	adc	r31, r25
    2d72:	63 9f       	mul	r22, r19
    2d74:	b0 0d       	add	r27, r0
    2d76:	e1 1d       	adc	r30, r1
    2d78:	f9 1f       	adc	r31, r25
    2d7a:	bd 01       	movw	r22, r26
    2d7c:	cf 01       	movw	r24, r30
    2d7e:	11 24       	eor	r1, r1
    2d80:	08 95       	ret

00002d82 <__udivmodsi4>:
    2d82:	a1 e2       	ldi	r26, 0x21	; 33
    2d84:	1a 2e       	mov	r1, r26
    2d86:	aa 1b       	sub	r26, r26
    2d88:	bb 1b       	sub	r27, r27
    2d8a:	fd 01       	movw	r30, r26
    2d8c:	0d c0       	rjmp	.+26     	; 0x2da8 <__udivmodsi4_ep>

00002d8e <__udivmodsi4_loop>:
    2d8e:	aa 1f       	adc	r26, r26
    2d90:	bb 1f       	adc	r27, r27
    2d92:	ee 1f       	adc	r30, r30
    2d94:	ff 1f       	adc	r31, r31
    2d96:	a2 17       	cp	r26, r18
    2d98:	b3 07       	cpc	r27, r19
    2d9a:	e4 07       	cpc	r30, r20
    2d9c:	f5 07       	cpc	r31, r21
    2d9e:	20 f0       	brcs	.+8      	; 0x2da8 <__udivmodsi4_ep>
    2da0:	a2 1b       	sub	r26, r18
    2da2:	b3 0b       	sbc	r27, r19
    2da4:	e4 0b       	sbc	r30, r20
    2da6:	f5 0b       	sbc	r31, r21

00002da8 <__udivmodsi4_ep>:
    2da8:	66 1f       	adc	r22, r22
    2daa:	77 1f       	adc	r23, r23
    2dac:	88 1f       	adc	r24, r24
    2dae:	99 1f       	adc	r25, r25
    2db0:	1a 94       	dec	r1
    2db2:	69 f7       	brne	.-38     	; 0x2d8e <__udivmodsi4_loop>
    2db4:	60 95       	com	r22
    2db6:	70 95       	com	r23
    2db8:	80 95       	com	r24
    2dba:	90 95       	com	r25
    2dbc:	9b 01       	movw	r18, r22
    2dbe:	ac 01       	movw	r20, r24
    2dc0:	bd 01       	movw	r22, r26
    2dc2:	cf 01       	movw	r24, r30
    2dc4:	08 95       	ret

00002dc6 <_exit>:
    2dc6:	f8 94       	cli

00002dc8 <__stop_program>:
    2dc8:	ff cf       	rjmp	.-2      	; 0x2dc8 <__stop_program>
