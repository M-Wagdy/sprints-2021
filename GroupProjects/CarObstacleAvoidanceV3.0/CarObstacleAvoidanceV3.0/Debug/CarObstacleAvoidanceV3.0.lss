
CarObstacleAvoidanceV3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000c4c  00000ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080006a  0080006a  00000cea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027b1  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6e  00000000  00000000  00003759  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013d5  00000000  00000000  000046c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000528  00000000  00000000  00005a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d78  00000000  00000000  00005fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015ee  00000000  00000000  00006d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000832a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 aa 03 	jmp	0x754	; 0x754 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 83 03 	jmp	0x706	; 0x706 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 39       	cpi	r26, 0x91	; 145
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 01 	call	0x388	; 0x388 <main>
  8a:	0c 94 24 06 	jmp	0xc48	; 0xc48 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SENSING_Init>:
#include "USONIC.h"

extern ERROR_STATE_t SENSING_Init(void)
{
	uint8_t u8_ErrorState=ERROR_NOK;
	u8_ErrorState = USONIC_Init();
  92:	0e 94 30 01 	call	0x260	; 0x260 <USONIC_Init>
	return u8_ErrorState;
}
  96:	08 95       	ret

00000098 <SENSING_MainFunction>:

void SENSING_MainFunction(void)
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	00 d0       	rcall	.+0      	; 0x9e <SENSING_MainFunction+0x6>
  9e:	00 d0       	rcall	.+0      	; 0xa0 <SENSING_MainFunction+0x8>
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	double64_t d64_Distance;
	static ERROR_STATE_t u8_InitFlag=NOT_INIT;
	if(NOT_INIT==u8_InitFlag){
  a4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  a8:	81 11       	cpse	r24, r1
  aa:	08 c0       	rjmp	.+16     	; 0xbc <SENSING_MainFunction+0x24>
		if(ERROR_OK==SENSING_Init()){
  ac:	0e 94 49 00 	call	0x92	; 0x92 <SENSING_Init>
  b0:	81 11       	cpse	r24, r1
  b2:	10 c0       	rjmp	.+32     	; 0xd4 <SENSING_MainFunction+0x3c>
			u8_InitFlag=INIT;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
  ba:	0c c0       	rjmp	.+24     	; 0xd4 <SENSING_MainFunction+0x3c>
		}
	}
	else
	{
		uint8_t u8_UsonicState = USONIC_GetDistance(&d64_Distance);
  bc:	ce 01       	movw	r24, r28
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <USONIC_GetDistance>
		if(ERROR_OK==u8_UsonicState)
  c4:	81 11       	cpse	r24, r1
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <SENSING_MainFunction+0x3c>
		{
			SENSING_Set(d64_Distance);
  c8:	69 81       	ldd	r22, Y+1	; 0x01
  ca:	7a 81       	ldd	r23, Y+2	; 0x02
  cc:	8b 81       	ldd	r24, Y+3	; 0x03
  ce:	9c 81       	ldd	r25, Y+4	; 0x04
  d0:	0e 94 84 00 	call	0x108	; 0x108 <SENSING_Set>
		}	
	}			
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	0f 90       	pop	r0
  da:	0f 90       	pop	r0
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <SENSING_Get>:

ERROR_STATE_t SENSING_Get(ptr_double64_t Distance)
{
	uint8_t u8_ErrorState = ERROR_OK;
	
	if(NULL_PTR==Distance)
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	79 f0       	breq	.+30     	; 0x104 <SENSING_Get+0x22>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		*Distance = gd64_Distance;
  e6:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <gd64_Distance>
  ea:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <gd64_Distance+0x1>
  ee:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <gd64_Distance+0x2>
  f2:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <gd64_Distance+0x3>
  f6:	fc 01       	movw	r30, r24
  f8:	40 83       	st	Z, r20
  fa:	51 83       	std	Z+1, r21	; 0x01
  fc:	62 83       	std	Z+2, r22	; 0x02
  fe:	73 83       	std	Z+3, r23	; 0x03
		u8_ErrorState = ERROR_OK;
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret
{
	uint8_t u8_ErrorState = ERROR_OK;
	
	if(NULL_PTR==Distance)
	{
		u8_ErrorState = ERROR_NOK;
 104:	81 e0       	ldi	r24, 0x01	; 1
	{
		*Distance = gd64_Distance;
		u8_ErrorState = ERROR_OK;
	}
	return u8_ErrorState;
}
 106:	08 95       	ret

00000108 <SENSING_Set>:

ERROR_STATE_t SENSING_Set(double64_t Distance)
{
	uint8_t u8_ErrorState=ERROR_OK;
	
	gd64_Distance = Distance;
 108:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <gd64_Distance>
 10c:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <gd64_Distance+0x1>
 110:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <gd64_Distance+0x2>
 114:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <gd64_Distance+0x3>
	
	return u8_ErrorState;
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <USONIC_OVF1Callback>:
	}
}

static void USONIC_OVF1Callback(void)
{
	gu16_OverflowCounter++; 
 11c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gu16_OverflowCounter>
 120:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gu16_OverflowCounter+0x1>
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gu16_OverflowCounter+0x1>
 12a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gu16_OverflowCounter>
 12e:	08 95       	ret

00000130 <USONIC_ICU1Callback>:
	}
	return gu8_ERROR_STATE;	
}

static void USONIC_ICU1Callback(void)
{
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
	volatile static  uint64_t CounterNumber;
	volatile static  uint16_t ICR1_Register;
 
	switch(gu8_ICU_State)
 148:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <gu8_ICU_State>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	19 f0       	breq	.+6      	; 0x156 <USONIC_ICU1Callback+0x26>
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	69 f0       	breq	.+26     	; 0x16e <USONIC_ICU1Callback+0x3e>
 154:	78 c0       	rjmp	.+240    	; 0x246 <USONIC_ICU1Callback+0x116>
	{
			case WAITING_RISING_EDGE_STATE: //Rising 
			{
				gu16_OverflowCounter=0;
 156:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <gu16_OverflowCounter+0x1>
 15a:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <gu16_OverflowCounter>
				gu8_ICU_State=WAITING_FALLING_EDGE_STATE;
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <gu8_ICU_State>
				ICU_Reset(ICU_1,ICU1_FALLING_EDGE);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 17 03 	call	0x62e	; 0x62e <ICU_Reset>
				break;
 16c:	6c c0       	rjmp	.+216    	; 0x246 <USONIC_ICU1Callback+0x116>
			}		 
			case WAITING_FALLING_EDGE_STATE: //Falling
			{
				ICU_GetICR1Registert(ICU_1,&ICR1_Register);
 16e:	67 e7       	ldi	r22, 0x77	; 119
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 2b 03 	call	0x656	; 0x656 <ICU_GetICR1Registert>
				CounterNumber=(uint64_t)(ICR1_Register+(gu16_OverflowCounter*ICU1_MAX_COUNT));			
 178:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <ICR1_Register.1723>
 17c:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <ICR1_Register.1723+0x1>
 180:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <gu16_OverflowCounter>
 184:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <gu16_OverflowCounter+0x1>
 188:	82 1b       	sub	r24, r18
 18a:	93 0b       	sbc	r25, r19
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <CounterNumber.1722>
 190:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <CounterNumber.1722+0x1>
 194:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <CounterNumber.1722+0x2>
 198:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <CounterNumber.1722+0x3>
 19c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <CounterNumber.1722+0x4>
 1a0:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <CounterNumber.1722+0x5>
 1a4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <CounterNumber.1722+0x6>
 1a8:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <CounterNumber.1722+0x7>
				TimeOnValue = (CounterNumber*((double)gastr_ICUConfig[ICU_1].ICUPrescaler/gu32_USONIC_SystemFreq));
 1ac:	80 90 6f 00 	lds	r8, 0x006F	; 0x80006f <CounterNumber.1722>
 1b0:	90 90 70 00 	lds	r9, 0x0070	; 0x800070 <CounterNumber.1722+0x1>
 1b4:	a0 90 71 00 	lds	r10, 0x0071	; 0x800071 <CounterNumber.1722+0x2>
 1b8:	b0 90 72 00 	lds	r11, 0x0072	; 0x800072 <CounterNumber.1722+0x3>
 1bc:	00 91 73 00 	lds	r16, 0x0073	; 0x800073 <CounterNumber.1722+0x4>
 1c0:	10 91 74 00 	lds	r17, 0x0074	; 0x800074 <CounterNumber.1722+0x5>
 1c4:	d0 91 75 00 	lds	r29, 0x0075	; 0x800075 <CounterNumber.1722+0x6>
 1c8:	c0 91 76 00 	lds	r28, 0x0076	; 0x800076 <CounterNumber.1722+0x7>
 1cc:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_start+0x2>
 1d0:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_start+0x3>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
 1dc:	6b 01       	movw	r12, r22
 1de:	7c 01       	movw	r14, r24
 1e0:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <gu32_USONIC_SystemFreq>
 1e4:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <gu32_USONIC_SystemFreq+0x1>
 1e8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gu32_USONIC_SystemFreq+0x2>
 1ec:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <gu32_USONIC_SystemFreq+0x3>
 1f0:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
 1f4:	9b 01       	movw	r18, r22
 1f6:	ac 01       	movw	r20, r24
 1f8:	c7 01       	movw	r24, r14
 1fa:	b6 01       	movw	r22, r12
 1fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__divsf3>
 200:	6b 01       	movw	r12, r22
 202:	7c 01       	movw	r14, r24
 204:	28 2d       	mov	r18, r8
 206:	39 2d       	mov	r19, r9
 208:	4a 2d       	mov	r20, r10
 20a:	5b 2d       	mov	r21, r11
 20c:	60 2f       	mov	r22, r16
 20e:	71 2f       	mov	r23, r17
 210:	8d 2f       	mov	r24, r29
 212:	9c 2f       	mov	r25, r28
 214:	0e 94 04 05 	call	0xa08	; 0xa08 <__floatundisf>
 218:	a7 01       	movw	r20, r14
 21a:	96 01       	movw	r18, r12
 21c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__mulsf3>
 220:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <TimeOnValue>
 224:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <TimeOnValue+0x1>
 228:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <TimeOnValue+0x2>
 22c:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <TimeOnValue+0x3>
				gu8_ICU_State=END_STATE;
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <gu8_ICU_State>
				ICU_DisableInterrupt(ICU_1,ICU1_INPUTCAPTURE_INT);
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <ICU_DisableInterrupt>
				ICU_DisableInterrupt(ICU_1,ICU1_OVERFLOW_INT);
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 52 03 	call	0x6a4	; 0x6a4 <ICU_DisableInterrupt>
				break;
			}			
			default:
				break;
	}
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	bf 90       	pop	r11
 258:	af 90       	pop	r10
 25a:	9f 90       	pop	r9
 25c:	8f 90       	pop	r8
 25e:	08 95       	ret

00000260 <USONIC_Init>:
/*
 * THIS API INITIALIZE THE ULTRASONIC
 * */
ERROR_STATE_t USONIC_Init(void) {
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) //IF ULTRA SONIC IS INITIALIZED
 260:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gu8_InitFlag>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	21 f4       	brne	.+8      	; 0x270 <USONIC_Init+0x10>
	{
		gu8_ERROR_STATE = USONIC_SEC_INIT; //STORE SEC INIT IN ERRROR STAT
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <gu8_ERROR_STATE>
 26e:	1f c0       	rjmp	.+62     	; 0x2ae <USONIC_Init+0x4e>
	} 
	else if (NOT_INIT == gu8_InitFlag) //IF ULTRA SONIC IS NOT INITIALIZED
 270:	81 11       	cpse	r24, r1
 272:	1d c0       	rjmp	.+58     	; 0x2ae <USONIC_Init+0x4e>
	{
		DIO_SetPinDirection(gastr_USONIC_Config[USONIC1].USONIC_TRIG_PORT, gastr_USONIC_Config[USONIC1].USONIC_TRIG_PIN, PIN_OUTPUT);//SET THE TRIGGER PIN AS AN OUTPUT
 274:	e8 e6       	ldi	r30, 0x68	; 104
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	61 81       	ldd	r22, Z+1	; 0x01
 27c:	80 81       	ld	r24, Z
 27e:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPinDirection>
		ICU_Init(ICU_1); //INIT THE ICU CH 1
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ICU_Init>
		
		ICU_SetCallback(ICU_1,ICU1_INPUTCAPTURE_INT,USONIC_ICU1Callback);
 288:	48 e9       	ldi	r20, 0x98	; 152
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 67 03 	call	0x6ce	; 0x6ce <ICU_SetCallback>
		ICU_SetCallback(ICU_1,ICU1_OVERFLOW_INT,USONIC_OVF1Callback);
 294:	4e e8       	ldi	r20, 0x8E	; 142
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 67 03 	call	0x6ce	; 0x6ce <ICU_SetCallback>
		GLOBALINTTERUPTS_Enable();
 2a0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <GLOBALINTTERUPTS_Enable>
	
		gu8_InitFlag = INIT;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gu8_InitFlag>
		gu8_ERROR_STATE=ERROR_OK;
 2aa:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <gu8_ERROR_STATE>
	else 
	{
		//DO NOTHING
	}
	return gu8_ERROR_STATE ;
}
 2ae:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gu8_ERROR_STATE>
 2b2:	08 95       	ret

000002b4 <USONIC_GetDistance>:

ERROR_STATE_t USONIC_GetDistance(ptr_double64_t distance)
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	9c 01       	movw	r18, r24
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (NOT_INIT == gu8_InitFlag) //IF ULTRA SONIC IS NOT INITIALIZED
 2ba:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <gu8_InitFlag>
 2be:	91 11       	cpse	r25, r1
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <USONIC_GetDistance+0x16>
	{ 
		gu8_ERROR_STATE = USONIC_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
 2c2:	8e ef       	ldi	r24, 0xFE	; 254
 2c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <gu8_ERROR_STATE>
 2c8:	5a c0       	rjmp	.+180    	; 0x37e <USONIC_GetDistance+0xca>
	} 
	else if(INIT == gu8_InitFlag) //IF ULTRA SONIC IS INITIALIZED
 2ca:	91 30       	cpi	r25, 0x01	; 1
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <USONIC_GetDistance+0x1c>
 2ce:	57 c0       	rjmp	.+174    	; 0x37e <USONIC_GetDistance+0xca>
	{ 
		/* CHECK IF ptr_float32_t distance EQUALS NULL */
		if (NULL_PTR == distance) 
 2d0:	21 15       	cp	r18, r1
 2d2:	31 05       	cpc	r19, r1
 2d4:	21 f4       	brne	.+8      	; 0x2de <USONIC_GetDistance+0x2a>
		{
			gu8_ERROR_STATE = USONIC_NULL_POINTER; //STORE NOT INIT IN ERRROR STAT
 2d6:	8d ef       	ldi	r24, 0xFD	; 253
 2d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <gu8_ERROR_STATE>
 2dc:	50 c0       	rjmp	.+160    	; 0x37e <USONIC_GetDistance+0xca>
 2de:	e9 01       	movw	r28, r18
		} 
		else 
		{
			switch(gu8_ICU_State)
 2e0:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <gu8_ICU_State>
 2e4:	88 23       	and	r24, r24
 2e6:	19 f0       	breq	.+6      	; 0x2ee <USONIC_GetDistance+0x3a>
 2e8:	83 30       	cpi	r24, 0x03	; 3
 2ea:	69 f1       	breq	.+90     	; 0x346 <USONIC_GetDistance+0x92>
 2ec:	48 c0       	rjmp	.+144    	; 0x37e <USONIC_GetDistance+0xca>
			{
				case START_STATE:
				{
					gu8_ICU_State=WAITING_RISING_EDGE_STATE;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <gu8_ICU_State>
					DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_HIGH); //SET TRIGGER PIN
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritePin>
					
					gu16_OverflowCounter=COUNTER_RESET;
 2fe:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <gu16_OverflowCounter+0x1>
 302:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <gu16_OverflowCounter>
					ICU_SetTCNT1Registert(ICU_1,PRELOAD_10U);
 306:	6e ef       	ldi	r22, 0xFE	; 254
 308:	7f ef       	ldi	r23, 0xFF	; 255
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 36 03 	call	0x66c	; 0x66c <ICU_SetTCNT1Registert>
					ICU_EnableInterrupt(ICU_1,ICU1_OVERFLOW_INT);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 3d 03 	call	0x67a	; 0x67a <ICU_EnableInterrupt>
					while(gu16_OverflowCounter<1);
 318:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gu16_OverflowCounter>
 31c:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gu16_OverflowCounter+0x1>
 320:	89 2b       	or	r24, r25
 322:	d1 f3       	breq	.-12     	; 0x318 <USONIC_GetDistance+0x64>
						{
							
						}
					}*/
					
					DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_LOW);
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritePin>
					ICU_Reset(ICU_1,ICU1_RISING_EDGE);
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 17 03 	call	0x62e	; 0x62e <ICU_Reset>
					ICU_EnableInterrupt(ICU_1,ICU1_INPUTCAPTURE_INT);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 3d 03 	call	0x67a	; 0x67a <ICU_EnableInterrupt>
					gu8_ERROR_STATE=ERROR_NOK;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <gu8_ERROR_STATE>
					break;
 344:	1c c0       	rjmp	.+56     	; 0x37e <USONIC_GetDistance+0xca>
				}
				case END_STATE:
				{
					*distance = (((SOUND_SPPED) * TimeOnValue) / HALF_DISTANCE);
 346:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <TimeOnValue>
 34a:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <TimeOnValue+0x1>
 34e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <TimeOnValue+0x2>
 352:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <TimeOnValue+0x3>
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	3c ef       	ldi	r19, 0xFC	; 252
 35a:	45 e0       	ldi	r20, 0x05	; 5
 35c:	57 e4       	ldi	r21, 0x47	; 71
 35e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__mulsf3>
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	5f e3       	ldi	r21, 0x3F	; 63
 36a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__mulsf3>
 36e:	68 83       	st	Y, r22
 370:	79 83       	std	Y+1, r23	; 0x01
 372:	8a 83       	std	Y+2, r24	; 0x02
 374:	9b 83       	std	Y+3, r25	; 0x03
					gu8_ERROR_STATE=ERROR_OK;
 376:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <gu8_ERROR_STATE>
					gu8_ICU_State=START_STATE;
 37a:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <gu8_ICU_State>
	else
	{
			
	}
	return gu8_ERROR_STATE;	
}
 37e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gu8_ERROR_STATE>
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <main>:
   	//DO Nothing
	}
}

int main(void)
{
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	00 d0       	rcall	.+0      	; 0x38e <main+0x6>
 38e:	00 d0       	rcall	.+0      	; 0x390 <main+0x8>
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
   DIO_SetPinDirection(PORT_B, PIN5, PIN_OUTPUT);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	65 e0       	ldi	r22, 0x05	; 5
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPinDirection>
   DIO_SetPinDirection(PORT_B, PIN4, PIN_OUTPUT);
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	64 e0       	ldi	r22, 0x04	; 4
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPinDirection>
   DIO_SetPinDirection(PORT_B, PIN6, PIN_OUTPUT);
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	66 e0       	ldi	r22, 0x06	; 6
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPinDirection>
   DIO_SetPinDirection(PORT_B, PIN7, PIN_OUTPUT);
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	67 e0       	ldi	r22, 0x07	; 7
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPinDirection>
   DIO_SetPinDirection(PORT_B, PIN0, PIN_OUTPUT);
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPinDirection>
   DIO_SetPinDirection(PORT_B, PIN1, PIN_OUTPUT);
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPinDirection>
   DIO_SetPinDirection(PORT_B, PIN2, PIN_OUTPUT);
 3d0:	41 e0       	ldi	r20, 0x01	; 1
 3d2:	62 e0       	ldi	r22, 0x02	; 2
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPinDirection>
   DIO_SetPinDirection(PORT_B, PIN3, PIN_OUTPUT);
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	63 e0       	ldi	r22, 0x03	; 3
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPinDirection>
   
   while(1)
   {
      SENSING_MainFunction();
 3e4:	0e 94 4c 00 	call	0x98	; 0x98 <SENSING_MainFunction>
      double64_t gd64_distance;
      SENSING_Get(&gd64_distance);
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	0e 94 71 00 	call	0xe2	; 0xe2 <SENSING_Get>
      if(gd64_distance < 30)
 3f0:	69 81       	ldd	r22, Y+1	; 0x01
 3f2:	7a 81       	ldd	r23, Y+2	; 0x02
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	9c 81       	ldd	r25, Y+4	; 0x04
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	40 ef       	ldi	r20, 0xF0	; 240
 3fe:	51 e4       	ldi	r21, 0x41	; 65
 400:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__cmpsf2>
 404:	88 23       	and	r24, r24
 406:	5c f4       	brge	.+22     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
      {
         DIO_WritePin(PORT_B, PIN5, PIN_LOW);
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	65 e0       	ldi	r22, 0x05	; 5
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritePin>
         DIO_WritePin(PORT_B, PIN4, PIN_HIGH);
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	64 e0       	ldi	r22, 0x04	; 4
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritePin>
 41c:	e3 cf       	rjmp	.-58     	; 0x3e4 <main+0x5c>
      }
      else
      {
         DIO_WritePin(PORT_B, PIN4, PIN_LOW);
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	64 e0       	ldi	r22, 0x04	; 4
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritePin>
         DIO_WritePin(PORT_B, PIN5, PIN_HIGH);
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	65 e0       	ldi	r22, 0x05	; 5
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritePin>
      }
   }        
 432:	d8 cf       	rjmp	.-80     	; 0x3e4 <main+0x5c>

00000434 <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
 434:	42 30       	cpi	r20, 0x02	; 2
 436:	08 f0       	brcs	.+2      	; 0x43a <DIO_SetPinDirection+0x6>
 438:	60 c0       	rjmp	.+192    	; 0x4fa <DIO_SetPinDirection+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
 43a:	68 30       	cpi	r22, 0x08	; 8
 43c:	08 f0       	brcs	.+2      	; 0x440 <DIO_SetPinDirection+0xc>
 43e:	5f c0       	rjmp	.+190    	; 0x4fe <DIO_SetPinDirection+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	e1 f0       	breq	.+56     	; 0x47c <DIO_SetPinDirection+0x48>
 444:	30 f0       	brcs	.+12     	; 0x452 <DIO_SetPinDirection+0x1e>
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	71 f1       	breq	.+92     	; 0x4a6 <DIO_SetPinDirection+0x72>
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	09 f4       	brne	.+2      	; 0x450 <DIO_SetPinDirection+0x1c>
 44e:	40 c0       	rjmp	.+128    	; 0x4d0 <DIO_SetPinDirection+0x9c>
 450:	58 c0       	rjmp	.+176    	; 0x502 <DIO_SetPinDirection+0xce>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
 452:	2a b3       	in	r18, 0x1a	; 26
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	06 2e       	mov	r0, r22
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_SetPinDirection+0x2c>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_SetPinDirection+0x28>
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_SetPinDirection+0x38>
 468:	44 0f       	add	r20, r20
 46a:	55 1f       	adc	r21, r21
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_SetPinDirection+0x34>
 470:	80 95       	com	r24
 472:	82 23       	and	r24, r18
 474:	48 2b       	or	r20, r24
 476:	4a bb       	out	0x1a, r20	; 26
				u8_ErrorState=ERROR_OK;
 478:	80 e0       	ldi	r24, 0x00	; 0
				break;
 47a:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
 47c:	27 b3       	in	r18, 0x17	; 23
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	06 2e       	mov	r0, r22
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_SetPinDirection+0x56>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	0a 94       	dec	r0
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_SetPinDirection+0x52>
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_SetPinDirection+0x62>
 492:	44 0f       	add	r20, r20
 494:	55 1f       	adc	r21, r21
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_SetPinDirection+0x5e>
 49a:	80 95       	com	r24
 49c:	82 23       	and	r24, r18
 49e:	48 2b       	or	r20, r24
 4a0:	47 bb       	out	0x17, r20	; 23
				u8_ErrorState=ERROR_OK;
 4a2:	80 e0       	ldi	r24, 0x00	; 0
				break;
 4a4:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
 4a6:	24 b3       	in	r18, 0x14	; 20
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	06 2e       	mov	r0, r22
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_SetPinDirection+0x80>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_SetPinDirection+0x7c>
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_SetPinDirection+0x8c>
 4bc:	44 0f       	add	r20, r20
 4be:	55 1f       	adc	r21, r21
 4c0:	6a 95       	dec	r22
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_SetPinDirection+0x88>
 4c4:	80 95       	com	r24
 4c6:	82 23       	and	r24, r18
 4c8:	48 2b       	or	r20, r24
 4ca:	44 bb       	out	0x14, r20	; 20
				u8_ErrorState=ERROR_OK;
 4cc:	80 e0       	ldi	r24, 0x00	; 0
				break;
 4ce:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
 4d0:	21 b3       	in	r18, 0x11	; 17
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	06 2e       	mov	r0, r22
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_SetPinDirection+0xaa>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	0a 94       	dec	r0
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_SetPinDirection+0xa6>
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_SetPinDirection+0xb6>
 4e6:	44 0f       	add	r20, r20
 4e8:	55 1f       	adc	r21, r21
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_SetPinDirection+0xb2>
 4ee:	80 95       	com	r24
 4f0:	82 23       	and	r24, r18
 4f2:	48 2b       	or	r20, r24
 4f4:	41 bb       	out	0x11, r20	; 17
				u8_ErrorState=ERROR_OK;
 4f6:	80 e0       	ldi	r24, 0x00	; 0
				break;
 4f8:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
 502:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
 504:	08 95       	ret

00000506 <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
 506:	42 30       	cpi	r20, 0x02	; 2
 508:	08 f0       	brcs	.+2      	; 0x50c <DIO_WritePin+0x6>
 50a:	60 c0       	rjmp	.+192    	; 0x5cc <DIO_WritePin+0xc6>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
 50c:	68 30       	cpi	r22, 0x08	; 8
 50e:	08 f0       	brcs	.+2      	; 0x512 <DIO_WritePin+0xc>
 510:	5f c0       	rjmp	.+190    	; 0x5d0 <DIO_WritePin+0xca>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	e1 f0       	breq	.+56     	; 0x54e <DIO_WritePin+0x48>
 516:	30 f0       	brcs	.+12     	; 0x524 <DIO_WritePin+0x1e>
 518:	82 30       	cpi	r24, 0x02	; 2
 51a:	71 f1       	breq	.+92     	; 0x578 <DIO_WritePin+0x72>
 51c:	83 30       	cpi	r24, 0x03	; 3
 51e:	09 f4       	brne	.+2      	; 0x522 <DIO_WritePin+0x1c>
 520:	40 c0       	rjmp	.+128    	; 0x5a2 <DIO_WritePin+0x9c>
 522:	58 c0       	rjmp	.+176    	; 0x5d4 <DIO_WritePin+0xce>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
 524:	2b b3       	in	r18, 0x1b	; 27
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	06 2e       	mov	r0, r22
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_WritePin+0x2c>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	0a 94       	dec	r0
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_WritePin+0x28>
 536:	50 e0       	ldi	r21, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_WritePin+0x38>
 53a:	44 0f       	add	r20, r20
 53c:	55 1f       	adc	r21, r21
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_WritePin+0x34>
 542:	80 95       	com	r24
 544:	82 23       	and	r24, r18
 546:	48 2b       	or	r20, r24
 548:	4b bb       	out	0x1b, r20	; 27
				u8_ErrorState=ERROR_OK;
 54a:	80 e0       	ldi	r24, 0x00	; 0
				break;
 54c:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
 54e:	28 b3       	in	r18, 0x18	; 24
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	06 2e       	mov	r0, r22
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_WritePin+0x56>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	0a 94       	dec	r0
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_WritePin+0x52>
 560:	50 e0       	ldi	r21, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_WritePin+0x62>
 564:	44 0f       	add	r20, r20
 566:	55 1f       	adc	r21, r21
 568:	6a 95       	dec	r22
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_WritePin+0x5e>
 56c:	80 95       	com	r24
 56e:	82 23       	and	r24, r18
 570:	48 2b       	or	r20, r24
 572:	48 bb       	out	0x18, r20	; 24
				u8_ErrorState=ERROR_OK;
 574:	80 e0       	ldi	r24, 0x00	; 0
				break;
 576:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
 578:	25 b3       	in	r18, 0x15	; 21
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	06 2e       	mov	r0, r22
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_WritePin+0x80>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	0a 94       	dec	r0
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_WritePin+0x7c>
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_WritePin+0x8c>
 58e:	44 0f       	add	r20, r20
 590:	55 1f       	adc	r21, r21
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_WritePin+0x88>
 596:	80 95       	com	r24
 598:	82 23       	and	r24, r18
 59a:	48 2b       	or	r20, r24
 59c:	45 bb       	out	0x15, r20	; 21
				u8_ErrorState=ERROR_OK;
 59e:	80 e0       	ldi	r24, 0x00	; 0
				break;
 5a0:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
 5a2:	22 b3       	in	r18, 0x12	; 18
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	06 2e       	mov	r0, r22
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_WritePin+0xaa>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	0a 94       	dec	r0
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_WritePin+0xa6>
 5b4:	50 e0       	ldi	r21, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_WritePin+0xb6>
 5b8:	44 0f       	add	r20, r20
 5ba:	55 1f       	adc	r21, r21
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_WritePin+0xb2>
 5c0:	80 95       	com	r24
 5c2:	82 23       	and	r24, r18
 5c4:	48 2b       	or	r20, r24
 5c6:	42 bb       	out	0x12, r20	; 18
				u8_ErrorState=ERROR_OK;
 5c8:	80 e0       	ldi	r24, 0x00	; 0
				break;
 5ca:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
 5d6:	08 95       	ret

000005d8 <GLOBALINTTERUPTS_Enable>:
/**
* @brief: This function enables global interrupts.
*/
void GLOBALINTTERUPTS_Enable(void)
{
   SET_BIT(SREG, I);
 5d8:	8f b7       	in	r24, 0x3f	; 63
 5da:	80 68       	ori	r24, 0x80	; 128
 5dc:	8f bf       	out	0x3f, r24	; 63
 5de:	08 95       	ret

000005e0 <ICU_Init>:
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
 5e0:	81 11       	cpse	r24, r1
 5e2:	23 c0       	rjmp	.+70     	; 0x62a <ICU_Init+0x4a>
 5e4:	40 e0       	ldi	r20, 0x00	; 0
 5e6:	66 e0       	ldi	r22, 0x06	; 6
 5e8:	83 e0       	ldi	r24, 0x03	; 3
 5ea:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPinDirection>
 5ee:	9f b5       	in	r25, 0x2f	; 47
 5f0:	e0 e6       	ldi	r30, 0x60	; 96
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	9c 7f       	andi	r25, 0xFC	; 252
 5f8:	83 70       	andi	r24, 0x03	; 3
 5fa:	89 2b       	or	r24, r25
 5fc:	8f bd       	out	0x2f, r24	; 47
 5fe:	2e b5       	in	r18, 0x2e	; 46
 600:	90 81       	ld	r25, Z
 602:	96 95       	lsr	r25
 604:	96 95       	lsr	r25
 606:	93 70       	andi	r25, 0x03	; 3
 608:	89 2f       	mov	r24, r25
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	92 2f       	mov	r25, r18
 61a:	97 7e       	andi	r25, 0xE7	; 231
 61c:	89 2b       	or	r24, r25
 61e:	91 81       	ldd	r25, Z+1	; 0x01
 620:	88 7f       	andi	r24, 0xF8	; 248
 622:	89 2b       	or	r24, r25
 624:	8e bd       	out	0x2e, r24	; 46
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	08 95       	ret
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	08 95       	ret

0000062e <ICU_Reset>:
 62e:	62 30       	cpi	r22, 0x02	; 2
 630:	70 f4       	brcc	.+28     	; 0x64e <ICU_Reset+0x20>
 632:	81 11       	cpse	r24, r1
 634:	0e c0       	rjmp	.+28     	; 0x652 <ICU_Reset+0x24>
 636:	1d bc       	out	0x2d, r1	; 45
 638:	1c bc       	out	0x2c, r1	; 44
 63a:	8e b5       	in	r24, 0x2e	; 46
 63c:	90 e4       	ldi	r25, 0x40	; 64
 63e:	69 9f       	mul	r22, r25
 640:	b0 01       	movw	r22, r0
 642:	11 24       	eor	r1, r1
 644:	8f 7b       	andi	r24, 0xBF	; 191
 646:	68 2b       	or	r22, r24
 648:	6e bd       	out	0x2e, r22	; 46
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	08 95       	ret
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	08 95       	ret
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	08 95       	ret

00000656 <ICU_GetICR1Registert>:
 656:	81 11       	cpse	r24, r1
 658:	07 c0       	rjmp	.+14     	; 0x668 <ICU_GetICR1Registert+0x12>
 65a:	86 b5       	in	r24, 0x26	; 38
 65c:	97 b5       	in	r25, 0x27	; 39
 65e:	fb 01       	movw	r30, r22
 660:	91 83       	std	Z+1, r25	; 0x01
 662:	80 83       	st	Z, r24
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	08 95       	ret
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	08 95       	ret

0000066c <ICU_SetTCNT1Registert>:

ERROR_STATE_t ICU_SetTCNT1Registert(uint8_t ICUNumber,uint16_t RegisterValue)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
 66c:	81 11       	cpse	r24, r1
 66e:	03 c0       	rjmp	.+6      	; 0x676 <ICU_SetTCNT1Registert+0xa>
	{
		#if  ICU1
			case ICU_1:
				TCNT1=RegisterValue;
 670:	7d bd       	out	0x2d, r23	; 45
 672:	6c bd       	out	0x2c, r22	; 44
				u8_ErrorState=ERROR_OK;
				break;
 674:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
 676:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return u8_ErrorState;	
}
 678:	08 95       	ret

0000067a <ICU_EnableInterrupt>:

ERROR_STATE_t ICU_EnableInterrupt(uint8_t ICUNumber,uint8_t ICUInterruptType)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
 67a:	81 11       	cpse	r24, r1
 67c:	0f c0       	rjmp	.+30     	; 0x69c <ICU_EnableInterrupt+0x22>
	{
		#if  ICU1
			case ICU_1:
				switch(ICUInterruptType)
 67e:	66 23       	and	r22, r22
 680:	19 f0       	breq	.+6      	; 0x688 <ICU_EnableInterrupt+0xe>
 682:	61 30       	cpi	r22, 0x01	; 1
 684:	31 f0       	breq	.+12     	; 0x692 <ICU_EnableInterrupt+0x18>
 686:	0c c0       	rjmp	.+24     	; 0x6a0 <ICU_EnableInterrupt+0x26>
				{
					case ICU1_OVERFLOW_INT:
						BIT_WRITE(TIMSK,TOIE1,BIT_HIGH);
 688:	89 b7       	in	r24, 0x39	; 57
 68a:	84 60       	ori	r24, 0x04	; 4
 68c:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
 68e:	80 e0       	ldi	r24, 0x00	; 0
						break;
 690:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_HIGH);
 692:	89 b7       	in	r24, 0x39	; 57
 694:	80 62       	ori	r24, 0x20	; 32
 696:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
 698:	80 e0       	ldi	r24, 0x00	; 0
						break;
 69a:	08 95       	ret
						break;
				}
				break;
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_HIGH);
						u8_ErrorState=ERROR_OK;
						break;
					default:
						u8_ErrorState=ERROR_NOK;
 6a0:	81 e0       	ldi	r24, 0x01	; 1
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
 6a2:	08 95       	ret

000006a4 <ICU_DisableInterrupt>:

ERROR_STATE_t ICU_DisableInterrupt(uint8_t ICUNumber,uint8_t ICUInterruptType)
{
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
 6a4:	81 11       	cpse	r24, r1
 6a6:	0f c0       	rjmp	.+30     	; 0x6c6 <ICU_DisableInterrupt+0x22>
	{
		#if  ICU1
			case ICU_1:
				switch(ICUInterruptType)
 6a8:	66 23       	and	r22, r22
 6aa:	19 f0       	breq	.+6      	; 0x6b2 <ICU_DisableInterrupt+0xe>
 6ac:	61 30       	cpi	r22, 0x01	; 1
 6ae:	31 f0       	breq	.+12     	; 0x6bc <ICU_DisableInterrupt+0x18>
 6b0:	0c c0       	rjmp	.+24     	; 0x6ca <ICU_DisableInterrupt+0x26>
				{
					case ICU1_OVERFLOW_INT:
						BIT_WRITE(TIMSK,TOIE1,BIT_LOW);
 6b2:	89 b7       	in	r24, 0x39	; 57
 6b4:	8b 7f       	andi	r24, 0xFB	; 251
 6b6:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
 6b8:	80 e0       	ldi	r24, 0x00	; 0
						break;
 6ba:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_LOW);
 6bc:	89 b7       	in	r24, 0x39	; 57
 6be:	8f 7d       	andi	r24, 0xDF	; 223
 6c0:	89 bf       	out	0x39, r24	; 57
						u8_ErrorState=ERROR_OK;
 6c2:	80 e0       	ldi	r24, 0x00	; 0
						break;
 6c4:	08 95       	ret
						break;
				}
				break;
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	08 95       	ret
					case ICU1_INPUTCAPTURE_INT:
						BIT_WRITE(TIMSK,TICIE1,BIT_LOW);
						u8_ErrorState=ERROR_OK;
						break;
					default:
						u8_ErrorState=ERROR_NOK;
 6ca:	81 e0       	ldi	r24, 0x01	; 1
		default:
			u8_ErrorState=ERROR_NOK;
			break;
	}
	return u8_ErrorState;
}
 6cc:	08 95       	ret

000006ce <ICU_SetCallback>:

ERROR_STATE_t ICU_SetCallback(uint8_t ICUNumber,uint8_t ICUInterruptType,Ptr_VoidFuncVoid_t Callback)
{
	uint8_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Callback)
 6ce:	41 15       	cp	r20, r1
 6d0:	51 05       	cpc	r21, r1
 6d2:	99 f0       	breq	.+38     	; 0x6fa <ICU_SetCallback+0x2c>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
 6d4:	81 11       	cpse	r24, r1
 6d6:	13 c0       	rjmp	.+38     	; 0x6fe <ICU_SetCallback+0x30>
		{
			#if  ICU1
				case ICU_1:
					switch(ICUInterruptType)
 6d8:	66 23       	and	r22, r22
 6da:	19 f0       	breq	.+6      	; 0x6e2 <ICU_SetCallback+0x14>
 6dc:	61 30       	cpi	r22, 0x01	; 1
 6de:	39 f0       	breq	.+14     	; 0x6ee <ICU_SetCallback+0x20>
 6e0:	10 c0       	rjmp	.+32     	; 0x702 <ICU_SetCallback+0x34>
					{
						case ICU1_OVERFLOW_INT:
							gptr_CallbackOverflow=Callback;
 6e2:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <gptr_CallbackOverflow+0x1>
 6e6:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <gptr_CallbackOverflow>
							u8_ErrorState=ERROR_OK;
 6ea:	80 e0       	ldi	r24, 0x00	; 0
							break;
 6ec:	08 95       	ret
						case ICU1_INPUTCAPTURE_INT:
							gptr_CallbackInputCapture=Callback;
 6ee:	50 93 85 00 	sts	0x0085, r21	; 0x800085 <gptr_CallbackInputCapture+0x1>
 6f2:	40 93 84 00 	sts	0x0084, r20	; 0x800084 <gptr_CallbackInputCapture>
							u8_ErrorState=ERROR_OK;
 6f6:	80 e0       	ldi	r24, 0x00	; 0
							break;
 6f8:	08 95       	ret
ERROR_STATE_t ICU_SetCallback(uint8_t ICUNumber,uint8_t ICUInterruptType,Ptr_VoidFuncVoid_t Callback)
{
	uint8_t u8_ErrorState = ERROR_OK;
	if(NULL_PTR==Callback)
	{
		u8_ErrorState=ERROR_NOK;
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	08 95       	ret
							break;
					}
					break;
			#endif
			default:
				u8_ErrorState=ERROR_NOK;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	08 95       	ret
						case ICU1_INPUTCAPTURE_INT:
							gptr_CallbackInputCapture=Callback;
							u8_ErrorState=ERROR_OK;
							break;
						default:
							u8_ErrorState=ERROR_NOK;
 702:	81 e0       	ldi	r24, 0x01	; 1
				u8_ErrorState=ERROR_NOK;
				break;
		}				
	}
	return u8_ErrorState;
}
 704:	08 95       	ret

00000706 <__vector_9>:

void __vector_9(void) __attribute__((signal)); //TIMER1_OVF_vect
void __vector_9(void) 
{
 706:	1f 92       	push	r1
 708:	0f 92       	push	r0
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	0f 92       	push	r0
 70e:	11 24       	eor	r1, r1
 710:	2f 93       	push	r18
 712:	3f 93       	push	r19
 714:	4f 93       	push	r20
 716:	5f 93       	push	r21
 718:	6f 93       	push	r22
 71a:	7f 93       	push	r23
 71c:	8f 93       	push	r24
 71e:	9f 93       	push	r25
 720:	af 93       	push	r26
 722:	bf 93       	push	r27
 724:	ef 93       	push	r30
 726:	ff 93       	push	r31
   gptr_CallbackOverflow();
 728:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <gptr_CallbackOverflow>
 72c:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <gptr_CallbackOverflow+0x1>
 730:	09 95       	icall
}
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	0f 90       	pop	r0
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	0f 90       	pop	r0
 750:	1f 90       	pop	r1
 752:	18 95       	reti

00000754 <__vector_6>:

void __vector_6(void) __attribute__((signal)); //TIMER1_CAPT_vect
void __vector_6(void) 
{
 754:	1f 92       	push	r1
 756:	0f 92       	push	r0
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	0f 92       	push	r0
 75c:	11 24       	eor	r1, r1
 75e:	2f 93       	push	r18
 760:	3f 93       	push	r19
 762:	4f 93       	push	r20
 764:	5f 93       	push	r21
 766:	6f 93       	push	r22
 768:	7f 93       	push	r23
 76a:	8f 93       	push	r24
 76c:	9f 93       	push	r25
 76e:	af 93       	push	r26
 770:	bf 93       	push	r27
 772:	ef 93       	push	r30
 774:	ff 93       	push	r31
   gptr_CallbackInputCapture();
 776:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <gptr_CallbackInputCapture>
 77a:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <gptr_CallbackInputCapture+0x1>
 77e:	09 95       	icall
}
 780:	ff 91       	pop	r31
 782:	ef 91       	pop	r30
 784:	bf 91       	pop	r27
 786:	af 91       	pop	r26
 788:	9f 91       	pop	r25
 78a:	8f 91       	pop	r24
 78c:	7f 91       	pop	r23
 78e:	6f 91       	pop	r22
 790:	5f 91       	pop	r21
 792:	4f 91       	pop	r20
 794:	3f 91       	pop	r19
 796:	2f 91       	pop	r18
 798:	0f 90       	pop	r0
 79a:	0f be       	out	0x3f, r0	; 63
 79c:	0f 90       	pop	r0
 79e:	1f 90       	pop	r1
 7a0:	18 95       	reti

000007a2 <__vector_4>:
#endif

#if OS_TIMER_2
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
 7a2:	1f 92       	push	r1
 7a4:	0f 92       	push	r0
 7a6:	0f b6       	in	r0, 0x3f	; 63
 7a8:	0f 92       	push	r0
 7aa:	11 24       	eor	r1, r1
 7ac:	2f 93       	push	r18
 7ae:	4f 93       	push	r20
 7b0:	5f 93       	push	r21
 7b2:	6f 93       	push	r22
 7b4:	7f 93       	push	r23
 7b6:	8f 93       	push	r24
 7b8:	9f 93       	push	r25
 7ba:	af 93       	push	r26
 7bc:	bf 93       	push	r27
 7be:	ef 93       	push	r30
 7c0:	ff 93       	push	r31
	static volatile uint32_t u32_ISRsCounter=ZERO;
	uint8_t u8_TaskCounter;
	u32_ISRsCounter++;
 7c2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <u32_ISRsCounter.1668>
 7c6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <u32_ISRsCounter.1668+0x1>
 7ca:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <u32_ISRsCounter.1668+0x2>
 7ce:	b0 91 89 00 	lds	r27, 0x0089	; 0x800089 <u32_ISRsCounter.1668+0x3>
 7d2:	01 96       	adiw	r24, 0x01	; 1
 7d4:	a1 1d       	adc	r26, r1
 7d6:	b1 1d       	adc	r27, r1
 7d8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u32_ISRsCounter.1668>
 7dc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <u32_ISRsCounter.1668+0x1>
 7e0:	a0 93 88 00 	sts	0x0088, r26	; 0x800088 <u32_ISRsCounter.1668+0x2>
 7e4:	b0 93 89 00 	sts	0x0089, r27	; 0x800089 <u32_ISRsCounter.1668+0x3>
	if(gu32_OS_TicksNumber==u32_ISRsCounter)
 7e8:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <gu32_OS_TicksNumber>
 7ec:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <gu32_OS_TicksNumber+0x1>
 7f0:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <gu32_OS_TicksNumber+0x2>
 7f4:	70 91 8d 00 	lds	r23, 0x008D	; 0x80008d <gu32_OS_TicksNumber+0x3>
 7f8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <u32_ISRsCounter.1668>
 7fc:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <u32_ISRsCounter.1668+0x1>
 800:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <u32_ISRsCounter.1668+0x2>
 804:	b0 91 89 00 	lds	r27, 0x0089	; 0x800089 <u32_ISRsCounter.1668+0x3>
 808:	48 17       	cp	r20, r24
 80a:	59 07       	cpc	r21, r25
 80c:	6a 07       	cpc	r22, r26
 80e:	7b 07       	cpc	r23, r27
 810:	b9 f5       	brne	.+110    	; 0x880 <__stack+0x21>
 812:	2b c0       	rjmp	.+86     	; 0x86a <__stack+0xb>
	{
		for(u8_TaskCounter=ZERO;u8_TaskCounter<OS_TASKS_NUMBER;u8_TaskCounter++)
		{
			if(NULL_PTR==gpstr_Task[u8_TaskCounter].ptr_OS_TaskCallback)
 814:	82 2f       	mov	r24, r18
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	fc 01       	movw	r30, r24
 81a:	ee 0f       	add	r30, r30
 81c:	ff 1f       	adc	r31, r31
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	8e 0f       	add	r24, r30
 82c:	9f 1f       	adc	r25, r31
 82e:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <gpstr_Task>
 832:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <gpstr_Task+0x1>
 836:	e8 0f       	add	r30, r24
 838:	f9 1f       	adc	r31, r25
 83a:	80 85       	ldd	r24, Z+8	; 0x08
 83c:	91 85       	ldd	r25, Z+9	; 0x09
 83e:	89 2b       	or	r24, r25
 840:	91 f0       	breq	.+36     	; 0x866 <__stack+0x7>
			{
				continue ;
			}
			else if((OS_TASKWAIT==gpstr_Task[u8_TaskCounter].u8_OS_TaskState)/*||(OS_TASKRUNING==gpstr_Task[u8_TaskCounter].u8_OS_TaskState)*/)
 842:	83 81       	ldd	r24, Z+3	; 0x03
 844:	82 30       	cpi	r24, 0x02	; 2
 846:	79 f4       	brne	.+30     	; 0x866 <__stack+0x7>
			{
				if(ZERO==gpstr_Task[u8_TaskCounter].u8_OS_TaskDelay)
 848:	81 81       	ldd	r24, Z+1	; 0x01
 84a:	81 11       	cpse	r24, r1
 84c:	0a c0       	rjmp	.+20     	; 0x862 <__stack+0x3>
				{
					gpstr_Task[u8_TaskCounter].u8_OS_TaskState=OS_TASKREADY;
 84e:	13 82       	std	Z+3, r1	; 0x03
					gu8_OS_ReadyTasksCounter++;
 850:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <gu8_OS_ReadyTasksCounter>
 854:	8f 5f       	subi	r24, 0xFF	; 255
 856:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <gu8_OS_ReadyTasksCounter>
					gpstr_Task[u8_TaskCounter].u8_OS_TaskDelay=gpstr_Task[u8_TaskCounter].u32_OS_TaskPeriodicity-1;
 85a:	84 81       	ldd	r24, Z+4	; 0x04
 85c:	81 50       	subi	r24, 0x01	; 1
 85e:	81 83       	std	Z+1, r24	; 0x01
 860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
				}
				else
				{
					gpstr_Task[u8_TaskCounter].u8_OS_TaskDelay--;
 862:	81 50       	subi	r24, 0x01	; 1
 864:	81 83       	std	Z+1, r24	; 0x01
	static volatile uint32_t u32_ISRsCounter=ZERO;
	uint8_t u8_TaskCounter;
	u32_ISRsCounter++;
	if(gu32_OS_TicksNumber==u32_ISRsCounter)
	{
		for(u8_TaskCounter=ZERO;u8_TaskCounter<OS_TASKS_NUMBER;u8_TaskCounter++)
 866:	2f 5f       	subi	r18, 0xFF	; 255
 868:	01 c0       	rjmp	.+2      	; 0x86c <__stack+0xd>
 86a:	20 e0       	ldi	r18, 0x00	; 0
 86c:	25 30       	cpi	r18, 0x05	; 5
 86e:	90 f2       	brcs	.-92     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
			else
			{
				/*Do Nothing*/
			}
		}
		u32_ISRsCounter=ZERO;
 870:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <u32_ISRsCounter.1668>
 874:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <u32_ISRsCounter.1668+0x1>
 878:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <u32_ISRsCounter.1668+0x2>
 87c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <u32_ISRsCounter.1668+0x3>
	}
	else
	{
		/*Do Nothing*/
	}   
}
 880:	ff 91       	pop	r31
 882:	ef 91       	pop	r30
 884:	bf 91       	pop	r27
 886:	af 91       	pop	r26
 888:	9f 91       	pop	r25
 88a:	8f 91       	pop	r24
 88c:	7f 91       	pop	r23
 88e:	6f 91       	pop	r22
 890:	5f 91       	pop	r21
 892:	4f 91       	pop	r20
 894:	2f 91       	pop	r18
 896:	0f 90       	pop	r0
 898:	0f be       	out	0x3f, r0	; 63
 89a:	0f 90       	pop	r0
 89c:	1f 90       	pop	r1
 89e:	18 95       	reti

000008a0 <__cmpsf2>:
 8a0:	0e 94 42 05 	call	0xa84	; 0xa84 <__fp_cmp>
 8a4:	08 f4       	brcc	.+2      	; 0x8a8 <__cmpsf2+0x8>
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	08 95       	ret

000008aa <__divsf3>:
 8aa:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__divsf3x>
 8ae:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_round>
 8b2:	0e 94 76 05 	call	0xaec	; 0xaec <__fp_pscB>
 8b6:	58 f0       	brcs	.+22     	; 0x8ce <__divsf3+0x24>
 8b8:	0e 94 6f 05 	call	0xade	; 0xade <__fp_pscA>
 8bc:	40 f0       	brcs	.+16     	; 0x8ce <__divsf3+0x24>
 8be:	29 f4       	brne	.+10     	; 0x8ca <__divsf3+0x20>
 8c0:	5f 3f       	cpi	r21, 0xFF	; 255
 8c2:	29 f0       	breq	.+10     	; 0x8ce <__divsf3+0x24>
 8c4:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_inf>
 8c8:	51 11       	cpse	r21, r1
 8ca:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_szero>
 8ce:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_nan>

000008d2 <__divsf3x>:
 8d2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__fp_split3>
 8d6:	68 f3       	brcs	.-38     	; 0x8b2 <__divsf3+0x8>

000008d8 <__divsf3_pse>:
 8d8:	99 23       	and	r25, r25
 8da:	b1 f3       	breq	.-20     	; 0x8c8 <__divsf3+0x1e>
 8dc:	55 23       	and	r21, r21
 8de:	91 f3       	breq	.-28     	; 0x8c4 <__divsf3+0x1a>
 8e0:	95 1b       	sub	r25, r21
 8e2:	55 0b       	sbc	r21, r21
 8e4:	bb 27       	eor	r27, r27
 8e6:	aa 27       	eor	r26, r26
 8e8:	62 17       	cp	r22, r18
 8ea:	73 07       	cpc	r23, r19
 8ec:	84 07       	cpc	r24, r20
 8ee:	38 f0       	brcs	.+14     	; 0x8fe <__divsf3_pse+0x26>
 8f0:	9f 5f       	subi	r25, 0xFF	; 255
 8f2:	5f 4f       	sbci	r21, 0xFF	; 255
 8f4:	22 0f       	add	r18, r18
 8f6:	33 1f       	adc	r19, r19
 8f8:	44 1f       	adc	r20, r20
 8fa:	aa 1f       	adc	r26, r26
 8fc:	a9 f3       	breq	.-22     	; 0x8e8 <__divsf3_pse+0x10>
 8fe:	35 d0       	rcall	.+106    	; 0x96a <__divsf3_pse+0x92>
 900:	0e 2e       	mov	r0, r30
 902:	3a f0       	brmi	.+14     	; 0x912 <__divsf3_pse+0x3a>
 904:	e0 e8       	ldi	r30, 0x80	; 128
 906:	32 d0       	rcall	.+100    	; 0x96c <__divsf3_pse+0x94>
 908:	91 50       	subi	r25, 0x01	; 1
 90a:	50 40       	sbci	r21, 0x00	; 0
 90c:	e6 95       	lsr	r30
 90e:	00 1c       	adc	r0, r0
 910:	ca f7       	brpl	.-14     	; 0x904 <__divsf3_pse+0x2c>
 912:	2b d0       	rcall	.+86     	; 0x96a <__divsf3_pse+0x92>
 914:	fe 2f       	mov	r31, r30
 916:	29 d0       	rcall	.+82     	; 0x96a <__divsf3_pse+0x92>
 918:	66 0f       	add	r22, r22
 91a:	77 1f       	adc	r23, r23
 91c:	88 1f       	adc	r24, r24
 91e:	bb 1f       	adc	r27, r27
 920:	26 17       	cp	r18, r22
 922:	37 07       	cpc	r19, r23
 924:	48 07       	cpc	r20, r24
 926:	ab 07       	cpc	r26, r27
 928:	b0 e8       	ldi	r27, 0x80	; 128
 92a:	09 f0       	breq	.+2      	; 0x92e <__divsf3_pse+0x56>
 92c:	bb 0b       	sbc	r27, r27
 92e:	80 2d       	mov	r24, r0
 930:	bf 01       	movw	r22, r30
 932:	ff 27       	eor	r31, r31
 934:	93 58       	subi	r25, 0x83	; 131
 936:	5f 4f       	sbci	r21, 0xFF	; 255
 938:	3a f0       	brmi	.+14     	; 0x948 <__divsf3_pse+0x70>
 93a:	9e 3f       	cpi	r25, 0xFE	; 254
 93c:	51 05       	cpc	r21, r1
 93e:	78 f0       	brcs	.+30     	; 0x95e <__divsf3_pse+0x86>
 940:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_inf>
 944:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_szero>
 948:	5f 3f       	cpi	r21, 0xFF	; 255
 94a:	e4 f3       	brlt	.-8      	; 0x944 <__divsf3_pse+0x6c>
 94c:	98 3e       	cpi	r25, 0xE8	; 232
 94e:	d4 f3       	brlt	.-12     	; 0x944 <__divsf3_pse+0x6c>
 950:	86 95       	lsr	r24
 952:	77 95       	ror	r23
 954:	67 95       	ror	r22
 956:	b7 95       	ror	r27
 958:	f7 95       	ror	r31
 95a:	9f 5f       	subi	r25, 0xFF	; 255
 95c:	c9 f7       	brne	.-14     	; 0x950 <__divsf3_pse+0x78>
 95e:	88 0f       	add	r24, r24
 960:	91 1d       	adc	r25, r1
 962:	96 95       	lsr	r25
 964:	87 95       	ror	r24
 966:	97 f9       	bld	r25, 7
 968:	08 95       	ret
 96a:	e1 e0       	ldi	r30, 0x01	; 1
 96c:	66 0f       	add	r22, r22
 96e:	77 1f       	adc	r23, r23
 970:	88 1f       	adc	r24, r24
 972:	bb 1f       	adc	r27, r27
 974:	62 17       	cp	r22, r18
 976:	73 07       	cpc	r23, r19
 978:	84 07       	cpc	r24, r20
 97a:	ba 07       	cpc	r27, r26
 97c:	20 f0       	brcs	.+8      	; 0x986 <__divsf3_pse+0xae>
 97e:	62 1b       	sub	r22, r18
 980:	73 0b       	sbc	r23, r19
 982:	84 0b       	sbc	r24, r20
 984:	ba 0b       	sbc	r27, r26
 986:	ee 1f       	adc	r30, r30
 988:	88 f7       	brcc	.-30     	; 0x96c <__divsf3_pse+0x94>
 98a:	e0 95       	com	r30
 98c:	08 95       	ret

0000098e <__floatunsisf>:
 98e:	e8 94       	clt
 990:	09 c0       	rjmp	.+18     	; 0x9a4 <__floatsisf+0x12>

00000992 <__floatsisf>:
 992:	97 fb       	bst	r25, 7
 994:	3e f4       	brtc	.+14     	; 0x9a4 <__floatsisf+0x12>
 996:	90 95       	com	r25
 998:	80 95       	com	r24
 99a:	70 95       	com	r23
 99c:	61 95       	neg	r22
 99e:	7f 4f       	sbci	r23, 0xFF	; 255
 9a0:	8f 4f       	sbci	r24, 0xFF	; 255
 9a2:	9f 4f       	sbci	r25, 0xFF	; 255
 9a4:	99 23       	and	r25, r25
 9a6:	a9 f0       	breq	.+42     	; 0x9d2 <__floatsisf+0x40>
 9a8:	f9 2f       	mov	r31, r25
 9aa:	96 e9       	ldi	r25, 0x96	; 150
 9ac:	bb 27       	eor	r27, r27
 9ae:	93 95       	inc	r25
 9b0:	f6 95       	lsr	r31
 9b2:	87 95       	ror	r24
 9b4:	77 95       	ror	r23
 9b6:	67 95       	ror	r22
 9b8:	b7 95       	ror	r27
 9ba:	f1 11       	cpse	r31, r1
 9bc:	f8 cf       	rjmp	.-16     	; 0x9ae <__floatsisf+0x1c>
 9be:	fa f4       	brpl	.+62     	; 0x9fe <__floatsisf+0x6c>
 9c0:	bb 0f       	add	r27, r27
 9c2:	11 f4       	brne	.+4      	; 0x9c8 <__floatsisf+0x36>
 9c4:	60 ff       	sbrs	r22, 0
 9c6:	1b c0       	rjmp	.+54     	; 0x9fe <__floatsisf+0x6c>
 9c8:	6f 5f       	subi	r22, 0xFF	; 255
 9ca:	7f 4f       	sbci	r23, 0xFF	; 255
 9cc:	8f 4f       	sbci	r24, 0xFF	; 255
 9ce:	9f 4f       	sbci	r25, 0xFF	; 255
 9d0:	16 c0       	rjmp	.+44     	; 0x9fe <__floatsisf+0x6c>
 9d2:	88 23       	and	r24, r24
 9d4:	11 f0       	breq	.+4      	; 0x9da <__floatsisf+0x48>
 9d6:	96 e9       	ldi	r25, 0x96	; 150
 9d8:	11 c0       	rjmp	.+34     	; 0x9fc <__floatsisf+0x6a>
 9da:	77 23       	and	r23, r23
 9dc:	21 f0       	breq	.+8      	; 0x9e6 <__floatsisf+0x54>
 9de:	9e e8       	ldi	r25, 0x8E	; 142
 9e0:	87 2f       	mov	r24, r23
 9e2:	76 2f       	mov	r23, r22
 9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__floatsisf+0x5e>
 9e6:	66 23       	and	r22, r22
 9e8:	71 f0       	breq	.+28     	; 0xa06 <__floatsisf+0x74>
 9ea:	96 e8       	ldi	r25, 0x86	; 134
 9ec:	86 2f       	mov	r24, r22
 9ee:	70 e0       	ldi	r23, 0x00	; 0
 9f0:	60 e0       	ldi	r22, 0x00	; 0
 9f2:	2a f0       	brmi	.+10     	; 0x9fe <__floatsisf+0x6c>
 9f4:	9a 95       	dec	r25
 9f6:	66 0f       	add	r22, r22
 9f8:	77 1f       	adc	r23, r23
 9fa:	88 1f       	adc	r24, r24
 9fc:	da f7       	brpl	.-10     	; 0x9f4 <__floatsisf+0x62>
 9fe:	88 0f       	add	r24, r24
 a00:	96 95       	lsr	r25
 a02:	87 95       	ror	r24
 a04:	97 f9       	bld	r25, 7
 a06:	08 95       	ret

00000a08 <__floatundisf>:
 a08:	e8 94       	clt

00000a0a <__fp_di2sf>:
 a0a:	f9 2f       	mov	r31, r25
 a0c:	96 eb       	ldi	r25, 0xB6	; 182
 a0e:	ff 23       	and	r31, r31
 a10:	81 f0       	breq	.+32     	; 0xa32 <__fp_di2sf+0x28>
 a12:	12 16       	cp	r1, r18
 a14:	13 06       	cpc	r1, r19
 a16:	14 06       	cpc	r1, r20
 a18:	44 0b       	sbc	r20, r20
 a1a:	93 95       	inc	r25
 a1c:	f6 95       	lsr	r31
 a1e:	87 95       	ror	r24
 a20:	77 95       	ror	r23
 a22:	67 95       	ror	r22
 a24:	57 95       	ror	r21
 a26:	40 40       	sbci	r20, 0x00	; 0
 a28:	ff 23       	and	r31, r31
 a2a:	b9 f7       	brne	.-18     	; 0xa1a <__fp_di2sf+0x10>
 a2c:	1b c0       	rjmp	.+54     	; 0xa64 <__fp_di2sf+0x5a>
 a2e:	99 27       	eor	r25, r25
 a30:	08 95       	ret
 a32:	88 23       	and	r24, r24
 a34:	51 f4       	brne	.+20     	; 0xa4a <__fp_di2sf+0x40>
 a36:	98 50       	subi	r25, 0x08	; 8
 a38:	d2 f7       	brpl	.-12     	; 0xa2e <__fp_di2sf+0x24>
 a3a:	87 2b       	or	r24, r23
 a3c:	76 2f       	mov	r23, r22
 a3e:	65 2f       	mov	r22, r21
 a40:	54 2f       	mov	r21, r20
 a42:	43 2f       	mov	r20, r19
 a44:	32 2f       	mov	r19, r18
 a46:	20 e0       	ldi	r18, 0x00	; 0
 a48:	b1 f3       	breq	.-20     	; 0xa36 <__fp_di2sf+0x2c>
 a4a:	12 16       	cp	r1, r18
 a4c:	13 06       	cpc	r1, r19
 a4e:	14 06       	cpc	r1, r20
 a50:	44 0b       	sbc	r20, r20
 a52:	88 23       	and	r24, r24
 a54:	3a f0       	brmi	.+14     	; 0xa64 <__fp_di2sf+0x5a>
 a56:	9a 95       	dec	r25
 a58:	44 0f       	add	r20, r20
 a5a:	55 1f       	adc	r21, r21
 a5c:	66 1f       	adc	r22, r22
 a5e:	77 1f       	adc	r23, r23
 a60:	88 1f       	adc	r24, r24
 a62:	ca f7       	brpl	.-14     	; 0xa56 <__fp_di2sf+0x4c>
 a64:	55 23       	and	r21, r21
 a66:	4a f4       	brpl	.+18     	; 0xa7a <__fp_di2sf+0x70>
 a68:	44 0f       	add	r20, r20
 a6a:	55 1f       	adc	r21, r21
 a6c:	11 f4       	brne	.+4      	; 0xa72 <__fp_di2sf+0x68>
 a6e:	60 ff       	sbrs	r22, 0
 a70:	04 c0       	rjmp	.+8      	; 0xa7a <__fp_di2sf+0x70>
 a72:	6f 5f       	subi	r22, 0xFF	; 255
 a74:	7f 4f       	sbci	r23, 0xFF	; 255
 a76:	8f 4f       	sbci	r24, 0xFF	; 255
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	88 0f       	add	r24, r24
 a7c:	96 95       	lsr	r25
 a7e:	87 95       	ror	r24
 a80:	97 f9       	bld	r25, 7
 a82:	08 95       	ret

00000a84 <__fp_cmp>:
 a84:	99 0f       	add	r25, r25
 a86:	00 08       	sbc	r0, r0
 a88:	55 0f       	add	r21, r21
 a8a:	aa 0b       	sbc	r26, r26
 a8c:	e0 e8       	ldi	r30, 0x80	; 128
 a8e:	fe ef       	ldi	r31, 0xFE	; 254
 a90:	16 16       	cp	r1, r22
 a92:	17 06       	cpc	r1, r23
 a94:	e8 07       	cpc	r30, r24
 a96:	f9 07       	cpc	r31, r25
 a98:	c0 f0       	brcs	.+48     	; 0xaca <__fp_cmp+0x46>
 a9a:	12 16       	cp	r1, r18
 a9c:	13 06       	cpc	r1, r19
 a9e:	e4 07       	cpc	r30, r20
 aa0:	f5 07       	cpc	r31, r21
 aa2:	98 f0       	brcs	.+38     	; 0xaca <__fp_cmp+0x46>
 aa4:	62 1b       	sub	r22, r18
 aa6:	73 0b       	sbc	r23, r19
 aa8:	84 0b       	sbc	r24, r20
 aaa:	95 0b       	sbc	r25, r21
 aac:	39 f4       	brne	.+14     	; 0xabc <__fp_cmp+0x38>
 aae:	0a 26       	eor	r0, r26
 ab0:	61 f0       	breq	.+24     	; 0xaca <__fp_cmp+0x46>
 ab2:	23 2b       	or	r18, r19
 ab4:	24 2b       	or	r18, r20
 ab6:	25 2b       	or	r18, r21
 ab8:	21 f4       	brne	.+8      	; 0xac2 <__fp_cmp+0x3e>
 aba:	08 95       	ret
 abc:	0a 26       	eor	r0, r26
 abe:	09 f4       	brne	.+2      	; 0xac2 <__fp_cmp+0x3e>
 ac0:	a1 40       	sbci	r26, 0x01	; 1
 ac2:	a6 95       	lsr	r26
 ac4:	8f ef       	ldi	r24, 0xFF	; 255
 ac6:	81 1d       	adc	r24, r1
 ac8:	81 1d       	adc	r24, r1
 aca:	08 95       	ret

00000acc <__fp_inf>:
 acc:	97 f9       	bld	r25, 7
 ace:	9f 67       	ori	r25, 0x7F	; 127
 ad0:	80 e8       	ldi	r24, 0x80	; 128
 ad2:	70 e0       	ldi	r23, 0x00	; 0
 ad4:	60 e0       	ldi	r22, 0x00	; 0
 ad6:	08 95       	ret

00000ad8 <__fp_nan>:
 ad8:	9f ef       	ldi	r25, 0xFF	; 255
 ada:	80 ec       	ldi	r24, 0xC0	; 192
 adc:	08 95       	ret

00000ade <__fp_pscA>:
 ade:	00 24       	eor	r0, r0
 ae0:	0a 94       	dec	r0
 ae2:	16 16       	cp	r1, r22
 ae4:	17 06       	cpc	r1, r23
 ae6:	18 06       	cpc	r1, r24
 ae8:	09 06       	cpc	r0, r25
 aea:	08 95       	ret

00000aec <__fp_pscB>:
 aec:	00 24       	eor	r0, r0
 aee:	0a 94       	dec	r0
 af0:	12 16       	cp	r1, r18
 af2:	13 06       	cpc	r1, r19
 af4:	14 06       	cpc	r1, r20
 af6:	05 06       	cpc	r0, r21
 af8:	08 95       	ret

00000afa <__fp_round>:
 afa:	09 2e       	mov	r0, r25
 afc:	03 94       	inc	r0
 afe:	00 0c       	add	r0, r0
 b00:	11 f4       	brne	.+4      	; 0xb06 <__fp_round+0xc>
 b02:	88 23       	and	r24, r24
 b04:	52 f0       	brmi	.+20     	; 0xb1a <__fp_round+0x20>
 b06:	bb 0f       	add	r27, r27
 b08:	40 f4       	brcc	.+16     	; 0xb1a <__fp_round+0x20>
 b0a:	bf 2b       	or	r27, r31
 b0c:	11 f4       	brne	.+4      	; 0xb12 <__fp_round+0x18>
 b0e:	60 ff       	sbrs	r22, 0
 b10:	04 c0       	rjmp	.+8      	; 0xb1a <__fp_round+0x20>
 b12:	6f 5f       	subi	r22, 0xFF	; 255
 b14:	7f 4f       	sbci	r23, 0xFF	; 255
 b16:	8f 4f       	sbci	r24, 0xFF	; 255
 b18:	9f 4f       	sbci	r25, 0xFF	; 255
 b1a:	08 95       	ret

00000b1c <__fp_split3>:
 b1c:	57 fd       	sbrc	r21, 7
 b1e:	90 58       	subi	r25, 0x80	; 128
 b20:	44 0f       	add	r20, r20
 b22:	55 1f       	adc	r21, r21
 b24:	59 f0       	breq	.+22     	; 0xb3c <__fp_splitA+0x10>
 b26:	5f 3f       	cpi	r21, 0xFF	; 255
 b28:	71 f0       	breq	.+28     	; 0xb46 <__fp_splitA+0x1a>
 b2a:	47 95       	ror	r20

00000b2c <__fp_splitA>:
 b2c:	88 0f       	add	r24, r24
 b2e:	97 fb       	bst	r25, 7
 b30:	99 1f       	adc	r25, r25
 b32:	61 f0       	breq	.+24     	; 0xb4c <__fp_splitA+0x20>
 b34:	9f 3f       	cpi	r25, 0xFF	; 255
 b36:	79 f0       	breq	.+30     	; 0xb56 <__fp_splitA+0x2a>
 b38:	87 95       	ror	r24
 b3a:	08 95       	ret
 b3c:	12 16       	cp	r1, r18
 b3e:	13 06       	cpc	r1, r19
 b40:	14 06       	cpc	r1, r20
 b42:	55 1f       	adc	r21, r21
 b44:	f2 cf       	rjmp	.-28     	; 0xb2a <__fp_split3+0xe>
 b46:	46 95       	lsr	r20
 b48:	f1 df       	rcall	.-30     	; 0xb2c <__fp_splitA>
 b4a:	08 c0       	rjmp	.+16     	; 0xb5c <__fp_splitA+0x30>
 b4c:	16 16       	cp	r1, r22
 b4e:	17 06       	cpc	r1, r23
 b50:	18 06       	cpc	r1, r24
 b52:	99 1f       	adc	r25, r25
 b54:	f1 cf       	rjmp	.-30     	; 0xb38 <__fp_splitA+0xc>
 b56:	86 95       	lsr	r24
 b58:	71 05       	cpc	r23, r1
 b5a:	61 05       	cpc	r22, r1
 b5c:	08 94       	sec
 b5e:	08 95       	ret

00000b60 <__fp_zero>:
 b60:	e8 94       	clt

00000b62 <__fp_szero>:
 b62:	bb 27       	eor	r27, r27
 b64:	66 27       	eor	r22, r22
 b66:	77 27       	eor	r23, r23
 b68:	cb 01       	movw	r24, r22
 b6a:	97 f9       	bld	r25, 7
 b6c:	08 95       	ret

00000b6e <__mulsf3>:
 b6e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__mulsf3x>
 b72:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_round>
 b76:	0e 94 6f 05 	call	0xade	; 0xade <__fp_pscA>
 b7a:	38 f0       	brcs	.+14     	; 0xb8a <__mulsf3+0x1c>
 b7c:	0e 94 76 05 	call	0xaec	; 0xaec <__fp_pscB>
 b80:	20 f0       	brcs	.+8      	; 0xb8a <__mulsf3+0x1c>
 b82:	95 23       	and	r25, r21
 b84:	11 f0       	breq	.+4      	; 0xb8a <__mulsf3+0x1c>
 b86:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_inf>
 b8a:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_nan>
 b8e:	11 24       	eor	r1, r1
 b90:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_szero>

00000b94 <__mulsf3x>:
 b94:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__fp_split3>
 b98:	70 f3       	brcs	.-36     	; 0xb76 <__mulsf3+0x8>

00000b9a <__mulsf3_pse>:
 b9a:	95 9f       	mul	r25, r21
 b9c:	c1 f3       	breq	.-16     	; 0xb8e <__mulsf3+0x20>
 b9e:	95 0f       	add	r25, r21
 ba0:	50 e0       	ldi	r21, 0x00	; 0
 ba2:	55 1f       	adc	r21, r21
 ba4:	62 9f       	mul	r22, r18
 ba6:	f0 01       	movw	r30, r0
 ba8:	72 9f       	mul	r23, r18
 baa:	bb 27       	eor	r27, r27
 bac:	f0 0d       	add	r31, r0
 bae:	b1 1d       	adc	r27, r1
 bb0:	63 9f       	mul	r22, r19
 bb2:	aa 27       	eor	r26, r26
 bb4:	f0 0d       	add	r31, r0
 bb6:	b1 1d       	adc	r27, r1
 bb8:	aa 1f       	adc	r26, r26
 bba:	64 9f       	mul	r22, r20
 bbc:	66 27       	eor	r22, r22
 bbe:	b0 0d       	add	r27, r0
 bc0:	a1 1d       	adc	r26, r1
 bc2:	66 1f       	adc	r22, r22
 bc4:	82 9f       	mul	r24, r18
 bc6:	22 27       	eor	r18, r18
 bc8:	b0 0d       	add	r27, r0
 bca:	a1 1d       	adc	r26, r1
 bcc:	62 1f       	adc	r22, r18
 bce:	73 9f       	mul	r23, r19
 bd0:	b0 0d       	add	r27, r0
 bd2:	a1 1d       	adc	r26, r1
 bd4:	62 1f       	adc	r22, r18
 bd6:	83 9f       	mul	r24, r19
 bd8:	a0 0d       	add	r26, r0
 bda:	61 1d       	adc	r22, r1
 bdc:	22 1f       	adc	r18, r18
 bde:	74 9f       	mul	r23, r20
 be0:	33 27       	eor	r19, r19
 be2:	a0 0d       	add	r26, r0
 be4:	61 1d       	adc	r22, r1
 be6:	23 1f       	adc	r18, r19
 be8:	84 9f       	mul	r24, r20
 bea:	60 0d       	add	r22, r0
 bec:	21 1d       	adc	r18, r1
 bee:	82 2f       	mov	r24, r18
 bf0:	76 2f       	mov	r23, r22
 bf2:	6a 2f       	mov	r22, r26
 bf4:	11 24       	eor	r1, r1
 bf6:	9f 57       	subi	r25, 0x7F	; 127
 bf8:	50 40       	sbci	r21, 0x00	; 0
 bfa:	9a f0       	brmi	.+38     	; 0xc22 <__mulsf3_pse+0x88>
 bfc:	f1 f0       	breq	.+60     	; 0xc3a <__mulsf3_pse+0xa0>
 bfe:	88 23       	and	r24, r24
 c00:	4a f0       	brmi	.+18     	; 0xc14 <__mulsf3_pse+0x7a>
 c02:	ee 0f       	add	r30, r30
 c04:	ff 1f       	adc	r31, r31
 c06:	bb 1f       	adc	r27, r27
 c08:	66 1f       	adc	r22, r22
 c0a:	77 1f       	adc	r23, r23
 c0c:	88 1f       	adc	r24, r24
 c0e:	91 50       	subi	r25, 0x01	; 1
 c10:	50 40       	sbci	r21, 0x00	; 0
 c12:	a9 f7       	brne	.-22     	; 0xbfe <__mulsf3_pse+0x64>
 c14:	9e 3f       	cpi	r25, 0xFE	; 254
 c16:	51 05       	cpc	r21, r1
 c18:	80 f0       	brcs	.+32     	; 0xc3a <__mulsf3_pse+0xa0>
 c1a:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_inf>
 c1e:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_szero>
 c22:	5f 3f       	cpi	r21, 0xFF	; 255
 c24:	e4 f3       	brlt	.-8      	; 0xc1e <__mulsf3_pse+0x84>
 c26:	98 3e       	cpi	r25, 0xE8	; 232
 c28:	d4 f3       	brlt	.-12     	; 0xc1e <__mulsf3_pse+0x84>
 c2a:	86 95       	lsr	r24
 c2c:	77 95       	ror	r23
 c2e:	67 95       	ror	r22
 c30:	b7 95       	ror	r27
 c32:	f7 95       	ror	r31
 c34:	e7 95       	ror	r30
 c36:	9f 5f       	subi	r25, 0xFF	; 255
 c38:	c1 f7       	brne	.-16     	; 0xc2a <__mulsf3_pse+0x90>
 c3a:	fe 2b       	or	r31, r30
 c3c:	88 0f       	add	r24, r24
 c3e:	91 1d       	adc	r25, r1
 c40:	96 95       	lsr	r25
 c42:	87 95       	ror	r24
 c44:	97 f9       	bld	r25, 7
 c46:	08 95       	ret

00000c48 <_exit>:
 c48:	f8 94       	cli

00000c4a <__stop_program>:
 c4a:	ff cf       	rjmp	.-2      	; 0xc4a <__stop_program>
