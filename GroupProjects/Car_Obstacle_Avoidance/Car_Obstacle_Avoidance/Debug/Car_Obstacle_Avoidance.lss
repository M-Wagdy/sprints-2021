
Car_Obstacle_Avoidance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  000022b8  0000234c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008000ae  008000ae  0000239a  2**0
                  ALLOC
  3 .stab         00002700  00000000  00000000  0000239c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007ce  00000000  00000000  00004a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00005270  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000283d  00000000  00000000  00005470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfd  00000000  00000000  00007cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001134  00000000  00000000  000089aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  00009ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d05  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c35  00000000  00000000  0000ada5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000c9da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 08 	call	0x104c	; 0x104c <main>
      8a:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <RC_Init>:
*/
ERROR_STATE_t RC_Init(void)
{
   ERROR_STATE_t LCD_Init_RetVal = OperationStarted;
   
   USONIC_Init();
      92:	0e 94 09 06 	call	0xc12	; 0xc12 <USONIC_Init>
   STEERING_Init();
      96:	0e 94 12 01 	call	0x224	; 0x224 <STEERING_Init>
   while(LCD_Init_RetVal != OperationSuccess)
   {
      LCD_Init_RetVal = LCD_Init();
      9a:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_Init>
{
   ERROR_STATE_t LCD_Init_RetVal = OperationStarted;
   
   USONIC_Init();
   STEERING_Init();
   while(LCD_Init_RetVal != OperationSuccess)
      9e:	88 23       	and	r24, r24
      a0:	e1 f7       	brne	.-8      	; 0x9a <RC_Init+0x8>
   {
      LCD_Init_RetVal = LCD_Init();
   }
   
   while(LCD_SendCommand(LCD_CURS_Position0) != OperationSuccess);
      a2:	80 e8       	ldi	r24, 0x80	; 128
      a4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
      a8:	88 23       	and	r24, r24
      aa:	d9 f7       	brne	.-10     	; 0xa2 <RC_Init+0x10>
   while(LCD_SendCommand(LCD_CLR) != OperationSuccess);
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
      b2:	88 23       	and	r24, r24
      b4:	d9 f7       	brne	.-10     	; 0xac <RC_Init+0x1a>
   LCD_SendString(gau8_DistanceMessage);
      b6:	80 e6       	ldi	r24, 0x60	; 96
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	0e 94 86 04 	call	0x90c	; 0x90c <LCD_SendString>
   while(LCD_SendCommand(LCD_CURS_LINE2) != OperationSuccess);
      be:	80 ec       	ldi	r24, 0xC0	; 192
      c0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
      c4:	88 23       	and	r24, r24
      c6:	d9 f7       	brne	.-10     	; 0xbe <RC_Init+0x2c>
   LCD_SendString(gau8_CarNameMessage);
      c8:	8b e6       	ldi	r24, 0x6B	; 107
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 86 04 	call	0x90c	; 0x90c <LCD_SendString>
   return ERROR_OK;
}
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	08 95       	ret

000000d4 <RC_Update>:
* @brief: This function Updates the Robot Car State.
*
* @return function error state.
*/
ERROR_STATE_t RC_Update(void)
{
      d4:	cf 92       	push	r12
      d6:	df 92       	push	r13
      d8:	ef 92       	push	r14
      da:	ff 92       	push	r15
   static uint8_t State = OperationStarted;
   static uint8_t u8_Counter = 0;
   static double64_t d64_distance = 0;
   ERROR_STATE_t USonic_State = OperationStarted;
   
   switch(State)
      dc:	80 91 7e 00 	lds	r24, 0x007E
      e0:	84 30       	cpi	r24, 0x04	; 4
      e2:	09 f4       	brne	.+2      	; 0xe6 <RC_Update+0x12>
      e4:	78 c0       	rjmp	.+240    	; 0x1d6 <RC_Update+0x102>
      e6:	85 30       	cpi	r24, 0x05	; 5
      e8:	38 f4       	brcc	.+14     	; 0xf8 <RC_Update+0x24>
      ea:	82 30       	cpi	r24, 0x02	; 2
      ec:	09 f4       	brne	.+2      	; 0xf0 <RC_Update+0x1c>
      ee:	44 c0       	rjmp	.+136    	; 0x178 <RC_Update+0xa4>
      f0:	83 30       	cpi	r24, 0x03	; 3
      f2:	09 f0       	breq	.+2      	; 0xf6 <RC_Update+0x22>
      f4:	91 c0       	rjmp	.+290    	; 0x218 <RC_Update+0x144>
      f6:	68 c0       	rjmp	.+208    	; 0x1c8 <RC_Update+0xf4>
      f8:	86 30       	cpi	r24, 0x06	; 6
      fa:	09 f4       	brne	.+2      	; 0xfe <RC_Update+0x2a>
      fc:	81 c0       	rjmp	.+258    	; 0x200 <RC_Update+0x12c>
      fe:	86 30       	cpi	r24, 0x06	; 6
     100:	08 f4       	brcc	.+2      	; 0x104 <RC_Update+0x30>
     102:	70 c0       	rjmp	.+224    	; 0x1e4 <RC_Update+0x110>
     104:	8f 3f       	cpi	r24, 0xFF	; 255
     106:	09 f0       	breq	.+2      	; 0x10a <RC_Update+0x36>
     108:	87 c0       	rjmp	.+270    	; 0x218 <RC_Update+0x144>
   {
      case OperationStarted:
         USonic_State = USONIC_GetDistance(&d64_distance);
     10a:	8e ea       	ldi	r24, 0xAE	; 174
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 25 06 	call	0xc4a	; 0xc4a <USONIC_GetDistance>
         if(USonic_State == ERROR_OK)
     112:	88 23       	and	r24, r24
     114:	09 f0       	breq	.+2      	; 0x118 <RC_Update+0x44>
     116:	80 c0       	rjmp	.+256    	; 0x218 <RC_Update+0x144>
         {
            u8_Counter++;
     118:	80 91 b2 00 	lds	r24, 0x00B2
     11c:	8f 5f       	subi	r24, 0xFF	; 255
     11e:	80 93 b2 00 	sts	0x00B2, r24
            if(LCD_REFRESH_DELAY <= u8_Counter)
     122:	8e 31       	cpi	r24, 0x1E	; 30
     124:	28 f1       	brcs	.+74     	; 0x170 <RC_Update+0x9c>
            {
               u8_Counter = 0;
     126:	10 92 b2 00 	sts	0x00B2, r1
               while(LCD_SendCommand(LCD_CURS_Position10) != OperationSuccess);
     12a:	8a e8       	ldi	r24, 0x8A	; 138
     12c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
     130:	88 23       	and	r24, r24
     132:	d9 f7       	brne	.-10     	; 0x12a <RC_Update+0x56>
               LCD_SendString(gau8_FreeSpaces);
     134:	89 e7       	ldi	r24, 0x79	; 121
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 86 04 	call	0x90c	; 0x90c <LCD_SendString>
               while(LCD_SendCommand(LCD_CURS_Position10) != OperationSuccess);
     13c:	8a e8       	ldi	r24, 0x8A	; 138
     13e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
     142:	88 23       	and	r24, r24
     144:	d9 f7       	brne	.-10     	; 0x13c <RC_Update+0x68>
               LCD_SendNumber((uint32_t)(d64_distance));
     146:	60 91 ae 00 	lds	r22, 0x00AE
     14a:	70 91 af 00 	lds	r23, 0x00AF
     14e:	80 91 b0 00 	lds	r24, 0x00B0
     152:	90 91 b1 00 	lds	r25, 0x00B1
     156:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__fixunssfsi>
     15a:	0e 94 98 04 	call	0x930	; 0x930 <LCD_SendNumber>
               while(TIM_DelayUs(TIMER_2, 500) != ERROR_OK);
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	44 ef       	ldi	r20, 0xF4	; 244
     162:	51 e0       	ldi	r21, 0x01	; 1
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <TIM_DelayUs>
     16c:	88 23       	and	r24, r24
     16e:	b9 f7       	brne	.-18     	; 0x15e <RC_Update+0x8a>
            }
            State = MOTOR_START_STATE;
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	80 93 7e 00 	sts	0x007E, r24
     176:	50 c0       	rjmp	.+160    	; 0x218 <RC_Update+0x144>
         }
         break;
      case MOTOR_START_STATE:
         if(d64_distance > DISTANCE_RANGE_UPPER_VALUE)
     178:	c0 90 ae 00 	lds	r12, 0x00AE
     17c:	d0 90 af 00 	lds	r13, 0x00AF
     180:	e0 90 b0 00 	lds	r14, 0x00B0
     184:	f0 90 b1 00 	lds	r15, 0x00B1
     188:	c7 01       	movw	r24, r14
     18a:	b6 01       	movw	r22, r12
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 e5       	ldi	r20, 0x50	; 80
     192:	52 e4       	ldi	r21, 0x42	; 66
     194:	0e 94 b2 10 	call	0x2164	; 0x2164 <__gesf2>
     198:	18 16       	cp	r1, r24
     19a:	24 f4       	brge	.+8      	; 0x1a4 <RC_Update+0xd0>
         {
            State = MOTOR_FORWARD_STATE;
     19c:	83 e0       	ldi	r24, 0x03	; 3
     19e:	80 93 7e 00 	sts	0x007E, r24
     1a2:	3a c0       	rjmp	.+116    	; 0x218 <RC_Update+0x144>
         }
         else if (d64_distance < DISTANCE_RANGE_LOWER_VALUE)
     1a4:	c7 01       	movw	r24, r14
     1a6:	b6 01       	movw	r22, r12
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	40 e4       	ldi	r20, 0x40	; 64
     1ae:	52 e4       	ldi	r21, 0x42	; 66
     1b0:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__cmpsf2>
     1b4:	88 23       	and	r24, r24
     1b6:	24 f4       	brge	.+8      	; 0x1c0 <RC_Update+0xec>
         {
            State = MOTOR_BACKWARD_STATE;
     1b8:	84 e0       	ldi	r24, 0x04	; 4
     1ba:	80 93 7e 00 	sts	0x007E, r24
     1be:	2c c0       	rjmp	.+88     	; 0x218 <RC_Update+0x144>
         }
         else
         {
            State = MOTOR_ROTATE_STATE;
     1c0:	85 e0       	ldi	r24, 0x05	; 5
     1c2:	80 93 7e 00 	sts	0x007E, r24
     1c6:	28 c0       	rjmp	.+80     	; 0x218 <RC_Update+0x144>
         }
         break;
      case MOTOR_FORWARD_STATE:
         STEERING_Move(STEERING_FORWARD);
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	0e 94 1a 01 	call	0x234	; 0x234 <STEERING_Move>
         State = OperationStarted;
     1ce:	8f ef       	ldi	r24, 0xFF	; 255
     1d0:	80 93 7e 00 	sts	0x007E, r24
         break;
     1d4:	21 c0       	rjmp	.+66     	; 0x218 <RC_Update+0x144>
      case MOTOR_BACKWARD_STATE:
         STEERING_Move(STEERING_BACKWARD);
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	0e 94 1a 01 	call	0x234	; 0x234 <STEERING_Move>
         State = OperationStarted;
     1dc:	8f ef       	ldi	r24, 0xFF	; 255
     1de:	80 93 7e 00 	sts	0x007E, r24
         break;
     1e2:	1a c0       	rjmp	.+52     	; 0x218 <RC_Update+0x144>
      case MOTOR_ROTATE_STATE:
         STEERING_Move(STEERING_RIGHT);
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	0e 94 1a 01 	call	0x234	; 0x234 <STEERING_Move>
         TIM_DelayMs(TIMER_2, 500);
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	44 ef       	ldi	r20, 0xF4	; 244
     1ee:	51 e0       	ldi	r21, 0x01	; 1
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <TIM_DelayMs>
         State = MOTOR_DELAY_STATE;
     1f8:	86 e0       	ldi	r24, 0x06	; 6
     1fa:	80 93 7e 00 	sts	0x007E, r24
         break;
     1fe:	0c c0       	rjmp	.+24     	; 0x218 <RC_Update+0x144>
      case MOTOR_DELAY_STATE:
         if(ERROR_OK == TIM_DelayMs(TIMER_2, 500))
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	44 ef       	ldi	r20, 0xF4	; 244
     204:	51 e0       	ldi	r21, 0x01	; 1
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <TIM_DelayMs>
     20e:	88 23       	and	r24, r24
     210:	19 f4       	brne	.+6      	; 0x218 <RC_Update+0x144>
         {
            State = OperationStarted;
     212:	8f ef       	ldi	r24, 0xFF	; 255
     214:	80 93 7e 00 	sts	0x007E, r24
      default:
         break;
   }
   
   return ERROR_OK;         
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	ff 90       	pop	r15
     21c:	ef 90       	pop	r14
     21e:	df 90       	pop	r13
     220:	cf 90       	pop	r12
     222:	08 95       	ret

00000224 <STEERING_Init>:
*/
ERROR_STATE_t STEERING_Init(void)
{
   ERROR_STATE_t MOTOR_ErrorState = ERROR_NOK;
   
   MOTOR_ErrorState = MOTOR_init();
     224:	0e 94 b7 04 	call	0x96e	; 0x96e <MOTOR_init>
   
   if( MOTOR_ErrorState != ERROR_OK )
   {
      return ERROR_NOK;
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	88 23       	and	r24, r24
     22c:	09 f4       	brne	.+2      	; 0x230 <STEERING_Init+0xc>
     22e:	90 e0       	ldi	r25, 0x00	; 0
   }
   
   return ERROR_OK;
}
     230:	89 2f       	mov	r24, r25
     232:	08 95       	ret

00000234 <STEERING_Move>:
* @param [in]  Direction -  Direction of Car to move.
*
* @return function error state.
*/
ERROR_STATE_t STEERING_Move(uint8_t Direction)
{
     234:	cf 93       	push	r28
   if(Direction >= INVALID_STEERING)
     236:	84 30       	cpi	r24, 0x04	; 4
     238:	08 f0       	brcs	.+2      	; 0x23c <STEERING_Move+0x8>
     23a:	43 c0       	rjmp	.+134    	; 0x2c2 <STEERING_Move+0x8e>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t MOTOR_ErrorState = ERROR_NOK;
   
   switch(Direction)
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	a1 f0       	breq	.+40     	; 0x268 <STEERING_Move+0x34>
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	28 f0       	brcs	.+10     	; 0x24e <STEERING_Move+0x1a>
     244:	82 30       	cpi	r24, 0x02	; 2
     246:	e9 f0       	breq	.+58     	; 0x282 <STEERING_Move+0x4e>
     248:	83 30       	cpi	r24, 0x03	; 3
     24a:	a9 f5       	brne	.+106    	; 0x2b6 <STEERING_Move+0x82>
     24c:	27 c0       	rjmp	.+78     	; 0x29c <STEERING_Move+0x68>
   {
      case STEERING_FORWARD:
         MOTOR_ErrorState = MOTOR_start(MOTOR1, MOTOR_SPEED_20, MOTOR_FORWARD);
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	64 e1       	ldi	r22, 0x14	; 20
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <MOTOR_start>
     258:	c8 2f       	mov	r28, r24
         MOTOR_ErrorState |= MOTOR_start(MOTOR2, MOTOR_SPEED_20, MOTOR_FORWARD);
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	64 e1       	ldi	r22, 0x14	; 20
     25e:	41 e0       	ldi	r20, 0x01	; 1
     260:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <MOTOR_start>
     264:	c8 2b       	or	r28, r24
         break;
     266:	28 c0       	rjmp	.+80     	; 0x2b8 <STEERING_Move+0x84>
      case STEERING_BACKWARD:
         MOTOR_ErrorState = MOTOR_start(MOTOR1, MOTOR_SPEED_20, MOTOR_BACKWARD);
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	64 e1       	ldi	r22, 0x14	; 20
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <MOTOR_start>
     272:	c8 2f       	mov	r28, r24
         MOTOR_ErrorState |= MOTOR_start(MOTOR2, MOTOR_SPEED_20, MOTOR_BACKWARD);
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	64 e1       	ldi	r22, 0x14	; 20
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <MOTOR_start>
     27e:	c8 2b       	or	r28, r24
         break;
     280:	1b c0       	rjmp	.+54     	; 0x2b8 <STEERING_Move+0x84>
      case STEERING_RIGHT:
         MOTOR_ErrorState = MOTOR_start(MOTOR1, MOTOR_SPEED_35, MOTOR_BACKWARD);
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	63 e2       	ldi	r22, 0x23	; 35
     286:	40 e0       	ldi	r20, 0x00	; 0
     288:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <MOTOR_start>
     28c:	c8 2f       	mov	r28, r24
         MOTOR_ErrorState |= MOTOR_start(MOTOR2, MOTOR_SPEED_35, MOTOR_FORWARD);
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	63 e2       	ldi	r22, 0x23	; 35
     292:	41 e0       	ldi	r20, 0x01	; 1
     294:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <MOTOR_start>
     298:	c8 2b       	or	r28, r24
         break;
     29a:	0e c0       	rjmp	.+28     	; 0x2b8 <STEERING_Move+0x84>
      case STEERING_LEFT:
         MOTOR_ErrorState = MOTOR_start(MOTOR1, MOTOR_SPEED_35, MOTOR_FORWARD);
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	63 e2       	ldi	r22, 0x23	; 35
     2a0:	41 e0       	ldi	r20, 0x01	; 1
     2a2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <MOTOR_start>
     2a6:	c8 2f       	mov	r28, r24
         MOTOR_ErrorState |= MOTOR_start(MOTOR2, MOTOR_SPEED_35, MOTOR_BACKWARD);
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	63 e2       	ldi	r22, 0x23	; 35
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <MOTOR_start>
     2b2:	c8 2b       	or	r28, r24
         break;
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <STEERING_Move+0x84>
   if(Direction >= INVALID_STEERING)
   {
      return ERROR_NOK;
   }
   
   ERROR_STATE_t MOTOR_ErrorState = ERROR_NOK;
     2b6:	c1 e0       	ldi	r28, 0x01	; 1
*/
ERROR_STATE_t STEERING_Move(uint8_t Direction)
{
   if(Direction >= INVALID_STEERING)
   {
      return ERROR_NOK;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	cc 23       	and	r28, r28
     2bc:	19 f4       	brne	.+6      	; 0x2c4 <STEERING_Move+0x90>
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <STEERING_Move+0x90>
     2c2:	81 e0       	ldi	r24, 0x01	; 1
   {
      return ERROR_NOK;
   }
   
   return ERROR_OK;
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <LCD_SendCommand>:

/*Externed global variables*/
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch(State)
     2d2:	80 91 7f 00 	lds	r24, 0x007F
     2d6:	83 30       	cpi	r24, 0x03	; 3
     2d8:	09 f4       	brne	.+2      	; 0x2dc <LCD_SendCommand+0x14>
     2da:	c1 c0       	rjmp	.+386    	; 0x45e <LCD_SendCommand+0x196>
     2dc:	84 30       	cpi	r24, 0x04	; 4
     2de:	38 f4       	brcc	.+14     	; 0x2ee <LCD_SendCommand+0x26>
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <LCD_SendCommand+0x1e>
     2e4:	60 c0       	rjmp	.+192    	; 0x3a6 <LCD_SendCommand+0xde>
     2e6:	82 30       	cpi	r24, 0x02	; 2
     2e8:	09 f0       	breq	.+2      	; 0x2ec <LCD_SendCommand+0x24>
     2ea:	dc c0       	rjmp	.+440    	; 0x4a4 <LCD_SendCommand+0x1dc>
     2ec:	72 c0       	rjmp	.+228    	; 0x3d2 <LCD_SendCommand+0x10a>
     2ee:	84 30       	cpi	r24, 0x04	; 4
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <LCD_SendCommand+0x2c>
     2f2:	ca c0       	rjmp	.+404    	; 0x488 <LCD_SendCommand+0x1c0>
     2f4:	8f 3f       	cpi	r24, 0xFF	; 255
     2f6:	09 f0       	breq	.+2      	; 0x2fa <LCD_SendCommand+0x32>
     2f8:	d5 c0       	rjmp	.+426    	; 0x4a4 <LCD_SendCommand+0x1dc>
	{
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     2fa:	d0 91 82 00 	lds	r29, 0x0082
     2fe:	8d 2f       	mov	r24, r29
     300:	60 91 83 00 	lds	r22, 0x0083
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     30a:	8d 2f       	mov	r24, r29
     30c:	60 91 84 00 	lds	r22, 0x0084
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>

		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(CMD, 4));
     316:	0c 2f       	mov	r16, r28
     318:	10 e0       	ldi	r17, 0x00	; 0
     31a:	a8 01       	movw	r20, r16
     31c:	40 71       	andi	r20, 0x10	; 16
     31e:	50 70       	andi	r21, 0x00	; 0
     320:	55 95       	asr	r21
     322:	47 95       	ror	r20
     324:	55 95       	asr	r21
     326:	47 95       	ror	r20
     328:	55 95       	asr	r21
     32a:	47 95       	ror	r20
     32c:	55 95       	asr	r21
     32e:	47 95       	ror	r20
     330:	8d 2f       	mov	r24, r29
     332:	60 91 89 00 	lds	r22, 0x0089
     336:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(CMD, 5));
     33a:	a8 01       	movw	r20, r16
     33c:	40 72       	andi	r20, 0x20	; 32
     33e:	50 70       	andi	r21, 0x00	; 0
     340:	55 95       	asr	r21
     342:	47 95       	ror	r20
     344:	55 95       	asr	r21
     346:	47 95       	ror	r20
     348:	55 95       	asr	r21
     34a:	47 95       	ror	r20
     34c:	55 95       	asr	r21
     34e:	47 95       	ror	r20
     350:	55 95       	asr	r21
     352:	47 95       	ror	r20
     354:	8d 2f       	mov	r24, r29
     356:	60 91 88 00 	lds	r22, 0x0088
     35a:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(CMD, 6));
     35e:	00 74       	andi	r16, 0x40	; 64
     360:	10 70       	andi	r17, 0x00	; 0
     362:	a8 01       	movw	r20, r16
     364:	04 2e       	mov	r0, r20
     366:	45 2f       	mov	r20, r21
     368:	00 0c       	add	r0, r0
     36a:	44 1f       	adc	r20, r20
     36c:	55 0b       	sbc	r21, r21
     36e:	00 0c       	add	r0, r0
     370:	44 1f       	adc	r20, r20
     372:	55 1f       	adc	r21, r21
     374:	8d 2f       	mov	r24, r29
     376:	60 91 87 00 	lds	r22, 0x0087
     37a:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(CMD, 7));
     37e:	4c 2f       	mov	r20, r28
     380:	44 1f       	adc	r20, r20
     382:	44 27       	eor	r20, r20
     384:	44 1f       	adc	r20, r20
     386:	8d 2f       	mov	r24, r29
     388:	60 91 86 00 	lds	r22, 0x0086
     38c:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>


		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     390:	8d 2f       	mov	r24, r29
     392:	60 91 85 00 	lds	r22, 0x0085
     396:	41 e0       	ldi	r20, 0x01	; 1
     398:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 7f 00 	sts	0x007F, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     3a2:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     3a4:	86 c0       	rjmp	.+268    	; 0x4b2 <LCD_SendCommand+0x1ea>
	case Sending_First_Nibble:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayUs(TIMER_2,3);//1
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	43 e0       	ldi	r20, 0x03	; 3
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <TIM_DelayUs>
		if(TimerRetVal == ERROR_OK)
     3b4:	88 23       	and	r24, r24
     3b6:	09 f0       	breq	.+2      	; 0x3ba <LCD_SendCommand+0xf2>
     3b8:	77 c0       	rjmp	.+238    	; 0x4a8 <LCD_SendCommand+0x1e0>
		{
			/*if timer delay function finished correctly pull enable pin low*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     3ba:	80 91 82 00 	lds	r24, 0x0082
     3be:	60 91 85 00 	lds	r22, 0x0085
     3c2:	40 e0       	ldi	r20, 0x00	; 0
     3c4:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
			/*update the function's state*/
			State = First_Nibble_Sent;
     3c8:	82 e0       	ldi	r24, 0x02	; 2
     3ca:	80 93 7f 00 	sts	0x007F, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	70 c0       	rjmp	.+224    	; 0x4b2 <LCD_SendCommand+0x1ea>
			State = First_Nibble_Sent;
		}
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs,PIN_LOW);
     3d2:	d0 91 82 00 	lds	r29, 0x0082
     3d6:	8d 2f       	mov	r24, r29
     3d8:	60 91 83 00 	lds	r22, 0x0083
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw,PIN_LOW);
     3e2:	8d 2f       	mov	r24, r29
     3e4:	60 91 84 00 	lds	r22, 0x0084
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>

		/*copying lower nibble of the command to the pins*/

		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4,READ_BIT(CMD,0));
     3ee:	4c 2f       	mov	r20, r28
     3f0:	41 70       	andi	r20, 0x01	; 1
     3f2:	8d 2f       	mov	r24, r29
     3f4:	60 91 89 00 	lds	r22, 0x0089
     3f8:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5,READ_BIT(CMD,1));
     3fc:	0c 2f       	mov	r16, r28
     3fe:	10 e0       	ldi	r17, 0x00	; 0
     400:	a8 01       	movw	r20, r16
     402:	42 70       	andi	r20, 0x02	; 2
     404:	50 70       	andi	r21, 0x00	; 0
     406:	55 95       	asr	r21
     408:	47 95       	ror	r20
     40a:	8d 2f       	mov	r24, r29
     40c:	60 91 88 00 	lds	r22, 0x0088
     410:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6,READ_BIT(CMD,2));
     414:	a8 01       	movw	r20, r16
     416:	44 70       	andi	r20, 0x04	; 4
     418:	50 70       	andi	r21, 0x00	; 0
     41a:	55 95       	asr	r21
     41c:	47 95       	ror	r20
     41e:	55 95       	asr	r21
     420:	47 95       	ror	r20
     422:	8d 2f       	mov	r24, r29
     424:	60 91 87 00 	lds	r22, 0x0087
     428:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,3));
     42c:	08 70       	andi	r16, 0x08	; 8
     42e:	10 70       	andi	r17, 0x00	; 0
     430:	a8 01       	movw	r20, r16
     432:	55 95       	asr	r21
     434:	47 95       	ror	r20
     436:	55 95       	asr	r21
     438:	47 95       	ror	r20
     43a:	55 95       	asr	r21
     43c:	47 95       	ror	r20
     43e:	8d 2f       	mov	r24, r29
     440:	60 91 86 00 	lds	r22, 0x0086
     444:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
     448:	8d 2f       	mov	r24, r29
     44a:	60 91 85 00 	lds	r22, 0x0085
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	80 93 7f 00 	sts	0x007F, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     45a:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7,READ_BIT(CMD,3));
		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     45c:	2a c0       	rjmp	.+84     	; 0x4b2 <LCD_SendCommand+0x1ea>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayUs(TIMER_2,3);//1
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	43 e0       	ldi	r20, 0x03	; 3
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <TIM_DelayUs>
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     46c:	88 23       	and	r24, r24
     46e:	f1 f4       	brne	.+60     	; 0x4ac <LCD_SendCommand+0x1e4>
		{
			/*if timer delay function finished correctly pull enable pin low*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port,gastr_LCD_Config[LCD_Channel_0].u8_LCD_En,PIN_LOW);
     470:	80 91 82 00 	lds	r24, 0x0082
     474:	60 91 85 00 	lds	r22, 0x0085
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
			/*reset the function's state*/
			State = Second_Nibble_Sent;
     47e:	84 e0       	ldi	r24, 0x04	; 4
     480:	80 93 7f 00 	sts	0x007F, r24
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	15 c0       	rjmp	.+42     	; 0x4b2 <LCD_SendCommand+0x1ea>
			State = Second_Nibble_Sent;
		}
		break;
	case Second_Nibble_Sent:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayMs(TIMER_2,5);//2
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	45 e0       	ldi	r20, 0x05	; 5
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <TIM_DelayMs>
		if(TimerRetVal == ((uint8_t)ERROR_OK))
     496:	88 23       	and	r24, r24
     498:	59 f4       	brne	.+22     	; 0x4b0 <LCD_SendCommand+0x1e8>
		{
			/*reset the function's state*/
			State = OperationStarted;
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	80 93 7f 00 	sts	0x007F, r24
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	07 c0       	rjmp	.+14     	; 0x4b2 <LCD_SendCommand+0x1ea>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <LCD_SendCommand+0x1ea>
extern const STR_LCD_config_t gastr_LCD_Config[LCD_NUMBER];

ERROR_STATE_t LCD_SendCommand(uint8_t CMD)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     4a8:	8f ef       	ldi	r24, 0xFF	; 255
     4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <LCD_SendCommand+0x1ea>
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <LCD_SendCommand+0x1ea>
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
	default:
		ErrRetVal = OperationFail;
	}
	/*return from function*/
return ErrRetVal;
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <LCD_SendData>:
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	c8 2f       	mov	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	switch (State) {
     4c6:	80 91 80 00 	lds	r24, 0x0080
     4ca:	83 30       	cpi	r24, 0x03	; 3
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <LCD_SendData+0x14>
     4ce:	c1 c0       	rjmp	.+386    	; 0x652 <LCD_SendData+0x196>
     4d0:	84 30       	cpi	r24, 0x04	; 4
     4d2:	38 f4       	brcc	.+14     	; 0x4e2 <LCD_SendData+0x26>
     4d4:	81 30       	cpi	r24, 0x01	; 1
     4d6:	09 f4       	brne	.+2      	; 0x4da <LCD_SendData+0x1e>
     4d8:	60 c0       	rjmp	.+192    	; 0x59a <LCD_SendData+0xde>
     4da:	82 30       	cpi	r24, 0x02	; 2
     4dc:	09 f0       	breq	.+2      	; 0x4e0 <LCD_SendData+0x24>
     4de:	db c0       	rjmp	.+438    	; 0x696 <LCD_SendData+0x1da>
     4e0:	72 c0       	rjmp	.+228    	; 0x5c6 <LCD_SendData+0x10a>
     4e2:	84 30       	cpi	r24, 0x04	; 4
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <LCD_SendData+0x2c>
     4e6:	ca c0       	rjmp	.+404    	; 0x67c <LCD_SendData+0x1c0>
     4e8:	8f 3f       	cpi	r24, 0xFF	; 255
     4ea:	09 f0       	breq	.+2      	; 0x4ee <LCD_SendData+0x32>
     4ec:	d4 c0       	rjmp	.+424    	; 0x696 <LCD_SendData+0x1da>
	case OperationStarted:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     4ee:	d0 91 82 00 	lds	r29, 0x0082
     4f2:	8d 2f       	mov	r24, r29
     4f4:	60 91 83 00 	lds	r22, 0x0083
     4f8:	41 e0       	ldi	r20, 0x01	; 1
     4fa:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     4fe:	8d 2f       	mov	r24, r29
     500:	60 91 84 00 	lds	r22, 0x0084
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		/*copying upper nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, 7));
     50a:	4c 2f       	mov	r20, r28
     50c:	44 1f       	adc	r20, r20
     50e:	44 27       	eor	r20, r20
     510:	44 1f       	adc	r20, r20
     512:	8d 2f       	mov	r24, r29
     514:	60 91 86 00 	lds	r22, 0x0086
     518:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, 6));
     51c:	0c 2f       	mov	r16, r28
     51e:	10 e0       	ldi	r17, 0x00	; 0
     520:	a8 01       	movw	r20, r16
     522:	40 74       	andi	r20, 0x40	; 64
     524:	50 70       	andi	r21, 0x00	; 0
     526:	04 2e       	mov	r0, r20
     528:	45 2f       	mov	r20, r21
     52a:	00 0c       	add	r0, r0
     52c:	44 1f       	adc	r20, r20
     52e:	55 0b       	sbc	r21, r21
     530:	00 0c       	add	r0, r0
     532:	44 1f       	adc	r20, r20
     534:	55 1f       	adc	r21, r21
     536:	8d 2f       	mov	r24, r29
     538:	60 91 87 00 	lds	r22, 0x0087
     53c:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, 5));
     540:	a8 01       	movw	r20, r16
     542:	40 72       	andi	r20, 0x20	; 32
     544:	50 70       	andi	r21, 0x00	; 0
     546:	55 95       	asr	r21
     548:	47 95       	ror	r20
     54a:	55 95       	asr	r21
     54c:	47 95       	ror	r20
     54e:	55 95       	asr	r21
     550:	47 95       	ror	r20
     552:	55 95       	asr	r21
     554:	47 95       	ror	r20
     556:	55 95       	asr	r21
     558:	47 95       	ror	r20
     55a:	8d 2f       	mov	r24, r29
     55c:	60 91 88 00 	lds	r22, 0x0088
     560:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, 4));
     564:	00 71       	andi	r16, 0x10	; 16
     566:	10 70       	andi	r17, 0x00	; 0
     568:	a8 01       	movw	r20, r16
     56a:	55 95       	asr	r21
     56c:	47 95       	ror	r20
     56e:	55 95       	asr	r21
     570:	47 95       	ror	r20
     572:	55 95       	asr	r21
     574:	47 95       	ror	r20
     576:	55 95       	asr	r21
     578:	47 95       	ror	r20
     57a:	8d 2f       	mov	r24, r29
     57c:	60 91 89 00 	lds	r22, 0x0089
     580:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     584:	8d 2f       	mov	r24, r29
     586:	60 91 85 00 	lds	r22, 0x0085
     58a:	41 e0       	ldi	r20, 0x01	; 1
     58c:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		/*set status of the function*/
		State = Sending_First_Nibble;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	80 93 80 00 	sts	0x0080, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     596:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_First_Nibble;
		break;
     598:	85 c0       	rjmp	.+266    	; 0x6a4 <LCD_SendData+0x1e8>
	case Sending_First_Nibble:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayUs(TIMER_2, 3);//1
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	43 e0       	ldi	r20, 0x03	; 3
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <TIM_DelayUs>
		if (TimerRetVal == ERROR_OK) {
     5a8:	88 23       	and	r24, r24
     5aa:	09 f0       	breq	.+2      	; 0x5ae <LCD_SendData+0xf2>
     5ac:	76 c0       	rjmp	.+236    	; 0x69a <LCD_SendData+0x1de>
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     5ae:	80 91 82 00 	lds	r24, 0x0082
     5b2:	60 91 85 00 	lds	r22, 0x0085
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
			/*update the function's state*/
			State = First_Nibble_Sent;
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	80 93 80 00 	sts	0x0080, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	6f c0       	rjmp	.+222    	; 0x6a4 <LCD_SendData+0x1e8>
			State = First_Nibble_Sent;
		}
		break;
	case First_Nibble_Sent:
		/*sending control signals with configurations of selection of control reg. and write process*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_HIGH);
     5c6:	d0 91 82 00 	lds	r29, 0x0082
     5ca:	8d 2f       	mov	r24, r29
     5cc:	60 91 83 00 	lds	r22, 0x0083
     5d0:	41 e0       	ldi	r20, 0x01	; 1
     5d2:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     5d6:	8d 2f       	mov	r24, r29
     5d8:	60 91 84 00 	lds	r22, 0x0084
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		/*copying lower nibble of the command to the pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, READ_BIT(Character, 3));
     5e2:	0c 2f       	mov	r16, r28
     5e4:	10 e0       	ldi	r17, 0x00	; 0
     5e6:	a8 01       	movw	r20, r16
     5e8:	48 70       	andi	r20, 0x08	; 8
     5ea:	50 70       	andi	r21, 0x00	; 0
     5ec:	55 95       	asr	r21
     5ee:	47 95       	ror	r20
     5f0:	55 95       	asr	r21
     5f2:	47 95       	ror	r20
     5f4:	55 95       	asr	r21
     5f6:	47 95       	ror	r20
     5f8:	8d 2f       	mov	r24, r29
     5fa:	60 91 86 00 	lds	r22, 0x0086
     5fe:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, READ_BIT(Character, 2));
     602:	a8 01       	movw	r20, r16
     604:	44 70       	andi	r20, 0x04	; 4
     606:	50 70       	andi	r21, 0x00	; 0
     608:	55 95       	asr	r21
     60a:	47 95       	ror	r20
     60c:	55 95       	asr	r21
     60e:	47 95       	ror	r20
     610:	8d 2f       	mov	r24, r29
     612:	60 91 87 00 	lds	r22, 0x0087
     616:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, READ_BIT(Character, 1));
     61a:	02 70       	andi	r16, 0x02	; 2
     61c:	10 70       	andi	r17, 0x00	; 0
     61e:	a8 01       	movw	r20, r16
     620:	55 95       	asr	r21
     622:	47 95       	ror	r20
     624:	8d 2f       	mov	r24, r29
     626:	60 91 88 00 	lds	r22, 0x0088
     62a:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, READ_BIT(Character, 0));
     62e:	4c 2f       	mov	r20, r28
     630:	41 70       	andi	r20, 0x01	; 1
     632:	8d 2f       	mov	r24, r29
     634:	60 91 89 00 	lds	r22, 0x0089
     638:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
     63c:	8d 2f       	mov	r24, r29
     63e:	60 91 85 00 	lds	r22, 0x0085
     642:	41 e0       	ldi	r20, 0x01	; 1
     644:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		/*set status of the function*/
		State = Sending_Second_Nibble;
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	80 93 80 00 	sts	0x0080, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     64e:	8f ef       	ldi	r24, 0xFF	; 255

		/*writing data to the register by pulling the enable pin high for 1 Us*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_HIGH);
		/*set status of the function*/
		State = Sending_Second_Nibble;
		break;
     650:	29 c0       	rjmp	.+82     	; 0x6a4 <LCD_SendData+0x1e8>
	case Sending_Second_Nibble:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayUs(TIMER_2, 3);//1
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	43 e0       	ldi	r20, 0x03	; 3
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <TIM_DelayUs>
		if (TimerRetVal == ((uint8_t) ERROR_OK )) {
     660:	88 23       	and	r24, r24
     662:	e9 f4       	brne	.+58     	; 0x69e <LCD_SendData+0x1e2>
			/*if timer delay function finished correctly pull enable pin low*/
			DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     664:	80 91 82 00 	lds	r24, 0x0082
     668:	60 91 85 00 	lds	r22, 0x0085
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
			/*set the function's state*/
			State = Second_Nibble_Sent;
     672:	84 e0       	ldi	r24, 0x04	; 4
     674:	80 93 80 00 	sts	0x0080, r24
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	14 c0       	rjmp	.+40     	; 0x6a4 <LCD_SendData+0x1e8>
			State = Second_Nibble_Sent;
		}
		break;
	case Second_Nibble_Sent:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayMs(TIMER_2, 0);
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	40 e0       	ldi	r20, 0x00	; 0
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	ba 01       	movw	r22, r20
     684:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <TIM_DelayMs>
		if (TimerRetVal == ((uint8_t) ERROR_OK )) {
     688:	88 23       	and	r24, r24
     68a:	59 f4       	brne	.+22     	; 0x6a2 <LCD_SendData+0x1e6>
			/*reset the function's state*/
			State = OperationStarted;
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	80 93 80 00 	sts	0x0080, r24
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	07 c0       	rjmp	.+14     	; 0x6a4 <LCD_SendData+0x1e8>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	05 c0       	rjmp	.+10     	; 0x6a4 <LCD_SendData+0x1e8>
return ErrRetVal;
}
ERROR_STATE_t LCD_SendData(uint8_t Character)
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     69a:	8f ef       	ldi	r24, 0xFF	; 255
     69c:	03 c0       	rjmp	.+6      	; 0x6a4 <LCD_SendData+0x1e8>
     69e:	8f ef       	ldi	r24, 0xFF	; 255
     6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <LCD_SendData+0x1e8>
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
		ErrRetVal = OperationFail;
	}
	/*return from function*/
	return ErrRetVal;

}
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	08 95       	ret

000006ae <LCD_Init>:
ERROR_STATE_t LCD_Init()
{
     6ae:	cf 92       	push	r12
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
	/*setting the functions state*/
	uint8_t static State = OperationStarted;
	/*declaring a variable for the timer return*/
	uint8_t TimerRetVal = 1;
	uint8_t LCD_SendCommandRetVal = OperationStarted;
	switch (State) {
     6be:	80 91 81 00 	lds	r24, 0x0081
     6c2:	8a 30       	cpi	r24, 0x0A	; 10
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <LCD_Init+0x1a>
     6c6:	b5 c0       	rjmp	.+362    	; 0x832 <LCD_Init+0x184>
     6c8:	8b 30       	cpi	r24, 0x0B	; 11
     6ca:	98 f4       	brcc	.+38     	; 0x6f2 <LCD_Init+0x44>
     6cc:	87 30       	cpi	r24, 0x07	; 7
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <LCD_Init+0x24>
     6d0:	e5 c0       	rjmp	.+458    	; 0x89c <__stack+0x3d>
     6d2:	88 30       	cpi	r24, 0x08	; 8
     6d4:	38 f4       	brcc	.+14     	; 0x6e4 <LCD_Init+0x36>
     6d6:	85 30       	cpi	r24, 0x05	; 5
     6d8:	09 f4       	brne	.+2      	; 0x6dc <LCD_Init+0x2e>
     6da:	7b c0       	rjmp	.+246    	; 0x7d2 <LCD_Init+0x124>
     6dc:	86 30       	cpi	r24, 0x06	; 6
     6de:	09 f0       	breq	.+2      	; 0x6e2 <LCD_Init+0x34>
     6e0:	f5 c0       	rjmp	.+490    	; 0x8cc <__stack+0x6d>
     6e2:	86 c0       	rjmp	.+268    	; 0x7f0 <LCD_Init+0x142>
     6e4:	88 30       	cpi	r24, 0x08	; 8
     6e6:	09 f4       	brne	.+2      	; 0x6ea <LCD_Init+0x3c>
     6e8:	8e c0       	rjmp	.+284    	; 0x806 <LCD_Init+0x158>
     6ea:	89 30       	cpi	r24, 0x09	; 9
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <LCD_Init+0x42>
     6ee:	ee c0       	rjmp	.+476    	; 0x8cc <__stack+0x6d>
     6f0:	95 c0       	rjmp	.+298    	; 0x81c <LCD_Init+0x16e>
     6f2:	8d 30       	cpi	r24, 0x0D	; 13
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <LCD_Init+0x4a>
     6f6:	be c0       	rjmp	.+380    	; 0x874 <__stack+0x15>
     6f8:	8e 30       	cpi	r24, 0x0E	; 14
     6fa:	38 f4       	brcc	.+14     	; 0x70a <LCD_Init+0x5c>
     6fc:	8b 30       	cpi	r24, 0x0B	; 11
     6fe:	09 f4       	brne	.+2      	; 0x702 <LCD_Init+0x54>
     700:	a3 c0       	rjmp	.+326    	; 0x848 <LCD_Init+0x19a>
     702:	8c 30       	cpi	r24, 0x0C	; 12
     704:	09 f0       	breq	.+2      	; 0x708 <LCD_Init+0x5a>
     706:	e2 c0       	rjmp	.+452    	; 0x8cc <__stack+0x6d>
     708:	aa c0       	rjmp	.+340    	; 0x85e <LCD_Init+0x1b0>
     70a:	8f 30       	cpi	r24, 0x0F	; 15
     70c:	09 f4       	brne	.+2      	; 0x710 <LCD_Init+0x62>
     70e:	d4 c0       	rjmp	.+424    	; 0x8b8 <__stack+0x59>
     710:	8f 30       	cpi	r24, 0x0F	; 15
     712:	08 f4       	brcc	.+2      	; 0x716 <LCD_Init+0x68>
     714:	b9 c0       	rjmp	.+370    	; 0x888 <__stack+0x29>
     716:	8f 3f       	cpi	r24, 0xFF	; 255
     718:	09 f0       	breq	.+2      	; 0x71c <LCD_Init+0x6e>
     71a:	d8 c0       	rjmp	.+432    	; 0x8cc <__stack+0x6d>
	case OperationStarted:
		/*Dio Initialize for the*/
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_OUTPUT);
     71c:	c0 91 82 00 	lds	r28, 0x0082
     720:	e0 90 86 00 	lds	r14, 0x0086
     724:	8c 2f       	mov	r24, r28
     726:	6e 2d       	mov	r22, r14
     728:	41 e0       	ldi	r20, 0x01	; 1
     72a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_OUTPUT);
     72e:	f0 90 87 00 	lds	r15, 0x0087
     732:	8c 2f       	mov	r24, r28
     734:	6f 2d       	mov	r22, r15
     736:	41 e0       	ldi	r20, 0x01	; 1
     738:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_OUTPUT);
     73c:	00 91 88 00 	lds	r16, 0x0088
     740:	8c 2f       	mov	r24, r28
     742:	60 2f       	mov	r22, r16
     744:	41 e0       	ldi	r20, 0x01	; 1
     746:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_OUTPUT);
     74a:	10 91 89 00 	lds	r17, 0x0089
     74e:	8c 2f       	mov	r24, r28
     750:	61 2f       	mov	r22, r17
     752:	41 e0       	ldi	r20, 0x01	; 1
     754:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_OUTPUT);
     758:	d0 91 83 00 	lds	r29, 0x0083
     75c:	8c 2f       	mov	r24, r28
     75e:	6d 2f       	mov	r22, r29
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_OUTPUT);
     766:	d0 90 84 00 	lds	r13, 0x0084
     76a:	8c 2f       	mov	r24, r28
     76c:	6d 2d       	mov	r22, r13
     76e:	41 e0       	ldi	r20, 0x01	; 1
     770:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
		DIO_SetPinDirection(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_OUTPUT);
     774:	c0 90 85 00 	lds	r12, 0x0085
     778:	8c 2f       	mov	r24, r28
     77a:	6c 2d       	mov	r22, r12
     77c:	41 e0       	ldi	r20, 0x01	; 1
     77e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
		/*setting initial value for LCD Pins*/
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D7, PIN_LOW);
     782:	8c 2f       	mov	r24, r28
     784:	6e 2d       	mov	r22, r14
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D6, PIN_LOW);
     78c:	8c 2f       	mov	r24, r28
     78e:	6f 2d       	mov	r22, r15
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D5, PIN_LOW);
     796:	8c 2f       	mov	r24, r28
     798:	60 2f       	mov	r22, r16
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_D4, PIN_LOW);
     7a0:	8c 2f       	mov	r24, r28
     7a2:	61 2f       	mov	r22, r17
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
     7aa:	8c 2f       	mov	r24, r28
     7ac:	6d 2f       	mov	r22, r29
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
     7b4:	8c 2f       	mov	r24, r28
     7b6:	6d 2d       	mov	r22, r13
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
     7be:	8c 2f       	mov	r24, r28
     7c0:	6c 2d       	mov	r22, r12
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
		/*set status of the function*/
		State = LCD_Pin_Initializing;
     7c8:	85 e0       	ldi	r24, 0x05	; 5
     7ca:	80 93 81 00 	sts	0x0081, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rs, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_Rw, PIN_LOW);
		DIO_WritePin(gastr_LCD_Config[LCD_Channel_0].u8_LCD_Port, gastr_LCD_Config[LCD_Channel_0].u8_LCD_En, PIN_LOW);
		/*set status of the function*/
		State = LCD_Pin_Initializing;
		break;
     7d0:	94 c0       	rjmp	.+296    	; 0x8fa <__stack+0x9b>
	case LCD_Pin_Initializing:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayMs(TIMER_2, 45);
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	4d e2       	ldi	r20, 0x2D	; 45
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <TIM_DelayMs>
		if (TimerRetVal == ((uint8_t) ERROR_OK )) {
     7e0:	88 23       	and	r24, r24
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <LCD_Init+0x138>
     7e4:	75 c0       	rjmp	.+234    	; 0x8d0 <__stack+0x71>
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	80 93 81 00 	sts	0x0081, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	85 c0       	rjmp	.+266    	; 0x8fa <__stack+0x9b>
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = LCD_Start_Sending_Initialization_Sequence;
		}
		break;
	case LCD_Start_Sending_Initialization_Sequence:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     7f0:	83 e0       	ldi	r24, 0x03	; 3
     7f2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     7f6:	88 23       	and	r24, r24
     7f8:	09 f0       	breq	.+2      	; 0x7fc <LCD_Init+0x14e>
     7fa:	6c c0       	rjmp	.+216    	; 0x8d4 <__stack+0x75>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
     7fc:	88 e0       	ldi	r24, 0x08	; 8
     7fe:	80 93 81 00 	sts	0x0081, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     802:	8f ef       	ldi	r24, 0xFF	; 255
     804:	7a c0       	rjmp	.+244    	; 0x8fa <__stack+0x9b>
		{
			State = First_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case First_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     806:	83 e0       	ldi	r24, 0x03	; 3
     808:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     80c:	88 23       	and	r24, r24
     80e:	09 f0       	breq	.+2      	; 0x812 <LCD_Init+0x164>
     810:	63 c0       	rjmp	.+198    	; 0x8d8 <__stack+0x79>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
     812:	89 e0       	ldi	r24, 0x09	; 9
     814:	80 93 81 00 	sts	0x0081, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	6f c0       	rjmp	.+222    	; 0x8fa <__stack+0x9b>
		{
			State = Second_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Second_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_Init_CMD_1);
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     822:	88 23       	and	r24, r24
     824:	09 f0       	breq	.+2      	; 0x828 <LCD_Init+0x17a>
     826:	5a c0       	rjmp	.+180    	; 0x8dc <__stack+0x7d>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
     828:	8a e0       	ldi	r24, 0x0A	; 10
     82a:	80 93 81 00 	sts	0x0081, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     82e:	8f ef       	ldi	r24, 0xFF	; 255
     830:	64 c0       	rjmp	.+200    	; 0x8fa <__stack+0x9b>
		{
			State = Third_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Third_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_HOME);
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     838:	88 23       	and	r24, r24
     83a:	09 f0       	breq	.+2      	; 0x83e <LCD_Init+0x190>
     83c:	51 c0       	rjmp	.+162    	; 0x8e0 <__stack+0x81>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
     83e:	8b e0       	ldi	r24, 0x0B	; 11
     840:	80 93 81 00 	sts	0x0081, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	59 c0       	rjmp	.+178    	; 0x8fa <__stack+0x9b>
		{
			State = Fourth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fourth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_FUNCSET_6);
     848:	88 e2       	ldi	r24, 0x28	; 40
     84a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     84e:	88 23       	and	r24, r24
     850:	09 f0       	breq	.+2      	; 0x854 <LCD_Init+0x1a6>
     852:	48 c0       	rjmp	.+144    	; 0x8e4 <__stack+0x85>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
     854:	8c e0       	ldi	r24, 0x0C	; 12
     856:	80 93 81 00 	sts	0x0081, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	4e c0       	rjmp	.+156    	; 0x8fa <__stack+0x9b>
		{
			State = Fifth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Fifth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_DISPON_CURSOFF);
     85e:	8c e0       	ldi	r24, 0x0C	; 12
     860:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     864:	88 23       	and	r24, r24
     866:	09 f0       	breq	.+2      	; 0x86a <__stack+0xb>
     868:	3f c0       	rjmp	.+126    	; 0x8e8 <__stack+0x89>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
     86a:	8d e0       	ldi	r24, 0x0D	; 13
     86c:	80 93 81 00 	sts	0x0081, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	43 c0       	rjmp	.+134    	; 0x8fa <__stack+0x9b>
		{
			State = Sixth_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Sixth_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_INCREMENTENTRYMODE);
     874:	86 e0       	ldi	r24, 0x06	; 6
     876:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     87a:	88 23       	and	r24, r24
     87c:	b9 f5       	brne	.+110    	; 0x8ec <__stack+0x8d>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
     87e:	8e e0       	ldi	r24, 0x0E	; 14
     880:	80 93 81 00 	sts	0x0081, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	39 c0       	rjmp	.+114    	; 0x8fa <__stack+0x9b>
		{
			State = Seventh_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Seventh_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CLR);
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     88e:	88 23       	and	r24, r24
     890:	79 f5       	brne	.+94     	; 0x8f0 <__stack+0x91>
		{
			State = LCD_Sent_Initialization_Sequence;
     892:	87 e0       	ldi	r24, 0x07	; 7
     894:	80 93 81 00 	sts	0x0081, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	2f c0       	rjmp	.+94     	; 0x8fa <__stack+0x9b>
			State = LCD_Sent_Initialization_Sequence;
		}
		break;
	case LCD_Sent_Initialization_Sequence:
		/*start timer delay in background*/
		TimerRetVal = TIM_DelayMs(TIMER_2, 3);
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	43 e0       	ldi	r20, 0x03	; 3
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <TIM_DelayMs>
		if (TimerRetVal == ((uint8_t) ERROR_OK )) {
     8aa:	88 23       	and	r24, r24
     8ac:	19 f5       	brne	.+70     	; 0x8f4 <__stack+0x95>
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
     8ae:	8f e0       	ldi	r24, 0x0F	; 15
     8b0:	80 93 81 00 	sts	0x0081, r24

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	21 c0       	rjmp	.+66     	; 0x8fa <__stack+0x9b>
			/*if timer delay function finished correctly Start the initialization sequence*/
			State = Final_Cmd_In_Initialization_Sequence_Is_Sent;
		}
		break;
	case Final_Cmd_In_Initialization_Sequence_Is_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(LCD_CURS_Position0);
     8b8:	80 e8       	ldi	r24, 0x80	; 128
     8ba:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_SendCommand>
		if(LCD_SendCommandRetVal == OperationSuccess)
     8be:	88 23       	and	r24, r24
     8c0:	d9 f4       	brne	.+54     	; 0x8f8 <__stack+0x99>
		{
			State = OperationStarted;
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	80 93 81 00 	sts	0x0081, r24
			ErrRetVal = OperationSuccess;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	17 c0       	rjmp	.+46     	; 0x8fa <__stack+0x9b>
		}
		break;
	default:
		ErrRetVal = OperationFail;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	15 c0       	rjmp	.+42     	; 0x8fa <__stack+0x9b>

}
ERROR_STATE_t LCD_Init()
{
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	13 c0       	rjmp	.+38     	; 0x8fa <__stack+0x9b>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	11 c0       	rjmp	.+34     	; 0x8fa <__stack+0x9b>
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	0f c0       	rjmp	.+30     	; 0x8fa <__stack+0x9b>
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	0d c0       	rjmp	.+26     	; 0x8fa <__stack+0x9b>
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	0b c0       	rjmp	.+22     	; 0x8fa <__stack+0x9b>
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
     8e6:	09 c0       	rjmp	.+18     	; 0x8fa <__stack+0x9b>
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	07 c0       	rjmp	.+14     	; 0x8fa <__stack+0x9b>
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	05 c0       	rjmp	.+10     	; 0x8fa <__stack+0x9b>
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	03 c0       	rjmp	.+6      	; 0x8fa <__stack+0x9b>
     8f4:	8f ef       	ldi	r24, 0xFF	; 255
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <__stack+0x9b>
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	default:
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	08 95       	ret

0000090c <LCD_SendString>:
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	ec 01       	movw	r28, r24
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	if (String != NULL_PTR) {
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	39 f4       	brne	.+14     	; 0x924 <LCD_SendString+0x18>
			else
				continue;
		}
		ErrRetVal = OperationSuccess;
	} else {
		ErrRetVal = OperationFail;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	08 c0       	rjmp	.+16     	; 0x92a <LCD_SendString+0x1e>
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	if (String != NULL_PTR) {
		while (*String != NULL_TERMINATOR ) {
			ErrRetVal = OperationRunning;
			LCD_SendDataRetVal = LCD_SendData(*String);
     91a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_SendData>
			if(LCD_SendDataRetVal == OperationSuccess)
     91e:	88 23       	and	r24, r24
     920:	09 f4       	brne	.+2      	; 0x924 <LCD_SendString+0x18>
				String++;
     922:	21 96       	adiw	r28, 0x01	; 1
ERROR_STATE_t LCD_SendString(const uint8_t* String)
{
	uint8_t ErrRetVal = OperationStarted;
	uint8_t LCD_SendDataRetVal = OperationStarted;
	if (String != NULL_PTR) {
		while (*String != NULL_TERMINATOR ) {
     924:	88 81       	ld	r24, Y
     926:	88 23       	and	r24, r24
     928:	c1 f7       	brne	.-16     	; 0x91a <LCD_SendString+0xe>
		ErrRetVal = OperationSuccess;
	} else {
		ErrRetVal = OperationFail;
	}
	return ErrRetVal;
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <LCD_SendNumber>:
ERROR_STATE_t LCD_SendNumber(uint32_t Number)
{
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	cf 5f       	subi	r28, 0xFF	; 255
     93a:	d0 40       	sbci	r29, 0x00	; 0
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrRetVal = OperationStarted;
	uint8_t String[255];
	STR_Number2String((uint32_t)Number,String);
     946:	ae 01       	movw	r20, r28
     948:	4f 5f       	subi	r20, 0xFF	; 255
     94a:	5f 4f       	sbci	r21, 0xFF	; 255
     94c:	0e 94 e7 07 	call	0xfce	; 0xfce <STR_Number2String>
	LCD_SendString((int8_t*)String);
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	0e 94 86 04 	call	0x90c	; 0x90c <LCD_SendString>
	ErrRetVal = OperationSuccess;
	return ErrRetVal;
}
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	c1 50       	subi	r28, 0x01	; 1
     95c:	df 4f       	sbci	r29, 0xFF	; 255
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <MOTOR_init>:
extern const STR_MOTOR_config_t gastr_Motor_Config[MOTORS_NUMBER];

/*APIs IMPLEMENTATION------------------------*/
ERROR_STATE_t MOTOR_init(void) {
		/*CHECK IF MOTORS HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) {//IF MOTORS IS INITIALIZED
     96e:	80 91 b3 00 	lds	r24, 0x00B3
     972:	81 30       	cpi	r24, 0x01	; 1
     974:	21 f4       	brne	.+8      	; 0x97e <MOTOR_init+0x10>
		gu8_ERROR_STAT = MOTOR_SEC_INIT;//STORE SEC INIT IN ERRROR STAT
     976:	8f ef       	ldi	r24, 0xFF	; 255
     978:	80 93 b4 00 	sts	0x00B4, r24
     97c:	28 c0       	rjmp	.+80     	; 0x9ce <MOTOR_init+0x60>
	} else if (NOT_INIT == gu8_InitFlag) {//IF MOTORS IS NOT INITIALIZED
     97e:	88 23       	and	r24, r24
     980:	31 f5       	brne	.+76     	; 0x9ce <MOTOR_init+0x60>
	PWM_Init(PWM_CHANNEL_OC0);
     982:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <PWM_Init>
   /*SETTING MOTOR1 DIR PINS TO OUTPUT*/
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA, PIN_OUTPUT);
     986:	80 91 8a 00 	lds	r24, 0x008A
     98a:	60 91 8b 00 	lds	r22, 0x008B
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB, PIN_OUTPUT);
     994:	80 91 8c 00 	lds	r24, 0x008C
     998:	60 91 8d 00 	lds	r22, 0x008D
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
	/*SETTING MOTOR2 DIR PINS TO OUTPUT*/
	
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA, PIN_OUTPUT);
     9a2:	80 91 8e 00 	lds	r24, 0x008E
     9a6:	60 91 8f 00 	lds	r22, 0x008F
     9aa:	41 e0       	ldi	r20, 0x01	; 1
     9ac:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
	DIO_SetPinDirection(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB, PIN_OUTPUT);
     9b0:	80 91 90 00 	lds	r24, 0x0090
     9b4:	60 91 91 00 	lds	r22, 0x0091
     9b8:	41 e0       	ldi	r20, 0x01	; 1
     9ba:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
   /*START THE PWM WAVE*/
   PWM_Start(PWM_CHANNEL_OC0);
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	0e 94 30 0b 	call	0x1660	; 0x1660 <PWM_Start>
	gu8_InitFlag = INIT;//SET INIT FLAG
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 93 b3 00 	sts	0x00B3, r24
	gu8_ERROR_STAT = ERROR_OK;//STORE ERROR_OK IN ERRROR STAT
     9ca:	10 92 b4 00 	sts	0x00B4, r1
	}
	/*STOP MOTOER EN PINS AT THE START*/
	return gu8_ERROR_STAT ;//RETURN FROM THE API
}
     9ce:	80 91 b4 00 	lds	r24, 0x00B4
     9d2:	08 95       	ret

000009d4 <MOTOR_start>:
ERROR_STATE_t MOTOR_start(uint8_t motor_no, uint8_t speed,  uint8_t dir) {
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	c8 2f       	mov	r28, r24
     9da:	d4 2f       	mov	r29, r20
	if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     9dc:	80 91 b3 00 	lds	r24, 0x00B3
     9e0:	88 23       	and	r24, r24
     9e2:	21 f4       	brne	.+8      	; 0x9ec <MOTOR_start+0x18>
		gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     9e4:	8e ef       	ldi	r24, 0xFE	; 254
     9e6:	80 93 b4 00 	sts	0x00B4, r24
     9ea:	66 c0       	rjmp	.+204    	; 0xab8 <MOTOR_start+0xe4>
	} else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <MOTOR_start+0x1e>
     9f0:	63 c0       	rjmp	.+198    	; 0xab8 <MOTOR_start+0xe4>
      PWM_SetDuty(PWM_CHANNEL_OC0, speed);
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <PWM_SetDuty>
      PWM_Connect(PWM_CHANNEL_OC0);
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 45 0b 	call	0x168a	; 0x168a <PWM_Connect>
	switch (motor_no) {
     9fe:	cc 23       	and	r28, r28
     a00:	21 f0       	breq	.+8      	; 0xa0a <MOTOR_start+0x36>
     a02:	c1 30       	cpi	r28, 0x01	; 1
     a04:	09 f0       	breq	.+2      	; 0xa08 <MOTOR_start+0x34>
     a06:	55 c0       	rjmp	.+170    	; 0xab2 <MOTOR_start+0xde>
     a08:	2a c0       	rjmp	.+84     	; 0xa5e <MOTOR_start+0x8a>
	case MOTOR1 :
		switch (dir) {
     a0a:	dd 23       	and	r29, r29
     a0c:	99 f0       	breq	.+38     	; 0xa34 <MOTOR_start+0x60>
     a0e:	d1 30       	cpi	r29, 0x01	; 1
     a10:	11 f5       	brne	.+68     	; 0xa56 <MOTOR_start+0x82>
		case MOTOR_FORWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     a12:	80 91 8a 00 	lds	r24, 0x008A
     a16:	60 91 8b 00 	lds	r22, 0x008B
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_LOW);
     a20:	80 91 8c 00 	lds	r24, 0x008C
     a24:	60 91 8d 00 	lds	r22, 0x008D
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
			gu8_ERROR_STAT = ERROR_OK;
     a2e:	10 92 b4 00 	sts	0x00B4, r1
			break;
     a32:	42 c0       	rjmp	.+132    	; 0xab8 <MOTOR_start+0xe4>
		case MOTOR_BACKWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_LOW);
     a34:	80 91 8a 00 	lds	r24, 0x008A
     a38:	60 91 8b 00 	lds	r22, 0x008B
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     a42:	80 91 8c 00 	lds	r24, 0x008C
     a46:	60 91 8d 00 	lds	r22, 0x008D
     a4a:	41 e0       	ldi	r20, 0x01	; 1
     a4c:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     a50:	10 92 b4 00 	sts	0x00B4, r1

			break;
     a54:	31 c0       	rjmp	.+98     	; 0xab8 <MOTOR_start+0xe4>
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     a56:	8d ef       	ldi	r24, 0xFD	; 253
     a58:	80 93 b4 00 	sts	0x00B4, r24
			break;
     a5c:	2d c0       	rjmp	.+90     	; 0xab8 <MOTOR_start+0xe4>
		}
		break;
	case MOTOR2 :
		switch (dir) {
     a5e:	dd 23       	and	r29, r29
     a60:	99 f0       	breq	.+38     	; 0xa88 <MOTOR_start+0xb4>
     a62:	d1 30       	cpi	r29, 0x01	; 1
     a64:	11 f5       	brne	.+68     	; 0xaaa <MOTOR_start+0xd6>
		case MOTOR_FORWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     a66:	80 91 8e 00 	lds	r24, 0x008E
     a6a:	60 91 8f 00 	lds	r22, 0x008F
     a6e:	41 e0       	ldi	r20, 0x01	; 1
     a70:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_LOW);
     a74:	80 91 90 00 	lds	r24, 0x0090
     a78:	60 91 91 00 	lds	r22, 0x0091
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     a82:	10 92 b4 00 	sts	0x00B4, r1

			break;
     a86:	18 c0       	rjmp	.+48     	; 0xab8 <MOTOR_start+0xe4>
		case MOTOR_BACKWARD :
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_LOW);
     a88:	80 91 8e 00 	lds	r24, 0x008E
     a8c:	60 91 8f 00 	lds	r22, 0x008F
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
			DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     a96:	80 91 90 00 	lds	r24, 0x0090
     a9a:	60 91 91 00 	lds	r22, 0x0091
     a9e:	41 e0       	ldi	r20, 0x01	; 1
     aa0:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     aa4:	10 92 b4 00 	sts	0x00B4, r1

			break;
     aa8:	07 c0       	rjmp	.+14     	; 0xab8 <MOTOR_start+0xe4>
		default:
		gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     aaa:	8d ef       	ldi	r24, 0xFD	; 253
     aac:	80 93 b4 00 	sts	0x00B4, r24
			break;
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <MOTOR_start+0xe4>
		}
		break;
	default:
	gu8_ERROR_STAT=MOTOR_INVALID_CH;
     ab2:	8c ef       	ldi	r24, 0xFC	; 252
     ab4:	80 93 b4 00 	sts	0x00B4, r24
		break;
	}
	}
	return gu8_ERROR_STAT ;
}
     ab8:	80 91 b4 00 	lds	r24, 0x00B4
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <MOTOR_stop>:
ERROR_STATE_t MOTOR_stop(uint8_t motor_no) {
     ac2:	cf 93       	push	r28
     ac4:	c8 2f       	mov	r28, r24
    if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     ac6:	80 91 b3 00 	lds	r24, 0x00B3
     aca:	88 23       	and	r24, r24
     acc:	21 f4       	brne	.+8      	; 0xad6 <MOTOR_stop+0x14>
		gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     ace:	8e ef       	ldi	r24, 0xFE	; 254
     ad0:	80 93 b4 00 	sts	0x00B4, r24
     ad4:	2f c0       	rjmp	.+94     	; 0xb34 <MOTOR_stop+0x72>
        } else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	69 f5       	brne	.+90     	; 0xb34 <MOTOR_stop+0x72>
		PWM_Disconnect(PWM_CHANNEL_OC0);
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <PWM_Disconnect>
       switch (motor_no){
     ae0:	cc 23       	and	r28, r28
     ae2:	19 f0       	breq	.+6      	; 0xaea <MOTOR_stop+0x28>
     ae4:	c1 30       	cpi	r28, 0x01	; 1
     ae6:	19 f5       	brne	.+70     	; 0xb2e <MOTOR_stop+0x6c>
     ae8:	11 c0       	rjmp	.+34     	; 0xb0c <MOTOR_stop+0x4a>
        case MOTOR1:
            DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     aea:	80 91 8a 00 	lds	r24, 0x008A
     aee:	60 91 8b 00 	lds	r22, 0x008B
     af2:	41 e0       	ldi	r20, 0x01	; 1
     af4:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
            DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     af8:	80 91 8c 00 	lds	r24, 0x008C
     afc:	60 91 8d 00 	lds	r22, 0x008D
     b00:	41 e0       	ldi	r20, 0x01	; 1
     b02:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     b06:	10 92 b4 00 	sts	0x00B4, r1
            break;
     b0a:	14 c0       	rjmp	.+40     	; 0xb34 <MOTOR_stop+0x72>
        case MOTOR2:
            DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     b0c:	80 91 8e 00 	lds	r24, 0x008E
     b10:	60 91 8f 00 	lds	r22, 0x008F
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
            DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     b1a:	80 91 90 00 	lds	r24, 0x0090
     b1e:	60 91 91 00 	lds	r22, 0x0091
     b22:	41 e0       	ldi	r20, 0x01	; 1
     b24:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
            gu8_ERROR_STAT = ERROR_OK;
     b28:	10 92 b4 00 	sts	0x00B4, r1
            break;
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <MOTOR_stop+0x72>
        default:
        gu8_ERROR_STAT=MOTOR_INVALID_CH;
     b2e:	8c ef       	ldi	r24, 0xFC	; 252
     b30:	80 93 b4 00 	sts	0x00B4, r24
            break;
        }
	}
	return gu8_ERROR_STAT ;
}
     b34:	80 91 b4 00 	lds	r24, 0x00B4
     b38:	cf 91       	pop	r28
     b3a:	08 95       	ret

00000b3c <MOTOR_Update_dir>:
ERROR_STATE_t MOTOR_Update_dir(uint8_t motor_no, uint8_t dir) {
    if (NOT_INIT == gu8_InitFlag) { //IF MOTOR IS NOT INITIALIZED
     b3c:	90 91 b3 00 	lds	r25, 0x00B3
     b40:	99 23       	and	r25, r25
     b42:	21 f4       	brne	.+8      	; 0xb4c <MOTOR_Update_dir+0x10>
    gu8_ERROR_STAT = MOTOR_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     b44:	8e ef       	ldi	r24, 0xFE	; 254
     b46:	80 93 b4 00 	sts	0x00B4, r24
     b4a:	60 c0       	rjmp	.+192    	; 0xc0c <MOTOR_Update_dir+0xd0>
    } else if (INIT == gu8_InitFlag) { //IF MOTOR IS INITIALIZED
     b4c:	91 30       	cpi	r25, 0x01	; 1
     b4e:	09 f0       	breq	.+2      	; 0xb52 <MOTOR_Update_dir+0x16>
     b50:	5d c0       	rjmp	.+186    	; 0xc0c <MOTOR_Update_dir+0xd0>
        switch (motor_no) {
     b52:	88 23       	and	r24, r24
     b54:	21 f0       	breq	.+8      	; 0xb5e <MOTOR_Update_dir+0x22>
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	09 f0       	breq	.+2      	; 0xb5c <MOTOR_Update_dir+0x20>
     b5a:	55 c0       	rjmp	.+170    	; 0xc06 <MOTOR_Update_dir+0xca>
     b5c:	2a c0       	rjmp	.+84     	; 0xbb2 <MOTOR_Update_dir+0x76>
            case MOTOR1 :
                switch (dir) {
     b5e:	66 23       	and	r22, r22
     b60:	99 f0       	breq	.+38     	; 0xb88 <MOTOR_Update_dir+0x4c>
     b62:	61 30       	cpi	r22, 0x01	; 1
     b64:	11 f5       	brne	.+68     	; 0xbaa <MOTOR_Update_dir+0x6e>
                case MOTOR_FORWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_HIGH);
     b66:	80 91 8a 00 	lds	r24, 0x008A
     b6a:	60 91 8b 00 	lds	r22, 0x008B
     b6e:	41 e0       	ldi	r20, 0x01	; 1
     b70:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_LOW);
     b74:	80 91 8c 00 	lds	r24, 0x008C
     b78:	60 91 8d 00 	lds	r22, 0x008D
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     b82:	10 92 b4 00 	sts	0x00B4, r1

                    break;
     b86:	42 c0       	rjmp	.+132    	; 0xc0c <MOTOR_Update_dir+0xd0>
                case MOTOR_BACKWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirA, gastr_Motor_Config[MOTOR1].u8_MotorPinDirA,PIN_LOW);
     b88:	80 91 8a 00 	lds	r24, 0x008A
     b8c:	60 91 8b 00 	lds	r22, 0x008B
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR1].u8_MotorPortDirB, gastr_Motor_Config[MOTOR1].u8_MotorPinDirB,PIN_HIGH);
     b96:	80 91 8c 00 	lds	r24, 0x008C
     b9a:	60 91 8d 00 	lds	r22, 0x008D
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     ba4:	10 92 b4 00 	sts	0x00B4, r1

                    break;
     ba8:	31 c0       	rjmp	.+98     	; 0xc0c <MOTOR_Update_dir+0xd0>
                default:
                gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     baa:	8d ef       	ldi	r24, 0xFD	; 253
     bac:	80 93 b4 00 	sts	0x00B4, r24
                    break;
     bb0:	2d c0       	rjmp	.+90     	; 0xc0c <MOTOR_Update_dir+0xd0>
                }
                break;
            case MOTOR2 :
                switch (dir) {
     bb2:	66 23       	and	r22, r22
     bb4:	99 f0       	breq	.+38     	; 0xbdc <MOTOR_Update_dir+0xa0>
     bb6:	61 30       	cpi	r22, 0x01	; 1
     bb8:	11 f5       	brne	.+68     	; 0xbfe <MOTOR_Update_dir+0xc2>
                case MOTOR_FORWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_HIGH);
     bba:	80 91 8e 00 	lds	r24, 0x008E
     bbe:	60 91 8f 00 	lds	r22, 0x008F
     bc2:	41 e0       	ldi	r20, 0x01	; 1
     bc4:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_LOW);
     bc8:	80 91 90 00 	lds	r24, 0x0090
     bcc:	60 91 91 00 	lds	r22, 0x0091
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     bd6:	10 92 b4 00 	sts	0x00B4, r1

                    break;
     bda:	18 c0       	rjmp	.+48     	; 0xc0c <MOTOR_Update_dir+0xd0>
                case MOTOR_BACKWARD :
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirA, gastr_Motor_Config[MOTOR2].u8_MotorPinDirA,PIN_LOW);
     bdc:	80 91 8e 00 	lds	r24, 0x008E
     be0:	60 91 8f 00 	lds	r22, 0x008F
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
                DIO_WritePin(gastr_Motor_Config[MOTOR2].u8_MotorPortDirB, gastr_Motor_Config[MOTOR2].u8_MotorPinDirB,PIN_HIGH);
     bea:	80 91 90 00 	lds	r24, 0x0090
     bee:	60 91 91 00 	lds	r22, 0x0091
     bf2:	41 e0       	ldi	r20, 0x01	; 1
     bf4:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
                gu8_ERROR_STAT = ERROR_OK;
     bf8:	10 92 b4 00 	sts	0x00B4, r1

                    break;
     bfc:	07 c0       	rjmp	.+14     	; 0xc0c <MOTOR_Update_dir+0xd0>
                default:
                   gu8_ERROR_STAT=MOTOR_INVALID_DIR;
     bfe:	8d ef       	ldi	r24, 0xFD	; 253
     c00:	80 93 b4 00 	sts	0x00B4, r24
                    break;
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <MOTOR_Update_dir+0xd0>
                }
                break;
            default:
               gu8_ERROR_STAT=MOTOR_INVALID_CH;
     c06:	8c ef       	ldi	r24, 0xFC	; 252
     c08:	80 93 b4 00 	sts	0x00B4, r24
                break;
            }
    }

		return gu8_ERROR_STAT ;
}
     c0c:	80 91 b4 00 	lds	r24, 0x00B4
     c10:	08 95       	ret

00000c12 <USONIC_Init>:
/*
 * THIS API INITIALIZE THE ULTRASONIC
 * */
ERROR_STATE_t USONIC_Init(void) {
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (INIT == gu8_InitFlag) {//IF ULTRA SONIC IS INITIALIZED
     c12:	80 91 b5 00 	lds	r24, 0x00B5
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	21 f4       	brne	.+8      	; 0xc22 <USONIC_Init+0x10>
		gu8_ERROR_STAT = USONIC_SEC_INIT;//STORE SEC INIT IN ERRROR STAT
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	80 93 b6 00 	sts	0x00B6, r24
     c20:	11 c0       	rjmp	.+34     	; 0xc44 <USONIC_Init+0x32>
	} else if (NOT_INIT == gu8_InitFlag) {//IF ULTRA SONIC IS NOT INITIALIZED
     c22:	88 23       	and	r24, r24
     c24:	79 f4       	brne	.+30     	; 0xc44 <USONIC_Init+0x32>
      DIO_SetPinDirection(gastr_USONIC_Config[USONIC1].USONIC_TRIG_PORT, gastr_USONIC_Config[USONIC1].USONIC_TRIG_PIN, PIN_OUTPUT);//SET THE TRIGGER PIN AS AN OUTPUT
     c26:	80 91 92 00 	lds	r24, 0x0092
     c2a:	60 91 93 00 	lds	r22, 0x0093
     c2e:	41 e0       	ldi	r20, 0x01	; 1
     c30:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
		ICU_Init(ICU_1); //INIT THE ICU CH 1
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	0e 94 13 0a 	call	0x1426	; 0x1426 <ICU_Init>
		gu8_InitFlag = INIT;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	80 93 b5 00 	sts	0x00B5, r24
		gu8_ERROR_STAT=ERROR_OK;
     c40:	10 92 b6 00 	sts	0x00B6, r1
	} else {
		//DO NOTHING
	}
	return gu8_ERROR_STAT ;
}
     c44:	80 91 b6 00 	lds	r24, 0x00B6
     c48:	08 95       	ret

00000c4a <USONIC_GetDistance>:
/*
 * THIS API GET THE DISTANCE
 * */
ERROR_STATE_t USONIC_GetDistance(ptr_double64_t distance) {
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	00 d0       	rcall	.+0      	; 0xc54 <USONIC_GetDistance+0xa>
     c54:	00 d0       	rcall	.+0      	; 0xc56 <USONIC_GetDistance+0xc>
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	8c 01       	movw	r16, r24
	static uint8_t ICU_STAT = START_STATE;
	double64_t au64_TIME = 0;
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	dc 01       	movw	r26, r24
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	ab 83       	std	Y+3, r26	; 0x03
     c68:	bc 83       	std	Y+4, r27	; 0x04
	/*CHECK IF ULTASONIC HAS BEEN INITIALIZED*/
	if (NOT_INIT == gu8_InitFlag) { //IF ULTRA SONIC IS NOT INITIALIZED
     c6a:	80 91 b5 00 	lds	r24, 0x00B5
     c6e:	88 23       	and	r24, r24
     c70:	21 f4       	brne	.+8      	; 0xc7a <USONIC_GetDistance+0x30>
		gu8_ERROR_STAT = USONIC_NOT_INIT; //STORE NOT INIT IN ERRROR STAT
     c72:	8e ef       	ldi	r24, 0xFE	; 254
     c74:	80 93 b6 00 	sts	0x00B6, r24
     c78:	5e c0       	rjmp	.+188    	; 0xd36 <USONIC_GetDistance+0xec>
	} else if (INIT == gu8_InitFlag) { //IF ULTRA SONIC IS INITIALIZED
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	09 f0       	breq	.+2      	; 0xc80 <USONIC_GetDistance+0x36>
     c7e:	5b c0       	rjmp	.+182    	; 0xd36 <USONIC_GetDistance+0xec>
		/*CHECK IF ptr_float32_t distance EUALS NULL */
		if (NULL_PTR == distance) {
     c80:	01 15       	cp	r16, r1
     c82:	11 05       	cpc	r17, r1
     c84:	21 f4       	brne	.+8      	; 0xc8e <USONIC_GetDistance+0x44>
			gu8_ERROR_STAT = USONIC_NULL_POINTER; //STORE NOT INIT IN ERRROR STAT
     c86:	8d ef       	ldi	r24, 0xFD	; 253
     c88:	80 93 b6 00 	sts	0x00B6, r24
     c8c:	54 c0       	rjmp	.+168    	; 0xd36 <USONIC_GetDistance+0xec>
		} else {
			/*CHECK IF THE ICU IS NOT STARTED YET*/
			if (START_STATE == ICU_STAT) {
     c8e:	80 91 b7 00 	lds	r24, 0x00B7
     c92:	88 23       	and	r24, r24
     c94:	31 f5       	brne	.+76     	; 0xce2 <USONIC_GetDistance+0x98>
            gu8_ERROR_STAT = ERROR_NOK;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 93 b6 00 	sts	0x00B6, r24
				/*FIRE THE ULTASONIC TRIGGER*/
				DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_HIGH); //SET TRIGGER PIN
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
				do
					TIM_DelayUs(TIMER_2, TRIG_TIME); //WAIT 10 MICRO SEC
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	4a e0       	ldi	r20, 0x0A	; 10
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <TIM_DelayUs>
				while (ERROR_OK != TIM_DelayUs(TIMER_2, TRIG_TIME));
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	4a e0       	ldi	r20, 0x0A	; 10
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <TIM_DelayUs>
     cc2:	88 23       	and	r24, r24
     cc4:	81 f7       	brne	.-32     	; 0xca6 <USONIC_GetDistance+0x5c>
				DIO_WritePin(USONIC_TRIG_PORT, USONIC_TRIG_PIN, PIN_LOW); //CLEAR TRIGER PIN
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_WritePin>
				ICU_UpdateTimeOn(ICU_1, &ICU_STAT, &au64_TIME); //START ICU
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	67 eb       	ldi	r22, 0xB7	; 183
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	ae 01       	movw	r20, r28
     cd8:	4f 5f       	subi	r20, 0xFF	; 255
     cda:	5f 4f       	sbci	r21, 0xFF	; 255
     cdc:	0e 94 39 0a 	call	0x1472	; 0x1472 <ICU_UpdateTimeOn>
     ce0:	2a c0       	rjmp	.+84     	; 0xd36 <USONIC_GetDistance+0xec>
			} else  { //IF ICU IS NOT FINISHED
				ICU_UpdateTimeOn(ICU_1, &ICU_STAT, &au64_TIME); //CALL ICU UPDATE
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	67 eb       	ldi	r22, 0xB7	; 183
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	ae 01       	movw	r20, r28
     cea:	4f 5f       	subi	r20, 0xFF	; 255
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	0e 94 39 0a 	call	0x1472	; 0x1472 <ICU_UpdateTimeOn>
				gu8_ERROR_STAT = USONIC_PENDING; //STORE PENDING
     cf2:	8c ef       	ldi	r24, 0xFC	; 252
     cf4:	80 93 b6 00 	sts	0x00B6, r24
            if (END_STATE == ICU_STAT) { //IF ICU IS FINISHED
     cf8:	80 91 b7 00 	lds	r24, 0x00B7
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	d9 f4       	brne	.+54     	; 0xd36 <USONIC_GetDistance+0xec>
               *(distance) = (((SOUND_SPPED) * au64_TIME) / HALF_DISTANCE); //CALCULATE THE DISTANCE
     d00:	69 81       	ldd	r22, Y+1	; 0x01
     d02:	7a 81       	ldd	r23, Y+2	; 0x02
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	9c 81       	ldd	r25, Y+4	; 0x04
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3c ef       	ldi	r19, 0xFC	; 252
     d0c:	45 e0       	ldi	r20, 0x05	; 5
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	0e 94 b6 10 	call	0x216c	; 0x216c <__mulsf3>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	0e 94 b6 10 	call	0x216c	; 0x216c <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	f8 01       	movw	r30, r16
     d26:	80 83       	st	Z, r24
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	a2 83       	std	Z+2, r26	; 0x02
     d2c:	b3 83       	std	Z+3, r27	; 0x03
               ICU_STAT = START_STATE; //RESET ICU STAT
     d2e:	10 92 b7 00 	sts	0x00B7, r1
               gu8_ERROR_STAT = ERROR_OK; //RETURN OK(FINISHED)
     d32:	10 92 b6 00 	sts	0x00B6, r1
		}
	} else {
		//DO NOTHING
	}
	return gu8_ERROR_STAT; //RETURN API STAT
}
     d36:	80 91 b6 00 	lds	r24, 0x00B6
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	00 d0       	rcall	.+0      	; 0xd52 <dummy_delay+0x6>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <dummy_delay+0x8>
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
     d58:	1c 82       	std	Y+4, r1	; 0x04
     d5a:	1b 82       	std	Y+3, r1	; 0x03
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	9c 81       	ldd	r25, Y+4	; 0x04
     d60:	84 36       	cpi	r24, 0x64	; 100
     d62:	91 05       	cpc	r25, r1
     d64:	f0 f4       	brcc	.+60     	; 0xda2 <dummy_delay+0x56>
   {
      for(volatile uint8_t j=0; j<32; j++)
     d66:	1a 82       	std	Y+2, r1	; 0x02
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	80 32       	cpi	r24, 0x20	; 32
     d6c:	80 f4       	brcc	.+32     	; 0xd8e <dummy_delay+0x42>
      {
         for(volatile uint8_t k=0; k<2; k++)
     d6e:	19 82       	std	Y+1, r1	; 0x01
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	82 30       	cpi	r24, 0x02	; 2
     d74:	30 f4       	brcc	.+12     	; 0xd82 <dummy_delay+0x36>
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	8f 5f       	subi	r24, 0xFF	; 255
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	d0 f3       	brcs	.-12     	; 0xd76 <dummy_delay+0x2a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	8f 5f       	subi	r24, 0xFF	; 255
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	80 32       	cpi	r24, 0x20	; 32
     d8c:	80 f3       	brcs	.-32     	; 0xd6e <dummy_delay+0x22>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	9c 83       	std	Y+4, r25	; 0x04
     d96:	8b 83       	std	Y+3, r24	; 0x03
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	84 36       	cpi	r24, 0x64	; 100
     d9e:	91 05       	cpc	r25, r1
     da0:	10 f3       	brcs	.-60     	; 0xd66 <dummy_delay+0x1a>
         {
            
         }
      }
   }
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <StringCompare>:
* @param [in]  str2   -  pointer to the second string.
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
     db0:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
     db2:	8c 91       	ld	r24, X
     db4:	88 23       	and	r24, r24
     db6:	01 f1       	breq	.+64     	; 0xdf8 <StringCompare+0x48>
     db8:	8d 30       	cpi	r24, 0x0D	; 13
     dba:	09 f1       	breq	.+66     	; 0xdfe <StringCompare+0x4e>
   {
      if(str1[u8_counter] != str2[u8_counter])
     dbc:	fb 01       	movw	r30, r22
     dbe:	90 81       	ld	r25, Z
     dc0:	89 17       	cp	r24, r25
     dc2:	49 f4       	brne	.+18     	; 0xdd6 <StringCompare+0x26>
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	0b c0       	rjmp	.+22     	; 0xdde <StringCompare+0x2e>
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
     dc8:	86 0f       	add	r24, r22
     dca:	97 1f       	adc	r25, r23
     dcc:	fc 01       	movw	r30, r24
     dce:	80 81       	ld	r24, Z
     dd0:	28 17       	cp	r18, r24
     dd2:	29 f0       	breq	.+10     	; 0xdde <StringCompare+0x2e>
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <StringCompare+0x28>
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
     dd6:	30 e0       	ldi	r19, 0x00	; 0
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
         u8_counter++;
     dd8:	3f 5f       	subi	r19, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
     dda:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
     ddc:	14 c0       	rjmp	.+40     	; 0xe06 <StringCompare+0x56>
      }
      u8_counter++;
     dde:	3f 5f       	subi	r19, 0xFF	; 255
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
     de0:	83 2f       	mov	r24, r19
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	fd 01       	movw	r30, r26
     de6:	e8 0f       	add	r30, r24
     de8:	f9 1f       	adc	r31, r25
     dea:	20 81       	ld	r18, Z
     dec:	22 23       	and	r18, r18
     dee:	51 f0       	breq	.+20     	; 0xe04 <StringCompare+0x54>
     df0:	2d 30       	cpi	r18, 0x0D	; 13
     df2:	51 f7       	brne	.-44     	; 0xdc8 <StringCompare+0x18>
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	07 c0       	rjmp	.+14     	; 0xe06 <StringCompare+0x56>
     df8:	81 e0       	ldi	r24, 0x01	; 1
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <StringCompare+0x56>
   uint8_t u8_isEqual = TRUE;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <StringCompare+0x56>
   uint8_t u8_isEqual = TRUE;
     e04:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
     e06:	63 0f       	add	r22, r19
     e08:	71 1d       	adc	r23, r1
     e0a:	fb 01       	movw	r30, r22
     e0c:	90 81       	ld	r25, Z
     e0e:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
     e10:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
}
     e12:	08 95       	ret

00000e14 <STR_Length>:
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
     e14:	fb 01       	movw	r30, r22
	*StringLength = 0;
     e16:	11 82       	std	Z+1, r1	; 0x01
     e18:	10 82       	st	Z, r1
	while(*String!='\0')
     e1a:	dc 01       	movw	r26, r24
     e1c:	2c 91       	ld	r18, X
     e1e:	22 23       	and	r18, r18
     e20:	49 f0       	breq	.+18     	; 0xe34 <STR_Length+0x20>
   return u8_isEqual;
}
/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
     e22:	11 96       	adiw	r26, 0x01	; 1
{
	*StringLength = 0;
	while(*String!='\0')
	{
		(*StringLength)++;
     e24:	80 81       	ld	r24, Z
     e26:	91 81       	ldd	r25, Z+1	; 0x01
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	91 83       	std	Z+1, r25	; 0x01
     e2c:	80 83       	st	Z, r24
/************************************************************************************************************/
/************************************************************************************************************/
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
	*StringLength = 0;
	while(*String!='\0')
     e2e:	8d 91       	ld	r24, X+
     e30:	88 23       	and	r24, r24
     e32:	c1 f7       	brne	.-16     	; 0xe24 <STR_Length+0x10>
	{
		(*StringLength)++;
		String++;
	}
	return 0;
}
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	08 95       	ret

00000e38 <STR_CharIsNumeric>:
uint8_t STR_CharIsNumeric(uint8_t Character, uint8_t* Result)
{
	if(Character>=48 && Character<=57)
     e38:	80 53       	subi	r24, 0x30	; 48
     e3a:	8a 30       	cpi	r24, 0x0A	; 10
     e3c:	20 f4       	brcc	.+8      	; 0xe46 <STR_CharIsNumeric+0xe>
	{
		*Result=1;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	fb 01       	movw	r30, r22
     e42:	80 83       	st	Z, r24
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <STR_CharIsNumeric+0x12>
	}
	else
	{
		*Result=0;
     e46:	fb 01       	movw	r30, r22
     e48:	10 82       	st	Z, r1
	}
	return 0;
}
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	08 95       	ret

00000e4e <STR_StringIsNumeric>:
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
     e4e:	df 92       	push	r13
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	fc 01       	movw	r30, r24
     e64:	7b 01       	movw	r14, r22
	uint8_t FunRetVal = 0;
     e66:	19 82       	std	Y+1, r1	; 0x01
	while(*String!='\0')
     e68:	80 81       	ld	r24, Z
     e6a:	88 23       	and	r24, r24
     e6c:	b9 f0       	breq	.+46     	; 0xe9c <STR_StringIsNumeric+0x4e>
	{
		*Result=0;
	}
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
     e6e:	8f 01       	movw	r16, r30
     e70:	0f 5f       	subi	r16, 0xFF	; 255
     e72:	1f 4f       	sbci	r17, 0xFF	; 255
			*Result = 0;
			break;
		}
		else
		{
			*Result = 1;
     e74:	dd 24       	eor	r13, r13
     e76:	d3 94       	inc	r13
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
	{
		STR_CharIsNumeric(*String,&FunRetVal);
     e78:	be 01       	movw	r22, r28
     e7a:	6f 5f       	subi	r22, 0xFF	; 255
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	0e 94 1c 07 	call	0xe38	; 0xe38 <STR_CharIsNumeric>
		if(!FunRetVal)
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	88 23       	and	r24, r24
     e86:	19 f4       	brne	.+6      	; 0xe8e <STR_StringIsNumeric+0x40>
		{
			*Result = 0;
     e88:	f7 01       	movw	r30, r14
     e8a:	10 82       	st	Z, r1
			break;
     e8c:	07 c0       	rjmp	.+14     	; 0xe9c <STR_StringIsNumeric+0x4e>
		}
		else
		{
			*Result = 1;
     e8e:	f7 01       	movw	r30, r14
     e90:	d0 82       	st	Z, r13
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
     e92:	f8 01       	movw	r30, r16
     e94:	81 91       	ld	r24, Z+
     e96:	8f 01       	movw	r16, r30
     e98:	88 23       	and	r24, r24
     e9a:	71 f7       	brne	.-36     	; 0xe78 <STR_StringIsNumeric+0x2a>
			String++;
			continue;
		}
	}
	return 0;
}
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0f 90       	pop	r0
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	df 90       	pop	r13
     eae:	08 95       	ret

00000eb0 <STR_CompareString>:
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	fc 01       	movw	r30, r24
     eba:	ec 01       	movw	r28, r24
     ebc:	cb 01       	movw	r24, r22
			continue;
		}
	}
	return 0;
}
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
     ebe:	db 01       	movw	r26, r22
     ec0:	11 96       	adiw	r26, 0x01	; 1
     ec2:	8f 01       	movw	r16, r30
     ec4:	0f 5f       	subi	r16, 0xFF	; 255
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
{
	while(1)
	{
		if(*String_1==*String_2)
		{
			*Result = 1;
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	01 c0       	rjmp	.+2      	; 0xece <STR_CompareString+0x1e>
		}
	}
	return 0;
}
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
     ecc:	11 96       	adiw	r26, 0x01	; 1
	while(1)
	{
		if(*String_1==*String_2)
     ece:	29 91       	ld	r18, Y+
     ed0:	fc 01       	movw	r30, r24
     ed2:	31 91       	ld	r19, Z+
     ed4:	cf 01       	movw	r24, r30
     ed6:	23 17       	cp	r18, r19
     ed8:	59 f4       	brne	.+22     	; 0xef0 <STR_CompareString+0x40>
		{
			*Result = 1;
     eda:	fa 01       	movw	r30, r20
     edc:	60 83       	st	Z, r22
			String_1++;
			String_2++;
			if(*String_1=='\0'&&*String_2=='\0')
     ede:	f8 01       	movw	r30, r16
     ee0:	21 91       	ld	r18, Z+
     ee2:	8f 01       	movw	r16, r30
     ee4:	22 23       	and	r18, r18
     ee6:	91 f7       	brne	.-28     	; 0xecc <STR_CompareString+0x1c>
     ee8:	2c 91       	ld	r18, X
     eea:	22 23       	and	r18, r18
     eec:	79 f7       	brne	.-34     	; 0xecc <STR_CompareString+0x1c>
     eee:	0a c0       	rjmp	.+20     	; 0xf04 <STR_CompareString+0x54>
				break;
			continue;
		}
		else if(*String_1=='\0'&&*String_2=='\0')
     ef0:	22 23       	and	r18, r18
     ef2:	31 f4       	brne	.+12     	; 0xf00 <STR_CompareString+0x50>
     ef4:	33 23       	and	r19, r19
     ef6:	21 f4       	brne	.+8      	; 0xf00 <STR_CompareString+0x50>
		{
			*Result = 1;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	fa 01       	movw	r30, r20
     efc:	80 83       	st	Z, r24
			break;
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <STR_CompareString+0x54>
		}
		else
		{
			*Result = 0;
     f00:	fa 01       	movw	r30, r20
     f02:	10 82       	st	Z, r1
			break;
		}
	}
	return 0;
}
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	08 95       	ret

00000f10 <STR_String2Number>:
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	8b 01       	movw	r16, r22
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
     f1e:	fb 01       	movw	r30, r22
     f20:	11 82       	std	Z+1, r1	; 0x01
     f22:	10 82       	st	Z, r1
	while(*String!='\0')
     f24:	fc 01       	movw	r30, r24
     f26:	20 81       	ld	r18, Z
     f28:	22 23       	and	r18, r18
     f2a:	39 f0       	breq	.+14     	; 0xf3a <STR_String2Number+0x2a>
			break;
		}
	}
	return 0;
}
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
     f2c:	31 96       	adiw	r30, 0x01	; 1
     f2e:	ec 01       	movw	r28, r24
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
	{
		String++;
     f30:	21 96       	adiw	r28, 0x01	; 1
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
     f32:	21 91       	ld	r18, Z+
     f34:	22 23       	and	r18, r18
     f36:	e1 f7       	brne	.-8      	; 0xf30 <STR_String2Number+0x20>
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <STR_String2Number+0x2c>
     f3a:	ec 01       	movw	r28, r24
			break;
		}
	}
	return 0;
}
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
     f3c:	7c 01       	movw	r14, r24
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
	}

	do
	{
		String--;
		(*Number)+=((*String-48)*Multiplier);
     f46:	8a 91       	ld	r24, -Y
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	c0 97       	sbiw	r24, 0x30	; 48
     f4c:	84 9f       	mul	r24, r20
     f4e:	90 01       	movw	r18, r0
     f50:	85 9f       	mul	r24, r21
     f52:	30 0d       	add	r19, r0
     f54:	94 9f       	mul	r25, r20
     f56:	30 0d       	add	r19, r0
     f58:	11 24       	eor	r1, r1
     f5a:	f8 01       	movw	r30, r16
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	82 0f       	add	r24, r18
     f62:	93 1f       	adc	r25, r19
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24
		Multiplier*=10;
     f68:	cb 01       	movw	r24, r22
     f6a:	ba 01       	movw	r22, r20
     f6c:	2a e0       	ldi	r18, 0x0A	; 10
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	0e 94 19 11 	call	0x2232	; 0x2232 <__mulsi3>
     f78:	ab 01       	movw	r20, r22
     f7a:	bc 01       	movw	r22, r24
	}while(String!=StartOfString);
     f7c:	ce 15       	cp	r28, r14
     f7e:	df 05       	cpc	r29, r15
     f80:	11 f7       	brne	.-60     	; 0xf46 <STR_String2Number+0x36>
	return 0;
}
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	08 95       	ret

00000f92 <STR_StringReverse>:
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
     f92:	fc 01       	movw	r30, r24
     f94:	20 81       	ld	r18, Z
     f96:	22 23       	and	r18, r18
     f98:	39 f0       	breq	.+14     	; 0xfa8 <STR_StringReverse+0x16>
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
     f9a:	dc 01       	movw	r26, r24
     f9c:	11 96       	adiw	r26, 0x01	; 1
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
	{
		B++;
     f9e:	31 96       	adiw	r30, 0x01	; 1
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
     fa0:	2d 91       	ld	r18, X+
     fa2:	22 23       	and	r18, r18
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <STR_StringReverse+0xc>
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <STR_StringReverse+0x18>
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
     fa8:	fc 01       	movw	r30, r24
	uint8_t Temp = 0;
	while(*B != '\0')
	{
		B++;
	}
	B--;
     faa:	9f 01       	movw	r18, r30
     fac:	21 50       	subi	r18, 0x01	; 1
     fae:	30 40       	sbci	r19, 0x00	; 0
	while(A<B)
     fb0:	82 17       	cp	r24, r18
     fb2:	93 07       	cpc	r25, r19
     fb4:	50 f4       	brcc	.+20     	; 0xfca <STR_StringReverse+0x38>
     fb6:	dc 01       	movw	r26, r24
	{
		//swap
		Temp=*A;
     fb8:	8c 91       	ld	r24, X
		*A=*B;
     fba:	92 91       	ld	r25, -Z
     fbc:	9d 93       	st	X+, r25
		*B=Temp;
     fbe:	80 83       	st	Z, r24
		*String = NULL_TERMINATOR;
	}
	STR_StringReverse(SringCpy);
	return 0;
}
uint8_t STR_StringReverse(uint8_t* String)
     fc0:	cf 01       	movw	r24, r30
     fc2:	01 97       	sbiw	r24, 0x01	; 1
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
     fc4:	a8 17       	cp	r26, r24
     fc6:	b9 07       	cpc	r27, r25
     fc8:	b8 f3       	brcs	.-18     	; 0xfb8 <STR_StringReverse+0x26>
		*A=*B;
		*B=Temp;
		A++;B--;
	}
	return 0;
}
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	08 95       	ret

00000fce <STR_Number2String>:
		Multiplier*=10;
	}while(String!=StartOfString);
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	8a 01       	movw	r16, r20
	uint8_t* SringCpy = String;
	if(Number==0)
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	a1 05       	cpc	r26, r1
     fe8:	b1 05       	cpc	r27, r1
     fea:	21 f4       	brne	.+8      	; 0xff4 <STR_Number2String+0x26>
	{
		*String='0';
     fec:	80 e3       	ldi	r24, 0x30	; 48
     fee:	fa 01       	movw	r30, r20
     ff0:	80 83       	st	Z, r24
     ff2:	1f c0       	rjmp	.+62     	; 0x1032 <STR_Number2String+0x64>
	return 0;
}
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
	uint8_t* SringCpy = String;
	if(Number==0)
     ff4:	ea 01       	movw	r28, r20
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
     ff6:	0f 2e       	mov	r0, r31
     ff8:	fa e0       	ldi	r31, 0x0A	; 10
     ffa:	cf 2e       	mov	r12, r31
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	df 2e       	mov	r13, r31
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	ef 2e       	mov	r14, r31
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	ff 2e       	mov	r15, r31
    1008:	f0 2d       	mov	r31, r0
    100a:	01 c0       	rjmp	.+2      	; 0x100e <STR_Number2String+0x40>
			String++;
    100c:	ef 01       	movw	r28, r30
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	a7 01       	movw	r20, r14
    1014:	96 01       	movw	r18, r12
    1016:	0e 94 38 11 	call	0x2270	; 0x2270 <__udivmodsi4>
    101a:	60 5d       	subi	r22, 0xD0	; 208
    101c:	fe 01       	movw	r30, r28
    101e:	61 93       	st	Z+, r22
			String++;
			Number/=10;
    1020:	82 2f       	mov	r24, r18
    1022:	93 2f       	mov	r25, r19
    1024:	a4 2f       	mov	r26, r20
    1026:	b5 2f       	mov	r27, r21
		}while(Number);
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	a1 05       	cpc	r26, r1
    102c:	b1 05       	cpc	r27, r1
    102e:	71 f7       	brne	.-36     	; 0x100c <STR_Number2String+0x3e>
		*String = NULL_TERMINATOR;
    1030:	19 82       	std	Y+1, r1	; 0x01
	}
	STR_StringReverse(SringCpy);
    1032:	c8 01       	movw	r24, r16
    1034:	0e 94 c9 07 	call	0xf92	; 0xf92 <STR_StringReverse>
	return 0;
}
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	08 95       	ret

0000104c <main>:
 */ 
#include "APP/ROBOT_Control/ROBOT_Control.h"

int main(void)
{
   RC_Init();
    104c:	0e 94 49 00 	call	0x92	; 0x92 <RC_Init>
   while(1)
   {
      RC_Update();
    1050:	0e 94 6a 00 	call	0xd4	; 0xd4 <RC_Update>
    1054:	fd cf       	rjmp	.-6      	; 0x1050 <main+0x4>

00001056 <DIO_SetPinDirection>:
#include "DIO.h"

ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
    1056:	42 30       	cpi	r20, 0x02	; 2
    1058:	08 f0       	brcs	.+2      	; 0x105c <DIO_SetPinDirection+0x6>
    105a:	69 c0       	rjmp	.+210    	; 0x112e <DIO_SetPinDirection+0xd8>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
    105c:	68 30       	cpi	r22, 0x08	; 8
    105e:	08 f0       	brcs	.+2      	; 0x1062 <DIO_SetPinDirection+0xc>
    1060:	68 c0       	rjmp	.+208    	; 0x1132 <DIO_SetPinDirection+0xdc>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	f9 f0       	breq	.+62     	; 0x10a4 <DIO_SetPinDirection+0x4e>
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	30 f0       	brcs	.+12     	; 0x1076 <DIO_SetPinDirection+0x20>
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	91 f1       	breq	.+100    	; 0x10d2 <DIO_SetPinDirection+0x7c>
    106e:	83 30       	cpi	r24, 0x03	; 3
    1070:	09 f0       	breq	.+2      	; 0x1074 <DIO_SetPinDirection+0x1e>
    1072:	61 c0       	rjmp	.+194    	; 0x1136 <DIO_SetPinDirection+0xe0>
    1074:	45 c0       	rjmp	.+138    	; 0x1100 <DIO_SetPinDirection+0xaa>
		{
			case PORT_A:
				BIT_WRITE(DDRA,PinNo,PinDirection);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	06 2e       	mov	r0, r22
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_SetPinDirection+0x2c>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO_SetPinDirection+0x28>
    1086:	80 95       	com	r24
    1088:	9a b3       	in	r25, 0x1a	; 26
    108a:	89 23       	and	r24, r25
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	9a 01       	movw	r18, r20
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_SetPinDirection+0x40>
    1092:	22 0f       	add	r18, r18
    1094:	33 1f       	adc	r19, r19
    1096:	6a 95       	dec	r22
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_SetPinDirection+0x3c>
    109a:	b9 01       	movw	r22, r18
    109c:	68 2b       	or	r22, r24
    109e:	6a bb       	out	0x1a, r22	; 26
				u8_ErrorState=ERROR_OK;
    10a0:	80 e0       	ldi	r24, 0x00	; 0
				break;
    10a2:	08 95       	ret
			case PORT_B:
				BIT_WRITE(DDRB,PinNo,PinDirection);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	06 2e       	mov	r0, r22
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_SetPinDirection+0x5a>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_SetPinDirection+0x56>
    10b4:	80 95       	com	r24
    10b6:	97 b3       	in	r25, 0x17	; 23
    10b8:	89 23       	and	r24, r25
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	9a 01       	movw	r18, r20
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_SetPinDirection+0x6e>
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	6a 95       	dec	r22
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_SetPinDirection+0x6a>
    10c8:	b9 01       	movw	r22, r18
    10ca:	68 2b       	or	r22, r24
    10cc:	67 bb       	out	0x17, r22	; 23
				u8_ErrorState=ERROR_OK;
    10ce:	80 e0       	ldi	r24, 0x00	; 0
				break;
    10d0:	08 95       	ret
			case PORT_C:
				BIT_WRITE(DDRC,PinNo,PinDirection);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	06 2e       	mov	r0, r22
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_SetPinDirection+0x88>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_SetPinDirection+0x84>
    10e2:	80 95       	com	r24
    10e4:	94 b3       	in	r25, 0x14	; 20
    10e6:	89 23       	and	r24, r25
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	9a 01       	movw	r18, r20
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_SetPinDirection+0x9c>
    10ee:	22 0f       	add	r18, r18
    10f0:	33 1f       	adc	r19, r19
    10f2:	6a 95       	dec	r22
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_SetPinDirection+0x98>
    10f6:	b9 01       	movw	r22, r18
    10f8:	68 2b       	or	r22, r24
    10fa:	64 bb       	out	0x14, r22	; 20
				u8_ErrorState=ERROR_OK;
    10fc:	80 e0       	ldi	r24, 0x00	; 0
				break;
    10fe:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	06 2e       	mov	r0, r22
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_SetPinDirection+0xb6>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_SetPinDirection+0xb2>
    1110:	80 95       	com	r24
    1112:	91 b3       	in	r25, 0x11	; 17
    1114:	89 23       	and	r24, r25
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	9a 01       	movw	r18, r20
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_SetPinDirection+0xca>
    111c:	22 0f       	add	r18, r18
    111e:	33 1f       	adc	r19, r19
    1120:	6a 95       	dec	r22
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_SetPinDirection+0xc6>
    1124:	b9 01       	movw	r22, r18
    1126:	68 2b       	or	r22, r24
    1128:	61 bb       	out	0x11, r22	; 17
				u8_ErrorState=ERROR_OK;
    112a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    112c:	08 95       	ret
ERROR_STATE_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_INPUT!=PinDirection)&&(PIN_OUTPUT!=PinDirection))
	{
		u8_ErrorState=ERROR_NOK;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	08 95       	ret
			case PORT_D:
				BIT_WRITE(DDRD,PinNo,PinDirection);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    1136:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}		
	}
	return u8_ErrorState;
}
    1138:	08 95       	ret

0000113a <DIO_WritePin>:

ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
    113a:	42 30       	cpi	r20, 0x02	; 2
    113c:	08 f0       	brcs	.+2      	; 0x1140 <DIO_WritePin+0x6>
    113e:	69 c0       	rjmp	.+210    	; 0x1212 <DIO_WritePin+0xd8>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(PinNo>PIN7)
    1140:	68 30       	cpi	r22, 0x08	; 8
    1142:	08 f0       	brcs	.+2      	; 0x1146 <DIO_WritePin+0xc>
    1144:	68 c0       	rjmp	.+208    	; 0x1216 <DIO_WritePin+0xdc>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	f9 f0       	breq	.+62     	; 0x1188 <DIO_WritePin+0x4e>
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	30 f0       	brcs	.+12     	; 0x115a <DIO_WritePin+0x20>
    114e:	82 30       	cpi	r24, 0x02	; 2
    1150:	91 f1       	breq	.+100    	; 0x11b6 <DIO_WritePin+0x7c>
    1152:	83 30       	cpi	r24, 0x03	; 3
    1154:	09 f0       	breq	.+2      	; 0x1158 <DIO_WritePin+0x1e>
    1156:	61 c0       	rjmp	.+194    	; 0x121a <DIO_WritePin+0xe0>
    1158:	45 c0       	rjmp	.+138    	; 0x11e4 <DIO_WritePin+0xaa>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PinValue);
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	06 2e       	mov	r0, r22
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_WritePin+0x2c>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_WritePin+0x28>
    116a:	80 95       	com	r24
    116c:	9b b3       	in	r25, 0x1b	; 27
    116e:	89 23       	and	r24, r25
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	9a 01       	movw	r18, r20
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_WritePin+0x40>
    1176:	22 0f       	add	r18, r18
    1178:	33 1f       	adc	r19, r19
    117a:	6a 95       	dec	r22
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_WritePin+0x3c>
    117e:	b9 01       	movw	r22, r18
    1180:	68 2b       	or	r22, r24
    1182:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    1184:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1186:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PinValue);
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	06 2e       	mov	r0, r22
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_WritePin+0x5a>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_WritePin+0x56>
    1198:	80 95       	com	r24
    119a:	98 b3       	in	r25, 0x18	; 24
    119c:	89 23       	and	r24, r25
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	9a 01       	movw	r18, r20
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_WritePin+0x6e>
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	6a 95       	dec	r22
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_WritePin+0x6a>
    11ac:	b9 01       	movw	r22, r18
    11ae:	68 2b       	or	r22, r24
    11b0:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    11b2:	80 e0       	ldi	r24, 0x00	; 0
				break;
    11b4:	08 95       	ret
			case PORT_C:
				BIT_WRITE(PORTC,PinNo,PinValue);
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	06 2e       	mov	r0, r22
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_WritePin+0x88>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_WritePin+0x84>
    11c6:	80 95       	com	r24
    11c8:	95 b3       	in	r25, 0x15	; 21
    11ca:	89 23       	and	r24, r25
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	9a 01       	movw	r18, r20
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_WritePin+0x9c>
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	6a 95       	dec	r22
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_WritePin+0x98>
    11da:	b9 01       	movw	r22, r18
    11dc:	68 2b       	or	r22, r24
    11de:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    11e0:	80 e0       	ldi	r24, 0x00	; 0
				break;
    11e2:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	06 2e       	mov	r0, r22
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_WritePin+0xb6>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_WritePin+0xb2>
    11f4:	80 95       	com	r24
    11f6:	92 b3       	in	r25, 0x12	; 18
    11f8:	89 23       	and	r24, r25
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	9a 01       	movw	r18, r20
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_WritePin+0xca>
    1200:	22 0f       	add	r18, r18
    1202:	33 1f       	adc	r19, r19
    1204:	6a 95       	dec	r22
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_WritePin+0xc6>
    1208:	b9 01       	movw	r22, r18
    120a:	68 2b       	or	r22, r24
    120c:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    120e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1210:	08 95       	ret
ERROR_STATE_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((PIN_LOW!=PinValue)&&(PIN_HIGH!=PinValue))
	{
		u8_ErrorState=ERROR_NOK;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	08 95       	ret
	}
	else if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	08 95       	ret
			case PORT_D:
				BIT_WRITE(PORTD,PinNo,PinValue);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    121a:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    121c:	08 95       	ret

0000121e <DIO_TogglePin>:
ERROR_STATE_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    121e:	68 30       	cpi	r22, 0x08	; 8
    1220:	08 f0       	brcs	.+2      	; 0x1224 <DIO_TogglePin+0x6>
    1222:	42 c0       	rjmp	.+132    	; 0x12a8 <DIO_TogglePin+0x8a>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	b1 f0       	breq	.+44     	; 0x1254 <DIO_TogglePin+0x36>
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	30 f0       	brcs	.+12     	; 0x1238 <DIO_TogglePin+0x1a>
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	01 f1       	breq	.+64     	; 0x1270 <DIO_TogglePin+0x52>
    1230:	83 30       	cpi	r24, 0x03	; 3
    1232:	09 f0       	breq	.+2      	; 0x1236 <DIO_TogglePin+0x18>
    1234:	3b c0       	rjmp	.+118    	; 0x12ac <DIO_TogglePin+0x8e>
    1236:	2a c0       	rjmp	.+84     	; 0x128c <DIO_TogglePin+0x6e>
		{
			case PORT_A:
				BIT_TOGGLE(PORTA,PinNo);
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	9c 01       	movw	r18, r24
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_TogglePin+0x26>
    1240:	22 0f       	add	r18, r18
    1242:	33 1f       	adc	r19, r19
    1244:	6a 95       	dec	r22
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_TogglePin+0x22>
    1248:	b9 01       	movw	r22, r18
    124a:	8b b3       	in	r24, 0x1b	; 27
    124c:	68 27       	eor	r22, r24
    124e:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    1250:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1252:	08 95       	ret
			case PORT_B:
				BIT_TOGGLE(PORTB,PinNo);
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	9c 01       	movw	r18, r24
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_TogglePin+0x42>
    125c:	22 0f       	add	r18, r18
    125e:	33 1f       	adc	r19, r19
    1260:	6a 95       	dec	r22
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_TogglePin+0x3e>
    1264:	b9 01       	movw	r22, r18
    1266:	88 b3       	in	r24, 0x18	; 24
    1268:	68 27       	eor	r22, r24
    126a:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    126c:	80 e0       	ldi	r24, 0x00	; 0
				break;
    126e:	08 95       	ret
			case PORT_C:
				BIT_TOGGLE(PORTC,PinNo);
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	9c 01       	movw	r18, r24
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_TogglePin+0x5e>
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	6a 95       	dec	r22
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_TogglePin+0x5a>
    1280:	b9 01       	movw	r22, r18
    1282:	85 b3       	in	r24, 0x15	; 21
    1284:	68 27       	eor	r22, r24
    1286:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    1288:	80 e0       	ldi	r24, 0x00	; 0
				break;
    128a:	08 95       	ret
			case PORT_D:
				BIT_TOGGLE(PORTD,PinNo);
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	9c 01       	movw	r18, r24
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_TogglePin+0x7a>
    1294:	22 0f       	add	r18, r18
    1296:	33 1f       	adc	r19, r19
    1298:	6a 95       	dec	r22
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_TogglePin+0x76>
    129c:	b9 01       	movw	r22, r18
    129e:	82 b3       	in	r24, 0x12	; 18
    12a0:	68 27       	eor	r22, r24
    12a2:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    12a4:	80 e0       	ldi	r24, 0x00	; 0
				break;
    12a6:	08 95       	ret
ERROR_STATE_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	08 95       	ret
			case PORT_D:
				BIT_TOGGLE(PORTD,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
				break;	
		}	
	}	
	return u8_ErrorState;
}
    12ae:	08 95       	ret

000012b0 <DIO_ReadPin>:
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    12b0:	68 30       	cpi	r22, 0x08	; 8
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <DIO_ReadPin+0x6>
    12b4:	46 c0       	rjmp	.+140    	; 0x1342 <DIO_ReadPin+0x92>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else if(NULL_PTR==PinData)
    12b6:	41 15       	cp	r20, r1
    12b8:	51 05       	cpc	r21, r1
    12ba:	09 f4       	brne	.+2      	; 0x12be <DIO_ReadPin+0xe>
    12bc:	44 c0       	rjmp	.+136    	; 0x1346 <DIO_ReadPin+0x96>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PortName)
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	b1 f0       	breq	.+44     	; 0x12ee <DIO_ReadPin+0x3e>
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	30 f0       	brcs	.+12     	; 0x12d2 <DIO_ReadPin+0x22>
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	01 f1       	breq	.+64     	; 0x130a <DIO_ReadPin+0x5a>
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <DIO_ReadPin+0x20>
    12ce:	3d c0       	rjmp	.+122    	; 0x134a <DIO_ReadPin+0x9a>
    12d0:	2a c0       	rjmp	.+84     	; 0x1326 <DIO_ReadPin+0x76>
		{
			case PORT_A:
				* PinData=BIT_GET(PINA,PinNo);
    12d2:	89 b3       	in	r24, 0x19	; 25
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	9c 01       	movw	r18, r24
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_ReadPin+0x2e>
    12da:	35 95       	asr	r19
    12dc:	27 95       	ror	r18
    12de:	6a 95       	dec	r22
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_ReadPin+0x2a>
    12e2:	b9 01       	movw	r22, r18
    12e4:	61 70       	andi	r22, 0x01	; 1
    12e6:	fa 01       	movw	r30, r20
    12e8:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    12ea:	80 e0       	ldi	r24, 0x00	; 0
				break;
    12ec:	08 95       	ret
			case PORT_B:
				* PinData=BIT_GET(PINB,PinNo);
    12ee:	86 b3       	in	r24, 0x16	; 22
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	9c 01       	movw	r18, r24
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_ReadPin+0x4a>
    12f6:	35 95       	asr	r19
    12f8:	27 95       	ror	r18
    12fa:	6a 95       	dec	r22
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_ReadPin+0x46>
    12fe:	b9 01       	movw	r22, r18
    1300:	61 70       	andi	r22, 0x01	; 1
    1302:	fa 01       	movw	r30, r20
    1304:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    1306:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1308:	08 95       	ret
			case PORT_C:
				* PinData=BIT_GET(PINC,PinNo);
    130a:	83 b3       	in	r24, 0x13	; 19
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9c 01       	movw	r18, r24
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_ReadPin+0x66>
    1312:	35 95       	asr	r19
    1314:	27 95       	ror	r18
    1316:	6a 95       	dec	r22
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_ReadPin+0x62>
    131a:	b9 01       	movw	r22, r18
    131c:	61 70       	andi	r22, 0x01	; 1
    131e:	fa 01       	movw	r30, r20
    1320:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    1322:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1324:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
    1326:	80 b3       	in	r24, 0x10	; 16
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9c 01       	movw	r18, r24
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_ReadPin+0x82>
    132e:	35 95       	asr	r19
    1330:	27 95       	ror	r18
    1332:	6a 95       	dec	r22
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DIO_ReadPin+0x7e>
    1336:	b9 01       	movw	r22, r18
    1338:	61 70       	andi	r22, 0x01	; 1
    133a:	fa 01       	movw	r30, r20
    133c:	60 83       	st	Z, r22
				u8_ErrorState=ERROR_OK;
    133e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1340:	08 95       	ret
ERROR_STATE_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	08 95       	ret
	}
	else if(NULL_PTR==PinData)
	{
		u8_ErrorState=ERROR_NOK;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	08 95       	ret
			case PORT_D:
				* PinData=BIT_GET(PIND,PinNo);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    134a:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}	
	return u8_ErrorState;
}
    134c:	08 95       	ret

0000134e <DIO_EnablePinPullup>:


ERROR_STATE_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
    134e:	68 30       	cpi	r22, 0x08	; 8
    1350:	08 f0       	brcs	.+2      	; 0x1354 <DIO_EnablePinPullup+0x6>
    1352:	4e c0       	rjmp	.+156    	; 0x13f0 <DIO_EnablePinPullup+0xa2>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{	
		switch(PortName)
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	c9 f0       	breq	.+50     	; 0x138a <DIO_EnablePinPullup+0x3c>
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	30 f0       	brcs	.+12     	; 0x1368 <DIO_EnablePinPullup+0x1a>
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	31 f1       	breq	.+76     	; 0x13ac <DIO_EnablePinPullup+0x5e>
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	09 f0       	breq	.+2      	; 0x1366 <DIO_EnablePinPullup+0x18>
    1364:	47 c0       	rjmp	.+142    	; 0x13f4 <DIO_EnablePinPullup+0xa6>
    1366:	33 c0       	rjmp	.+102    	; 0x13ce <DIO_EnablePinPullup+0x80>
		{
			case PORT_A:
				BIT_WRITE(PORTA,PinNo,PIN_HIGH);
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9c 01       	movw	r18, r24
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <DIO_EnablePinPullup+0x26>
    1370:	22 0f       	add	r18, r18
    1372:	33 1f       	adc	r19, r19
    1374:	6a 95       	dec	r22
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <DIO_EnablePinPullup+0x22>
    1378:	b9 01       	movw	r22, r18
    137a:	92 2f       	mov	r25, r18
    137c:	90 95       	com	r25
    137e:	8b b3       	in	r24, 0x1b	; 27
    1380:	89 23       	and	r24, r25
    1382:	68 2b       	or	r22, r24
    1384:	6b bb       	out	0x1b, r22	; 27
				u8_ErrorState=ERROR_OK;
    1386:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1388:	08 95       	ret
			case PORT_B:
				BIT_WRITE(PORTB,PinNo,PIN_HIGH);
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9c 01       	movw	r18, r24
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_EnablePinPullup+0x48>
    1392:	22 0f       	add	r18, r18
    1394:	33 1f       	adc	r19, r19
    1396:	6a 95       	dec	r22
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_EnablePinPullup+0x44>
    139a:	b9 01       	movw	r22, r18
    139c:	92 2f       	mov	r25, r18
    139e:	90 95       	com	r25
    13a0:	88 b3       	in	r24, 0x18	; 24
    13a2:	89 23       	and	r24, r25
    13a4:	68 2b       	or	r22, r24
    13a6:	68 bb       	out	0x18, r22	; 24
				u8_ErrorState=ERROR_OK;
    13a8:	80 e0       	ldi	r24, 0x00	; 0
				break;                            
    13aa:	08 95       	ret
			case PORT_C:                          
				BIT_WRITE(PORTC,PinNo,PIN_HIGH);
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	9c 01       	movw	r18, r24
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_EnablePinPullup+0x6a>
    13b4:	22 0f       	add	r18, r18
    13b6:	33 1f       	adc	r19, r19
    13b8:	6a 95       	dec	r22
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_EnablePinPullup+0x66>
    13bc:	b9 01       	movw	r22, r18
    13be:	92 2f       	mov	r25, r18
    13c0:	90 95       	com	r25
    13c2:	85 b3       	in	r24, 0x15	; 21
    13c4:	89 23       	and	r24, r25
    13c6:	68 2b       	or	r22, r24
    13c8:	65 bb       	out	0x15, r22	; 21
				u8_ErrorState=ERROR_OK;
    13ca:	80 e0       	ldi	r24, 0x00	; 0
				break;                            
    13cc:	08 95       	ret
			case PORT_D:                          
				BIT_WRITE(PORTD,PinNo,PIN_HIGH);
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	9c 01       	movw	r18, r24
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_EnablePinPullup+0x8c>
    13d6:	22 0f       	add	r18, r18
    13d8:	33 1f       	adc	r19, r19
    13da:	6a 95       	dec	r22
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_EnablePinPullup+0x88>
    13de:	b9 01       	movw	r22, r18
    13e0:	92 2f       	mov	r25, r18
    13e2:	90 95       	com	r25
    13e4:	82 b3       	in	r24, 0x12	; 18
    13e6:	89 23       	and	r24, r25
    13e8:	68 2b       	or	r22, r24
    13ea:	62 bb       	out	0x12, r22	; 18
				u8_ErrorState=ERROR_OK;
    13ec:	80 e0       	ldi	r24, 0x00	; 0
				break;
    13ee:	08 95       	ret
ERROR_STATE_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PinNo>PIN7)
	{
		u8_ErrorState=ERROR_NOK;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	08 95       	ret
			case PORT_D:                          
				BIT_WRITE(PORTD,PinNo,PIN_HIGH);
				u8_ErrorState=ERROR_OK;
				break;
			default:
				u8_ErrorState=ERROR_NOK;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}	
	}	
	return u8_ErrorState;
    13f6:	08 95       	ret

000013f8 <ICU_Reset>:
extern Str_ICUConfig_t gastr_ICUConfig[ICU_CHANNEL_NUMBERS];

static ERROR_STATE_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((ICU1_FALLING_EDGE!=ICUEdgeDetector )&&(ICU1_RISING_EDGE!=ICUEdgeDetector ))
    13f8:	62 30       	cpi	r22, 0x02	; 2
    13fa:	88 f4       	brcc	.+34     	; 0x141e <ICU_Reset+0x26>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    13fc:	88 23       	and	r24, r24
    13fe:	89 f4       	brne	.+34     	; 0x1422 <ICU_Reset+0x2a>
		{
			#if  ICU1
				case ICU_1:
					REG_WRITE(TCNT1,CLEAR_REGISTER);
    1400:	1d bc       	out	0x2d, r1	; 45
    1402:	1c bc       	out	0x2c, r1	; 44
					BIT_WRITE(TCCR1B,ICES1,ICUEdgeDetector);
    1404:	62 95       	swap	r22
    1406:	66 0f       	add	r22, r22
    1408:	66 0f       	add	r22, r22
    140a:	60 7c       	andi	r22, 0xC0	; 192
    140c:	8e b5       	in	r24, 0x2e	; 46
    140e:	8f 7b       	andi	r24, 0xBF	; 191
    1410:	68 2b       	or	r22, r24
    1412:	6e bd       	out	0x2e, r22	; 46
					BIT_WRITE(TIFR,TOV1,BIT_HIGH);
					BIT_WRITE(TIFR,ICF1,BIT_HIGH);
    1414:	88 b7       	in	r24, 0x38	; 56
    1416:	84 62       	ori	r24, 0x24	; 36
    1418:	88 bf       	out	0x38, r24	; 56
					u8_ErrorState = ERROR_OK;
    141a:	80 e0       	ldi	r24, 0x00	; 0
					break;
    141c:	08 95       	ret
static ERROR_STATE_t ICU_Reset(uint8_t ICUNumber,uint8_t ICUEdgeDetector)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((ICU1_FALLING_EDGE!=ICUEdgeDetector )&&(ICU1_RISING_EDGE!=ICUEdgeDetector ))
	{
		u8_ErrorState = ERROR_NOK;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	08 95       	ret
					BIT_WRITE(TIFR,ICF1,BIT_HIGH);
					u8_ErrorState = ERROR_OK;
					break;
			#endif
			default:
				u8_ErrorState = ERROR_NOK;
    1422:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}			
	}
	return u8_ErrorState;
}
    1424:	08 95       	ret

00001426 <ICU_Init>:
}

ERROR_STATE_t ICU_Init(uint8_t ICUNumber)
{	
	uint8_t u8_ErrorState = ERROR_OK;
	switch(ICUNumber)
    1426:	88 23       	and	r24, r24
    1428:	11 f5       	brne	.+68     	; 0x146e <ICU_Init+0x48>
	{
		#if  ICU1
			case ICU_1:
				DIO_SetPinDirection(ICU1_PORT,ICU1_PIN,PIN_INPUT);
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	66 e0       	ldi	r22, 0x06	; 6
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
				TWO_BITS_WRITE(TCCR1A,WGM10,TWO_BITS_GET(gastr_ICUConfig[ICU_1].ICUMode,BIT_0));
    1434:	80 91 94 00 	lds	r24, 0x0094
    1438:	28 2f       	mov	r18, r24
    143a:	23 70       	andi	r18, 0x03	; 3
    143c:	9f b5       	in	r25, 0x2f	; 47
    143e:	9c 7f       	andi	r25, 0xFC	; 252
    1440:	92 2b       	or	r25, r18
    1442:	9f bd       	out	0x2f, r25	; 47
				TWO_BITS_WRITE(TCCR1B,WGM12,TWO_BITS_GET(gastr_ICUConfig[ICU_1].ICUMode,BIT_2));
    1444:	86 95       	lsr	r24
    1446:	86 95       	lsr	r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	83 70       	andi	r24, 0x03	; 3
    144c:	90 70       	andi	r25, 0x00	; 0
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	9e b5       	in	r25, 0x2e	; 46
    145c:	97 7e       	andi	r25, 0xE7	; 231
    145e:	89 2b       	or	r24, r25
				THREE_BITS_WRITE(TCCR1B,CS10,gastr_ICUConfig[ICU_1].ICUClkSource);
    1460:	88 7f       	andi	r24, 0xF8	; 248
    1462:	90 91 95 00 	lds	r25, 0x0095
    1466:	89 2b       	or	r24, r25
    1468:	8e bd       	out	0x2e, r24	; 46
				u8_ErrorState=ERROR_OK;
    146a:	80 e0       	ldi	r24, 0x00	; 0
				break;
    146c:	08 95       	ret
		#endif
		default:
			u8_ErrorState=ERROR_NOK;
    146e:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}	
	return u8_ErrorState;
}
    1470:	08 95       	ret

00001472 <ICU_UpdateTimeOn>:

ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
    1472:	8f 92       	push	r8
    1474:	9f 92       	push	r9
    1476:	af 92       	push	r10
    1478:	bf 92       	push	r11
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	8b 01       	movw	r16, r22
    1488:	7a 01       	movw	r14, r20
	uint8_t u8_ErrorState=ERROR_OK;
	if((NULL_PTR==ICUState) || (NULL_PTR==TimeOnValue))
    148a:	61 15       	cp	r22, r1
    148c:	71 05       	cpc	r23, r1
    148e:	09 f4       	brne	.+2      	; 0x1492 <ICU_UpdateTimeOn+0x20>
    1490:	9c c0       	rjmp	.+312    	; 0x15ca <ICU_UpdateTimeOn+0x158>
    1492:	41 15       	cp	r20, r1
    1494:	51 05       	cpc	r21, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <ICU_UpdateTimeOn+0x28>
    1498:	9a c0       	rjmp	.+308    	; 0x15ce <ICU_UpdateTimeOn+0x15c>
	{
		u8_ErrorState = ERROR_NOK;
	}
	else
	{
		switch(ICUNumber)
    149a:	88 23       	and	r24, r24
    149c:	09 f0       	breq	.+2      	; 0x14a0 <ICU_UpdateTimeOn+0x2e>
    149e:	99 c0       	rjmp	.+306    	; 0x15d2 <ICU_UpdateTimeOn+0x160>
		{
			#if  ICU1
				case ICU_1:
				{
					switch(*ICUState)
    14a0:	fb 01       	movw	r30, r22
    14a2:	80 81       	ld	r24, Z
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	91 f0       	breq	.+36     	; 0x14cc <ICU_UpdateTimeOn+0x5a>
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	20 f0       	brcs	.+8      	; 0x14b4 <ICU_UpdateTimeOn+0x42>
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <ICU_UpdateTimeOn+0x40>
    14b0:	92 c0       	rjmp	.+292    	; 0x15d6 <ICU_UpdateTimeOn+0x164>
    14b2:	26 c0       	rjmp	.+76     	; 0x1500 <ICU_UpdateTimeOn+0x8e>
					{
						case START_STATE:
						{
							if(ERROR_OK != ICU_Reset(ICU_1,ICU1_RISING_EDGE))
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	61 e0       	ldi	r22, 0x01	; 1
    14b8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <ICU_Reset>
    14bc:	88 23       	and	r24, r24
    14be:	09 f0       	breq	.+2      	; 0x14c2 <ICU_UpdateTimeOn+0x50>
    14c0:	8c c0       	rjmp	.+280    	; 0x15da <ICU_UpdateTimeOn+0x168>
							{
								u8_ErrorState = ERROR_NOK;
							}
							else
							{
								*ICUState=WAITING_RISING_EDGE_STATE;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	f8 01       	movw	r30, r16
    14c6:	80 83       	st	Z, r24
								u8_ErrorState = ERROR_OK;															
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	8e c0       	rjmp	.+284    	; 0x15e8 <ICU_UpdateTimeOn+0x176>
							}
							break;
						}
						case WAITING_RISING_EDGE_STATE:
						{
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    14cc:	88 b7       	in	r24, 0x38	; 56
    14ce:	82 95       	swap	r24
    14d0:	86 95       	lsr	r24
    14d2:	87 70       	andi	r24, 0x07	; 7
    14d4:	80 ff       	sbrs	r24, 0
    14d6:	83 c0       	rjmp	.+262    	; 0x15de <ICU_UpdateTimeOn+0x16c>
							{
								if(ERROR_OK!=ICU_Reset(ICU_1,ICU1_FALLING_EDGE))
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <ICU_Reset>
    14e0:	88 23       	and	r24, r24
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <ICU_UpdateTimeOn+0x74>
    14e4:	7e c0       	rjmp	.+252    	; 0x15e2 <ICU_UpdateTimeOn+0x170>
								{
									u8_ErrorState = ERROR_NOK;
								}
								else
								{
									OverflowCounter=0;
    14e6:	10 92 b8 00 	sts	0x00B8, r1
    14ea:	10 92 b9 00 	sts	0x00B9, r1
    14ee:	10 92 ba 00 	sts	0x00BA, r1
    14f2:	10 92 bb 00 	sts	0x00BB, r1
									*ICUState=WAITING_FALLING_EDGE_STATE;
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	f8 01       	movw	r30, r16
    14fa:	80 83       	st	Z, r24
									u8_ErrorState = ERROR_OK;									
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	74 c0       	rjmp	.+232    	; 0x15e8 <ICU_UpdateTimeOn+0x176>
							}
							break;
						}
						case WAITING_FALLING_EDGE_STATE:
						{
							if(OVERFLOW_FLAG_UP==(BIT_GET(TIFR,TOV1)))
    1500:	88 b7       	in	r24, 0x38	; 56
    1502:	86 95       	lsr	r24
    1504:	86 95       	lsr	r24
    1506:	80 ff       	sbrs	r24, 0
    1508:	16 c0       	rjmp	.+44     	; 0x1536 <ICU_UpdateTimeOn+0xc4>
							{
								OverflowCounter++;
    150a:	80 91 b8 00 	lds	r24, 0x00B8
    150e:	90 91 b9 00 	lds	r25, 0x00B9
    1512:	a0 91 ba 00 	lds	r26, 0x00BA
    1516:	b0 91 bb 00 	lds	r27, 0x00BB
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	a1 1d       	adc	r26, r1
    151e:	b1 1d       	adc	r27, r1
    1520:	80 93 b8 00 	sts	0x00B8, r24
    1524:	90 93 b9 00 	sts	0x00B9, r25
    1528:	a0 93 ba 00 	sts	0x00BA, r26
    152c:	b0 93 bb 00 	sts	0x00BB, r27
								BIT_WRITE(TIFR,TOV1,BIT_HIGH);
    1530:	88 b7       	in	r24, 0x38	; 56
    1532:	84 60       	ori	r24, 0x04	; 4
    1534:	88 bf       	out	0x38, r24	; 56
								u8_ErrorState = ERROR_OK;
							}
							
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    1536:	88 b7       	in	r24, 0x38	; 56
    1538:	82 95       	swap	r24
    153a:	86 95       	lsr	r24
    153c:	87 70       	andi	r24, 0x07	; 7
    153e:	80 ff       	sbrs	r24, 0
    1540:	52 c0       	rjmp	.+164    	; 0x15e6 <ICU_UpdateTimeOn+0x174>
	{
		switch(ICUNumber)
		{
			#if  ICU1
				case ICU_1:
					CounterNumber=(uint64_t)(REG_GET(ICR1)+(OverflowCounter*ICU1_MAX_COUNT));
    1542:	60 91 b8 00 	lds	r22, 0x00B8
    1546:	70 91 b9 00 	lds	r23, 0x00B9
    154a:	80 91 ba 00 	lds	r24, 0x00BA
    154e:	90 91 bb 00 	lds	r25, 0x00BB
    1552:	2f ef       	ldi	r18, 0xFF	; 255
    1554:	3f ef       	ldi	r19, 0xFF	; 255
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	0e 94 19 11 	call	0x2232	; 0x2232 <__mulsi3>
    155e:	ab 01       	movw	r20, r22
    1560:	bc 01       	movw	r22, r24
    1562:	86 b5       	in	r24, 0x26	; 38
    1564:	97 b5       	in	r25, 0x27	; 39
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	84 0f       	add	r24, r20
    156c:	95 1f       	adc	r25, r21
    156e:	a6 1f       	adc	r26, r22
    1570:	b7 1f       	adc	r27, r23
					*TimeOnValue = (CounterNumber*((double)gastr_ICUConfig[ICU_1].ICUPrescaler/F_CPU));
    1572:	28 2f       	mov	r18, r24
    1574:	39 2f       	mov	r19, r25
    1576:	4a 2f       	mov	r20, r26
    1578:	5b 2f       	mov	r21, r27
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__floatundisf>
    1586:	4b 01       	movw	r8, r22
    1588:	5c 01       	movw	r10, r24
    158a:	60 91 96 00 	lds	r22, 0x0096
    158e:	70 91 97 00 	lds	r23, 0x0097
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__floatunsisf>
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	34 e2       	ldi	r19, 0x24	; 36
    159e:	44 ef       	ldi	r20, 0xF4	; 244
    15a0:	5a e4       	ldi	r21, 0x4A	; 74
    15a2:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__divsf3>
    15a6:	9b 01       	movw	r18, r22
    15a8:	ac 01       	movw	r20, r24
    15aa:	c5 01       	movw	r24, r10
    15ac:	b4 01       	movw	r22, r8
    15ae:	0e 94 b6 10 	call	0x216c	; 0x216c <__mulsf3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	f7 01       	movw	r30, r14
    15b8:	80 83       	st	Z, r24
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	a2 83       	std	Z+2, r26	; 0x02
    15be:	b3 83       	std	Z+3, r27	; 0x03
								{
									u8_ErrorState = ERROR_NOK;
								}
								else
								{
									*ICUState=END_STATE;
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	f8 01       	movw	r30, r16
    15c4:	80 83       	st	Z, r24
									u8_ErrorState = ERROR_OK;	
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	0f c0       	rjmp	.+30     	; 0x15e8 <ICU_UpdateTimeOn+0x176>
ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
	if((NULL_PTR==ICUState) || (NULL_PTR==TimeOnValue))
	{
		u8_ErrorState = ERROR_NOK;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	0d c0       	rjmp	.+26     	; 0x15e8 <ICU_UpdateTimeOn+0x176>
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	0b c0       	rjmp	.+22     	; 0x15e8 <ICU_UpdateTimeOn+0x176>
					}
					break;
				}
			#endif
			default:
				u8_ErrorState= ERROR_NOK;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	09 c0       	rjmp	.+18     	; 0x15e8 <ICU_UpdateTimeOn+0x176>
								
							}
							break;
						}
						default:
							u8_ErrorState = ERROR_NOK;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	07 c0       	rjmp	.+14     	; 0x15e8 <ICU_UpdateTimeOn+0x176>
					{
						case START_STATE:
						{
							if(ERROR_OK != ICU_Reset(ICU_1,ICU1_RISING_EDGE))
							{
								u8_ErrorState = ERROR_NOK;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	05 c0       	rjmp	.+10     	; 0x15e8 <ICU_UpdateTimeOn+0x176>
	return u8_ErrorState;
}

ERROR_STATE_t ICU_UpdateTimeOn(uint8_t ICUNumber,ptr_uint8_t ICUState,ptr_double64_t TimeOnValue)
{
	uint8_t u8_ErrorState=ERROR_OK;
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	03 c0       	rjmp	.+6      	; 0x15e8 <ICU_UpdateTimeOn+0x176>
						{
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
							{
								if(ERROR_OK!=ICU_Reset(ICU_1,ICU1_FALLING_EDGE))
								{
									u8_ErrorState = ERROR_NOK;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	01 c0       	rjmp	.+2      	; 0x15e8 <ICU_UpdateTimeOn+0x176>
								OverflowCounter++;
								BIT_WRITE(TIFR,TOV1,BIT_HIGH);
								u8_ErrorState = ERROR_OK;
							}
							
							if(ICU_FLAG_UP==(BIT_GET(TIFR,ICF1)))
    15e6:	80 e0       	ldi	r24, 0x00	; 0
				u8_ErrorState= ERROR_NOK;
				break;
		}
	}
	return u8_ErrorState;
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	bf 90       	pop	r11
    15f6:	af 90       	pop	r10
    15f8:	9f 90       	pop	r9
    15fa:	8f 90       	pop	r8
    15fc:	08 95       	ret

000015fe <PWM_Init>:
extern Str_PWMConfig_t gastr_PWMConfig[PWM_CHANNEL_NUMBERS];

ERROR_STATE_t PWM_Init(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    15fe:	88 23       	and	r24, r24
    1600:	69 f5       	brne	.+90     	; 0x165c <PWM_Init+0x5e>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				BIT_WRITE(TCCR0,WGM00,BIT_GET(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMMode,BIT0));
    1602:	20 91 99 00 	lds	r18, 0x0099
    1606:	42 2f       	mov	r20, r18
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	41 70       	andi	r20, 0x01	; 1
    160c:	50 70       	andi	r21, 0x00	; 0
    160e:	00 24       	eor	r0, r0
    1610:	56 95       	lsr	r21
    1612:	47 95       	ror	r20
    1614:	07 94       	ror	r0
    1616:	56 95       	lsr	r21
    1618:	47 95       	ror	r20
    161a:	07 94       	ror	r0
    161c:	54 2f       	mov	r21, r20
    161e:	40 2d       	mov	r20, r0
    1620:	83 b7       	in	r24, 0x33	; 51
    1622:	8f 7b       	andi	r24, 0xBF	; 191
    1624:	48 2b       	or	r20, r24
				BIT_WRITE(TCCR0,WGM01,BIT_GET(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMMode,BIT1));
    1626:	47 7f       	andi	r20, 0xF7	; 247
    1628:	26 95       	lsr	r18
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	21 70       	andi	r18, 0x01	; 1
    162e:	30 70       	andi	r19, 0x00	; 0
    1630:	c9 01       	movw	r24, r18
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	84 2b       	or	r24, r20
				
				TWO_BITS_WRITE(TCCR0,COM00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode);
    1640:	8f 7c       	andi	r24, 0xCF	; 207
    1642:	90 91 9a 00 	lds	r25, 0x009A
    1646:	92 95       	swap	r25
    1648:	90 7f       	andi	r25, 0xF0	; 240
    164a:	89 2b       	or	r24, r25
    164c:	83 bf       	out	0x33, r24	; 51
				
				DIO_SetPinDirection(PWM0_PORT,PWM0_PIN,PIN_OUTPUT);
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	63 e0       	ldi	r22, 0x03	; 3
    1652:	41 e0       	ldi	r20, 0x01	; 1
    1654:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_SetPinDirection>
				
				u8_ErrorState=ERROR_OK;
    1658:	80 e0       	ldi	r24, 0x00	; 0
				break;
    165a:	08 95       	ret
				
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    165c:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    165e:	08 95       	ret

00001660 <PWM_Start>:

ERROR_STATE_t PWM_Start(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1660:	88 23       	and	r24, r24
    1662:	41 f4       	brne	.+16     	; 0x1674 <PWM_Start+0x14>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				THREE_BITS_WRITE(TCCR0,CS00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMFrequancy);	
    1664:	83 b7       	in	r24, 0x33	; 51
    1666:	88 7f       	andi	r24, 0xF8	; 248
    1668:	90 91 98 00 	lds	r25, 0x0098
    166c:	89 2b       	or	r24, r25
    166e:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;	
    1670:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1672:	08 95       	ret
				THREE_BITS_WRITE(TCCR1B,CS10,gastr_PWMConfig[PWM_CHANNEL_OC2].PWMFrequancy);
				u8_ErrorState=ERROR_OK;				
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    1674:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1676:	08 95       	ret

00001678 <PWM_Stop>:

ERROR_STATE_t PWM_Stop(uint8_t PwmChannelNumber )
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    1678:	88 23       	and	r24, r24
    167a:	29 f4       	brne	.+10     	; 0x1686 <PWM_Stop+0xe>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				THREE_BITS_WRITE(TCCR0,CS00,OC0_NO_CLK);
    167c:	83 b7       	in	r24, 0x33	; 51
    167e:	88 7f       	andi	r24, 0xF8	; 248
    1680:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;	
    1682:	80 e0       	ldi	r24, 0x00	; 0
				break;
    1684:	08 95       	ret
				THREE_BITS_WRITE(TCCR2,CS20,OC2_NO_CLK);	
				u8_ErrorState=ERROR_OK;	
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;	
    1686:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    1688:	08 95       	ret

0000168a <PWM_Connect>:

ERROR_STATE_t PWM_Connect(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    168a:	88 23       	and	r24, r24
    168c:	51 f4       	brne	.+20     	; 0x16a2 <PWM_Connect+0x18>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				TWO_BITS_WRITE(TCCR0,COM00,gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode);
    168e:	90 91 9a 00 	lds	r25, 0x009A
    1692:	92 95       	swap	r25
    1694:	90 7f       	andi	r25, 0xF0	; 240
    1696:	83 b7       	in	r24, 0x33	; 51
    1698:	8f 7c       	andi	r24, 0xCF	; 207
    169a:	89 2b       	or	r24, r25
    169c:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;
    169e:	80 e0       	ldi	r24, 0x00	; 0
				break;
    16a0:	08 95       	ret
				TWO_BITS_WRITE(TCCR2,COM20,gastr_PWMConfig[PWM_CHANNEL_OC2].PWMWaveformMode);
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;	
}
    16a4:	08 95       	ret

000016a6 <PWM_Disconnect>:

ERROR_STATE_t PWM_Disconnect(uint8_t PwmChannelNumber)
{
	uint8_t u8_ErrorState=ERROR_OK;
	switch(PwmChannelNumber)
    16a6:	88 23       	and	r24, r24
    16a8:	29 f4       	brne	.+10     	; 0x16b4 <PWM_Disconnect+0xe>
	{
		#if OC0
			case PWM_CHANNEL_OC0:
				TWO_BITS_WRITE(TCCR0,COM00,DISCONNECT);
    16aa:	83 b7       	in	r24, 0x33	; 51
    16ac:	8f 7c       	andi	r24, 0xCF	; 207
    16ae:	83 bf       	out	0x33, r24	; 51
				u8_ErrorState=ERROR_OK;
    16b0:	80 e0       	ldi	r24, 0x00	; 0
				break;
    16b2:	08 95       	ret
				TWO_BITS_WRITE(TCCR2,COM20,DISCONNECT);	
				u8_ErrorState=ERROR_OK;
				break;
		#endif	
		default:
			u8_ErrorState=ERROR_NOK;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
			break;			
	}
	return u8_ErrorState;
}
    16b6:	08 95       	ret

000016b8 <PWM_SetDuty>:

ERROR_STATE_t PWM_SetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PwmDuty==0||PwmDuty>100)
    16b8:	96 2f       	mov	r25, r22
    16ba:	91 50       	subi	r25, 0x01	; 1
    16bc:	94 36       	cpi	r25, 0x64	; 100
    16be:	10 f5       	brcc	.+68     	; 0x1704 <PWM_SetDuty+0x4c>
	{
		u8_ErrorState=ERROR_NOK;
	}
	else
	{
		switch(PwmChannelNumber)
    16c0:	88 23       	and	r24, r24
    16c2:	11 f5       	brne	.+68     	; 0x1708 <PWM_SetDuty+0x50>
		{
			#if OC0
				case PWM_CHANNEL_OC0:
					switch(gastr_PWMConfig[PWM_CHANNEL_OC0].PWMWaveformMode)
    16c4:	80 91 9a 00 	lds	r24, 0x009A
    16c8:	82 30       	cpi	r24, 0x02	; 2
    16ca:	01 f5       	brne	.+64     	; 0x170c <PWM_SetDuty+0x54>
					{
						case NON_INVERTING:
							OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__floatsisf>
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	48 ec       	ldi	r20, 0xC8	; 200
    16dc:	52 e4       	ldi	r21, 0x42	; 66
    16de:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__divsf3>
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	53 e4       	ldi	r21, 0x43	; 67
    16ea:	0e 94 b6 10 	call	0x216c	; 0x216c <__mulsf3>
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e8       	ldi	r20, 0x80	; 128
    16f4:	5f e3       	ldi	r21, 0x3F	; 63
    16f6:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__subsf3>
    16fa:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__fixunssfsi>
    16fe:	6c bf       	out	0x3c, r22	; 60
							u8_ErrorState=ERROR_OK;
    1700:	80 e0       	ldi	r24, 0x00	; 0
							break;
    1702:	08 95       	ret
ERROR_STATE_t PWM_SetDuty(uint8_t PwmChannelNumber,uint8_t PwmDuty )
{
	uint8_t u8_ErrorState=ERROR_OK;
	if(PwmDuty==0||PwmDuty>100)
	{
		u8_ErrorState=ERROR_NOK;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	08 95       	ret
							break;
					}
					break;
			#endif	
			default:
				u8_ErrorState=ERROR_NOK;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	08 95       	ret
						case NON_INVERTING:
							OCR0 = (uint8_t)(((PwmDuty/100.0)*256.0)-1);
							u8_ErrorState=ERROR_OK;
							break;
						default:
							u8_ErrorState=ERROR_NOK;
    170c:	81 e0       	ldi	r24, 0x01	; 1
				u8_ErrorState=ERROR_NOK;
				break;			
		}		
	}
	return u8_ErrorState;
    170e:	08 95       	ret

00001710 <GetFreqPrescaleRatio>:
* @return function error state.
*/
static ERROR_STATE_t GetFreqPrescaleRatio(TIM_CH_t TIM_channel, float32_t * Ratio)
{
   /* For Timer 0 and 1 */
   if(TIMER_0 == TIM_channel || TIMER_1 == TIM_channel)
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	08 f0       	brcs	.+2      	; 0x1716 <GetFreqPrescaleRatio+0x6>
    1714:	51 c0       	rjmp	.+162    	; 0x17b8 <GetFreqPrescaleRatio+0xa8>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	fc 01       	movw	r30, r24
    171a:	ee 0f       	add	r30, r30
    171c:	ff 1f       	adc	r31, r31
    171e:	8e 0f       	add	r24, r30
    1720:	9f 1f       	adc	r25, r31
    1722:	fc 01       	movw	r30, r24
    1724:	ec 55       	subi	r30, 0x5C	; 92
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	21 f1       	breq	.+72     	; 0x1776 <GetFreqPrescaleRatio+0x66>
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	30 f4       	brcc	.+12     	; 0x173e <GetFreqPrescaleRatio+0x2e>
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	51 f0       	breq	.+20     	; 0x174a <GetFreqPrescaleRatio+0x3a>
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	09 f0       	breq	.+2      	; 0x173c <GetFreqPrescaleRatio+0x2c>
    173a:	a4 c0       	rjmp	.+328    	; 0x1884 <GetFreqPrescaleRatio+0x174>
    173c:	11 c0       	rjmp	.+34     	; 0x1760 <GetFreqPrescaleRatio+0x50>
    173e:	84 30       	cpi	r24, 0x04	; 4
    1740:	29 f1       	breq	.+74     	; 0x178c <GetFreqPrescaleRatio+0x7c>
    1742:	85 30       	cpi	r24, 0x05	; 5
    1744:	09 f0       	breq	.+2      	; 0x1748 <GetFreqPrescaleRatio+0x38>
    1746:	9e c0       	rjmp	.+316    	; 0x1884 <GetFreqPrescaleRatio+0x174>
    1748:	2c c0       	rjmp	.+88     	; 0x17a2 <GetFreqPrescaleRatio+0x92>
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * 1000000 / F_CPU;
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	be e3       	ldi	r27, 0x3E	; 62
    1752:	fb 01       	movw	r30, r22
    1754:	80 83       	st	Z, r24
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	a2 83       	std	Z+2, r26	; 0x02
    175a:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    175c:	80 e0       	ldi	r24, 0x00	; 0
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
      {
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * 1000000 / F_CPU;
            break;
    175e:	08 95       	ret
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * 1000000 / F_CPU;
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e8       	ldi	r26, 0x80	; 128
    1766:	bf e3       	ldi	r27, 0x3F	; 63
    1768:	fb 01       	movw	r30, r22
    176a:	80 83       	st	Z, r24
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	a2 83       	std	Z+2, r26	; 0x02
    1770:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1772:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_NO_PRESCALE:
            *Ratio = 1.0 * 1000000 / F_CPU;
            break;
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * 1000000 / F_CPU;
            break;
    1774:	08 95       	ret
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * 1000000 / F_CPU;
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a0 e0       	ldi	r26, 0x00	; 0
    177c:	b1 e4       	ldi	r27, 0x41	; 65
    177e:	fb 01       	movw	r30, r22
    1780:	80 83       	st	Z, r24
    1782:	91 83       	std	Z+1, r25	; 0x01
    1784:	a2 83       	std	Z+2, r26	; 0x02
    1786:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1788:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_8_PRESCALE:
            *Ratio = 8.0 * 1000000 / F_CPU;
            break;
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * 1000000 / F_CPU;
            break;
    178a:	08 95       	ret
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * 1000000 / F_CPU;
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a0 e0       	ldi	r26, 0x00	; 0
    1792:	b2 e4       	ldi	r27, 0x42	; 66
    1794:	fb 01       	movw	r30, r22
    1796:	80 83       	st	Z, r24
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	a2 83       	std	Z+2, r26	; 0x02
    179c:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    179e:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_64_PRESCALE:
            *Ratio = 64.0 * 1000000 / F_CPU;
            break;
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * 1000000 / F_CPU;
            break;
    17a0:	08 95       	ret
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * 1000000 / F_CPU;
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a0 e0       	ldi	r26, 0x00	; 0
    17a8:	b3 e4       	ldi	r27, 0x43	; 67
    17aa:	fb 01       	movw	r30, r22
    17ac:	80 83       	st	Z, r24
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	a2 83       	std	Z+2, r26	; 0x02
    17b2:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    17b4:	80 e0       	ldi	r24, 0x00	; 0
         case CLK_256_PRESCALE:
            *Ratio = 256.0 * 1000000 / F_CPU;
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * 1000000 / F_CPU;
            break;
    17b6:	08 95       	ret
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   /* For Timer 2 */
   else if(TIMER_2 == TIM_channel)
    17b8:	82 30       	cpi	r24, 0x02	; 2
    17ba:	09 f0       	breq	.+2      	; 0x17be <GetFreqPrescaleRatio+0xae>
    17bc:	65 c0       	rjmp	.+202    	; 0x1888 <GetFreqPrescaleRatio+0x178>
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
    17be:	80 91 ac 00 	lds	r24, 0x00AC
    17c2:	84 30       	cpi	r24, 0x04	; 4
    17c4:	99 f1       	breq	.+102    	; 0x182c <GetFreqPrescaleRatio+0x11c>
    17c6:	85 30       	cpi	r24, 0x05	; 5
    17c8:	40 f4       	brcc	.+16     	; 0x17da <GetFreqPrescaleRatio+0xca>
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	c9 f0       	breq	.+50     	; 0x1800 <GetFreqPrescaleRatio+0xf0>
    17ce:	83 30       	cpi	r24, 0x03	; 3
    17d0:	10 f5       	brcc	.+68     	; 0x1816 <GetFreqPrescaleRatio+0x106>
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <GetFreqPrescaleRatio+0xc8>
    17d6:	5a c0       	rjmp	.+180    	; 0x188c <GetFreqPrescaleRatio+0x17c>
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <GetFreqPrescaleRatio+0xda>
    17da:	86 30       	cpi	r24, 0x06	; 6
    17dc:	e9 f1       	breq	.+122    	; 0x1858 <GetFreqPrescaleRatio+0x148>
    17de:	86 30       	cpi	r24, 0x06	; 6
    17e0:	80 f1       	brcs	.+96     	; 0x1842 <GetFreqPrescaleRatio+0x132>
    17e2:	87 30       	cpi	r24, 0x07	; 7
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <GetFreqPrescaleRatio+0xd8>
    17e6:	52 c0       	rjmp	.+164    	; 0x188c <GetFreqPrescaleRatio+0x17c>
    17e8:	42 c0       	rjmp	.+132    	; 0x186e <GetFreqPrescaleRatio+0x15e>
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * 1000000 / F_CPU;
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a0 e0       	ldi	r26, 0x00	; 0
    17f0:	be e3       	ldi	r27, 0x3E	; 62
    17f2:	fb 01       	movw	r30, r22
    17f4:	80 83       	st	Z, r24
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	a2 83       	std	Z+2, r26	; 0x02
    17fa:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    17fc:	80 e0       	ldi	r24, 0x00	; 0
   {
      switch(gastr_Timer_Config[TIM_channel].u8_prescale)
      {
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * 1000000 / F_CPU;
         break;
    17fe:	08 95       	ret
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * 1000000 / F_CPU;
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a0 e8       	ldi	r26, 0x80	; 128
    1806:	bf e3       	ldi	r27, 0x3F	; 63
    1808:	fb 01       	movw	r30, r22
    180a:	80 83       	st	Z, r24
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	a2 83       	std	Z+2, r26	; 0x02
    1810:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1812:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_NO_PRESCALE:
         *Ratio = 1.0 * 1000000 / F_CPU;
         break;
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * 1000000 / F_CPU;
         break;
    1814:	08 95       	ret
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * 1000000 / F_CPU;
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a0 e8       	ldi	r26, 0x80	; 128
    181c:	b0 e4       	ldi	r27, 0x40	; 64
    181e:	fb 01       	movw	r30, r22
    1820:	80 83       	st	Z, r24
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	a2 83       	std	Z+2, r26	; 0x02
    1826:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1828:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_8_PRESCALE:
         *Ratio = 8.0 * 1000000 / F_CPU;
         break;
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * 1000000 / F_CPU;
         break;
    182a:	08 95       	ret
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * 1000000 / F_CPU;
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a0 e0       	ldi	r26, 0x00	; 0
    1832:	b1 e4       	ldi	r27, 0x41	; 65
    1834:	fb 01       	movw	r30, r22
    1836:	80 83       	st	Z, r24
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	a2 83       	std	Z+2, r26	; 0x02
    183c:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    183e:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_32_PRESCALE:
         *Ratio = 32.0 * 1000000 / F_CPU;
         break;
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * 1000000 / F_CPU;
         break;
    1840:	08 95       	ret
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * 1000000 / F_CPU;
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	a0 e8       	ldi	r26, 0x80	; 128
    1848:	b1 e4       	ldi	r27, 0x41	; 65
    184a:	fb 01       	movw	r30, r22
    184c:	80 83       	st	Z, r24
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	a2 83       	std	Z+2, r26	; 0x02
    1852:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1854:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_64_PRESCALE:
         *Ratio = 64.0 * 1000000 / F_CPU;
         break;
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * 1000000 / F_CPU;
         break;
    1856:	08 95       	ret
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * 1000000 / F_CPU;
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a0 e0       	ldi	r26, 0x00	; 0
    185e:	b2 e4       	ldi	r27, 0x42	; 66
    1860:	fb 01       	movw	r30, r22
    1862:	80 83       	st	Z, r24
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	a2 83       	std	Z+2, r26	; 0x02
    1868:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    186a:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_128_PRESCALE:
         *Ratio = 128.0 * 1000000 / F_CPU;
         break;
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * 1000000 / F_CPU;
         break;
    186c:	08 95       	ret
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * 1000000 / F_CPU;
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	a0 e0       	ldi	r26, 0x00	; 0
    1874:	b3 e4       	ldi	r27, 0x43	; 67
    1876:	fb 01       	movw	r30, r22
    1878:	80 83       	st	Z, r24
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	a2 83       	std	Z+2, r26	; 0x02
    187e:	b3 83       	std	Z+3, r27	; 0x03
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1880:	80 e0       	ldi	r24, 0x00	; 0
         case T2_CLK_256_PRESCALE:
         *Ratio = 256.0 * 1000000 / F_CPU;
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * 1000000 / F_CPU;
         break;
    1882:	08 95       	ret
            break;
         case CLK_1024_PRESCALE:
            *Ratio = 1024.0 * 1000000 / F_CPU;
            break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1884:	8c ef       	ldi	r24, 0xFC	; 252
    1886:	08 95       	ret
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
   }
   
   return ERROR_OK;
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	08 95       	ret
         break;
         case T2_CLK_1024_PRESCALE:
         *Ratio = 1024.0 * 1000000 / F_CPU;
         break;
         default:
         return TIMER_E_UNSUPPORTED_PRESCALE;
    188c:	8c ef       	ldi	r24, 0xFC	; 252
      }
   }
   
   return ERROR_OK;
}
    188e:	08 95       	ret

00001890 <TIM_Init>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_Init(TIM_CH_t TIM_channel)
{
   switch(TIM_channel)
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	81 f0       	breq	.+32     	; 0x18b4 <TIM_Init+0x24>
    1894:	81 30       	cpi	r24, 0x01	; 1
    1896:	18 f0       	brcs	.+6      	; 0x189e <TIM_Init+0xe>
    1898:	82 30       	cpi	r24, 0x02	; 2
    189a:	49 f5       	brne	.+82     	; 0x18ee <TIM_Init+0x5e>
    189c:	19 c0       	rjmp	.+50     	; 0x18d0 <TIM_Init+0x40>
   {
      case TIMER_0:
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
    189e:	80 91 a4 00 	lds	r24, 0x00A4
    18a2:	83 bf       	out	0x33, r24	; 51
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
    18a4:	89 b7       	in	r24, 0x39	; 57
    18a6:	8c 7f       	andi	r24, 0xFC	; 252
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
    18a8:	90 91 a5 00 	lds	r25, 0x00A5
    18ac:	89 2b       	or	r24, r25
    18ae:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    18b0:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_0_INT_BITS);
         break;
    18b2:	08 95       	ret
      case TIMER_1:
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
    18b4:	80 91 a7 00 	lds	r24, 0x00A7
    18b8:	8e bd       	out	0x2e, r24	; 46
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
    18ba:	99 b7       	in	r25, 0x39	; 57
    18bc:	97 7e       	andi	r25, 0xE7	; 231
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
    18be:	80 91 a8 00 	lds	r24, 0x00A8
    18c2:	88 0f       	add	r24, r24
    18c4:	88 0f       	add	r24, r24
    18c6:	88 0f       	add	r24, r24
    18c8:	89 2b       	or	r24, r25
    18ca:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    18cc:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_1_INT_BITS);
         break;
    18ce:	08 95       	ret
      case TIMER_2:
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
    18d0:	80 91 aa 00 	lds	r24, 0x00AA
    18d4:	85 bd       	out	0x25, r24	; 37
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
    18d6:	99 b7       	in	r25, 0x39	; 57
    18d8:	9f 73       	andi	r25, 0x3F	; 63
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
    18da:	80 91 ab 00 	lds	r24, 0x00AB
    18de:	82 95       	swap	r24
    18e0:	88 0f       	add	r24, r24
    18e2:	88 0f       	add	r24, r24
    18e4:	80 7c       	andi	r24, 0xC0	; 192
    18e6:	89 2b       	or	r24, r25
    18e8:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    18ea:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
         TIMSK |= (gastr_Timer_Config[TIM_channel].u8_interrupt_mode << TIMER_2_INT_BITS);
         break;
    18ec:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
    18ee:	8e ef       	ldi	r24, 0xFE	; 254
   }
   
   /* return success message. */
   return ERROR_OK;
}
    18f0:	08 95       	ret

000018f2 <TIM_Start>:
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   volatile uint8_t * ptr_TimerData = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	79 f0       	breq	.+30     	; 0x1914 <TIM_Start+0x22>
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	18 f0       	brcs	.+6      	; 0x1900 <TIM_Start+0xe>
    18fa:	82 30       	cpi	r24, 0x02	; 2
    18fc:	09 f5       	brne	.+66     	; 0x1940 <TIM_Start+0x4e>
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <TIM_Start+0x18>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
    1900:	a2 e5       	ldi	r26, 0x52	; 82
    1902:	b0 e0       	ldi	r27, 0x00	; 0
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
    1904:	e3 e5       	ldi	r30, 0x53	; 83
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	09 c0       	rjmp	.+18     	; 0x191c <TIM_Start+0x2a>
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
    190a:	a4 e4       	ldi	r26, 0x44	; 68
    190c:	b0 e0       	ldi	r27, 0x00	; 0
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
    190e:	e5 e4       	ldi	r30, 0x45	; 69
    1910:	f0 e0       	ldi	r31, 0x00	; 0
         ptr_TimerData = &TCNT2;
         break;
    1912:	04 c0       	rjmp	.+8      	; 0x191c <TIM_Start+0x2a>
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
    1914:	ac e4       	ldi	r26, 0x4C	; 76
    1916:	b0 e0       	ldi	r27, 0x00	; 0
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
    1918:	ee e4       	ldi	r30, 0x4E	; 78
    191a:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   /* set timer ticks */
   *ptr_TimerData = PreloadVal;
    191c:	6c 93       	st	X, r22
   
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
    191e:	20 81       	ld	r18, Z
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	dc 01       	movw	r26, r24
    1924:	aa 0f       	add	r26, r26
    1926:	bb 1f       	adc	r27, r27
    1928:	8a 0f       	add	r24, r26
    192a:	9b 1f       	adc	r25, r27
    192c:	dc 01       	movw	r26, r24
    192e:	ac 55       	subi	r26, 0x5C	; 92
    1930:	bf 4f       	sbci	r27, 0xFF	; 255
    1932:	12 96       	adiw	r26, 0x02	; 2
    1934:	8c 91       	ld	r24, X
    1936:	12 97       	sbiw	r26, 0x02	; 2
    1938:	82 2b       	or	r24, r18
    193a:	80 83       	st	Z, r24
   
   /* return success message. */
   return ERROR_OK;
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	08 95       	ret
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1940:	8e ef       	ldi	r24, 0xFE	; 254
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
   
   /* return success message. */
   return ERROR_OK;
}
    1942:	08 95       	ret

00001944 <TIM_Stop>:
{
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	59 f0       	breq	.+22     	; 0x195e <TIM_Stop+0x1a>
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	18 f0       	brcs	.+6      	; 0x1952 <TIM_Stop+0xe>
    194c:	82 30       	cpi	r24, 0x02	; 2
    194e:	71 f4       	brne	.+28     	; 0x196c <TIM_Stop+0x28>
    1950:	03 c0       	rjmp	.+6      	; 0x1958 <TIM_Stop+0x14>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
    1952:	e3 e5       	ldi	r30, 0x53	; 83
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	05 c0       	rjmp	.+10     	; 0x1962 <TIM_Stop+0x1e>
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
    1958:	e5 e4       	ldi	r30, 0x45	; 69
    195a:	f0 e0       	ldi	r31, 0x00	; 0
         break;
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <TIM_Stop+0x1e>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
    195e:	ee e4       	ldi	r30, 0x4E	; 78
    1960:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
    1962:	80 81       	ld	r24, Z
    1964:	88 7f       	andi	r24, 0xF8	; 248
    1966:	80 83       	st	Z, r24
   
   /* return success message. */
   return ERROR_OK;
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	08 95       	ret
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    196c:	8e ef       	ldi	r24, 0xFE	; 254
   /* clear the timer clock */
   *ptr_TimerControl &= ~(CLK_BITS);
   
   /* return success message. */
   return ERROR_OK;
}
    196e:	08 95       	ret

00001970 <TIM_GetStatus>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
    1970:	61 15       	cp	r22, r1
    1972:	71 05       	cpc	r23, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <TIM_GetStatus+0x8>
    1976:	64 c0       	rjmp	.+200    	; 0x1a40 <TIM_GetStatus+0xd0>
   {
      return TIMER_E_NULL_PTR;
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	11 f1       	breq	.+68     	; 0x19c0 <TIM_GetStatus+0x50>
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	20 f0       	brcs	.+8      	; 0x1988 <TIM_GetStatus+0x18>
    1980:	82 30       	cpi	r24, 0x02	; 2
    1982:	09 f0       	breq	.+2      	; 0x1986 <TIM_GetStatus+0x16>
    1984:	5f c0       	rjmp	.+190    	; 0x1a44 <TIM_GetStatus+0xd4>
    1986:	41 c0       	rjmp	.+130    	; 0x1a0a <TIM_GetStatus+0x9a>
   {
      case TIMER_0:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1988:	80 91 a4 00 	lds	r24, 0x00A4
    198c:	88 23       	and	r24, r24
    198e:	51 f4       	brne	.+20     	; 0x19a4 <TIM_GetStatus+0x34>
         {
            if( TIFR & TIMER_0_OVERFLOW_FLAG )
    1990:	08 b6       	in	r0, 0x38	; 56
    1992:	00 fe       	sbrs	r0, 0
    1994:	59 c0       	rjmp	.+178    	; 0x1a48 <TIM_GetStatus+0xd8>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1996:	fb 01       	movw	r30, r22
    1998:	10 82       	st	Z, r1
               TIFR |= TIMER_0_OVERFLOW_FLAG;
    199a:	88 b7       	in	r24, 0x38	; 56
    199c:	81 60       	ori	r24, 0x01	; 1
    199e:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    19a4:	88 30       	cpi	r24, 0x08	; 8
    19a6:	09 f0       	breq	.+2      	; 0x19aa <TIM_GetStatus+0x3a>
    19a8:	51 c0       	rjmp	.+162    	; 0x1a4c <TIM_GetStatus+0xdc>
         {
            if(TIFR & TIMER_0_COMPARE_FLAG)
    19aa:	08 b6       	in	r0, 0x38	; 56
    19ac:	01 fe       	sbrs	r0, 1
    19ae:	50 c0       	rjmp	.+160    	; 0x1a50 <TIM_GetStatus+0xe0>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	fb 01       	movw	r30, r22
    19b4:	80 83       	st	Z, r24
               TIFR |= TIMER_0_COMPARE_FLAG;
    19b6:	88 b7       	in	r24, 0x38	; 56
    19b8:	82 60       	ori	r24, 0x02	; 2
    19ba:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_1:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    19c0:	80 91 a7 00 	lds	r24, 0x00A7
    19c4:	88 23       	and	r24, r24
    19c6:	51 f4       	brne	.+20     	; 0x19dc <TIM_GetStatus+0x6c>
         {
            if( TIFR & TIMER_1_OVERFLOW_FLAG )
    19c8:	08 b6       	in	r0, 0x38	; 56
    19ca:	02 fe       	sbrs	r0, 2
    19cc:	43 c0       	rjmp	.+134    	; 0x1a54 <TIM_GetStatus+0xe4>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    19ce:	fb 01       	movw	r30, r22
    19d0:	10 82       	st	Z, r1
               TIFR |= TIMER_1_OVERFLOW_FLAG;
    19d2:	88 b7       	in	r24, 0x38	; 56
    19d4:	84 60       	ori	r24, 0x04	; 4
    19d6:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    19dc:	88 30       	cpi	r24, 0x08	; 8
    19de:	e1 f5       	brne	.+120    	; 0x1a58 <TIM_GetStatus+0xe8>
         {
            if(TIFR & TIMER_1A_COMPARE_FLAG)
    19e0:	88 b7       	in	r24, 0x38	; 56
    19e2:	84 ff       	sbrs	r24, 4
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <TIM_GetStatus+0x86>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	fb 01       	movw	r30, r22
    19ea:	80 83       	st	Z, r24
               TIFR |= TIMER_1A_COMPARE_FLAG;
    19ec:	88 b7       	in	r24, 0x38	; 56
    19ee:	80 61       	ori	r24, 0x10	; 16
    19f0:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	08 95       	ret
            if(TIFR & TIMER_1A_COMPARE_FLAG)
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1A_COMPARE_FLAG;
            }
            else if(TIFR & TIMER_1B_COMPARE_FLAG)
    19f6:	83 ff       	sbrs	r24, 3
    19f8:	31 c0       	rjmp	.+98     	; 0x1a5c <TIM_GetStatus+0xec>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	fb 01       	movw	r30, r22
    19fe:	80 83       	st	Z, r24
               TIFR |= TIMER_1B_COMPARE_FLAG;
    1a00:	88 b7       	in	r24, 0x38	; 56
    1a02:	88 60       	ori	r24, 0x08	; 8
    1a04:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	08 95       	ret
               return TIMER_E_PENDING;
            }
         }
         break;
      case TIMER_2:
         if(gastr_Timer_Config[TIM_channel].u8_mode == NORMAL_MODE)
    1a0a:	80 91 aa 00 	lds	r24, 0x00AA
    1a0e:	88 23       	and	r24, r24
    1a10:	51 f4       	brne	.+20     	; 0x1a26 <TIM_GetStatus+0xb6>
         {
            if( TIFR & TIMER_2_OVERFLOW_FLAG )
    1a12:	08 b6       	in	r0, 0x38	; 56
    1a14:	06 fe       	sbrs	r0, 6
    1a16:	24 c0       	rjmp	.+72     	; 0x1a60 <TIM_GetStatus+0xf0>
            {
               *FlagStatus = TIMER_OVERFLOW_FLAG;
    1a18:	fb 01       	movw	r30, r22
    1a1a:	10 82       	st	Z, r1
               TIFR |= TIMER_2_OVERFLOW_FLAG;
    1a1c:	88 b7       	in	r24, 0x38	; 56
    1a1e:	80 64       	ori	r24, 0x40	; 64
    1a20:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	08 95       	ret
            else
            {
               return TIMER_E_PENDING;
            }
         }
         else if(gastr_Timer_Config[TIM_channel].u8_mode == COMPARE_MATCH_MODE)
    1a26:	88 30       	cpi	r24, 0x08	; 8
    1a28:	e9 f4       	brne	.+58     	; 0x1a64 <TIM_GetStatus+0xf4>
         {
            if(TIFR & TIMER_2_COMPARE_FLAG)
    1a2a:	08 b6       	in	r0, 0x38	; 56
    1a2c:	07 fe       	sbrs	r0, 7
    1a2e:	1c c0       	rjmp	.+56     	; 0x1a68 <TIM_GetStatus+0xf8>
            {
               *FlagStatus = TIMER_COMPARE_FLAG;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	fb 01       	movw	r30, r22
    1a34:	80 83       	st	Z, r24
               TIFR |= TIMER_2_COMPARE_FLAG;
    1a36:	88 b7       	in	r24, 0x38	; 56
    1a38:	80 68       	ori	r24, 0x80	; 128
    1a3a:	88 bf       	out	0x38, r24	; 56
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	08 95       	ret
*/
ERROR_STATE_t TIM_GetStatus(TIM_CH_t TIM_channel, uint8_t* FlagStatus)
{
   if(NULL_PTR == FlagStatus)
   {
      return TIMER_E_NULL_PTR;
    1a40:	8f ef       	ldi	r24, 0xFF	; 255
    1a42:	08 95       	ret
            }
         }
         
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
    1a44:	8e ef       	ldi	r24, 0xFE	; 254
    1a46:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_0_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1a48:	8d ef       	ldi	r24, 0xFD	; 253
    1a4a:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_0_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1a50:	8d ef       	ldi	r24, 0xFD	; 253
    1a52:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_1_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1a54:	8d ef       	ldi	r24, 0xFD	; 253
    1a56:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_1B_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1a5c:	8d ef       	ldi	r24, 0xFD	; 253
    1a5e:	08 95       	ret
               *FlagStatus = TIMER_OVERFLOW_FLAG;
               TIFR |= TIMER_2_OVERFLOW_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1a60:	8d ef       	ldi	r24, 0xFD	; 253
    1a62:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	08 95       	ret
               *FlagStatus = TIMER_COMPARE_FLAG;
               TIFR |= TIMER_2_COMPARE_FLAG;
            }
            else
            {
               return TIMER_E_PENDING;
    1a68:	8d ef       	ldi	r24, 0xFD	; 253
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
}
    1a6a:	08 95       	ret

00001a6c <TIM_DelayUs>:
* @param [out] TIM_Delay   -  Time to delay in microseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
    1a6c:	8f 92       	push	r8
    1a6e:	9f 92       	push	r9
    1a70:	af 92       	push	r10
    1a72:	bf 92       	push	r11
    1a74:	cf 92       	push	r12
    1a76:	df 92       	push	r13
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <TIM_DelayUs+0x18>
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <TIM_DelayUs+0x1a>
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	18 2f       	mov	r17, r24
    1a8c:	6a 01       	movw	r12, r20
    1a8e:	7b 01       	movw	r14, r22
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1a90:	83 30       	cpi	r24, 0x03	; 3
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <TIM_DelayUs+0x2a>
    1a94:	92 c0       	rjmp	.+292    	; 0x1bba <TIM_DelayUs+0x14e>
   static uint8_t u8_Remindar = 0;
   static Enu_DelayStateMachine Enu_State = Ready;
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(Ready == Enu_State)
    1a96:	80 91 bc 00 	lds	r24, 0x00BC
    1a9a:	88 23       	and	r24, r24
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <TIM_DelayUs+0x34>
    1a9e:	4f c0       	rjmp	.+158    	; 0x1b3e <TIM_DelayUs+0xd2>
   {
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    1aa0:	81 2f       	mov	r24, r17
    1aa2:	be 01       	movw	r22, r28
    1aa4:	6f 5f       	subi	r22, 0xFF	; 255
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	0e 94 88 0b 	call	0x1710	; 0x1710 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    1aac:	8c 3f       	cpi	r24, 0xFC	; 252
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <TIM_DelayUs+0x46>
    1ab0:	86 c0       	rjmp	.+268    	; 0x1bbe <TIM_DelayUs+0x152>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    1ab2:	89 80       	ldd	r8, Y+1	; 0x01
    1ab4:	9a 80       	ldd	r9, Y+2	; 0x02
    1ab6:	ab 80       	ldd	r10, Y+3	; 0x03
    1ab8:	bc 80       	ldd	r11, Y+4	; 0x04
    1aba:	c5 01       	movw	r24, r10
    1abc:	b4 01       	movw	r22, r8
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	a9 01       	movw	r20, r18
    1ac4:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__cmpsf2>
    1ac8:	88 23       	and	r24, r24
    1aca:	a1 f0       	breq	.+40     	; 0x1af4 <TIM_DelayUs+0x88>
      {
         TIM_Delay /= f32_FreqRatio;
    1acc:	c7 01       	movw	r24, r14
    1ace:	b6 01       	movw	r22, r12
    1ad0:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__floatunsisf>
    1ad4:	a5 01       	movw	r20, r10
    1ad6:	94 01       	movw	r18, r8
    1ad8:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__divsf3>
    1adc:	46 2f       	mov	r20, r22
    1ade:	57 2f       	mov	r21, r23
    1ae0:	68 2f       	mov	r22, r24
    1ae2:	79 2f       	mov	r23, r25
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	ba 01       	movw	r22, r20
    1ae8:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__fixunssfsi>
    1aec:	c6 2e       	mov	r12, r22
    1aee:	d7 2e       	mov	r13, r23
    1af0:	e8 2e       	mov	r14, r24
    1af2:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      u32_Overflows = TIM_Delay / 256;
    1af4:	bb 27       	eor	r27, r27
    1af6:	af 2d       	mov	r26, r15
    1af8:	9e 2d       	mov	r25, r14
    1afa:	8d 2d       	mov	r24, r13
    1afc:	80 93 bd 00 	sts	0x00BD, r24
    1b00:	90 93 be 00 	sts	0x00BE, r25
    1b04:	a0 93 bf 00 	sts	0x00BF, r26
    1b08:	b0 93 c0 00 	sts	0x00C0, r27
      u8_Remindar = TIM_Delay % 256;
    1b0c:	6c 2d       	mov	r22, r12
    1b0e:	c0 92 c1 00 	sts	0x00C1, r12
      
      if(u32_Overflows == 0)
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	a1 05       	cpc	r26, r1
    1b16:	b1 05       	cpc	r27, r1
    1b18:	41 f4       	brne	.+16     	; 0x1b2a <TIM_DelayUs+0xbe>
      {
         u8_OverflowsComplete = HIGH;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	80 93 c2 00 	sts	0x00C2, r24
         TIM_Start(TIM_channel, u8_Remindar);
    1b20:	81 2f       	mov	r24, r17
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <TIM_Start>
    1b28:	05 c0       	rjmp	.+10     	; 0x1b34 <TIM_DelayUs+0xc8>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, 255);
    1b2a:	81 2f       	mov	r24, r17
    1b2c:	6f ef       	ldi	r22, 0xFF	; 255
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <TIM_Start>
      }     
      /* Change to timer pending state */ 
      Enu_State = Pending;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	80 93 bc 00 	sts	0x00BC, r24
      return TIMER_E_PENDING;
    1b3a:	8d ef       	ldi	r24, 0xFD	; 253
    1b3c:	45 c0       	rjmp	.+138    	; 0x1bc8 <TIM_DelayUs+0x15c>
   }
   /* Pending state */
   else if(Pending == Enu_State)
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <TIM_DelayUs+0xd8>
    1b42:	3f c0       	rjmp	.+126    	; 0x1bc2 <TIM_DelayUs+0x156>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state = TIM_GetStatus(TIM_channel, &u8_FlagState);
    1b44:	81 2f       	mov	r24, r17
    1b46:	be 01       	movw	r22, r28
    1b48:	6f 5f       	subi	r22, 0xFF	; 255
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    1b50:	88 23       	and	r24, r24
    1b52:	c9 f5       	brne	.+114    	; 0x1bc6 <TIM_DelayUs+0x15a>
      {
         /* If all overflows are finished and reminder. */
         if(u8_OverflowsComplete == HIGH)
    1b54:	80 91 c2 00 	lds	r24, 0x00C2
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	31 f4       	brne	.+12     	; 0x1b68 <TIM_DelayUs+0xfc>
         {
            /* Return to ready state */
            Enu_State = Ready;
    1b5c:	10 92 bc 00 	sts	0x00BC, r1
            u8_OverflowsComplete = LOW;
    1b60:	10 92 c2 00 	sts	0x00C2, r1
            /* return success message. */
            return ERROR_OK;
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	30 c0       	rjmp	.+96     	; 0x1bc8 <TIM_DelayUs+0x15c>
         }
         
         /* Decrement overflows number */
         u32_Overflows--;
    1b68:	80 91 bd 00 	lds	r24, 0x00BD
    1b6c:	90 91 be 00 	lds	r25, 0x00BE
    1b70:	a0 91 bf 00 	lds	r26, 0x00BF
    1b74:	b0 91 c0 00 	lds	r27, 0x00C0
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	a1 09       	sbc	r26, r1
    1b7c:	b1 09       	sbc	r27, r1
    1b7e:	80 93 bd 00 	sts	0x00BD, r24
    1b82:	90 93 be 00 	sts	0x00BE, r25
    1b86:	a0 93 bf 00 	sts	0x00BF, r26
    1b8a:	b0 93 c0 00 	sts	0x00C0, r27
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(u32_Overflows == 0)
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	a1 05       	cpc	r26, r1
    1b92:	b1 05       	cpc	r27, r1
    1b94:	59 f4       	brne	.+22     	; 0x1bac <TIM_DelayUs+0x140>
         {
            u8_OverflowsComplete = HIGH;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	80 93 c2 00 	sts	0x00C2, r24
            TIM_Start(TIM_channel, u8_Remindar);
    1b9c:	60 91 c1 00 	lds	r22, 0x00C1
    1ba0:	81 2f       	mov	r24, r17
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
         }
         
         return TIMER_E_PENDING;
    1ba8:	8d ef       	ldi	r24, 0xFD	; 253
    1baa:	0e c0       	rjmp	.+28     	; 0x1bc8 <TIM_DelayUs+0x15c>
            TIM_Start(TIM_channel, u8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
    1bac:	81 2f       	mov	r24, r17
    1bae:	6f ef       	ldi	r22, 0xFF	; 255
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    1bb6:	8d ef       	ldi	r24, 0xFD	; 253
    1bb8:	07 c0       	rjmp	.+14     	; 0x1bc8 <TIM_DelayUs+0x15c>
ERROR_STATE_t TIM_DelayUs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    1bba:	8e ef       	ldi	r24, 0xFE	; 254
    1bbc:	05 c0       	rjmp	.+10     	; 0x1bc8 <TIM_DelayUs+0x15c>
      /* Calculate needed frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1bbe:	8c ef       	ldi	r24, 0xFC	; 252
    1bc0:	03 c0       	rjmp	.+6      	; 0x1bc8 <TIM_DelayUs+0x15c>
         
         return TIMER_E_PENDING;
      }         
   }
   
   return ERROR_NOK;            
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	01 c0       	rjmp	.+2      	; 0x1bc8 <TIM_DelayUs+0x15c>
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	df 90       	pop	r13
    1bdc:	cf 90       	pop	r12
    1bde:	bf 90       	pop	r11
    1be0:	af 90       	pop	r10
    1be2:	9f 90       	pop	r9
    1be4:	8f 90       	pop	r8
    1be6:	08 95       	ret

00001be8 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
    1be8:	8f 92       	push	r8
    1bea:	9f 92       	push	r9
    1bec:	af 92       	push	r10
    1bee:	bf 92       	push	r11
    1bf0:	df 92       	push	r13
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <TIM_DelayMs+0x18>
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <TIM_DelayMs+0x1a>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	18 2f       	mov	r17, r24
    1c08:	04 2f       	mov	r16, r20
    1c0a:	e5 2e       	mov	r14, r21
    1c0c:	f6 2e       	mov	r15, r22
    1c0e:	d7 2e       	mov	r13, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
    1c10:	83 30       	cpi	r24, 0x03	; 3
    1c12:	08 f0       	brcs	.+2      	; 0x1c16 <TIM_DelayMs+0x2e>
    1c14:	a3 c0       	rjmp	.+326    	; 0x1d5c <TIM_DelayMs+0x174>
   static uint8_t u8_Remindar = 0;
   static Enu_DelayStateMachine Enu_State = Ready;
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(Ready == Enu_State)
    1c16:	80 91 c3 00 	lds	r24, 0x00C3
    1c1a:	88 23       	and	r24, r24
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <TIM_DelayMs+0x38>
    1c1e:	60 c0       	rjmp	.+192    	; 0x1ce0 <TIM_DelayMs+0xf8>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
    1c20:	81 2f       	mov	r24, r17
    1c22:	be 01       	movw	r22, r28
    1c24:	6f 5f       	subi	r22, 0xFF	; 255
    1c26:	7f 4f       	sbci	r23, 0xFF	; 255
    1c28:	0e 94 88 0b 	call	0x1710	; 0x1710 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
    1c2c:	8c 3f       	cpi	r24, 0xFC	; 252
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <TIM_DelayMs+0x4a>
    1c30:	97 c0       	rjmp	.+302    	; 0x1d60 <TIM_DelayMs+0x178>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
    1c32:	89 80       	ldd	r8, Y+1	; 0x01
    1c34:	9a 80       	ldd	r9, Y+2	; 0x02
    1c36:	ab 80       	ldd	r10, Y+3	; 0x03
    1c38:	bc 80       	ldd	r11, Y+4	; 0x04
    1c3a:	c5 01       	movw	r24, r10
    1c3c:	b4 01       	movw	r22, r8
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	a9 01       	movw	r20, r18
    1c44:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__cmpsf2>
    1c48:	88 23       	and	r24, r24
    1c4a:	b1 f0       	breq	.+44     	; 0x1c78 <TIM_DelayMs+0x90>
      {
         TIM_Delay /= f32_FreqRatio;
    1c4c:	60 2f       	mov	r22, r16
    1c4e:	7e 2d       	mov	r23, r14
    1c50:	8f 2d       	mov	r24, r15
    1c52:	9d 2d       	mov	r25, r13
    1c54:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__floatunsisf>
    1c58:	a5 01       	movw	r20, r10
    1c5a:	94 01       	movw	r18, r8
    1c5c:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__divsf3>
    1c60:	46 2f       	mov	r20, r22
    1c62:	57 2f       	mov	r21, r23
    1c64:	68 2f       	mov	r22, r24
    1c66:	79 2f       	mov	r23, r25
    1c68:	cb 01       	movw	r24, r22
    1c6a:	ba 01       	movw	r22, r20
    1c6c:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__fixunssfsi>
    1c70:	06 2f       	mov	r16, r22
    1c72:	e7 2e       	mov	r14, r23
    1c74:	f8 2e       	mov	r15, r24
    1c76:	d9 2e       	mov	r13, r25
      }
      
      /* Calculate how many overflows needed */
      u32_Overflows = TIM_Delay*1000 / 256;
    1c78:	60 2f       	mov	r22, r16
    1c7a:	7e 2d       	mov	r23, r14
    1c7c:	8f 2d       	mov	r24, r15
    1c7e:	9d 2d       	mov	r25, r13
    1c80:	28 ee       	ldi	r18, 0xE8	; 232
    1c82:	33 e0       	ldi	r19, 0x03	; 3
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	0e 94 19 11 	call	0x2232	; 0x2232 <__mulsi3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	89 2f       	mov	r24, r25
    1c92:	9a 2f       	mov	r25, r26
    1c94:	ab 2f       	mov	r26, r27
    1c96:	bb 27       	eor	r27, r27
    1c98:	80 93 c4 00 	sts	0x00C4, r24
    1c9c:	90 93 c5 00 	sts	0x00C5, r25
    1ca0:	a0 93 c6 00 	sts	0x00C6, r26
    1ca4:	b0 93 c7 00 	sts	0x00C7, r27
      u8_Remindar = TIM_Delay*1000 % 256;
    1ca8:	68 ee       	ldi	r22, 0xE8	; 232
    1caa:	06 9f       	mul	r16, r22
    1cac:	60 2d       	mov	r22, r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	60 93 c8 00 	sts	0x00C8, r22
      
      if(u32_Overflows == 0)
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	a1 05       	cpc	r26, r1
    1cb8:	b1 05       	cpc	r27, r1
    1cba:	41 f4       	brne	.+16     	; 0x1ccc <TIM_DelayMs+0xe4>
      {
         u8_OverflowsComplete = HIGH;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	80 93 c9 00 	sts	0x00C9, r24
         TIM_Start(TIM_channel, u8_Remindar);
    1cc2:	81 2f       	mov	r24, r17
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <TIM_Start>
    1cca:	05 c0       	rjmp	.+10     	; 0x1cd6 <TIM_DelayMs+0xee>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, 255);
    1ccc:	81 2f       	mov	r24, r17
    1cce:	6f ef       	ldi	r22, 0xFF	; 255
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <TIM_Start>
      }
      /* Change to timer pending state */
      Enu_State= Pending;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	80 93 c3 00 	sts	0x00C3, r24
      return TIMER_E_PENDING;
    1cdc:	8d ef       	ldi	r24, 0xFD	; 253
    1cde:	45 c0       	rjmp	.+138    	; 0x1d6a <TIM_DelayMs+0x182>
   }
   /* Pending state */
   else if(Pending == Enu_State)
    1ce0:	81 30       	cpi	r24, 0x01	; 1
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <TIM_DelayMs+0xfe>
    1ce4:	3f c0       	rjmp	.+126    	; 0x1d64 <TIM_DelayMs+0x17c>
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
    1ce6:	81 2f       	mov	r24, r17
    1ce8:	be 01       	movw	r22, r28
    1cea:	6f 5f       	subi	r22, 0xFF	; 255
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	0e 94 b8 0c 	call	0x1970	; 0x1970 <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
    1cf2:	88 23       	and	r24, r24
    1cf4:	c9 f5       	brne	.+114    	; 0x1d68 <TIM_DelayMs+0x180>
      {
         /* If all overflows are finished and reminder. */
         if(u8_OverflowsComplete == HIGH)
    1cf6:	80 91 c9 00 	lds	r24, 0x00C9
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	31 f4       	brne	.+12     	; 0x1d0a <TIM_DelayMs+0x122>
         {
            /* Return to ready state */
            Enu_State = Ready;
    1cfe:	10 92 c3 00 	sts	0x00C3, r1
            u8_OverflowsComplete = LOW;
    1d02:	10 92 c9 00 	sts	0x00C9, r1
            /* return success message. */
            return ERROR_OK;
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	30 c0       	rjmp	.+96     	; 0x1d6a <TIM_DelayMs+0x182>
         }
         
         /* Decrement overflows number */
         u32_Overflows--;
    1d0a:	80 91 c4 00 	lds	r24, 0x00C4
    1d0e:	90 91 c5 00 	lds	r25, 0x00C5
    1d12:	a0 91 c6 00 	lds	r26, 0x00C6
    1d16:	b0 91 c7 00 	lds	r27, 0x00C7
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	a1 09       	sbc	r26, r1
    1d1e:	b1 09       	sbc	r27, r1
    1d20:	80 93 c4 00 	sts	0x00C4, r24
    1d24:	90 93 c5 00 	sts	0x00C5, r25
    1d28:	a0 93 c6 00 	sts	0x00C6, r26
    1d2c:	b0 93 c7 00 	sts	0x00C7, r27
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(u32_Overflows == 0)
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	a1 05       	cpc	r26, r1
    1d34:	b1 05       	cpc	r27, r1
    1d36:	59 f4       	brne	.+22     	; 0x1d4e <TIM_DelayMs+0x166>
         {
            u8_OverflowsComplete = HIGH;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	80 93 c9 00 	sts	0x00C9, r24
            TIM_Start(TIM_channel, u8_Remindar);
    1d3e:	60 91 c8 00 	lds	r22, 0x00C8
    1d42:	81 2f       	mov	r24, r17
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
         }
         
         return TIMER_E_PENDING;
    1d4a:	8d ef       	ldi	r24, 0xFD	; 253
    1d4c:	0e c0       	rjmp	.+28     	; 0x1d6a <TIM_DelayMs+0x182>
            TIM_Start(TIM_channel, u8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, 255);
    1d4e:	81 2f       	mov	r24, r17
    1d50:	6f ef       	ldi	r22, 0xFF	; 255
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
    1d58:	8d ef       	ldi	r24, 0xFD	; 253
    1d5a:	07 c0       	rjmp	.+14     	; 0x1d6a <TIM_DelayMs+0x182>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
    1d5c:	8e ef       	ldi	r24, 0xFE	; 254
    1d5e:	05 c0       	rjmp	.+10     	; 0x1d6a <TIM_DelayMs+0x182>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
    1d60:	8c ef       	ldi	r24, 0xFC	; 252
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <TIM_DelayMs+0x182>
         
         return TIMER_E_PENDING;
      }
   }
   
   return ERROR_NOK;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <TIM_DelayMs+0x182>
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	df 90       	pop	r13
    1d80:	bf 90       	pop	r11
    1d82:	af 90       	pop	r10
    1d84:	9f 90       	pop	r9
    1d86:	8f 90       	pop	r8
    1d88:	08 95       	ret

00001d8a <__subsf3>:
    1d8a:	50 58       	subi	r21, 0x80	; 128

00001d8c <__addsf3>:
    1d8c:	bb 27       	eor	r27, r27
    1d8e:	aa 27       	eor	r26, r26
    1d90:	0e d0       	rcall	.+28     	; 0x1dae <__addsf3x>
    1d92:	ae c1       	rjmp	.+860    	; 0x20f0 <__fp_round>
    1d94:	9f d1       	rcall	.+830    	; 0x20d4 <__fp_pscA>
    1d96:	30 f0       	brcs	.+12     	; 0x1da4 <__addsf3+0x18>
    1d98:	a4 d1       	rcall	.+840    	; 0x20e2 <__fp_pscB>
    1d9a:	20 f0       	brcs	.+8      	; 0x1da4 <__addsf3+0x18>
    1d9c:	31 f4       	brne	.+12     	; 0x1daa <__addsf3+0x1e>
    1d9e:	9f 3f       	cpi	r25, 0xFF	; 255
    1da0:	11 f4       	brne	.+4      	; 0x1da6 <__addsf3+0x1a>
    1da2:	1e f4       	brtc	.+6      	; 0x1daa <__addsf3+0x1e>
    1da4:	94 c1       	rjmp	.+808    	; 0x20ce <__fp_nan>
    1da6:	0e f4       	brtc	.+2      	; 0x1daa <__addsf3+0x1e>
    1da8:	e0 95       	com	r30
    1daa:	e7 fb       	bst	r30, 7
    1dac:	8a c1       	rjmp	.+788    	; 0x20c2 <__fp_inf>

00001dae <__addsf3x>:
    1dae:	e9 2f       	mov	r30, r25
    1db0:	b0 d1       	rcall	.+864    	; 0x2112 <__fp_split3>
    1db2:	80 f3       	brcs	.-32     	; 0x1d94 <__addsf3+0x8>
    1db4:	ba 17       	cp	r27, r26
    1db6:	62 07       	cpc	r22, r18
    1db8:	73 07       	cpc	r23, r19
    1dba:	84 07       	cpc	r24, r20
    1dbc:	95 07       	cpc	r25, r21
    1dbe:	18 f0       	brcs	.+6      	; 0x1dc6 <__addsf3x+0x18>
    1dc0:	71 f4       	brne	.+28     	; 0x1dde <__addsf3x+0x30>
    1dc2:	9e f5       	brtc	.+102    	; 0x1e2a <__addsf3x+0x7c>
    1dc4:	c8 c1       	rjmp	.+912    	; 0x2156 <__fp_zero>
    1dc6:	0e f4       	brtc	.+2      	; 0x1dca <__addsf3x+0x1c>
    1dc8:	e0 95       	com	r30
    1dca:	0b 2e       	mov	r0, r27
    1dcc:	ba 2f       	mov	r27, r26
    1dce:	a0 2d       	mov	r26, r0
    1dd0:	0b 01       	movw	r0, r22
    1dd2:	b9 01       	movw	r22, r18
    1dd4:	90 01       	movw	r18, r0
    1dd6:	0c 01       	movw	r0, r24
    1dd8:	ca 01       	movw	r24, r20
    1dda:	a0 01       	movw	r20, r0
    1ddc:	11 24       	eor	r1, r1
    1dde:	ff 27       	eor	r31, r31
    1de0:	59 1b       	sub	r21, r25
    1de2:	99 f0       	breq	.+38     	; 0x1e0a <__addsf3x+0x5c>
    1de4:	59 3f       	cpi	r21, 0xF9	; 249
    1de6:	50 f4       	brcc	.+20     	; 0x1dfc <__addsf3x+0x4e>
    1de8:	50 3e       	cpi	r21, 0xE0	; 224
    1dea:	68 f1       	brcs	.+90     	; 0x1e46 <__addsf3x+0x98>
    1dec:	1a 16       	cp	r1, r26
    1dee:	f0 40       	sbci	r31, 0x00	; 0
    1df0:	a2 2f       	mov	r26, r18
    1df2:	23 2f       	mov	r18, r19
    1df4:	34 2f       	mov	r19, r20
    1df6:	44 27       	eor	r20, r20
    1df8:	58 5f       	subi	r21, 0xF8	; 248
    1dfa:	f3 cf       	rjmp	.-26     	; 0x1de2 <__addsf3x+0x34>
    1dfc:	46 95       	lsr	r20
    1dfe:	37 95       	ror	r19
    1e00:	27 95       	ror	r18
    1e02:	a7 95       	ror	r26
    1e04:	f0 40       	sbci	r31, 0x00	; 0
    1e06:	53 95       	inc	r21
    1e08:	c9 f7       	brne	.-14     	; 0x1dfc <__addsf3x+0x4e>
    1e0a:	7e f4       	brtc	.+30     	; 0x1e2a <__addsf3x+0x7c>
    1e0c:	1f 16       	cp	r1, r31
    1e0e:	ba 0b       	sbc	r27, r26
    1e10:	62 0b       	sbc	r22, r18
    1e12:	73 0b       	sbc	r23, r19
    1e14:	84 0b       	sbc	r24, r20
    1e16:	ba f0       	brmi	.+46     	; 0x1e46 <__addsf3x+0x98>
    1e18:	91 50       	subi	r25, 0x01	; 1
    1e1a:	a1 f0       	breq	.+40     	; 0x1e44 <__addsf3x+0x96>
    1e1c:	ff 0f       	add	r31, r31
    1e1e:	bb 1f       	adc	r27, r27
    1e20:	66 1f       	adc	r22, r22
    1e22:	77 1f       	adc	r23, r23
    1e24:	88 1f       	adc	r24, r24
    1e26:	c2 f7       	brpl	.-16     	; 0x1e18 <__addsf3x+0x6a>
    1e28:	0e c0       	rjmp	.+28     	; 0x1e46 <__addsf3x+0x98>
    1e2a:	ba 0f       	add	r27, r26
    1e2c:	62 1f       	adc	r22, r18
    1e2e:	73 1f       	adc	r23, r19
    1e30:	84 1f       	adc	r24, r20
    1e32:	48 f4       	brcc	.+18     	; 0x1e46 <__addsf3x+0x98>
    1e34:	87 95       	ror	r24
    1e36:	77 95       	ror	r23
    1e38:	67 95       	ror	r22
    1e3a:	b7 95       	ror	r27
    1e3c:	f7 95       	ror	r31
    1e3e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e40:	08 f0       	brcs	.+2      	; 0x1e44 <__addsf3x+0x96>
    1e42:	b3 cf       	rjmp	.-154    	; 0x1daa <__addsf3+0x1e>
    1e44:	93 95       	inc	r25
    1e46:	88 0f       	add	r24, r24
    1e48:	08 f0       	brcs	.+2      	; 0x1e4c <__addsf3x+0x9e>
    1e4a:	99 27       	eor	r25, r25
    1e4c:	ee 0f       	add	r30, r30
    1e4e:	97 95       	ror	r25
    1e50:	87 95       	ror	r24
    1e52:	08 95       	ret

00001e54 <__cmpsf2>:
    1e54:	12 d1       	rcall	.+548    	; 0x207a <__fp_cmp>
    1e56:	08 f4       	brcc	.+2      	; 0x1e5a <__cmpsf2+0x6>
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	08 95       	ret

00001e5c <__divsf3>:
    1e5c:	0c d0       	rcall	.+24     	; 0x1e76 <__divsf3x>
    1e5e:	48 c1       	rjmp	.+656    	; 0x20f0 <__fp_round>
    1e60:	40 d1       	rcall	.+640    	; 0x20e2 <__fp_pscB>
    1e62:	40 f0       	brcs	.+16     	; 0x1e74 <__divsf3+0x18>
    1e64:	37 d1       	rcall	.+622    	; 0x20d4 <__fp_pscA>
    1e66:	30 f0       	brcs	.+12     	; 0x1e74 <__divsf3+0x18>
    1e68:	21 f4       	brne	.+8      	; 0x1e72 <__divsf3+0x16>
    1e6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e6c:	19 f0       	breq	.+6      	; 0x1e74 <__divsf3+0x18>
    1e6e:	29 c1       	rjmp	.+594    	; 0x20c2 <__fp_inf>
    1e70:	51 11       	cpse	r21, r1
    1e72:	72 c1       	rjmp	.+740    	; 0x2158 <__fp_szero>
    1e74:	2c c1       	rjmp	.+600    	; 0x20ce <__fp_nan>

00001e76 <__divsf3x>:
    1e76:	4d d1       	rcall	.+666    	; 0x2112 <__fp_split3>
    1e78:	98 f3       	brcs	.-26     	; 0x1e60 <__divsf3+0x4>

00001e7a <__divsf3_pse>:
    1e7a:	99 23       	and	r25, r25
    1e7c:	c9 f3       	breq	.-14     	; 0x1e70 <__divsf3+0x14>
    1e7e:	55 23       	and	r21, r21
    1e80:	b1 f3       	breq	.-20     	; 0x1e6e <__divsf3+0x12>
    1e82:	95 1b       	sub	r25, r21
    1e84:	55 0b       	sbc	r21, r21
    1e86:	bb 27       	eor	r27, r27
    1e88:	aa 27       	eor	r26, r26
    1e8a:	62 17       	cp	r22, r18
    1e8c:	73 07       	cpc	r23, r19
    1e8e:	84 07       	cpc	r24, r20
    1e90:	38 f0       	brcs	.+14     	; 0x1ea0 <__divsf3_pse+0x26>
    1e92:	9f 5f       	subi	r25, 0xFF	; 255
    1e94:	5f 4f       	sbci	r21, 0xFF	; 255
    1e96:	22 0f       	add	r18, r18
    1e98:	33 1f       	adc	r19, r19
    1e9a:	44 1f       	adc	r20, r20
    1e9c:	aa 1f       	adc	r26, r26
    1e9e:	a9 f3       	breq	.-22     	; 0x1e8a <__divsf3_pse+0x10>
    1ea0:	33 d0       	rcall	.+102    	; 0x1f08 <__divsf3_pse+0x8e>
    1ea2:	0e 2e       	mov	r0, r30
    1ea4:	3a f0       	brmi	.+14     	; 0x1eb4 <__divsf3_pse+0x3a>
    1ea6:	e0 e8       	ldi	r30, 0x80	; 128
    1ea8:	30 d0       	rcall	.+96     	; 0x1f0a <__divsf3_pse+0x90>
    1eaa:	91 50       	subi	r25, 0x01	; 1
    1eac:	50 40       	sbci	r21, 0x00	; 0
    1eae:	e6 95       	lsr	r30
    1eb0:	00 1c       	adc	r0, r0
    1eb2:	ca f7       	brpl	.-14     	; 0x1ea6 <__divsf3_pse+0x2c>
    1eb4:	29 d0       	rcall	.+82     	; 0x1f08 <__divsf3_pse+0x8e>
    1eb6:	fe 2f       	mov	r31, r30
    1eb8:	27 d0       	rcall	.+78     	; 0x1f08 <__divsf3_pse+0x8e>
    1eba:	66 0f       	add	r22, r22
    1ebc:	77 1f       	adc	r23, r23
    1ebe:	88 1f       	adc	r24, r24
    1ec0:	bb 1f       	adc	r27, r27
    1ec2:	26 17       	cp	r18, r22
    1ec4:	37 07       	cpc	r19, r23
    1ec6:	48 07       	cpc	r20, r24
    1ec8:	ab 07       	cpc	r26, r27
    1eca:	b0 e8       	ldi	r27, 0x80	; 128
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <__divsf3_pse+0x56>
    1ece:	bb 0b       	sbc	r27, r27
    1ed0:	80 2d       	mov	r24, r0
    1ed2:	bf 01       	movw	r22, r30
    1ed4:	ff 27       	eor	r31, r31
    1ed6:	93 58       	subi	r25, 0x83	; 131
    1ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eda:	2a f0       	brmi	.+10     	; 0x1ee6 <__divsf3_pse+0x6c>
    1edc:	9e 3f       	cpi	r25, 0xFE	; 254
    1ede:	51 05       	cpc	r21, r1
    1ee0:	68 f0       	brcs	.+26     	; 0x1efc <__divsf3_pse+0x82>
    1ee2:	ef c0       	rjmp	.+478    	; 0x20c2 <__fp_inf>
    1ee4:	39 c1       	rjmp	.+626    	; 0x2158 <__fp_szero>
    1ee6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee8:	ec f3       	brlt	.-6      	; 0x1ee4 <__divsf3_pse+0x6a>
    1eea:	98 3e       	cpi	r25, 0xE8	; 232
    1eec:	dc f3       	brlt	.-10     	; 0x1ee4 <__divsf3_pse+0x6a>
    1eee:	86 95       	lsr	r24
    1ef0:	77 95       	ror	r23
    1ef2:	67 95       	ror	r22
    1ef4:	b7 95       	ror	r27
    1ef6:	f7 95       	ror	r31
    1ef8:	9f 5f       	subi	r25, 0xFF	; 255
    1efa:	c9 f7       	brne	.-14     	; 0x1eee <__divsf3_pse+0x74>
    1efc:	88 0f       	add	r24, r24
    1efe:	91 1d       	adc	r25, r1
    1f00:	96 95       	lsr	r25
    1f02:	87 95       	ror	r24
    1f04:	97 f9       	bld	r25, 7
    1f06:	08 95       	ret
    1f08:	e1 e0       	ldi	r30, 0x01	; 1
    1f0a:	66 0f       	add	r22, r22
    1f0c:	77 1f       	adc	r23, r23
    1f0e:	88 1f       	adc	r24, r24
    1f10:	bb 1f       	adc	r27, r27
    1f12:	62 17       	cp	r22, r18
    1f14:	73 07       	cpc	r23, r19
    1f16:	84 07       	cpc	r24, r20
    1f18:	ba 07       	cpc	r27, r26
    1f1a:	20 f0       	brcs	.+8      	; 0x1f24 <__divsf3_pse+0xaa>
    1f1c:	62 1b       	sub	r22, r18
    1f1e:	73 0b       	sbc	r23, r19
    1f20:	84 0b       	sbc	r24, r20
    1f22:	ba 0b       	sbc	r27, r26
    1f24:	ee 1f       	adc	r30, r30
    1f26:	88 f7       	brcc	.-30     	; 0x1f0a <__divsf3_pse+0x90>
    1f28:	e0 95       	com	r30
    1f2a:	08 95       	ret

00001f2c <__fixunssfsi>:
    1f2c:	fa d0       	rcall	.+500    	; 0x2122 <__fp_splitA>
    1f2e:	88 f0       	brcs	.+34     	; 0x1f52 <__fixunssfsi+0x26>
    1f30:	9f 57       	subi	r25, 0x7F	; 127
    1f32:	90 f0       	brcs	.+36     	; 0x1f58 <__fixunssfsi+0x2c>
    1f34:	b9 2f       	mov	r27, r25
    1f36:	99 27       	eor	r25, r25
    1f38:	b7 51       	subi	r27, 0x17	; 23
    1f3a:	a0 f0       	brcs	.+40     	; 0x1f64 <__fixunssfsi+0x38>
    1f3c:	d1 f0       	breq	.+52     	; 0x1f72 <__fixunssfsi+0x46>
    1f3e:	66 0f       	add	r22, r22
    1f40:	77 1f       	adc	r23, r23
    1f42:	88 1f       	adc	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	1a f0       	brmi	.+6      	; 0x1f4e <__fixunssfsi+0x22>
    1f48:	ba 95       	dec	r27
    1f4a:	c9 f7       	brne	.-14     	; 0x1f3e <__fixunssfsi+0x12>
    1f4c:	12 c0       	rjmp	.+36     	; 0x1f72 <__fixunssfsi+0x46>
    1f4e:	b1 30       	cpi	r27, 0x01	; 1
    1f50:	81 f0       	breq	.+32     	; 0x1f72 <__fixunssfsi+0x46>
    1f52:	01 d1       	rcall	.+514    	; 0x2156 <__fp_zero>
    1f54:	b1 e0       	ldi	r27, 0x01	; 1
    1f56:	08 95       	ret
    1f58:	fe c0       	rjmp	.+508    	; 0x2156 <__fp_zero>
    1f5a:	67 2f       	mov	r22, r23
    1f5c:	78 2f       	mov	r23, r24
    1f5e:	88 27       	eor	r24, r24
    1f60:	b8 5f       	subi	r27, 0xF8	; 248
    1f62:	39 f0       	breq	.+14     	; 0x1f72 <__fixunssfsi+0x46>
    1f64:	b9 3f       	cpi	r27, 0xF9	; 249
    1f66:	cc f3       	brlt	.-14     	; 0x1f5a <__fixunssfsi+0x2e>
    1f68:	86 95       	lsr	r24
    1f6a:	77 95       	ror	r23
    1f6c:	67 95       	ror	r22
    1f6e:	b3 95       	inc	r27
    1f70:	d9 f7       	brne	.-10     	; 0x1f68 <__fixunssfsi+0x3c>
    1f72:	3e f4       	brtc	.+14     	; 0x1f82 <__fixunssfsi+0x56>
    1f74:	90 95       	com	r25
    1f76:	80 95       	com	r24
    1f78:	70 95       	com	r23
    1f7a:	61 95       	neg	r22
    1f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f80:	9f 4f       	sbci	r25, 0xFF	; 255
    1f82:	08 95       	ret

00001f84 <__floatunsisf>:
    1f84:	e8 94       	clt
    1f86:	09 c0       	rjmp	.+18     	; 0x1f9a <__floatsisf+0x12>

00001f88 <__floatsisf>:
    1f88:	97 fb       	bst	r25, 7
    1f8a:	3e f4       	brtc	.+14     	; 0x1f9a <__floatsisf+0x12>
    1f8c:	90 95       	com	r25
    1f8e:	80 95       	com	r24
    1f90:	70 95       	com	r23
    1f92:	61 95       	neg	r22
    1f94:	7f 4f       	sbci	r23, 0xFF	; 255
    1f96:	8f 4f       	sbci	r24, 0xFF	; 255
    1f98:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9a:	99 23       	and	r25, r25
    1f9c:	a9 f0       	breq	.+42     	; 0x1fc8 <__floatsisf+0x40>
    1f9e:	f9 2f       	mov	r31, r25
    1fa0:	96 e9       	ldi	r25, 0x96	; 150
    1fa2:	bb 27       	eor	r27, r27
    1fa4:	93 95       	inc	r25
    1fa6:	f6 95       	lsr	r31
    1fa8:	87 95       	ror	r24
    1faa:	77 95       	ror	r23
    1fac:	67 95       	ror	r22
    1fae:	b7 95       	ror	r27
    1fb0:	f1 11       	cpse	r31, r1
    1fb2:	f8 cf       	rjmp	.-16     	; 0x1fa4 <__floatsisf+0x1c>
    1fb4:	fa f4       	brpl	.+62     	; 0x1ff4 <__floatsisf+0x6c>
    1fb6:	bb 0f       	add	r27, r27
    1fb8:	11 f4       	brne	.+4      	; 0x1fbe <__floatsisf+0x36>
    1fba:	60 ff       	sbrs	r22, 0
    1fbc:	1b c0       	rjmp	.+54     	; 0x1ff4 <__floatsisf+0x6c>
    1fbe:	6f 5f       	subi	r22, 0xFF	; 255
    1fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc6:	16 c0       	rjmp	.+44     	; 0x1ff4 <__floatsisf+0x6c>
    1fc8:	88 23       	and	r24, r24
    1fca:	11 f0       	breq	.+4      	; 0x1fd0 <__floatsisf+0x48>
    1fcc:	96 e9       	ldi	r25, 0x96	; 150
    1fce:	11 c0       	rjmp	.+34     	; 0x1ff2 <__floatsisf+0x6a>
    1fd0:	77 23       	and	r23, r23
    1fd2:	21 f0       	breq	.+8      	; 0x1fdc <__floatsisf+0x54>
    1fd4:	9e e8       	ldi	r25, 0x8E	; 142
    1fd6:	87 2f       	mov	r24, r23
    1fd8:	76 2f       	mov	r23, r22
    1fda:	05 c0       	rjmp	.+10     	; 0x1fe6 <__floatsisf+0x5e>
    1fdc:	66 23       	and	r22, r22
    1fde:	71 f0       	breq	.+28     	; 0x1ffc <__floatsisf+0x74>
    1fe0:	96 e8       	ldi	r25, 0x86	; 134
    1fe2:	86 2f       	mov	r24, r22
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	60 e0       	ldi	r22, 0x00	; 0
    1fe8:	2a f0       	brmi	.+10     	; 0x1ff4 <__floatsisf+0x6c>
    1fea:	9a 95       	dec	r25
    1fec:	66 0f       	add	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	88 1f       	adc	r24, r24
    1ff2:	da f7       	brpl	.-10     	; 0x1fea <__floatsisf+0x62>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	96 95       	lsr	r25
    1ff8:	87 95       	ror	r24
    1ffa:	97 f9       	bld	r25, 7
    1ffc:	08 95       	ret

00001ffe <__floatundisf>:
    1ffe:	e8 94       	clt

00002000 <__fp_di2sf>:
    2000:	f9 2f       	mov	r31, r25
    2002:	96 eb       	ldi	r25, 0xB6	; 182
    2004:	ff 23       	and	r31, r31
    2006:	81 f0       	breq	.+32     	; 0x2028 <__fp_di2sf+0x28>
    2008:	12 16       	cp	r1, r18
    200a:	13 06       	cpc	r1, r19
    200c:	14 06       	cpc	r1, r20
    200e:	44 0b       	sbc	r20, r20
    2010:	93 95       	inc	r25
    2012:	f6 95       	lsr	r31
    2014:	87 95       	ror	r24
    2016:	77 95       	ror	r23
    2018:	67 95       	ror	r22
    201a:	57 95       	ror	r21
    201c:	40 40       	sbci	r20, 0x00	; 0
    201e:	ff 23       	and	r31, r31
    2020:	b9 f7       	brne	.-18     	; 0x2010 <__fp_di2sf+0x10>
    2022:	1b c0       	rjmp	.+54     	; 0x205a <__fp_di2sf+0x5a>
    2024:	99 27       	eor	r25, r25
    2026:	08 95       	ret
    2028:	88 23       	and	r24, r24
    202a:	51 f4       	brne	.+20     	; 0x2040 <__fp_di2sf+0x40>
    202c:	98 50       	subi	r25, 0x08	; 8
    202e:	d2 f7       	brpl	.-12     	; 0x2024 <__fp_di2sf+0x24>
    2030:	87 2b       	or	r24, r23
    2032:	76 2f       	mov	r23, r22
    2034:	65 2f       	mov	r22, r21
    2036:	54 2f       	mov	r21, r20
    2038:	43 2f       	mov	r20, r19
    203a:	32 2f       	mov	r19, r18
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	b1 f3       	breq	.-20     	; 0x202c <__fp_di2sf+0x2c>
    2040:	12 16       	cp	r1, r18
    2042:	13 06       	cpc	r1, r19
    2044:	14 06       	cpc	r1, r20
    2046:	44 0b       	sbc	r20, r20
    2048:	88 23       	and	r24, r24
    204a:	3a f0       	brmi	.+14     	; 0x205a <__fp_di2sf+0x5a>
    204c:	9a 95       	dec	r25
    204e:	44 0f       	add	r20, r20
    2050:	55 1f       	adc	r21, r21
    2052:	66 1f       	adc	r22, r22
    2054:	77 1f       	adc	r23, r23
    2056:	88 1f       	adc	r24, r24
    2058:	ca f7       	brpl	.-14     	; 0x204c <__fp_di2sf+0x4c>
    205a:	55 23       	and	r21, r21
    205c:	4a f4       	brpl	.+18     	; 0x2070 <__fp_di2sf+0x70>
    205e:	44 0f       	add	r20, r20
    2060:	55 1f       	adc	r21, r21
    2062:	11 f4       	brne	.+4      	; 0x2068 <__fp_di2sf+0x68>
    2064:	60 ff       	sbrs	r22, 0
    2066:	04 c0       	rjmp	.+8      	; 0x2070 <__fp_di2sf+0x70>
    2068:	6f 5f       	subi	r22, 0xFF	; 255
    206a:	7f 4f       	sbci	r23, 0xFF	; 255
    206c:	8f 4f       	sbci	r24, 0xFF	; 255
    206e:	9f 4f       	sbci	r25, 0xFF	; 255
    2070:	88 0f       	add	r24, r24
    2072:	96 95       	lsr	r25
    2074:	87 95       	ror	r24
    2076:	97 f9       	bld	r25, 7
    2078:	08 95       	ret

0000207a <__fp_cmp>:
    207a:	99 0f       	add	r25, r25
    207c:	00 08       	sbc	r0, r0
    207e:	55 0f       	add	r21, r21
    2080:	aa 0b       	sbc	r26, r26
    2082:	e0 e8       	ldi	r30, 0x80	; 128
    2084:	fe ef       	ldi	r31, 0xFE	; 254
    2086:	16 16       	cp	r1, r22
    2088:	17 06       	cpc	r1, r23
    208a:	e8 07       	cpc	r30, r24
    208c:	f9 07       	cpc	r31, r25
    208e:	c0 f0       	brcs	.+48     	; 0x20c0 <__fp_cmp+0x46>
    2090:	12 16       	cp	r1, r18
    2092:	13 06       	cpc	r1, r19
    2094:	e4 07       	cpc	r30, r20
    2096:	f5 07       	cpc	r31, r21
    2098:	98 f0       	brcs	.+38     	; 0x20c0 <__fp_cmp+0x46>
    209a:	62 1b       	sub	r22, r18
    209c:	73 0b       	sbc	r23, r19
    209e:	84 0b       	sbc	r24, r20
    20a0:	95 0b       	sbc	r25, r21
    20a2:	39 f4       	brne	.+14     	; 0x20b2 <__fp_cmp+0x38>
    20a4:	0a 26       	eor	r0, r26
    20a6:	61 f0       	breq	.+24     	; 0x20c0 <__fp_cmp+0x46>
    20a8:	23 2b       	or	r18, r19
    20aa:	24 2b       	or	r18, r20
    20ac:	25 2b       	or	r18, r21
    20ae:	21 f4       	brne	.+8      	; 0x20b8 <__fp_cmp+0x3e>
    20b0:	08 95       	ret
    20b2:	0a 26       	eor	r0, r26
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <__fp_cmp+0x3e>
    20b6:	a1 40       	sbci	r26, 0x01	; 1
    20b8:	a6 95       	lsr	r26
    20ba:	8f ef       	ldi	r24, 0xFF	; 255
    20bc:	81 1d       	adc	r24, r1
    20be:	81 1d       	adc	r24, r1
    20c0:	08 95       	ret

000020c2 <__fp_inf>:
    20c2:	97 f9       	bld	r25, 7
    20c4:	9f 67       	ori	r25, 0x7F	; 127
    20c6:	80 e8       	ldi	r24, 0x80	; 128
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	08 95       	ret

000020ce <__fp_nan>:
    20ce:	9f ef       	ldi	r25, 0xFF	; 255
    20d0:	80 ec       	ldi	r24, 0xC0	; 192
    20d2:	08 95       	ret

000020d4 <__fp_pscA>:
    20d4:	00 24       	eor	r0, r0
    20d6:	0a 94       	dec	r0
    20d8:	16 16       	cp	r1, r22
    20da:	17 06       	cpc	r1, r23
    20dc:	18 06       	cpc	r1, r24
    20de:	09 06       	cpc	r0, r25
    20e0:	08 95       	ret

000020e2 <__fp_pscB>:
    20e2:	00 24       	eor	r0, r0
    20e4:	0a 94       	dec	r0
    20e6:	12 16       	cp	r1, r18
    20e8:	13 06       	cpc	r1, r19
    20ea:	14 06       	cpc	r1, r20
    20ec:	05 06       	cpc	r0, r21
    20ee:	08 95       	ret

000020f0 <__fp_round>:
    20f0:	09 2e       	mov	r0, r25
    20f2:	03 94       	inc	r0
    20f4:	00 0c       	add	r0, r0
    20f6:	11 f4       	brne	.+4      	; 0x20fc <__fp_round+0xc>
    20f8:	88 23       	and	r24, r24
    20fa:	52 f0       	brmi	.+20     	; 0x2110 <__fp_round+0x20>
    20fc:	bb 0f       	add	r27, r27
    20fe:	40 f4       	brcc	.+16     	; 0x2110 <__fp_round+0x20>
    2100:	bf 2b       	or	r27, r31
    2102:	11 f4       	brne	.+4      	; 0x2108 <__fp_round+0x18>
    2104:	60 ff       	sbrs	r22, 0
    2106:	04 c0       	rjmp	.+8      	; 0x2110 <__fp_round+0x20>
    2108:	6f 5f       	subi	r22, 0xFF	; 255
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	8f 4f       	sbci	r24, 0xFF	; 255
    210e:	9f 4f       	sbci	r25, 0xFF	; 255
    2110:	08 95       	ret

00002112 <__fp_split3>:
    2112:	57 fd       	sbrc	r21, 7
    2114:	90 58       	subi	r25, 0x80	; 128
    2116:	44 0f       	add	r20, r20
    2118:	55 1f       	adc	r21, r21
    211a:	59 f0       	breq	.+22     	; 0x2132 <__fp_splitA+0x10>
    211c:	5f 3f       	cpi	r21, 0xFF	; 255
    211e:	71 f0       	breq	.+28     	; 0x213c <__fp_splitA+0x1a>
    2120:	47 95       	ror	r20

00002122 <__fp_splitA>:
    2122:	88 0f       	add	r24, r24
    2124:	97 fb       	bst	r25, 7
    2126:	99 1f       	adc	r25, r25
    2128:	61 f0       	breq	.+24     	; 0x2142 <__fp_splitA+0x20>
    212a:	9f 3f       	cpi	r25, 0xFF	; 255
    212c:	79 f0       	breq	.+30     	; 0x214c <__fp_splitA+0x2a>
    212e:	87 95       	ror	r24
    2130:	08 95       	ret
    2132:	12 16       	cp	r1, r18
    2134:	13 06       	cpc	r1, r19
    2136:	14 06       	cpc	r1, r20
    2138:	55 1f       	adc	r21, r21
    213a:	f2 cf       	rjmp	.-28     	; 0x2120 <__fp_split3+0xe>
    213c:	46 95       	lsr	r20
    213e:	f1 df       	rcall	.-30     	; 0x2122 <__fp_splitA>
    2140:	08 c0       	rjmp	.+16     	; 0x2152 <__fp_splitA+0x30>
    2142:	16 16       	cp	r1, r22
    2144:	17 06       	cpc	r1, r23
    2146:	18 06       	cpc	r1, r24
    2148:	99 1f       	adc	r25, r25
    214a:	f1 cf       	rjmp	.-30     	; 0x212e <__fp_splitA+0xc>
    214c:	86 95       	lsr	r24
    214e:	71 05       	cpc	r23, r1
    2150:	61 05       	cpc	r22, r1
    2152:	08 94       	sec
    2154:	08 95       	ret

00002156 <__fp_zero>:
    2156:	e8 94       	clt

00002158 <__fp_szero>:
    2158:	bb 27       	eor	r27, r27
    215a:	66 27       	eor	r22, r22
    215c:	77 27       	eor	r23, r23
    215e:	cb 01       	movw	r24, r22
    2160:	97 f9       	bld	r25, 7
    2162:	08 95       	ret

00002164 <__gesf2>:
    2164:	8a df       	rcall	.-236    	; 0x207a <__fp_cmp>
    2166:	08 f4       	brcc	.+2      	; 0x216a <__gesf2+0x6>
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	08 95       	ret

0000216c <__mulsf3>:
    216c:	0b d0       	rcall	.+22     	; 0x2184 <__mulsf3x>
    216e:	c0 cf       	rjmp	.-128    	; 0x20f0 <__fp_round>
    2170:	b1 df       	rcall	.-158    	; 0x20d4 <__fp_pscA>
    2172:	28 f0       	brcs	.+10     	; 0x217e <__mulsf3+0x12>
    2174:	b6 df       	rcall	.-148    	; 0x20e2 <__fp_pscB>
    2176:	18 f0       	brcs	.+6      	; 0x217e <__mulsf3+0x12>
    2178:	95 23       	and	r25, r21
    217a:	09 f0       	breq	.+2      	; 0x217e <__mulsf3+0x12>
    217c:	a2 cf       	rjmp	.-188    	; 0x20c2 <__fp_inf>
    217e:	a7 cf       	rjmp	.-178    	; 0x20ce <__fp_nan>
    2180:	11 24       	eor	r1, r1
    2182:	ea cf       	rjmp	.-44     	; 0x2158 <__fp_szero>

00002184 <__mulsf3x>:
    2184:	c6 df       	rcall	.-116    	; 0x2112 <__fp_split3>
    2186:	a0 f3       	brcs	.-24     	; 0x2170 <__mulsf3+0x4>

00002188 <__mulsf3_pse>:
    2188:	95 9f       	mul	r25, r21
    218a:	d1 f3       	breq	.-12     	; 0x2180 <__mulsf3+0x14>
    218c:	95 0f       	add	r25, r21
    218e:	50 e0       	ldi	r21, 0x00	; 0
    2190:	55 1f       	adc	r21, r21
    2192:	62 9f       	mul	r22, r18
    2194:	f0 01       	movw	r30, r0
    2196:	72 9f       	mul	r23, r18
    2198:	bb 27       	eor	r27, r27
    219a:	f0 0d       	add	r31, r0
    219c:	b1 1d       	adc	r27, r1
    219e:	63 9f       	mul	r22, r19
    21a0:	aa 27       	eor	r26, r26
    21a2:	f0 0d       	add	r31, r0
    21a4:	b1 1d       	adc	r27, r1
    21a6:	aa 1f       	adc	r26, r26
    21a8:	64 9f       	mul	r22, r20
    21aa:	66 27       	eor	r22, r22
    21ac:	b0 0d       	add	r27, r0
    21ae:	a1 1d       	adc	r26, r1
    21b0:	66 1f       	adc	r22, r22
    21b2:	82 9f       	mul	r24, r18
    21b4:	22 27       	eor	r18, r18
    21b6:	b0 0d       	add	r27, r0
    21b8:	a1 1d       	adc	r26, r1
    21ba:	62 1f       	adc	r22, r18
    21bc:	73 9f       	mul	r23, r19
    21be:	b0 0d       	add	r27, r0
    21c0:	a1 1d       	adc	r26, r1
    21c2:	62 1f       	adc	r22, r18
    21c4:	83 9f       	mul	r24, r19
    21c6:	a0 0d       	add	r26, r0
    21c8:	61 1d       	adc	r22, r1
    21ca:	22 1f       	adc	r18, r18
    21cc:	74 9f       	mul	r23, r20
    21ce:	33 27       	eor	r19, r19
    21d0:	a0 0d       	add	r26, r0
    21d2:	61 1d       	adc	r22, r1
    21d4:	23 1f       	adc	r18, r19
    21d6:	84 9f       	mul	r24, r20
    21d8:	60 0d       	add	r22, r0
    21da:	21 1d       	adc	r18, r1
    21dc:	82 2f       	mov	r24, r18
    21de:	76 2f       	mov	r23, r22
    21e0:	6a 2f       	mov	r22, r26
    21e2:	11 24       	eor	r1, r1
    21e4:	9f 57       	subi	r25, 0x7F	; 127
    21e6:	50 40       	sbci	r21, 0x00	; 0
    21e8:	8a f0       	brmi	.+34     	; 0x220c <__mulsf3_pse+0x84>
    21ea:	e1 f0       	breq	.+56     	; 0x2224 <__mulsf3_pse+0x9c>
    21ec:	88 23       	and	r24, r24
    21ee:	4a f0       	brmi	.+18     	; 0x2202 <__mulsf3_pse+0x7a>
    21f0:	ee 0f       	add	r30, r30
    21f2:	ff 1f       	adc	r31, r31
    21f4:	bb 1f       	adc	r27, r27
    21f6:	66 1f       	adc	r22, r22
    21f8:	77 1f       	adc	r23, r23
    21fa:	88 1f       	adc	r24, r24
    21fc:	91 50       	subi	r25, 0x01	; 1
    21fe:	50 40       	sbci	r21, 0x00	; 0
    2200:	a9 f7       	brne	.-22     	; 0x21ec <__mulsf3_pse+0x64>
    2202:	9e 3f       	cpi	r25, 0xFE	; 254
    2204:	51 05       	cpc	r21, r1
    2206:	70 f0       	brcs	.+28     	; 0x2224 <__mulsf3_pse+0x9c>
    2208:	5c cf       	rjmp	.-328    	; 0x20c2 <__fp_inf>
    220a:	a6 cf       	rjmp	.-180    	; 0x2158 <__fp_szero>
    220c:	5f 3f       	cpi	r21, 0xFF	; 255
    220e:	ec f3       	brlt	.-6      	; 0x220a <__mulsf3_pse+0x82>
    2210:	98 3e       	cpi	r25, 0xE8	; 232
    2212:	dc f3       	brlt	.-10     	; 0x220a <__mulsf3_pse+0x82>
    2214:	86 95       	lsr	r24
    2216:	77 95       	ror	r23
    2218:	67 95       	ror	r22
    221a:	b7 95       	ror	r27
    221c:	f7 95       	ror	r31
    221e:	e7 95       	ror	r30
    2220:	9f 5f       	subi	r25, 0xFF	; 255
    2222:	c1 f7       	brne	.-16     	; 0x2214 <__mulsf3_pse+0x8c>
    2224:	fe 2b       	or	r31, r30
    2226:	88 0f       	add	r24, r24
    2228:	91 1d       	adc	r25, r1
    222a:	96 95       	lsr	r25
    222c:	87 95       	ror	r24
    222e:	97 f9       	bld	r25, 7
    2230:	08 95       	ret

00002232 <__mulsi3>:
    2232:	62 9f       	mul	r22, r18
    2234:	d0 01       	movw	r26, r0
    2236:	73 9f       	mul	r23, r19
    2238:	f0 01       	movw	r30, r0
    223a:	82 9f       	mul	r24, r18
    223c:	e0 0d       	add	r30, r0
    223e:	f1 1d       	adc	r31, r1
    2240:	64 9f       	mul	r22, r20
    2242:	e0 0d       	add	r30, r0
    2244:	f1 1d       	adc	r31, r1
    2246:	92 9f       	mul	r25, r18
    2248:	f0 0d       	add	r31, r0
    224a:	83 9f       	mul	r24, r19
    224c:	f0 0d       	add	r31, r0
    224e:	74 9f       	mul	r23, r20
    2250:	f0 0d       	add	r31, r0
    2252:	65 9f       	mul	r22, r21
    2254:	f0 0d       	add	r31, r0
    2256:	99 27       	eor	r25, r25
    2258:	72 9f       	mul	r23, r18
    225a:	b0 0d       	add	r27, r0
    225c:	e1 1d       	adc	r30, r1
    225e:	f9 1f       	adc	r31, r25
    2260:	63 9f       	mul	r22, r19
    2262:	b0 0d       	add	r27, r0
    2264:	e1 1d       	adc	r30, r1
    2266:	f9 1f       	adc	r31, r25
    2268:	bd 01       	movw	r22, r26
    226a:	cf 01       	movw	r24, r30
    226c:	11 24       	eor	r1, r1
    226e:	08 95       	ret

00002270 <__udivmodsi4>:
    2270:	a1 e2       	ldi	r26, 0x21	; 33
    2272:	1a 2e       	mov	r1, r26
    2274:	aa 1b       	sub	r26, r26
    2276:	bb 1b       	sub	r27, r27
    2278:	fd 01       	movw	r30, r26
    227a:	0d c0       	rjmp	.+26     	; 0x2296 <__udivmodsi4_ep>

0000227c <__udivmodsi4_loop>:
    227c:	aa 1f       	adc	r26, r26
    227e:	bb 1f       	adc	r27, r27
    2280:	ee 1f       	adc	r30, r30
    2282:	ff 1f       	adc	r31, r31
    2284:	a2 17       	cp	r26, r18
    2286:	b3 07       	cpc	r27, r19
    2288:	e4 07       	cpc	r30, r20
    228a:	f5 07       	cpc	r31, r21
    228c:	20 f0       	brcs	.+8      	; 0x2296 <__udivmodsi4_ep>
    228e:	a2 1b       	sub	r26, r18
    2290:	b3 0b       	sbc	r27, r19
    2292:	e4 0b       	sbc	r30, r20
    2294:	f5 0b       	sbc	r31, r21

00002296 <__udivmodsi4_ep>:
    2296:	66 1f       	adc	r22, r22
    2298:	77 1f       	adc	r23, r23
    229a:	88 1f       	adc	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	1a 94       	dec	r1
    22a0:	69 f7       	brne	.-38     	; 0x227c <__udivmodsi4_loop>
    22a2:	60 95       	com	r22
    22a4:	70 95       	com	r23
    22a6:	80 95       	com	r24
    22a8:	90 95       	com	r25
    22aa:	9b 01       	movw	r18, r22
    22ac:	ac 01       	movw	r20, r24
    22ae:	bd 01       	movw	r22, r26
    22b0:	cf 01       	movw	r24, r30
    22b2:	08 95       	ret

000022b4 <_exit>:
    22b4:	f8 94       	cli

000022b6 <__stop_program>:
    22b6:	ff cf       	rjmp	.-2      	; 0x22b6 <__stop_program>
