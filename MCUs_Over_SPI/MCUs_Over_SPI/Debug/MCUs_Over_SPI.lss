
MCUs_Over_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000123b  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  000016df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af9  00000000  00000000  00001fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000254  00000000  00000000  00002aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000683  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010dc  00000000  00000000  0000337f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  0000445b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  64:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ECU_1_MasterMain>:
------------------------*/
/**
* @brief: This function is the master node main function.
*/
static void ECU_1_MasterMain(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	ce 5f       	subi	r28, 0xFE	; 254
  76:	d1 09       	sbc	r29, r1
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	f8 94       	cli
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	0f be       	out	0x3f, r0	; 63
  80:	cd bf       	out	0x3d, r28	; 61
   uint8_t string[MAX_STRING_SIZE];
   
   UART_Init(UART_CH_0);
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	0e 94 1d 01 	call	0x23a	; 0x23a <UART_Init>
   SPI_Init(SPI_CH_0);
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Init>
   
   while (1)
   {
      UART_ReceiveString(UART_CH_0, string);
  8e:	be 01       	movw	r22, r28
  90:	6f 5f       	subi	r22, 0xFF	; 255
  92:	7f 4f       	sbci	r23, 0xFF	; 255
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 29 01 	call	0x252	; 0x252 <UART_ReceiveString>
      SPI_TransmitString(SPI_CH_0, string, SPI_CH_0_SS_CH_0);
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	be 01       	movw	r22, r28
  9e:	6f 5f       	subi	r22, 0xFF	; 255
  a0:	7f 4f       	sbci	r23, 0xFF	; 255
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SPI_TransmitString>
  a8:	f2 cf       	rjmp	.-28     	; 0x8e <ECU_1_MasterMain+0x22>

000000aa <main>:
   }
}

int main(void)
{
   ECU_1_MasterMain();
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <ECU_1_MasterMain>

000000ae <DIO_SetPinDirection>:
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
}
  ae:	68 30       	cpi	r22, 0x08	; 8
  b0:	80 f5       	brcc	.+96     	; 0x112 <DIO_SetPinDirection+0x64>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	79 f0       	breq	.+30     	; 0xd4 <DIO_SetPinDirection+0x26>
  b6:	28 f0       	brcs	.+10     	; 0xc2 <DIO_SetPinDirection+0x14>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	31 f0       	breq	.+12     	; 0xc8 <DIO_SetPinDirection+0x1a>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	39 f0       	breq	.+14     	; 0xce <DIO_SetPinDirection+0x20>
  c0:	2a c0       	rjmp	.+84     	; 0x116 <DIO_SetPinDirection+0x68>
  c2:	ea e3       	ldi	r30, 0x3A	; 58
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <DIO_SetPinDirection+0x2a>
  c8:	e4 e3       	ldi	r30, 0x34	; 52
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <DIO_SetPinDirection+0x2a>
  ce:	e1 e3       	ldi	r30, 0x31	; 49
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_SetPinDirection+0x2a>
  d4:	e7 e3       	ldi	r30, 0x37	; 55
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	61 f4       	brne	.+24     	; 0xf4 <DIO_SetPinDirection+0x46>
  dc:	20 81       	ld	r18, Z
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDirection+0x3a>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDirection+0x36>
  ec:	82 2b       	or	r24, r18
  ee:	80 83       	st	Z, r24
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	08 95       	ret
  f4:	41 11       	cpse	r20, r1
  f6:	11 c0       	rjmp	.+34     	; 0x11a <DIO_SetPinDirection+0x6c>
  f8:	20 81       	ld	r18, Z
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_SetPinDirection+0x56>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_SetPinDirection+0x52>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	80 83       	st	Z, r24
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	08 95       	ret
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	08 95       	ret
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	08 95       	ret
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	08 95       	ret

0000011e <DIO_WritePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 11e:	68 30       	cpi	r22, 0x08	; 8
 120:	80 f5       	brcc	.+96     	; 0x182 <DIO_WritePin+0x64>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data pointer according to the required port. */
   switch(port)
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	79 f0       	breq	.+30     	; 0x144 <DIO_WritePin+0x26>
 126:	28 f0       	brcs	.+10     	; 0x132 <DIO_WritePin+0x14>
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	31 f0       	breq	.+12     	; 0x138 <DIO_WritePin+0x1a>
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	39 f0       	breq	.+14     	; 0x13e <DIO_WritePin+0x20>
 130:	2a c0       	rjmp	.+84     	; 0x186 <DIO_WritePin+0x68>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 132:	eb e3       	ldi	r30, 0x3B	; 59
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	08 c0       	rjmp	.+16     	; 0x148 <DIO_WritePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 138:	e5 e3       	ldi	r30, 0x35	; 53
 13a:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 13c:	05 c0       	rjmp	.+10     	; 0x148 <DIO_WritePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 13e:	e2 e3       	ldi	r30, 0x32	; 50
 140:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_WritePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 144:	e8 e3       	ldi	r30, 0x38	; 56
 146:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   /* set or clear value in the pin. */
   if(HIGH == data)
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	61 f4       	brne	.+24     	; 0x164 <DIO_WritePin+0x46>
   {
      SET_BIT(*prt_port_data,pin);
 14c:	20 81       	ld	r18, Z
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_WritePin+0x3a>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_WritePin+0x36>
 15c:	82 2b       	or	r24, r18
 15e:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	08 95       	ret
   /* set or clear value in the pin. */
   if(HIGH == data)
   {
      SET_BIT(*prt_port_data,pin);
   }
   else if(LOW == data)
 164:	41 11       	cpse	r20, r1
 166:	11 c0       	rjmp	.+34     	; 0x18a <DIO_WritePin+0x6c>
   {
      CLEAR_BIT(*prt_port_data,pin);
 168:	20 81       	ld	r18, Z
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_WritePin+0x56>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_WritePin+0x52>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	08 95       	ret
      CLEAR_BIT(*prt_port_data,pin);
   }
   /* if data is invalid. */
   else
   {
      return E_DIO_INVALID_WRITE_DATA;
 18a:	84 e0       	ldi	r24, 0x04	; 4
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 18c:	08 95       	ret

0000018e <SPI_Init>:
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
   
}
 18e:	81 11       	cpse	r24, r1
 190:	18 c0       	rjmp	.+48     	; 0x1c2 <SPI_Init+0x34>
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	64 e0       	ldi	r22, 0x04	; 4
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 57 00 	call	0xae	; 0xae <DIO_SetPinDirection>
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	64 e0       	ldi	r22, 0x04	; 4
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_WritePin>
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	65 e0       	ldi	r22, 0x05	; 5
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 57 00 	call	0xae	; 0xae <DIO_SetPinDirection>
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	67 e0       	ldi	r22, 0x07	; 7
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 57 00 	call	0xae	; 0xae <DIO_SetPinDirection>
 1ba:	80 e5       	ldi	r24, 0x50	; 80
 1bc:	8d b9       	out	0x0d, r24	; 13
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
 1c2:	86 e0       	ldi	r24, 0x06	; 6
 1c4:	08 95       	ret

000001c6 <SPI_TransmitString>:
* @param [in]  TxString    -  array of characters to send.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_TransmitString(uint8_t SpiNumber, uint8_t * TxString, uint8_t slave_CH)
{
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
   uint8_t counter = DATA_COUNTER_START;
   
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == TxString)
 1ce:	61 15       	cp	r22, r1
 1d0:	71 05       	cpc	r23, r1
 1d2:	31 f1       	breq	.+76     	; 0x220 <SPI_TransmitString+0x5a>
   volatile uint8_t * ptr_SPIStatusR;
   uint8_t u8_SSPort;
   uint8_t u8_SSPin;
   
   /* get the required spi data */
   switch(SpiNumber)
 1d4:	81 11       	cpse	r24, r1
 1d6:	26 c0       	rjmp	.+76     	; 0x224 <SPI_TransmitString+0x5e>
      default:
         return E_SPI_INVALID_CH;
   }
   
   /* get the required slave select port and pin */
   switch(slave_CH)
 1d8:	44 23       	and	r20, r20
 1da:	11 f0       	breq	.+4      	; 0x1e0 <SPI_TransmitString+0x1a>
 1dc:	4f 3f       	cpi	r20, 0xFF	; 255
 1de:	21 f5       	brne	.+72     	; 0x228 <SPI_TransmitString+0x62>
 1e0:	d4 2f       	mov	r29, r20
 1e2:	8b 01       	movw	r16, r22
         break;
      default:
         return E_SPI_INVALID_SS_CH;
   }
   
   if(SLAVE_SS_CH != slave_CH)
 1e4:	4f 3f       	cpi	r20, 0xFF	; 255
 1e6:	29 f0       	breq	.+10     	; 0x1f2 <SPI_TransmitString+0x2c>
   {
      /* select slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, LOW);
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	64 e0       	ldi	r22, 0x04	; 4
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_WritePin>
* @param [in]  TxString    -  array of characters to send.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_TransmitString(uint8_t SpiNumber, uint8_t * TxString, uint8_t slave_CH)
{
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	07 c0       	rjmp	.+14     	; 0x204 <SPI_TransmitString+0x3e>
   
   /* sends all characters until it finds an end of string character */
   while(TxString[counter] != END_OF_STRING)
   {
      /* puts data */
      *ptr_SPIDataR = TxString[counter];
 1f6:	cf b9       	out	0x0f, r28	; 15
      
      /* loops until transmitting is complete */
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <SPI_TransmitString+0x38>
      {
         /* check if there is a write collision error flag */
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
 1fa:	76 99       	sbic	0x0e, 6	; 14
 1fc:	17 c0       	rjmp	.+46     	; 0x22c <SPI_TransmitString+0x66>
   {
      /* puts data */
      *ptr_SPIDataR = TxString[counter];
      
      /* loops until transmitting is complete */
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
 1fe:	77 9b       	sbis	0x0e, 7	; 14
 200:	fc cf       	rjmp	.-8      	; 0x1fa <SPI_TransmitString+0x34>
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
         {
            return E_SPI_WRITE_COLLISION;
         }
      }
      counter++;
 202:	8f 5f       	subi	r24, 0xFF	; 255
      /* select slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, LOW);
   }
   
   /* sends all characters until it finds an end of string character */
   while(TxString[counter] != END_OF_STRING)
 204:	f8 01       	movw	r30, r16
 206:	e8 0f       	add	r30, r24
 208:	f1 1d       	adc	r31, r1
 20a:	c0 81       	ld	r28, Z
 20c:	c1 11       	cpse	r28, r1
 20e:	f3 cf       	rjmp	.-26     	; 0x1f6 <SPI_TransmitString+0x30>
         }
      }
      counter++;
   }
   
   if(SLAVE_SS_CH != slave_CH)
 210:	df 3f       	cpi	r29, 0xFF	; 255
 212:	69 f0       	breq	.+26     	; 0x22e <SPI_TransmitString+0x68>
   {
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	64 e0       	ldi	r22, 0x04	; 4
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_WritePin>
 21e:	07 c0       	rjmp	.+14     	; 0x22e <SPI_TransmitString+0x68>
   uint8_t counter = DATA_COUNTER_START;
   
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == TxString)
   {
      return E_SPI_NULL_PTR;
 220:	c4 e0       	ldi	r28, 0x04	; 4
 222:	05 c0       	rjmp	.+10     	; 0x22e <SPI_TransmitString+0x68>
         ptr_SPIDataR = &SPI_DATA_R;
         ptr_SPIStatusR = &SPI_STATUS_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
 224:	c6 e0       	ldi	r28, 0x06	; 6
 226:	03 c0       	rjmp	.+6      	; 0x22e <SPI_TransmitString+0x68>
         break;
      #endif
      case SLAVE_SS_CH:
         break;
      default:
         return E_SPI_INVALID_SS_CH;
 228:	c5 e0       	ldi	r28, 0x05	; 5
 22a:	01 c0       	rjmp	.+2      	; 0x22e <SPI_TransmitString+0x68>
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
      {
         /* check if there is a write collision error flag */
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
         {
            return E_SPI_WRITE_COLLISION;
 22c:	c1 e0       	ldi	r28, 0x01	; 1
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
}
 22e:	8c 2f       	mov	r24, r28
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	08 95       	ret

0000023a <UART_Init>:
      counter++;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 23a:	81 11       	cpse	r24, r1
 23c:	08 c0       	rjmp	.+16     	; 0x24e <UART_Init+0x14>
 23e:	88 e1       	ldi	r24, 0x18	; 24
 240:	8a b9       	out	0x0a, r24	; 10
 242:	86 e8       	ldi	r24, 0x86	; 134
 244:	80 bd       	out	0x20, r24	; 32
 246:	83 e3       	ldi	r24, 0x33	; 51
 248:	89 b9       	out	0x09, r24	; 9
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	08 95       	ret

00000252 <UART_ReceiveString>:
UART_ERROR_state_t UART_ReceiveString(uint8_t UartNumber, uint8_t * RxString)
{
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
 252:	61 15       	cp	r22, r1
 254:	71 05       	cpc	r23, r1
 256:	41 f1       	breq	.+80     	; 0x2a8 <UART_ReceiveString+0x56>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 258:	81 11       	cpse	r24, r1
 25a:	28 c0       	rjmp	.+80     	; 0x2ac <UART_ReceiveString+0x5a>
 25c:	03 c0       	rjmp	.+6      	; 0x264 <UART_ReceiveString+0x12>
            counter -= STRING_RETURN_TO_PREV_CHAR;
         }
         /* return to the string start if the counter is still at first character */
         else
         {
            counter = STRING_COUNTER_START;
 25e:	80 e0       	ldi	r24, 0x00	; 0
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 260:	98 2f       	mov	r25, r24
 262:	01 c0       	rjmp	.+2      	; 0x266 <UART_ReceiveString+0x14>
 264:	90 e0       	ldi	r25, 0x00	; 0
   }
   
   while(1)
   {
      /* Wait for data to be received */
      while ( !(*ptru8_UARTStatusR & RECEIVE_COMPLETE_BIT) );
 266:	5f 9b       	sbis	0x0b, 7	; 11
 268:	fe cf       	rjmp	.-4      	; 0x266 <UART_ReceiveString+0x14>
      /* Get and return received data from buffer */
      RxString[counter] = *ptru8_UARTDataR;
 26a:	29 2f       	mov	r18, r25
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	fb 01       	movw	r30, r22
 270:	e2 0f       	add	r30, r18
 272:	f3 1f       	adc	r31, r19
 274:	8c b1       	in	r24, 0x0c	; 12
 276:	80 83       	st	Z, r24
      
      /* enters an end of string character and breaks from the loop on receiving
         a new line character */
      if(RxString[counter] == NEW_LINE)
 278:	8d 30       	cpi	r24, 0x0D	; 13
 27a:	41 f4       	brne	.+16     	; 0x28c <UART_ReceiveString+0x3a>
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
 27c:	2f 5f       	subi	r18, 0xFF	; 255
 27e:	3f 4f       	sbci	r19, 0xFF	; 255
 280:	fb 01       	movw	r30, r22
 282:	e2 0f       	add	r30, r18
 284:	f3 1f       	adc	r31, r19
 286:	10 82       	st	Z, r1
         }
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret
      if(RxString[counter] == NEW_LINE)
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
         break;
      }
      counter++;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	89 0f       	add	r24, r25
      
      /* return to the previous character to overwrite if the entered character 
         is backspace */
      if(RxString[counter - STRING_PREV_CHAR] == BACKSPACE)
 290:	fb 01       	movw	r30, r22
 292:	e8 0f       	add	r30, r24
 294:	f1 1d       	adc	r31, r1
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	20 81       	ld	r18, Z
 29a:	28 30       	cpi	r18, 0x08	; 8
 29c:	09 f7       	brne	.-62     	; 0x260 <UART_ReceiveString+0xe>
      {
         if (counter - STRING_PREV_CHAR != STRING_COUNTER_START)
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	f1 f2       	breq	.-68     	; 0x25e <UART_ReceiveString+0xc>
         {
            counter -= STRING_RETURN_TO_PREV_CHAR;
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	89 0f       	add	r24, r25
 2a6:	dc cf       	rjmp	.-72     	; 0x260 <UART_ReceiveString+0xe>
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
   {
      return E_UART_NULL_PTR;
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
 2ac:	86 e0       	ldi	r24, 0x06	; 6
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 2ae:	08 95       	ret

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
