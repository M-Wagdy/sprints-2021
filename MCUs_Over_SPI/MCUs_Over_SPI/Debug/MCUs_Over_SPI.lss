
MCUs_Over_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001267  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  00001747  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b03  00000000  00000000  00002015  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000254  00000000  00000000  00002b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000683  00000000  00000000  00002d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010dc  00000000  00000000  000033ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  000044cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  64:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ECU_1_MasterMain>:
------------------------*/
/**
* @brief: This function is the master node main function.
*/
static void ECU_1_MasterMain(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	ce 5f       	subi	r28, 0xFE	; 254
  76:	d1 09       	sbc	r29, r1
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	f8 94       	cli
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	0f be       	out	0x3f, r0	; 63
  80:	cd bf       	out	0x3d, r28	; 61
   uint8_t string[MAX_STRING_SIZE];
   
   UART_Init(UART_CH_0);
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	0e 94 23 01 	call	0x246	; 0x246 <UART_Init>
   SPI_Init(SPI_CH_0);
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	0e 94 cd 00 	call	0x19a	; 0x19a <SPI_Init>
   
   while (1)
   {
      UART_ReceiveString(UART_CH_0, string);
  8e:	be 01       	movw	r22, r28
  90:	6f 5f       	subi	r22, 0xFF	; 255
  92:	7f 4f       	sbci	r23, 0xFF	; 255
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 46 01 	call	0x28c	; 0x28c <UART_ReceiveString>
      UART_TransmitString(UART_CH_0, string);
  9a:	be 01       	movw	r22, r28
  9c:	6f 5f       	subi	r22, 0xFF	; 255
  9e:	7f 4f       	sbci	r23, 0xFF	; 255
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 2f 01 	call	0x25e	; 0x25e <UART_TransmitString>
      SPI_TransmitString(SPI_CH_0, string, SPI_CH_0_SS_CH_0);
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	be 01       	movw	r22, r28
  aa:	6f 5f       	subi	r22, 0xFF	; 255
  ac:	7f 4f       	sbci	r23, 0xFF	; 255
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <SPI_TransmitString>
  b4:	ec cf       	rjmp	.-40     	; 0x8e <ECU_1_MasterMain+0x22>

000000b6 <main>:
   }
}

int main(void)
{
   ECU_1_MasterMain();
  b6:	0e 94 36 00 	call	0x6c	; 0x6c <ECU_1_MasterMain>

000000ba <DIO_SetPinDirection>:
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
}
  ba:	68 30       	cpi	r22, 0x08	; 8
  bc:	80 f5       	brcc	.+96     	; 0x11e <DIO_SetPinDirection+0x64>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	79 f0       	breq	.+30     	; 0xe0 <DIO_SetPinDirection+0x26>
  c2:	28 f0       	brcs	.+10     	; 0xce <DIO_SetPinDirection+0x14>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	31 f0       	breq	.+12     	; 0xd4 <DIO_SetPinDirection+0x1a>
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	39 f0       	breq	.+14     	; 0xda <DIO_SetPinDirection+0x20>
  cc:	2a c0       	rjmp	.+84     	; 0x122 <DIO_SetPinDirection+0x68>
  ce:	ea e3       	ldi	r30, 0x3A	; 58
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	08 c0       	rjmp	.+16     	; 0xe4 <DIO_SetPinDirection+0x2a>
  d4:	e4 e3       	ldi	r30, 0x34	; 52
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <DIO_SetPinDirection+0x2a>
  da:	e1 e3       	ldi	r30, 0x31	; 49
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDirection+0x2a>
  e0:	e7 e3       	ldi	r30, 0x37	; 55
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	41 30       	cpi	r20, 0x01	; 1
  e6:	61 f4       	brne	.+24     	; 0x100 <DIO_SetPinDirection+0x46>
  e8:	20 81       	ld	r18, Z
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_SetPinDirection+0x3a>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_SetPinDirection+0x36>
  f8:	82 2b       	or	r24, r18
  fa:	80 83       	st	Z, r24
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	08 95       	ret
 100:	41 11       	cpse	r20, r1
 102:	11 c0       	rjmp	.+34     	; 0x126 <DIO_SetPinDirection+0x6c>
 104:	20 81       	ld	r18, Z
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinDirection+0x56>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinDirection+0x52>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	80 83       	st	Z, r24
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	08 95       	ret
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	08 95       	ret
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	08 95       	ret
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	08 95       	ret

0000012a <DIO_WritePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 12a:	68 30       	cpi	r22, 0x08	; 8
 12c:	80 f5       	brcc	.+96     	; 0x18e <DIO_WritePin+0x64>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data pointer according to the required port. */
   switch(port)
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	79 f0       	breq	.+30     	; 0x150 <DIO_WritePin+0x26>
 132:	28 f0       	brcs	.+10     	; 0x13e <DIO_WritePin+0x14>
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	31 f0       	breq	.+12     	; 0x144 <DIO_WritePin+0x1a>
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	39 f0       	breq	.+14     	; 0x14a <DIO_WritePin+0x20>
 13c:	2a c0       	rjmp	.+84     	; 0x192 <DIO_WritePin+0x68>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 13e:	eb e3       	ldi	r30, 0x3B	; 59
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	08 c0       	rjmp	.+16     	; 0x154 <DIO_WritePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 144:	e5 e3       	ldi	r30, 0x35	; 53
 146:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 148:	05 c0       	rjmp	.+10     	; 0x154 <DIO_WritePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 14a:	e2 e3       	ldi	r30, 0x32	; 50
 14c:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_WritePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 150:	e8 e3       	ldi	r30, 0x38	; 56
 152:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   /* set or clear value in the pin. */
   if(HIGH == data)
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	61 f4       	brne	.+24     	; 0x170 <DIO_WritePin+0x46>
   {
      SET_BIT(*prt_port_data,pin);
 158:	20 81       	ld	r18, Z
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_WritePin+0x3a>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_WritePin+0x36>
 168:	82 2b       	or	r24, r18
 16a:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret
   /* set or clear value in the pin. */
   if(HIGH == data)
   {
      SET_BIT(*prt_port_data,pin);
   }
   else if(LOW == data)
 170:	41 11       	cpse	r20, r1
 172:	11 c0       	rjmp	.+34     	; 0x196 <DIO_WritePin+0x6c>
   {
      CLEAR_BIT(*prt_port_data,pin);
 174:	20 81       	ld	r18, Z
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_WritePin+0x56>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_WritePin+0x52>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	08 95       	ret
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	08 95       	ret
      CLEAR_BIT(*prt_port_data,pin);
   }
   /* if data is invalid. */
   else
   {
      return E_DIO_INVALID_WRITE_DATA;
 196:	84 e0       	ldi	r24, 0x04	; 4
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 198:	08 95       	ret

0000019a <SPI_Init>:
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
   
}
 19a:	81 11       	cpse	r24, r1
 19c:	18 c0       	rjmp	.+48     	; 0x1ce <SPI_Init+0x34>
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	64 e0       	ldi	r22, 0x04	; 4
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPinDirection>
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	64 e0       	ldi	r22, 0x04	; 4
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_WritePin>
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	65 e0       	ldi	r22, 0x05	; 5
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPinDirection>
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	67 e0       	ldi	r22, 0x07	; 7
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 5d 00 	call	0xba	; 0xba <DIO_SetPinDirection>
 1c6:	80 e5       	ldi	r24, 0x50	; 80
 1c8:	8d b9       	out	0x0d, r24	; 13
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	08 95       	ret
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	08 95       	ret

000001d2 <SPI_TransmitString>:
* @param [in]  TxString    -  array of characters to send.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_TransmitString(uint8_t SpiNumber, uint8_t * TxString, uint8_t slave_CH)
{
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
   uint8_t counter = DATA_COUNTER_START;
   
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == TxString)
 1da:	61 15       	cp	r22, r1
 1dc:	71 05       	cpc	r23, r1
 1de:	31 f1       	breq	.+76     	; 0x22c <SPI_TransmitString+0x5a>
   volatile uint8_t * ptr_SPIStatusR;
   uint8_t u8_SSPort;
   uint8_t u8_SSPin;
   
   /* get the required spi data */
   switch(SpiNumber)
 1e0:	81 11       	cpse	r24, r1
 1e2:	26 c0       	rjmp	.+76     	; 0x230 <SPI_TransmitString+0x5e>
      default:
         return E_SPI_INVALID_CH;
   }
   
   /* get the required slave select port and pin */
   switch(slave_CH)
 1e4:	44 23       	and	r20, r20
 1e6:	11 f0       	breq	.+4      	; 0x1ec <SPI_TransmitString+0x1a>
 1e8:	4f 3f       	cpi	r20, 0xFF	; 255
 1ea:	21 f5       	brne	.+72     	; 0x234 <SPI_TransmitString+0x62>
 1ec:	d4 2f       	mov	r29, r20
 1ee:	8b 01       	movw	r16, r22
         break;
      default:
         return E_SPI_INVALID_SS_CH;
   }
   
   if(SLAVE_SS_CH != slave_CH)
 1f0:	4f 3f       	cpi	r20, 0xFF	; 255
 1f2:	29 f0       	breq	.+10     	; 0x1fe <SPI_TransmitString+0x2c>
   {
      /* select slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, LOW);
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	64 e0       	ldi	r22, 0x04	; 4
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_WritePin>
* @param [in]  TxString    -  array of characters to send.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_TransmitString(uint8_t SpiNumber, uint8_t * TxString, uint8_t slave_CH)
{
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	07 c0       	rjmp	.+14     	; 0x210 <SPI_TransmitString+0x3e>
   
   /* sends all characters until it finds an end of string character */
   while(TxString[counter] != END_OF_STRING)
   {
      /* puts data */
      *ptr_SPIDataR = TxString[counter];
 202:	cf b9       	out	0x0f, r28	; 15
      
      /* loops until transmitting is complete */
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
 204:	02 c0       	rjmp	.+4      	; 0x20a <SPI_TransmitString+0x38>
      {
         /* check if there is a write collision error flag */
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
 206:	76 99       	sbic	0x0e, 6	; 14
 208:	17 c0       	rjmp	.+46     	; 0x238 <SPI_TransmitString+0x66>
   {
      /* puts data */
      *ptr_SPIDataR = TxString[counter];
      
      /* loops until transmitting is complete */
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
 20a:	77 9b       	sbis	0x0e, 7	; 14
 20c:	fc cf       	rjmp	.-8      	; 0x206 <SPI_TransmitString+0x34>
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
         {
            return E_SPI_WRITE_COLLISION;
         }
      }
      counter++;
 20e:	8f 5f       	subi	r24, 0xFF	; 255
      /* select slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, LOW);
   }
   
   /* sends all characters until it finds an end of string character */
   while(TxString[counter] != END_OF_STRING)
 210:	f8 01       	movw	r30, r16
 212:	e8 0f       	add	r30, r24
 214:	f1 1d       	adc	r31, r1
 216:	c0 81       	ld	r28, Z
 218:	c1 11       	cpse	r28, r1
 21a:	f3 cf       	rjmp	.-26     	; 0x202 <SPI_TransmitString+0x30>
         }
      }
      counter++;
   }
   
   if(SLAVE_SS_CH != slave_CH)
 21c:	df 3f       	cpi	r29, 0xFF	; 255
 21e:	69 f0       	breq	.+26     	; 0x23a <SPI_TransmitString+0x68>
   {
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_WritePin>
 22a:	07 c0       	rjmp	.+14     	; 0x23a <SPI_TransmitString+0x68>
   uint8_t counter = DATA_COUNTER_START;
   
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == TxString)
   {
      return E_SPI_NULL_PTR;
 22c:	c4 e0       	ldi	r28, 0x04	; 4
 22e:	05 c0       	rjmp	.+10     	; 0x23a <SPI_TransmitString+0x68>
         ptr_SPIDataR = &SPI_DATA_R;
         ptr_SPIStatusR = &SPI_STATUS_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
 230:	c6 e0       	ldi	r28, 0x06	; 6
 232:	03 c0       	rjmp	.+6      	; 0x23a <SPI_TransmitString+0x68>
         break;
      #endif
      case SLAVE_SS_CH:
         break;
      default:
         return E_SPI_INVALID_SS_CH;
 234:	c5 e0       	ldi	r28, 0x05	; 5
 236:	01 c0       	rjmp	.+2      	; 0x23a <SPI_TransmitString+0x68>
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
      {
         /* check if there is a write collision error flag */
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
         {
            return E_SPI_WRITE_COLLISION;
 238:	c1 e0       	ldi	r28, 0x01	; 1
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
}
 23a:	8c 2f       	mov	r24, r28
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	08 95       	ret

00000246 <UART_Init>:
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
   
   /* return success status */
   return E_UART_SUCCESS;
}
 246:	81 11       	cpse	r24, r1
 248:	08 c0       	rjmp	.+16     	; 0x25a <UART_Init+0x14>
 24a:	88 e1       	ldi	r24, 0x18	; 24
 24c:	8a b9       	out	0x0a, r24	; 10
 24e:	86 e8       	ldi	r24, 0x86	; 134
 250:	80 bd       	out	0x20, r24	; 32
 252:	83 e3       	ldi	r24, 0x33	; 51
 254:	89 b9       	out	0x09, r24	; 9
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 95       	ret
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	08 95       	ret

0000025e <UART_TransmitString>:
UART_ERROR_state_t UART_TransmitString(uint8_t UartNumber,uint8_t * TxString)
{
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
 25e:	61 15       	cp	r22, r1
 260:	71 05       	cpc	r23, r1
 262:	81 f0       	breq	.+32     	; 0x284 <UART_TransmitString+0x26>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 264:	81 11       	cpse	r24, r1
 266:	10 c0       	rjmp	.+32     	; 0x288 <UART_TransmitString+0x2a>
 268:	05 c0       	rjmp	.+10     	; 0x274 <UART_TransmitString+0x16>
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
   {
      /* Wait for empty transmit buffer */
      while ( !( *ptru8_UARTStatusR & EMPTY_BUFFER_BIT) );
 26a:	5d 9b       	sbis	0x0b, 5	; 11
 26c:	fe cf       	rjmp	.-4      	; 0x26a <UART_TransmitString+0xc>
      
      /* Put data into buffer, sends the data */
      *ptru8_UARTDataR = TxString[counter];
 26e:	8c b9       	out	0x0c, r24	; 12
      counter++;
 270:	9f 5f       	subi	r25, 0xFF	; 255
 272:	01 c0       	rjmp	.+2      	; 0x276 <UART_TransmitString+0x18>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 274:	90 e0       	ldi	r25, 0x00	; 0
      default:
         return E_UART_INVALID_CH;
   }
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
 276:	fb 01       	movw	r30, r22
 278:	e9 0f       	add	r30, r25
 27a:	f1 1d       	adc	r31, r1
 27c:	80 81       	ld	r24, Z
 27e:	81 11       	cpse	r24, r1
 280:	f4 cf       	rjmp	.-24     	; 0x26a <UART_TransmitString+0xc>
 282:	08 95       	ret
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
   {
      return E_UART_NULL_PTR;
 284:	84 e0       	ldi	r24, 0x04	; 4
 286:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
 288:	86 e0       	ldi	r24, 0x06	; 6
      counter++;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 28a:	08 95       	ret

0000028c <UART_ReceiveString>:
UART_ERROR_state_t UART_ReceiveString(uint8_t UartNumber, uint8_t * RxString)
{
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
 28c:	61 15       	cp	r22, r1
 28e:	71 05       	cpc	r23, r1
 290:	41 f1       	breq	.+80     	; 0x2e2 <UART_ReceiveString+0x56>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 292:	81 11       	cpse	r24, r1
 294:	28 c0       	rjmp	.+80     	; 0x2e6 <UART_ReceiveString+0x5a>
 296:	03 c0       	rjmp	.+6      	; 0x29e <UART_ReceiveString+0x12>
            counter -= STRING_RETURN_TO_PREV_CHAR;
         }
         /* return to the string start if the counter is still at first character */
         else
         {
            counter = STRING_COUNTER_START;
 298:	80 e0       	ldi	r24, 0x00	; 0
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 29a:	98 2f       	mov	r25, r24
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <UART_ReceiveString+0x14>
 29e:	90 e0       	ldi	r25, 0x00	; 0
   }
   
   while(1)
   {
      /* Wait for data to be received */
      while ( !(*ptru8_UARTStatusR & RECEIVE_COMPLETE_BIT) );
 2a0:	5f 9b       	sbis	0x0b, 7	; 11
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <UART_ReceiveString+0x14>
      /* Get and return received data from buffer */
      RxString[counter] = *ptru8_UARTDataR;
 2a4:	29 2f       	mov	r18, r25
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	fb 01       	movw	r30, r22
 2aa:	e2 0f       	add	r30, r18
 2ac:	f3 1f       	adc	r31, r19
 2ae:	8c b1       	in	r24, 0x0c	; 12
 2b0:	80 83       	st	Z, r24
      
      /* enters an end of string character and breaks from the loop on receiving
         a new line character */
      if(RxString[counter] == NEW_LINE)
 2b2:	8d 30       	cpi	r24, 0x0D	; 13
 2b4:	41 f4       	brne	.+16     	; 0x2c6 <UART_ReceiveString+0x3a>
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
 2b6:	2f 5f       	subi	r18, 0xFF	; 255
 2b8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ba:	fb 01       	movw	r30, r22
 2bc:	e2 0f       	add	r30, r18
 2be:	f3 1f       	adc	r31, r19
 2c0:	10 82       	st	Z, r1
         }
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	08 95       	ret
      if(RxString[counter] == NEW_LINE)
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
         break;
      }
      counter++;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	89 0f       	add	r24, r25
      
      /* return to the previous character to overwrite if the entered character 
         is backspace */
      if(RxString[counter - STRING_PREV_CHAR] == BACKSPACE)
 2ca:	fb 01       	movw	r30, r22
 2cc:	e8 0f       	add	r30, r24
 2ce:	f1 1d       	adc	r31, r1
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	20 81       	ld	r18, Z
 2d4:	28 30       	cpi	r18, 0x08	; 8
 2d6:	09 f7       	brne	.-62     	; 0x29a <UART_ReceiveString+0xe>
      {
         if (counter - STRING_PREV_CHAR != STRING_COUNTER_START)
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	f1 f2       	breq	.-68     	; 0x298 <UART_ReceiveString+0xc>
         {
            counter -= STRING_RETURN_TO_PREV_CHAR;
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	89 0f       	add	r24, r25
 2e0:	dc cf       	rjmp	.-72     	; 0x29a <UART_ReceiveString+0xe>
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
   {
      return E_UART_NULL_PTR;
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
 2e6:	86 e0       	ldi	r24, 0x06	; 6
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 2e8:	08 95       	ret

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
