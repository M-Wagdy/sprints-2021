
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b1  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005dd  00000000  00000000  00000a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a6  00000000  00000000  00001026  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000013cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000390  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020e  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001a06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

#define CLK_8_MHZ_9600_BAUD   (uint16_t)(51)
#define MAX_STRING_SIZE       (uint16_t)(200)

int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	c8 5c       	subi	r28, 0xC8	; 200
  86:	d1 09       	sbc	r29, r1
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
   uint8_t string[MAX_STRING_SIZE];
   UART_init(CLK_8_MHZ_9600_BAUD);
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 56 00 	call	0xac	; 0xac <UART_init>
   while(1)
   {
      UART_readString(string);
  9a:	ce 01       	movw	r24, r28
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	0e 94 8a 00 	call	0x114	; 0x114 <UART_readString>
      UART_sendString(string);
  a2:	ce 01       	movw	r24, r28
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	0e 94 71 00 	call	0xe2	; 0xe2 <UART_sendString>
  aa:	f7 cf       	rjmp	.-18     	; 0x9a <main+0x1e>

000000ac <UART_init>:
   while ( !(UART_STATUS_R & RECEIVE_COMPLETE_BIT) );
   /* Get and return received data from buffer */
   *character = UART_DATA_R;
   
   return E_UART_SUCCESS;
}
  ac:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b0:	21 30       	cpi	r18, 0x01	; 1
  b2:	99 f0       	breq	.+38     	; 0xda <UART_init+0x2e>
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	91 05       	cpc	r25, r1
  b8:	09 f0       	breq	.+2      	; 0xbc <UART_init+0x10>
  ba:	88 f4       	brcc	.+34     	; 0xde <UART_init+0x32>
  bc:	28 e1       	ldi	r18, 0x18	; 24
  be:	2a b9       	out	0x0a, r18	; 10
  c0:	26 e8       	ldi	r18, 0x86	; 134
  c2:	20 bd       	out	0x20, r18	; 32
  c4:	89 b9       	out	0x09, r24	; 9
  c6:	8f 3f       	cpi	r24, 0xFF	; 255
  c8:	91 05       	cpc	r25, r1
  ca:	11 f0       	breq	.+4      	; 0xd0 <UART_init+0x24>
  cc:	08 f0       	brcs	.+2      	; 0xd0 <UART_init+0x24>
  ce:	90 bd       	out	0x20, r25	; 32
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	08 95       	ret
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	08 95       	ret

000000e2 <UART_sendString>:

UART_ERROR_state_t UART_sendString(uint8_t * string)
{
  e2:	9c 01       	movw	r18, r24
   uint8_t counter = STRING_COUNTER_START;
   
   if( NOT_INIT == gu8_is_UART_init)
  e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e8:	88 23       	and	r24, r24
  ea:	81 f0       	breq	.+32     	; 0x10c <UART_sendString+0x2a>
   {
      return E_UART_NOT_INIT;
   }
   else if(NULL_PTR == string)
  ec:	21 15       	cp	r18, r1
  ee:	31 05       	cpc	r19, r1
  f0:	79 f0       	breq	.+30     	; 0x110 <UART_sendString+0x2e>
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	04 c0       	rjmp	.+8      	; 0xfe <UART_sendString+0x1c>
   }
   
   while(string[counter] != END_OF_STRING)
   {
      /* Wait for empty transmit buffer */
      while ( !( UART_STATUS_R & EMPTY_BUFFER_BIT) );
  f6:	5d 9b       	sbis	0x0b, 5	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <UART_sendString+0x14>
      
      /* Put data into buffer, sends the data */
      UART_DATA_R = string[counter];
  fa:	8c b9       	out	0x0c, r24	; 12
      counter++;
  fc:	9f 5f       	subi	r25, 0xFF	; 255
   else
   {
      /* do nothing */
   }
   
   while(string[counter] != END_OF_STRING)
  fe:	f9 01       	movw	r30, r18
 100:	e9 0f       	add	r30, r25
 102:	f1 1d       	adc	r31, r1
 104:	80 81       	ld	r24, Z
 106:	81 11       	cpse	r24, r1
 108:	f6 cf       	rjmp	.-20     	; 0xf6 <UART_sendString+0x14>
 10a:	08 95       	ret
{
   uint8_t counter = STRING_COUNTER_START;
   
   if( NOT_INIT == gu8_is_UART_init)
   {
      return E_UART_NOT_INIT;
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	08 95       	ret
   }
   else if(NULL_PTR == string)
   {
      return E_UART_NULL_PTR;
 110:	84 e0       	ldi	r24, 0x04	; 4
      UART_DATA_R = string[counter];
      counter++;
   }
   
   return E_UART_SUCCESS;
}
 112:	08 95       	ret

00000114 <UART_readString>:

UART_ERROR_state_t UART_readString(uint8_t * string)
{
 114:	fc 01       	movw	r30, r24
   uint8_t counter = STRING_COUNTER_START;
   
   if( NOT_INIT == gu8_is_UART_init)
 116:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	88 23       	and	r24, r24
 11c:	b9 f0       	breq	.+46     	; 0x14c <UART_readString+0x38>
   {
      return E_UART_NOT_INIT;
   }
   else if(NULL_PTR == string)
 11e:	30 97       	sbiw	r30, 0x00	; 0
 120:	b9 f0       	breq	.+46     	; 0x150 <UART_readString+0x3c>
 122:	20 e0       	ldi	r18, 0x00	; 0
   }
   
   while(1)
   {
      /* Wait for data to be received */
      while ( !(UART_STATUS_R & RECEIVE_COMPLETE_BIT) );
 124:	5f 9b       	sbis	0x0b, 7	; 11
 126:	fe cf       	rjmp	.-4      	; 0x124 <UART_readString+0x10>
      /* Get and return received data from buffer */
      string[counter] = UART_DATA_R;
 128:	42 2f       	mov	r20, r18
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	df 01       	movw	r26, r30
 12e:	a4 0f       	add	r26, r20
 130:	b5 1f       	adc	r27, r21
 132:	9c b1       	in	r25, 0x0c	; 12
 134:	9c 93       	st	X, r25
      
      if(string[counter] == NEW_LINE)
 136:	9d 30       	cpi	r25, 0x0D	; 13
 138:	39 f4       	brne	.+14     	; 0x148 <UART_readString+0x34>
      {
         string[counter + 1] = END_OF_STRING;
 13a:	4f 5f       	subi	r20, 0xFF	; 255
 13c:	5f 4f       	sbci	r21, 0xFF	; 255
 13e:	e4 0f       	add	r30, r20
 140:	f5 1f       	adc	r31, r21
 142:	10 82       	st	Z, r1
         break;
      }
      counter++;
   }
   
   return E_UART_SUCCESS;
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
      if(string[counter] == NEW_LINE)
      {
         string[counter + 1] = END_OF_STRING;
         break;
      }
      counter++;
 148:	2f 5f       	subi	r18, 0xFF	; 255
   }
 14a:	ec cf       	rjmp	.-40     	; 0x124 <UART_readString+0x10>
{
   uint8_t counter = STRING_COUNTER_START;
   
   if( NOT_INIT == gu8_is_UART_init)
   {
      return E_UART_NOT_INIT;
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	08 95       	ret
   }
   else if(NULL_PTR == string)
   {
      return E_UART_NULL_PTR;
 150:	84 e0       	ldi	r24, 0x04	; 4
      }
      counter++;
   }
   
   return E_UART_SUCCESS;
 152:	08 95       	ret

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
