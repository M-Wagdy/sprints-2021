
EchoTerminalI2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000166  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cbb  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f1  00000000  00000000  00000fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000604  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e1  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000052b  00000000  00000000  000022e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  7a:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2C_Init>:
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
   
   while (!(*ptr_I2CControlR & I2C_STOP_BIT));
   /* return success message */
   return E_I2C_SUCCESS;
}
  82:	81 11       	cpse	r24, r1
  84:	0b c0       	rjmp	.+22     	; 0x9c <I2C_Init+0x1a>
  86:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <I2C_CH_0_PRESCALER>
  8a:	81 b9       	out	0x01, r24	; 1
  8c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  90:	80 b9       	out	0x00, r24	; 0
  92:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <I2C_CH_0_CONTROL_MASK>
  96:	86 bf       	out	0x36, r24	; 54
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	08 95       	ret
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	08 95       	ret

000000a0 <I2C_SetSlaveAddress>:
  a0:	81 11       	cpse	r24, r1
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <I2C_SetSlaveAddress+0x8>
  a4:	62 b9       	out	0x02, r22	; 2
  a6:	08 95       	ret
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	08 95       	ret

000000ac <I2C_ReadAck>:
  ac:	61 15       	cp	r22, r1
  ae:	71 05       	cpc	r23, r1
  b0:	69 f0       	breq	.+26     	; 0xcc <I2C_ReadAck+0x20>
  b2:	81 11       	cpse	r24, r1
  b4:	0d c0       	rjmp	.+26     	; 0xd0 <I2C_ReadAck+0x24>
  b6:	86 b7       	in	r24, 0x36	; 54
  b8:	80 6c       	ori	r24, 0xC0	; 192
  ba:	86 bf       	out	0x36, r24	; 54
  bc:	06 b6       	in	r0, 0x36	; 54
  be:	07 fe       	sbrs	r0, 7
  c0:	fd cf       	rjmp	.-6      	; 0xbc <I2C_ReadAck+0x10>
  c2:	83 b1       	in	r24, 0x03	; 3
  c4:	fb 01       	movw	r30, r22
  c6:	80 83       	st	Z, r24
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	08 95       	ret
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	08 95       	ret

000000d4 <I2C_Status>:
* @return function error state.
*/
I2C_ERROR_state_t I2C_Status(uint8_t I2C_CH, uint8_t * Status)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Status)
  d4:	61 15       	cp	r22, r1
  d6:	71 05       	cpc	r23, r1
  d8:	41 f0       	breq	.+16     	; 0xea <I2C_Status+0x16>
   }
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CStatusR;
   
   switch(I2C_CH)
  da:	81 11       	cpse	r24, r1
  dc:	08 c0       	rjmp	.+16     	; 0xee <I2C_Status+0x1a>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* return status */
   *Status = (*ptr_I2CStatusR & I2C_STATUS_BITS);
  de:	81 b1       	in	r24, 0x01	; 1
  e0:	88 7f       	andi	r24, 0xF8	; 248
  e2:	fb 01       	movw	r30, r22
  e4:	80 83       	st	Z, r24
         
   /* return success message */
   return E_I2C_SUCCESS;
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret
I2C_ERROR_state_t I2C_Status(uint8_t I2C_CH, uint8_t * Status)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Status)
   {
      return E_I2C_NULL_PTR;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CStatusR = &I2C_STATUS_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
  ee:	82 e0       	ldi	r24, 0x02	; 2
   /* return status */
   *Status = (*ptr_I2CStatusR & I2C_STATUS_BITS);
         
   /* return success message */
   return E_I2C_SUCCESS;
}
  f0:	08 95       	ret

000000f2 <slave>:

/**
* @brief: Slave node main function.
*/
void slave(void)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	00 d0       	rcall	.+0      	; 0xf8 <slave+0x6>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
   /* set all PORTA pins to output */
   PORTA_DIR = 0xFF;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8a bb       	out	0x1a, r24	; 26
   
   uint8_t data;
   uint8_t status;
   
   /* set slave address */
   I2C_SetSlaveAddress(I2C_CH_0, SLAVE_ADDR);
 100:	60 ea       	ldi	r22, 0xA0	; 160
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 50 00 	call	0xa0	; 0xa0 <I2C_SetSlaveAddress>
   /* initialize I2C */
   I2C_Init(I2C_CH_0);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 41 00 	call	0x82	; 0x82 <I2C_Init>
   /* get data from bus */
   I2C_ReadAck(I2C_CH_0, &data);
 10e:	be 01       	movw	r22, r28
 110:	6f 5f       	subi	r22, 0xFF	; 255
 112:	7f 4f       	sbci	r23, 0xFF	; 255
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 56 00 	call	0xac	; 0xac <I2C_ReadAck>
   /* get the status */
   I2C_Status(I2C_CH_0, &status);
 11a:	be 01       	movw	r22, r28
 11c:	6e 5f       	subi	r22, 0xFE	; 254
 11e:	7f 4f       	sbci	r23, 0xFF	; 255
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Status>
   /* make sure the slave node received it's address and send ack to master. */
   if(status != I2C_STATUS_R_ACK_ADDR)
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	80 36       	cpi	r24, 0x60	; 96
 12a:	89 f4       	brne	.+34     	; 0x14e <slave+0x5c>
   {
      return;
   }
   /* get data from bus */
   I2C_ReadAck(I2C_CH_0, &data);
 12c:	be 01       	movw	r22, r28
 12e:	6f 5f       	subi	r22, 0xFF	; 255
 130:	7f 4f       	sbci	r23, 0xFF	; 255
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 56 00 	call	0xac	; 0xac <I2C_ReadAck>
   /* get the status */
   I2C_Status(I2C_CH_0, &status);
 138:	be 01       	movw	r22, r28
 13a:	6e 5f       	subi	r22, 0xFE	; 254
 13c:	7f 4f       	sbci	r23, 0xFF	; 255
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Status>
   /* make sure the slave node received the data and send ack to master. */
   if(status != I2C_STATUS_R_ACK_DATA)
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	80 38       	cpi	r24, 0x80	; 128
 148:	11 f4       	brne	.+4      	; 0x14e <slave+0x5c>
   {
      return;
   }
   /* set portA pins to the received data */
   PORTA_DATA = data;
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	8b bb       	out	0x1b, r24	; 27
}
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <main>:

int main(void)
{
   slave();
 158:	0e 94 79 00 	call	0xf2	; 0xf2 <slave>
}
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	08 95       	ret

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
