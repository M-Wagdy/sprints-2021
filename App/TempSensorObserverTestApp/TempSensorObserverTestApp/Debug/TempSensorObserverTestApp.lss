
TempSensorObserverTestApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000008ba  0000094e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cb  00800086  00800086  00000974  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002377  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e35  00000000  00000000  00002f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001551  00000000  00000000  00003dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  00005328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bda  00000000  00000000  0000577c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000173f  00000000  00000000  00006356  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00007a95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 35       	cpi	r26, 0x51	; 81
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e6 03 	call	0x7cc	; 0x7cc <main>
  8a:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_SendCommand>:
* @param [in]  Command  -  Command to send to LCD.
*
* @return function error state.
*/
LCD_ERROR_state_t LCD_SendCommand(uint8_t LCD_CH, uint8_t Command)
{
  92:	df 92       	push	r13
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
   uint8_t u8_LCDEPort;
   uint8_t u8_LCDEPin;
   uint8_t u8_LCDDataPort;
   uint8_t u8_LCDDataPin;
   
   switch(LCD_CH)
  a0:	81 11       	cpse	r24, r1
  a2:	5b c0       	rjmp	.+182    	; 0x15a <LCD_SendCommand+0xc8>
  a4:	d6 2f       	mov	r29, r22
   {
      #ifdef LCD_CH_0
      case LCD_CH_0:
         u8_LCDRSPort = LCD_CH_0_RS_PORT;
         u8_LCDRSPin = LCD_CH_0_RS_PIN;
  a6:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <LCD_CH_0_RS_PIN>
         u8_LCDRWPort = LCD_CH_0_RW_PORT;
  aa:	c0 91 6a 00 	lds	r28, 0x006A	; 0x80006a <LCD_CH_0_RW_PORT>
         u8_LCDRWPin = LCD_CH_0_RW_PIN;
  ae:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <LCD_CH_0_RW_PIN>
         u8_LCDEPort = LCD_CH_0_E_PORT;
  b2:	f0 90 68 00 	lds	r15, 0x0068	; 0x800068 <LCD_CH_0_E_PORT>
         u8_LCDEPin = LCD_CH_0_E_PIN;
  b6:	e0 90 67 00 	lds	r14, 0x0067	; 0x800067 <LCD_CH_0_E_PIN>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
  ba:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <LCD_CH_0_DATA_PORT>
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
  be:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <LCD_CH_0_DATA_START_PIN>
      default:
         return E_LCD_INVALID_CH;
   }
   
   /* select control register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, LOW);
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <LCD_CH_0_RS_PORT>
  c8:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	6d 2d       	mov	r22, r13
  d0:	8c 2f       	mov	r24, r28
  d2:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   
   /* Send HIGH bits of the Command */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	11 c0       	rjmp	.+34     	; 0xfc <LCD_SendCommand+0x6a>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Command >> (4 + u8_DataCounter)) & HIGH) );
  da:	8c 2f       	mov	r24, r28
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	04 96       	adiw	r24, 0x04	; 4
  e0:	4d 2f       	mov	r20, r29
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <LCD_SendCommand+0x58>
  e6:	55 95       	asr	r21
  e8:	47 95       	ror	r20
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <LCD_SendCommand+0x54>
  ee:	41 70       	andi	r20, 0x01	; 1
  f0:	6c 2f       	mov	r22, r28
  f2:	60 0f       	add	r22, r16
  f4:	81 2f       	mov	r24, r17
  f6:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   /* select control register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, LOW);
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
   
   /* Send HIGH bits of the Command */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
  fa:	cf 5f       	subi	r28, 0xFF	; 255
  fc:	c4 30       	cpi	r28, 0x04	; 4
  fe:	68 f3       	brcs	.-38     	; 0xda <LCD_SendCommand+0x48>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Command >> (4 + u8_DataCounter)) & HIGH) );
   }
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	6e 2d       	mov	r22, r14
 104:	8f 2d       	mov	r24, r15
 106:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   dummy_delay();
 10a:	0e 94 c6 02 	call	0x58c	; 0x58c <dummy_delay>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	6e 2d       	mov	r22, r14
 112:	8f 2d       	mov	r24, r15
 114:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   
   /* Send LOW bits of the Command  */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	0f c0       	rjmp	.+30     	; 0x13a <LCD_SendCommand+0xa8>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Command >> (u8_DataCounter)) & HIGH) );
 11c:	4d 2f       	mov	r20, r29
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	0c 2e       	mov	r0, r28
 122:	02 c0       	rjmp	.+4      	; 0x128 <LCD_SendCommand+0x96>
 124:	55 95       	asr	r21
 126:	47 95       	ror	r20
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <LCD_SendCommand+0x92>
 12c:	41 70       	andi	r20, 0x01	; 1
 12e:	6c 2f       	mov	r22, r28
 130:	60 0f       	add	r22, r16
 132:	81 2f       	mov	r24, r17
 134:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
   dummy_delay();
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
   
   /* Send LOW bits of the Command  */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 138:	cf 5f       	subi	r28, 0xFF	; 255
 13a:	c4 30       	cpi	r28, 0x04	; 4
 13c:	78 f3       	brcs	.-34     	; 0x11c <LCD_SendCommand+0x8a>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Command >> (u8_DataCounter)) & HIGH) );
   }
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	6e 2d       	mov	r22, r14
 142:	8f 2d       	mov	r24, r15
 144:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   dummy_delay();
 148:	0e 94 c6 02 	call	0x58c	; 0x58c <dummy_delay>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	6e 2d       	mov	r22, r14
 150:	8f 2d       	mov	r24, r15
 152:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   
   
   /* return success status */
   return E_LCD_SUCCESS;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	01 c0       	rjmp	.+2      	; 0x15c <LCD_SendCommand+0xca>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 15a:	82 e0       	ldi	r24, 0x02	; 2
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
   
   
   /* return success status */
   return E_LCD_SUCCESS;
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	ef 90       	pop	r14
 168:	df 90       	pop	r13
 16a:	08 95       	ret

0000016c <LCD_Init>:
* @param [in]  LCD_CH   -  LCD channel number.
*
* @return function error state.
*/
LCD_ERROR_state_t LCD_Init(uint8_t LCD_CH)
{
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
   uint8_t u8_LCDEPort;
   uint8_t u8_LCDEPin;
   uint8_t u8_LCDDataPort;
   uint8_t u8_LCDDataPin;
   
   switch(LCD_CH)
 178:	81 11       	cpse	r24, r1
 17a:	3a c0       	rjmp	.+116    	; 0x1f0 <LCD_Init+0x84>
   {
      #ifdef LCD_CH_0
      case LCD_CH_0:
         u8_LCDRSPort = LCD_CH_0_RS_PORT;
         u8_LCDRSPin = LCD_CH_0_RS_PIN;
 17c:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <LCD_CH_0_RS_PIN>
         u8_LCDRWPort = LCD_CH_0_RW_PORT;
 180:	f0 90 6a 00 	lds	r15, 0x006A	; 0x80006a <LCD_CH_0_RW_PORT>
         u8_LCDRWPin = LCD_CH_0_RW_PIN;
 184:	e0 90 69 00 	lds	r14, 0x0069	; 0x800069 <LCD_CH_0_RW_PIN>
         u8_LCDEPort = LCD_CH_0_E_PORT;
 188:	c0 91 68 00 	lds	r28, 0x0068	; 0x800068 <LCD_CH_0_E_PORT>
         u8_LCDEPin = LCD_CH_0_E_PIN;
 18c:	00 91 67 00 	lds	r16, 0x0067	; 0x800067 <LCD_CH_0_E_PIN>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
 190:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <LCD_CH_0_DATA_PORT>
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
 194:	d0 91 65 00 	lds	r29, 0x0065	; 0x800065 <LCD_CH_0_DATA_START_PIN>
      default:
         return E_LCD_INVALID_CH;
   }
   
   /* Set control pins to output */
   DIO_SetPinDirection(u8_LCDRSPort, u8_LCDRSPin, OUTPUT);
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <LCD_CH_0_RS_PORT>
 19e:	0e 94 2f 03 	call	0x65e	; 0x65e <DIO_SetPinDirection>
   DIO_SetPinDirection(u8_LCDRWPort, u8_LCDRWPin, OUTPUT);
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	6e 2d       	mov	r22, r14
 1a6:	8f 2d       	mov	r24, r15
 1a8:	0e 94 2f 03 	call	0x65e	; 0x65e <DIO_SetPinDirection>
   DIO_SetPinDirection(u8_LCDEPort, u8_LCDEPin, OUTPUT);
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	60 2f       	mov	r22, r16
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 2f 03 	call	0x65e	; 0x65e <DIO_SetPinDirection>
   
   /* Set data pins to output */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <LCD_Init+0x5c>
   {
      DIO_SetPinDirection(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , OUTPUT);
 1ba:	6c 2f       	mov	r22, r28
 1bc:	6d 0f       	add	r22, r29
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	81 2f       	mov	r24, r17
 1c2:	0e 94 2f 03 	call	0x65e	; 0x65e <DIO_SetPinDirection>
   DIO_SetPinDirection(u8_LCDRSPort, u8_LCDRSPin, OUTPUT);
   DIO_SetPinDirection(u8_LCDRWPort, u8_LCDRWPin, OUTPUT);
   DIO_SetPinDirection(u8_LCDEPort, u8_LCDEPin, OUTPUT);
   
   /* Set data pins to output */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	c4 30       	cpi	r28, 0x04	; 4
 1ca:	b8 f3       	brcs	.-18     	; 0x1ba <LCD_Init+0x4e>
   {
      DIO_SetPinDirection(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , OUTPUT);
   }
   
   /* Initialize LCD Commands */
   LCD_SendCommand(LCD_CH_0, LCD_4_BIT_MODE);
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
   LCD_SendCommand(LCD_CH_0, LCD_ENABLE_2_ROWS);
 1d4:	68 e2       	ldi	r22, 0x28	; 40
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
   LCD_SendCommand(LCD_CH_0, LCD_CURSOR_OFF);
 1dc:	6c e0       	ldi	r22, 0x0C	; 12
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
   LCD_SendCommand(LCD_CH_0, LCD_CLEAR);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
   
   /* return success status */
   return E_LCD_SUCCESS;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <LCD_Init+0x86>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 1f0:	82 e0       	ldi	r24, 0x02	; 2
   LCD_SendCommand(LCD_CH_0, LCD_CURSOR_OFF);
   LCD_SendCommand(LCD_CH_0, LCD_CLEAR);
   
   /* return success status */
   return E_LCD_SUCCESS;
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	08 95       	ret

00000200 <LCD_SendCharacter>:
* @param [in]  Data     -  Character to send to LCD.
*
* @return function error state.
*/
LCD_ERROR_state_t LCD_SendCharacter(uint8_t LCD_CH, uint8_t Data)
{
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
   uint8_t u8_LCDEPort;
   uint8_t u8_LCDEPin;
   uint8_t u8_LCDDataPort;
   uint8_t u8_LCDDataPin;
   
   switch(LCD_CH)
 20e:	81 11       	cpse	r24, r1
 210:	5b c0       	rjmp	.+182    	; 0x2c8 <LCD_SendCharacter+0xc8>
 212:	d6 2f       	mov	r29, r22
   {
      #ifdef LCD_CH_0
      case LCD_CH_0:
         u8_LCDRSPort = LCD_CH_0_RS_PORT;
         u8_LCDRSPin = LCD_CH_0_RS_PIN;
 214:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <LCD_CH_0_RS_PIN>
         u8_LCDRWPort = LCD_CH_0_RW_PORT;
 218:	c0 91 6a 00 	lds	r28, 0x006A	; 0x80006a <LCD_CH_0_RW_PORT>
         u8_LCDRWPin = LCD_CH_0_RW_PIN;
 21c:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <LCD_CH_0_RW_PIN>
         u8_LCDEPort = LCD_CH_0_E_PORT;
 220:	f0 90 68 00 	lds	r15, 0x0068	; 0x800068 <LCD_CH_0_E_PORT>
         u8_LCDEPin = LCD_CH_0_E_PIN;
 224:	e0 90 67 00 	lds	r14, 0x0067	; 0x800067 <LCD_CH_0_E_PIN>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
 228:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <LCD_CH_0_DATA_PORT>
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
 22c:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <LCD_CH_0_DATA_START_PIN>
      default:
         return E_LCD_INVALID_CH;
   }
   
   /* select data register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, HIGH);
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <LCD_CH_0_RS_PORT>
 236:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	6d 2d       	mov	r22, r13
 23e:	8c 2f       	mov	r24, r28
 240:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   
   /* Send HIGH bits of the Data */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	11 c0       	rjmp	.+34     	; 0x26a <LCD_SendCharacter+0x6a>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data >> (4 + u8_DataCounter)) & HIGH) );
 248:	8c 2f       	mov	r24, r28
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	04 96       	adiw	r24, 0x04	; 4
 24e:	4d 2f       	mov	r20, r29
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <LCD_SendCharacter+0x58>
 254:	55 95       	asr	r21
 256:	47 95       	ror	r20
 258:	8a 95       	dec	r24
 25a:	e2 f7       	brpl	.-8      	; 0x254 <LCD_SendCharacter+0x54>
 25c:	41 70       	andi	r20, 0x01	; 1
 25e:	6c 2f       	mov	r22, r28
 260:	60 0f       	add	r22, r16
 262:	81 2f       	mov	r24, r17
 264:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   /* select data register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, HIGH);
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
   
   /* Send HIGH bits of the Data */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 268:	cf 5f       	subi	r28, 0xFF	; 255
 26a:	c4 30       	cpi	r28, 0x04	; 4
 26c:	68 f3       	brcs	.-38     	; 0x248 <LCD_SendCharacter+0x48>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data >> (4 + u8_DataCounter)) & HIGH) );
   }
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	6e 2d       	mov	r22, r14
 272:	8f 2d       	mov	r24, r15
 274:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   dummy_delay();
 278:	0e 94 c6 02 	call	0x58c	; 0x58c <dummy_delay>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	6e 2d       	mov	r22, r14
 280:	8f 2d       	mov	r24, r15
 282:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   
   /* Send LOW bits of the Data */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 286:	c0 e0       	ldi	r28, 0x00	; 0
 288:	0f c0       	rjmp	.+30     	; 0x2a8 <LCD_SendCharacter+0xa8>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data >> (u8_DataCounter)) & HIGH) );
 28a:	4d 2f       	mov	r20, r29
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	0c 2e       	mov	r0, r28
 290:	02 c0       	rjmp	.+4      	; 0x296 <LCD_SendCharacter+0x96>
 292:	55 95       	asr	r21
 294:	47 95       	ror	r20
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <LCD_SendCharacter+0x92>
 29a:	41 70       	andi	r20, 0x01	; 1
 29c:	6c 2f       	mov	r22, r28
 29e:	60 0f       	add	r22, r16
 2a0:	81 2f       	mov	r24, r17
 2a2:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
   dummy_delay();
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
   
   /* Send LOW bits of the Data */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 2a6:	cf 5f       	subi	r28, 0xFF	; 255
 2a8:	c4 30       	cpi	r28, 0x04	; 4
 2aa:	78 f3       	brcs	.-34     	; 0x28a <LCD_SendCharacter+0x8a>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data >> (u8_DataCounter)) & HIGH) );
   }
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	6e 2d       	mov	r22, r14
 2b0:	8f 2d       	mov	r24, r15
 2b2:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   dummy_delay();
 2b6:	0e 94 c6 02 	call	0x58c	; 0x58c <dummy_delay>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	6e 2d       	mov	r22, r14
 2be:	8f 2d       	mov	r24, r15
 2c0:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   
   /* return success status */
   return E_LCD_SUCCESS;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <LCD_SendCharacter+0xca>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 2c8:	82 e0       	ldi	r24, 0x02	; 2
   dummy_delay();
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
   
   /* return success status */
   return E_LCD_SUCCESS;
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	ff 90       	pop	r15
 2d4:	ef 90       	pop	r14
 2d6:	df 90       	pop	r13
 2d8:	08 95       	ret

000002da <LCD_SendString>:
* @param [in]  Data     -  String to send to LCD.
*
* @return function error state.
*/
LCD_ERROR_state_t LCD_SendString(uint8_t LCD_CH, uint8_t * Data)
{
 2da:	8f 92       	push	r8
 2dc:	9f 92       	push	r9
 2de:	bf 92       	push	r11
 2e0:	cf 92       	push	r12
 2e2:	df 92       	push	r13
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
   if(NULL_PTR == Data)
 2ee:	61 15       	cp	r22, r1
 2f0:	71 05       	cpc	r23, r1
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <LCD_SendString+0x1c>
 2f4:	65 c0       	rjmp	.+202    	; 0x3c0 <LCD_SendString+0xe6>
   uint8_t u8_LCDEPort;
   uint8_t u8_LCDEPin;
   uint8_t u8_LCDDataPort;
   uint8_t u8_LCDDataPin;
   
   switch(LCD_CH)
 2f6:	81 11       	cpse	r24, r1
 2f8:	65 c0       	rjmp	.+202    	; 0x3c4 <LCD_SendString+0xea>
 2fa:	4b 01       	movw	r8, r22
   {
      #ifdef LCD_CH_0
      case LCD_CH_0:
         u8_LCDRSPort = LCD_CH_0_RS_PORT;
         u8_LCDRSPin = LCD_CH_0_RS_PIN;
 2fc:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <LCD_CH_0_RS_PIN>
         u8_LCDRWPort = LCD_CH_0_RW_PORT;
 300:	c0 91 6a 00 	lds	r28, 0x006A	; 0x80006a <LCD_CH_0_RW_PORT>
         u8_LCDRWPin = LCD_CH_0_RW_PIN;
 304:	d0 91 69 00 	lds	r29, 0x0069	; 0x800069 <LCD_CH_0_RW_PIN>
         u8_LCDEPort = LCD_CH_0_E_PORT;
 308:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <LCD_CH_0_E_PORT>
         u8_LCDEPin = LCD_CH_0_E_PIN;
 30c:	d0 90 67 00 	lds	r13, 0x0067	; 0x800067 <LCD_CH_0_E_PIN>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
 310:	e0 90 66 00 	lds	r14, 0x0066	; 0x800066 <LCD_CH_0_DATA_PORT>
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
 314:	f0 90 65 00 	lds	r15, 0x0065	; 0x800065 <LCD_CH_0_DATA_START_PIN>
      default:
         return E_LCD_INVALID_CH;
   }
   
   /* select data register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, HIGH);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <LCD_CH_0_RS_PORT>
 31e:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	6d 2f       	mov	r22, r29
 326:	8c 2f       	mov	r24, r28
 328:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   
   uint8_t u8_StringCounter = 0;
 32c:	b1 2c       	mov	r11, r1
   
   while (Data[u8_StringCounter] != END_OF_STRING)
 32e:	41 c0       	rjmp	.+130    	; 0x3b2 <LCD_SendString+0xd8>
   {
      /* Send HIGH bits of the Data */
      for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
      {
         DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data[u8_StringCounter] >> (4 + u8_DataCounter)) & HIGH) );
 330:	48 81       	ld	r20, Y
 332:	81 2f       	mov	r24, r17
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	04 96       	adiw	r24, 0x04	; 4
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <LCD_SendString+0x66>
 33c:	55 95       	asr	r21
 33e:	47 95       	ror	r20
 340:	8a 95       	dec	r24
 342:	e2 f7       	brpl	.-8      	; 0x33c <LCD_SendString+0x62>
 344:	41 70       	andi	r20, 0x01	; 1
 346:	61 2f       	mov	r22, r17
 348:	6f 0d       	add	r22, r15
 34a:	8e 2d       	mov	r24, r14
 34c:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   uint8_t u8_StringCounter = 0;
   
   while (Data[u8_StringCounter] != END_OF_STRING)
   {
      /* Send HIGH bits of the Data */
      for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 350:	1f 5f       	subi	r17, 0xFF	; 255
 352:	01 c0       	rjmp	.+2      	; 0x356 <LCD_SendString+0x7c>
 354:	10 e0       	ldi	r17, 0x00	; 0
 356:	14 30       	cpi	r17, 0x04	; 4
 358:	58 f3       	brcs	.-42     	; 0x330 <LCD_SendString+0x56>
      {
         DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data[u8_StringCounter] >> (4 + u8_DataCounter)) & HIGH) );
      }
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	6d 2d       	mov	r22, r13
 35e:	8c 2d       	mov	r24, r12
 360:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
      dummy_delay();
 364:	0e 94 c6 02 	call	0x58c	; 0x58c <dummy_delay>
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	6d 2d       	mov	r22, r13
 36c:	8c 2d       	mov	r24, r12
 36e:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
      
      /* Send LOW bits of the Data */
      for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 372:	10 e0       	ldi	r17, 0x00	; 0
 374:	0f c0       	rjmp	.+30     	; 0x394 <LCD_SendString+0xba>
      {
         DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data[u8_StringCounter] >> (u8_DataCounter)) & HIGH) );
 376:	48 81       	ld	r20, Y
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	01 2e       	mov	r0, r17
 37c:	02 c0       	rjmp	.+4      	; 0x382 <LCD_SendString+0xa8>
 37e:	55 95       	asr	r21
 380:	47 95       	ror	r20
 382:	0a 94       	dec	r0
 384:	e2 f7       	brpl	.-8      	; 0x37e <LCD_SendString+0xa4>
 386:	41 70       	andi	r20, 0x01	; 1
 388:	61 2f       	mov	r22, r17
 38a:	6f 0d       	add	r22, r15
 38c:	8e 2d       	mov	r24, r14
 38e:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
      dummy_delay();
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
      
      /* Send LOW bits of the Data */
      for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 392:	1f 5f       	subi	r17, 0xFF	; 255
 394:	14 30       	cpi	r17, 0x04	; 4
 396:	78 f3       	brcs	.-34     	; 0x376 <LCD_SendString+0x9c>
      {
         DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data[u8_StringCounter] >> (u8_DataCounter)) & HIGH) );
      }
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	6d 2d       	mov	r22, r13
 39c:	8c 2d       	mov	r24, r12
 39e:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
      dummy_delay();
 3a2:	0e 94 c6 02 	call	0x58c	; 0x58c <dummy_delay>
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	6d 2d       	mov	r22, r13
 3aa:	8c 2d       	mov	r24, r12
 3ac:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
      
      u8_StringCounter++;
 3b0:	b3 94       	inc	r11
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, HIGH);
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
   
   uint8_t u8_StringCounter = 0;
   
   while (Data[u8_StringCounter] != END_OF_STRING)
 3b2:	e4 01       	movw	r28, r8
 3b4:	cb 0d       	add	r28, r11
 3b6:	d1 1d       	adc	r29, r1
 3b8:	88 81       	ld	r24, Y
 3ba:	81 11       	cpse	r24, r1
 3bc:	cb cf       	rjmp	.-106    	; 0x354 <LCD_SendString+0x7a>
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <LCD_SendString+0xec>
*/
LCD_ERROR_state_t LCD_SendString(uint8_t LCD_CH, uint8_t * Data)
{
   if(NULL_PTR == Data)
   {
      return E_LCD_NULL_PTR;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <LCD_SendString+0xec>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 3c4:	82 e0       	ldi	r24, 0x02	; 2
   }
   
   
   /* return success status */
   return E_LCD_SUCCESS;
}
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	ff 90       	pop	r15
 3ce:	ef 90       	pop	r14
 3d0:	df 90       	pop	r13
 3d2:	cf 90       	pop	r12
 3d4:	bf 90       	pop	r11
 3d6:	9f 90       	pop	r9
 3d8:	8f 90       	pop	r8
 3da:	08 95       	ret

000003dc <LCD_SetToRowCol>:
*/
LCD_ERROR_state_t LCD_SetToRowCol(uint8_t LCD_CH, uint8_t Row, uint8_t Col)
{
   uint8_t u8_LCDChannel;
   
   switch(LCD_CH)
 3dc:	81 11       	cpse	r24, r1
 3de:	0f c0       	rjmp	.+30     	; 0x3fe <LCD_SetToRowCol+0x22>
         return E_LCD_INVALID_CH;
   }
   
   uint8_t u8_Address;
   /* set required address */
   switch (Row)
 3e0:	66 23       	and	r22, r22
 3e2:	29 f0       	breq	.+10     	; 0x3ee <LCD_SetToRowCol+0x12>
 3e4:	61 30       	cpi	r22, 0x01	; 1
 3e6:	21 f4       	brne	.+8      	; 0x3f0 <LCD_SetToRowCol+0x14>
   {
      case 0:
         u8_Address = Col;
         break;
      case 1:
         u8_Address = Col + 0x40;
 3e8:	90 e4       	ldi	r25, 0x40	; 64
 3ea:	94 0f       	add	r25, r20
         break;
 3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <LCD_SetToRowCol+0x14>
   uint8_t u8_Address;
   /* set required address */
   switch (Row)
   {
      case 0:
         u8_Address = Col;
 3ee:	94 2f       	mov	r25, r20
         u8_Address = Col + 0x40;
         break;
   }
   
   /* Send command with the required address */
   LCD_SendCommand(u8_LCDChannel , u8_Address | LDC_SET_CURSOR_LOCATION);
 3f0:	69 2f       	mov	r22, r25
 3f2:	60 68       	ori	r22, 0x80	; 128
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
   
   /* return success status */
   return E_LCD_SUCCESS;
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret
      case LCD_CH_0:
         u8_LCDChannel = LCD_CH_0;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 3fe:	82 e0       	ldi	r24, 0x02	; 2
   /* Send command with the required address */
   LCD_SendCommand(u8_LCDChannel , u8_Address | LDC_SET_CURSOR_LOCATION);
   
   /* return success status */
   return E_LCD_SUCCESS;
 400:	08 95       	ret

00000402 <MOTOR_Init>:
MOTOR_ERROR_state_t MOTOR_Init(uint8_t MOTOR_CH)
{
   uint8_t u8_MotorPort;
   uint8_t u8_MotorPin;
   
   switch(MOTOR_CH)
 402:	81 11       	cpse	r24, r1
 404:	09 c0       	rjmp	.+18     	; 0x418 <MOTOR_Init+0x16>
   {
      #ifdef MOTOR_CH_0
      case MOTOR_CH_0:
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
 406:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <MOTOR_CH_0_PIN>
      default:
         return E_MOTOR_INVALID_CH;
   }   
   
   /* Initialize motor pin */
   DIO_SetPinDirection(u8_MotorPort, u8_MotorPin, OUTPUT);
 40a:	41 e0       	ldi	r20, 0x01	; 1
 40c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <MOTOR_CH_0_PORT>
 410:	0e 94 2f 03 	call	0x65e	; 0x65e <DIO_SetPinDirection>
   
   /* return success status */
   return E_MOTOR_SUCCESS;
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
         break;
      #endif
      default:
         return E_MOTOR_INVALID_CH;
 418:	81 e0       	ldi	r24, 0x01	; 1
   /* Initialize motor pin */
   DIO_SetPinDirection(u8_MotorPort, u8_MotorPin, OUTPUT);
   
   /* return success status */
   return E_MOTOR_SUCCESS;
}
 41a:	08 95       	ret

0000041c <MOTOR_Start>:
MOTOR_ERROR_state_t MOTOR_Start(uint8_t MOTOR_CH)
{
   uint8_t u8_MotorPort;
   uint8_t u8_MotorPin;
   
   switch(MOTOR_CH)
 41c:	81 11       	cpse	r24, r1
 41e:	09 c0       	rjmp	.+18     	; 0x432 <MOTOR_Start+0x16>
   {
      #ifdef MOTOR_CH_0
      case MOTOR_CH_0:
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
 420:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <MOTOR_CH_0_PIN>
      default:
         return E_MOTOR_INVALID_CH;
   }
   
   /* Start motor */
   DIO_WritePin(u8_MotorPort, u8_MotorPin, HIGH);
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <MOTOR_CH_0_PORT>
 42a:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   
   /* return success status */
   return E_MOTOR_SUCCESS;
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	08 95       	ret
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
         break;
      #endif
      default:
         return E_MOTOR_INVALID_CH;
 432:	81 e0       	ldi	r24, 0x01	; 1
   /* Start motor */
   DIO_WritePin(u8_MotorPort, u8_MotorPin, HIGH);
   
   /* return success status */
   return E_MOTOR_SUCCESS;
}
 434:	08 95       	ret

00000436 <MOTOR_Stop>:
MOTOR_ERROR_state_t MOTOR_Stop(uint8_t MOTOR_CH)
{
   uint8_t u8_MotorPort;
   uint8_t u8_MotorPin;
   
   switch(MOTOR_CH)
 436:	81 11       	cpse	r24, r1
 438:	09 c0       	rjmp	.+18     	; 0x44c <MOTOR_Stop+0x16>
   {
      #ifdef MOTOR_CH_0
      case MOTOR_CH_0:
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
 43a:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <MOTOR_CH_0_PIN>
      default:
         return E_MOTOR_INVALID_CH;
   }
   
   /* stop motor */
   DIO_WritePin(u8_MotorPort, u8_MotorPin, LOW);
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <MOTOR_CH_0_PORT>
 444:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_WritePin>
   
   /* return success status */
   return E_MOTOR_SUCCESS;
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	08 95       	ret
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
         break;
      #endif
      default:
         return E_MOTOR_INVALID_CH;
 44c:	81 e0       	ldi	r24, 0x01	; 1
   /* stop motor */
   DIO_WritePin(u8_MotorPort, u8_MotorPin, LOW);
   
   /* return success status */
   return E_MOTOR_SUCCESS;
 44e:	08 95       	ret

00000450 <TEMPObserver_Notify>:
      Observer_ErrorState = ERROR_NOK;
   }
   
   /* Return function error state. */
   return Observer_ErrorState;
}
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	cf 93       	push	r28
 456:	00 97       	sbiw	r24, 0x00	; 0
 458:	91 f4       	brne	.+36     	; 0x47e <TEMPObserver_Notify+0x2e>
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	17 c0       	rjmp	.+46     	; 0x48c <TEMPObserver_Notify+0x3c>
 45e:	ec 2f       	mov	r30, r28
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	31 96       	adiw	r30, 0x01	; 1
 464:	ee 0f       	add	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	e0 0f       	add	r30, r16
 46a:	f1 1f       	adc	r31, r17
 46c:	01 90       	ld	r0, Z+
 46e:	f0 81       	ld	r31, Z
 470:	e0 2d       	mov	r30, r0
 472:	30 97       	sbiw	r30, 0x00	; 0
 474:	51 f0       	breq	.+20     	; 0x48a <TEMPObserver_Notify+0x3a>
 476:	80 2f       	mov	r24, r16
 478:	09 95       	icall
 47a:	cf 5f       	subi	r28, 0xFF	; 255
 47c:	02 c0       	rjmp	.+4      	; 0x482 <TEMPObserver_Notify+0x32>
 47e:	8c 01       	movw	r16, r24
 480:	c0 e0       	ldi	r28, 0x00	; 0
 482:	c4 36       	cpi	r28, 0x64	; 100
 484:	60 f3       	brcs	.-40     	; 0x45e <TEMPObserver_Notify+0xe>
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	01 c0       	rjmp	.+2      	; 0x48c <TEMPObserver_Notify+0x3c>
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <TEMPObserver_Init>:
 494:	00 97       	sbiw	r24, 0x00	; 0
 496:	29 f0       	breq	.+10     	; 0x4a2 <TEMPObserver_Init+0xe>
 498:	fc 01       	movw	r30, r24
 49a:	11 82       	std	Z+1, r1	; 0x01
 49c:	10 82       	st	Z, r1
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	08 95       	ret
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	08 95       	ret

000004a6 <TEMPObserver_Subscribe>:
 4a6:	00 97       	sbiw	r24, 0x00	; 0
 4a8:	99 f0       	breq	.+38     	; 0x4d0 <TEMPObserver_Subscribe+0x2a>
 4aa:	61 15       	cp	r22, r1
 4ac:	71 05       	cpc	r23, r1
 4ae:	91 f0       	breq	.+36     	; 0x4d4 <TEMPObserver_Subscribe+0x2e>
 4b0:	fc 01       	movw	r30, r24
 4b2:	21 81       	ldd	r18, Z+1	; 0x01
 4b4:	e2 2f       	mov	r30, r18
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	31 96       	adiw	r30, 0x01	; 1
 4ba:	ee 0f       	add	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	e8 0f       	add	r30, r24
 4c0:	f9 1f       	adc	r31, r25
 4c2:	71 83       	std	Z+1, r23	; 0x01
 4c4:	60 83       	st	Z, r22
 4c6:	2f 5f       	subi	r18, 0xFF	; 255
 4c8:	fc 01       	movw	r30, r24
 4ca:	21 83       	std	Z+1, r18	; 0x01
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	08 95       	ret
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	08 95       	ret

000004d8 <TEMPObserver_SetNewData>:
{
   /* Variable to store function error state. */
   ERROR_STATE_t Observer_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(NULL_PTR != ObserverData)
 4d8:	00 97       	sbiw	r24, 0x00	; 0
 4da:	29 f0       	breq	.+10     	; 0x4e6 <TEMPObserver_SetNewData+0xe>
   {
      /* Set New Temperature in the observer data. */
      ObserverData->TempData = NewTemp;
 4dc:	fc 01       	movw	r30, r24
 4de:	60 83       	st	Z, r22
      /* Notify all acceptors. */
      Observer_ErrorState = TEMPObserver_Notify(ObserverData);
 4e0:	0e 94 28 02 	call	0x450	; 0x450 <TEMPObserver_Notify>
 4e4:	08 95       	ret
   }
   else
   {
      /* Set Function Error State to NOT OK */
      Observer_ErrorState = ERROR_NOK;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
   }
   
   /* Return function error state. */
   return Observer_ErrorState;
 4e8:	08 95       	ret

000004ea <TEMP_Init>:
*/
ERROR_STATE_t TEMP_Init(uint8_t TEMP_CH)
{
   ERROR_STATE_t Temp_ErrorState;
   
   if(TEMP_CH >= TEMP_INVALID_CH)
 4ea:	81 11       	cpse	r24, r1
 4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <TEMP_Init+0xc>
   {
      Temp_ErrorState = ERROR_NOK;
   }
   else
   {
      ADC_Init();
 4ee:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ADC_Init>
      Temp_ErrorState = ERROR_OK;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
{
   ERROR_STATE_t Temp_ErrorState;
   
   if(TEMP_CH >= TEMP_INVALID_CH)
   {
      Temp_ErrorState = ERROR_NOK;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
      ADC_Init();
      Temp_ErrorState = ERROR_OK;
   }
   
   return Temp_ErrorState;
}
 4f8:	08 95       	ret

000004fa <TEMP_Read>:
* @param [out] TempData -  Address Pointing to where to store the Temperature readings.
*
* @return function error state.
*/
ERROR_STATE_t TEMP_Read(uint8_t TEMP_CH, uint8_t * TempData)
{
 4fa:	ef 92       	push	r14
 4fc:	ff 92       	push	r15
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	00 d0       	rcall	.+0      	; 0x508 <TEMP_Read+0xe>
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
   ERROR_STATE_t Temp_ErrorState;
   if(TEMP_CH >= TEMP_INVALID_CH)
 50c:	81 11       	cpse	r24, r1
 50e:	33 c0       	rjmp	.+102    	; 0x576 <TEMP_Read+0x7c>
 510:	7b 01       	movw	r14, r22
      Temp_ErrorState = ERROR_NOK;
   }
   else
   {
      uint16_t u16_ADCReadings;
      Temp_ErrorState = ADC_Read(gastr_Temp_Config[TEMP_CH].u8_ADCCh, &u16_ADCReadings);
 512:	08 2f       	mov	r16, r24
 514:	10 e0       	ldi	r17, 0x00	; 0
 516:	f8 01       	movw	r30, r16
 518:	ee 0f       	add	r30, r30
 51a:	ff 1f       	adc	r31, r31
 51c:	ee 0f       	add	r30, r30
 51e:	ff 1f       	adc	r31, r31
 520:	e0 0f       	add	r30, r16
 522:	f1 1f       	adc	r31, r17
 524:	e0 5a       	subi	r30, 0xA0	; 160
 526:	ff 4f       	sbci	r31, 0xFF	; 255
 528:	be 01       	movw	r22, r28
 52a:	6f 5f       	subi	r22, 0xFF	; 255
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	80 81       	ld	r24, Z
 530:	0e 94 05 03 	call	0x60a	; 0x60a <ADC_Read>
 534:	28 2f       	mov	r18, r24
      
      if(ERROR_OK == Temp_ErrorState)
 536:	81 11       	cpse	r24, r1
 538:	1c c0       	rjmp	.+56     	; 0x572 <TEMP_Read+0x78>
      {
         /* map ADC resolution to the current temprature */
         *TempData = (
            u16_ADCReadings * gastr_Temp_Config[TEMP_CH].u8_TempHighestValue /
 53a:	f8 01       	movw	r30, r16
 53c:	ee 0f       	add	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	0e 0f       	add	r16, r30
 546:	1f 1f       	adc	r17, r31
 548:	f8 01       	movw	r30, r16
 54a:	e0 5a       	subi	r30, 0xA0	; 160
 54c:	ff 4f       	sbci	r31, 0xFF	; 255
 54e:	61 81       	ldd	r22, Z+1	; 0x01
 550:	72 81       	ldd	r23, Z+2	; 0x02
 552:	49 81       	ldd	r20, Y+1	; 0x01
 554:	5a 81       	ldd	r21, Y+2	; 0x02
 556:	64 9f       	mul	r22, r20
 558:	c0 01       	movw	r24, r0
 55a:	65 9f       	mul	r22, r21
 55c:	90 0d       	add	r25, r0
 55e:	74 9f       	mul	r23, r20
 560:	90 0d       	add	r25, r0
 562:	11 24       	eor	r1, r1
            gastr_Temp_Config[TEMP_CH].u8_TempHighValueDigital
 564:	63 81       	ldd	r22, Z+3	; 0x03
 566:	74 81       	ldd	r23, Z+4	; 0x04
      
      if(ERROR_OK == Temp_ErrorState)
      {
         /* map ADC resolution to the current temprature */
         *TempData = (
            u16_ADCReadings * gastr_Temp_Config[TEMP_CH].u8_TempHighestValue /
 568:	0e 94 33 04 	call	0x866	; 0x866 <__udivmodhi4>
      Temp_ErrorState = ADC_Read(gastr_Temp_Config[TEMP_CH].u8_ADCCh, &u16_ADCReadings);
      
      if(ERROR_OK == Temp_ErrorState)
      {
         /* map ADC resolution to the current temprature */
         *TempData = (
 56c:	f7 01       	movw	r30, r14
 56e:	60 83       	st	Z, r22
 570:	03 c0       	rjmp	.+6      	; 0x578 <TEMP_Read+0x7e>
            gastr_Temp_Config[TEMP_CH].u8_TempHighValueDigital
         );
      }
      else
      {
         Temp_ErrorState = ERROR_NOK;
 572:	21 e0       	ldi	r18, 0x01	; 1
 574:	01 c0       	rjmp	.+2      	; 0x578 <TEMP_Read+0x7e>
ERROR_STATE_t TEMP_Read(uint8_t TEMP_CH, uint8_t * TempData)
{
   ERROR_STATE_t Temp_ErrorState;
   if(TEMP_CH >= TEMP_INVALID_CH)
   {
      Temp_ErrorState = ERROR_NOK;
 576:	21 e0       	ldi	r18, 0x01	; 1
         Temp_ErrorState = ERROR_NOK;
      }
   }
   
   return Temp_ErrorState;
 578:	82 2f       	mov	r24, r18
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	ff 90       	pop	r15
 588:	ef 90       	pop	r14
 58a:	08 95       	ret

0000058c <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	00 d0       	rcall	.+0      	; 0x592 <dummy_delay+0x6>
 592:	00 d0       	rcall	.+0      	; 0x594 <dummy_delay+0x8>
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
 598:	1a 82       	std	Y+2, r1	; 0x02
 59a:	19 82       	std	Y+1, r1	; 0x01
 59c:	15 c0       	rjmp	.+42     	; 0x5c8 <dummy_delay+0x3c>
   {
      for(volatile uint8_t j=0; j<32; j++)
 59e:	1c 82       	std	Y+4, r1	; 0x04
 5a0:	0b c0       	rjmp	.+22     	; 0x5b8 <dummy_delay+0x2c>
      {
         for(volatile uint8_t k=0; k<2; k++)
 5a2:	1b 82       	std	Y+3, r1	; 0x03
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <dummy_delay+0x20>
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	8f 5f       	subi	r24, 0xFF	; 255
 5aa:	8b 83       	std	Y+3, r24	; 0x03
 5ac:	8b 81       	ldd	r24, Y+3	; 0x03
 5ae:	82 30       	cpi	r24, 0x02	; 2
 5b0:	d0 f3       	brcs	.-12     	; 0x5a6 <dummy_delay+0x1a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
 5b2:	8c 81       	ldd	r24, Y+4	; 0x04
 5b4:	8f 5f       	subi	r24, 0xFF	; 255
 5b6:	8c 83       	std	Y+4, r24	; 0x04
 5b8:	8c 81       	ldd	r24, Y+4	; 0x04
 5ba:	80 32       	cpi	r24, 0x20	; 32
 5bc:	90 f3       	brcs	.-28     	; 0x5a2 <dummy_delay+0x16>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
 5be:	89 81       	ldd	r24, Y+1	; 0x01
 5c0:	9a 81       	ldd	r25, Y+2	; 0x02
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	9a 83       	std	Y+2, r25	; 0x02
 5c6:	89 83       	std	Y+1, r24	; 0x01
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	9a 81       	ldd	r25, Y+2	; 0x02
 5cc:	84 36       	cpi	r24, 0x64	; 100
 5ce:	91 05       	cpc	r25, r1
 5d0:	30 f3       	brcs	.-52     	; 0x59e <dummy_delay+0x12>
         {
            
         }
      }
   }
}
 5d2:	0f 90       	pop	r0
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	08 95       	ret

000005e0 <ADC_Init>:
* @return function error state.
*/
ADC_ERROR_state_t ADC_Init(void)
{
   /* making sure ADC was initialized before calling this function */
   if(INIT == gu8_IsInit)
 5e0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	79 f0       	breq	.+30     	; 0x606 <ADC_Init+0x26>
   {
      return E_ADC_INIT_BEFORE;
   }
   
   /* Set VRef Selection */
   ADC_MUX_R |= ADC_REFERENCE_SELECTION;
 5e8:	97 b1       	in	r25, 0x07	; 7
 5ea:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <ADC_REFERENCE_SELECTION>
 5ee:	89 2b       	or	r24, r25
 5f0:	87 b9       	out	0x07, r24	; 7
   
   /* Configure ADC */
   ADC_CONTROL_AND_STATUS_R |= ADC_CONTROL_MASK;
 5f2:	96 b1       	in	r25, 0x06	; 6
 5f4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <ADC_CONTROL_MASK>
 5f8:	89 2b       	or	r24, r25
 5fa:	86 b9       	out	0x06, r24	; 6
   
   /* Set Driver State to Initialized */
   gu8_IsInit = INIT;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
   
   /* return success status */
   return E_ADC_SUCCESS;
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	08 95       	ret
ADC_ERROR_state_t ADC_Init(void)
{
   /* making sure ADC was initialized before calling this function */
   if(INIT == gu8_IsInit)
   {
      return E_ADC_INIT_BEFORE;
 606:	83 e0       	ldi	r24, 0x03	; 3
   /* Set Driver State to Initialized */
   gu8_IsInit = INIT;
   
   /* return success status */
   return E_ADC_SUCCESS;
}
 608:	08 95       	ret

0000060a <ADC_Read>:
* @return function error state.
*/
ADC_ERROR_state_t ADC_Read(uint8_t ADC_CH, uint16_t * Data)
{
   /* making sure ADC was initialized before calling this function */
   if(NOT_INIT == gu8_IsInit)
 60a:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__data_end>
 60e:	99 23       	and	r25, r25
 610:	01 f1       	breq	.+64     	; 0x652 <ADC_Read+0x48>
   {
      return E_ADC_NOT_INIT;
   }
   /* making sure an initialized pointer is sent to the function */
   else if(NULL_PTR == Data)
 612:	61 15       	cp	r22, r1
 614:	71 05       	cpc	r23, r1
 616:	f9 f0       	breq	.+62     	; 0x656 <ADC_Read+0x4c>
   {
      return E_ADC_NULL_PTR;
   }
   else if(ADC_CH_7 < ADC_CH)
 618:	88 30       	cpi	r24, 0x08	; 8
 61a:	f8 f4       	brcc	.+62     	; 0x65a <ADC_Read+0x50>
   {
      return E_ADC_INVALID_CH;
   }
   
   /* Select the required ADC channel */
   ADC_MUX_R |= (ADC_CH & 0x1F);
 61c:	97 b1       	in	r25, 0x07	; 7
 61e:	8f 71       	andi	r24, 0x1F	; 31
 620:	89 2b       	or	r24, r25
 622:	87 b9       	out	0x07, r24	; 7
   
   /* Start Conversion */
   ADC_CONTROL_AND_STATUS_R |= ADC_START_CONVERSION;
 624:	86 b1       	in	r24, 0x06	; 6
 626:	80 64       	ori	r24, 0x40	; 64
 628:	86 b9       	out	0x06, r24	; 6
   
   /* Wait for Interrupt Flag */
   while(!(ADC_CONTROL_AND_STATUS_R & ADC_INTERRUPT_FLAG))
 62a:	34 9b       	sbis	0x06, 4	; 6
 62c:	fe cf       	rjmp	.-4      	; 0x62a <ADC_Read+0x20>
         ADC_CONTROL_AND_STATUS_R |= ADC_INTERRUPT_FLAG;
      #endif
   }
   
   /* clear interrupt flag */
   ADC_CONTROL_AND_STATUS_R |= ADC_INTERRUPT_FLAG;
 62e:	86 b1       	in	r24, 0x06	; 6
 630:	80 61       	ori	r24, 0x10	; 16
 632:	86 b9       	out	0x06, r24	; 6
   
   /* return ADC conversion data */
   *Data = (ADC_DATA_LOW_R);
 634:	84 b1       	in	r24, 0x04	; 4
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	fb 01       	movw	r30, r22
 63a:	91 83       	std	Z+1, r25	; 0x01
 63c:	80 83       	st	Z, r24
   *Data += (ADC_DATA_HIGH_R << 8);
 63e:	25 b1       	in	r18, 0x05	; 5
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	32 2f       	mov	r19, r18
 644:	22 27       	eor	r18, r18
 646:	82 0f       	add	r24, r18
 648:	93 1f       	adc	r25, r19
 64a:	91 83       	std	Z+1, r25	; 0x01
 64c:	80 83       	st	Z, r24
   
   /* return success status */
   return E_ADC_SUCCESS;
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	08 95       	ret
ADC_ERROR_state_t ADC_Read(uint8_t ADC_CH, uint16_t * Data)
{
   /* making sure ADC was initialized before calling this function */
   if(NOT_INIT == gu8_IsInit)
   {
      return E_ADC_NOT_INIT;
 652:	84 e0       	ldi	r24, 0x04	; 4
 654:	08 95       	ret
   }
   /* making sure an initialized pointer is sent to the function */
   else if(NULL_PTR == Data)
   {
      return E_ADC_NULL_PTR;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	08 95       	ret
   }
   else if(ADC_CH_7 < ADC_CH)
   {
      return E_ADC_INVALID_CH;
 65a:	82 e0       	ldi	r24, 0x02	; 2
   *Data = (ADC_DATA_LOW_R);
   *Data += (ADC_DATA_HIGH_R << 8);
   
   /* return success status */
   return E_ADC_SUCCESS;
}
 65c:	08 95       	ret

0000065e <DIO_SetPinDirection>:
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
}
 65e:	68 30       	cpi	r22, 0x08	; 8
 660:	80 f5       	brcc	.+96     	; 0x6c2 <DIO_SetPinDirection+0x64>
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	79 f0       	breq	.+30     	; 0x684 <DIO_SetPinDirection+0x26>
 666:	28 f0       	brcs	.+10     	; 0x672 <DIO_SetPinDirection+0x14>
 668:	82 30       	cpi	r24, 0x02	; 2
 66a:	31 f0       	breq	.+12     	; 0x678 <DIO_SetPinDirection+0x1a>
 66c:	83 30       	cpi	r24, 0x03	; 3
 66e:	39 f0       	breq	.+14     	; 0x67e <DIO_SetPinDirection+0x20>
 670:	2a c0       	rjmp	.+84     	; 0x6c6 <DIO_SetPinDirection+0x68>
 672:	ea e3       	ldi	r30, 0x3A	; 58
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	08 c0       	rjmp	.+16     	; 0x688 <DIO_SetPinDirection+0x2a>
 678:	e4 e3       	ldi	r30, 0x34	; 52
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	05 c0       	rjmp	.+10     	; 0x688 <DIO_SetPinDirection+0x2a>
 67e:	e1 e3       	ldi	r30, 0x31	; 49
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_SetPinDirection+0x2a>
 684:	e7 e3       	ldi	r30, 0x37	; 55
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	41 30       	cpi	r20, 0x01	; 1
 68a:	61 f4       	brne	.+24     	; 0x6a4 <DIO_SetPinDirection+0x46>
 68c:	20 81       	ld	r18, Z
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_SetPinDirection+0x3a>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	6a 95       	dec	r22
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_SetPinDirection+0x36>
 69c:	82 2b       	or	r24, r18
 69e:	80 83       	st	Z, r24
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	08 95       	ret
 6a4:	41 11       	cpse	r20, r1
 6a6:	11 c0       	rjmp	.+34     	; 0x6ca <DIO_SetPinDirection+0x6c>
 6a8:	20 81       	ld	r18, Z
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_SetPinDirection+0x56>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	6a 95       	dec	r22
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_SetPinDirection+0x52>
 6b8:	80 95       	com	r24
 6ba:	82 23       	and	r24, r18
 6bc:	80 83       	st	Z, r24
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	08 95       	ret
 6c2:	82 e0       	ldi	r24, 0x02	; 2
 6c4:	08 95       	ret
 6c6:	83 e0       	ldi	r24, 0x03	; 3
 6c8:	08 95       	ret
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	08 95       	ret

000006ce <DIO_WritePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 6ce:	68 30       	cpi	r22, 0x08	; 8
 6d0:	80 f5       	brcc	.+96     	; 0x732 <DIO_WritePin+0x64>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data pointer according to the required port. */
   switch(port)
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	79 f0       	breq	.+30     	; 0x6f4 <DIO_WritePin+0x26>
 6d6:	28 f0       	brcs	.+10     	; 0x6e2 <DIO_WritePin+0x14>
 6d8:	82 30       	cpi	r24, 0x02	; 2
 6da:	31 f0       	breq	.+12     	; 0x6e8 <DIO_WritePin+0x1a>
 6dc:	83 30       	cpi	r24, 0x03	; 3
 6de:	39 f0       	breq	.+14     	; 0x6ee <DIO_WritePin+0x20>
 6e0:	2a c0       	rjmp	.+84     	; 0x736 <DIO_WritePin+0x68>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 6e2:	eb e3       	ldi	r30, 0x3B	; 59
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <DIO_WritePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 6e8:	e5 e3       	ldi	r30, 0x35	; 53
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <DIO_WritePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 6ee:	e2 e3       	ldi	r30, 0x32	; 50
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_WritePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 6f4:	e8 e3       	ldi	r30, 0x38	; 56
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   /* set or clear value in the pin. */
   if(HIGH == data)
 6f8:	41 30       	cpi	r20, 0x01	; 1
 6fa:	61 f4       	brne	.+24     	; 0x714 <DIO_WritePin+0x46>
   {
      SET_BIT(*prt_port_data,pin);
 6fc:	20 81       	ld	r18, Z
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_WritePin+0x3a>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	6a 95       	dec	r22
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_WritePin+0x36>
 70c:	82 2b       	or	r24, r18
 70e:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	08 95       	ret
   /* set or clear value in the pin. */
   if(HIGH == data)
   {
      SET_BIT(*prt_port_data,pin);
   }
   else if(LOW == data)
 714:	41 11       	cpse	r20, r1
 716:	11 c0       	rjmp	.+34     	; 0x73a <DIO_WritePin+0x6c>
   {
      CLEAR_BIT(*prt_port_data,pin);
 718:	20 81       	ld	r18, Z
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_WritePin+0x56>
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	6a 95       	dec	r22
 726:	e2 f7       	brpl	.-8      	; 0x720 <DIO_WritePin+0x52>
 728:	80 95       	com	r24
 72a:	82 23       	and	r24, r18
 72c:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	08 95       	ret
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 732:	82 e0       	ldi	r24, 0x02	; 2
 734:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 736:	83 e0       	ldi	r24, 0x03	; 3
 738:	08 95       	ret
      CLEAR_BIT(*prt_port_data,pin);
   }
   /* if data is invalid. */
   else
   {
      return E_DIO_INVALID_WRITE_DATA;
 73a:	84 e0       	ldi	r24, 0x04	; 4
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 73c:	08 95       	ret

0000073e <MOTORLogic_Accept>:
*
* @return function error state.
*/
ERROR_STATE_t MOTORLogic_Accept(uint8_t * Temp)
{
   if(*Temp <= MOTOR_REQUIRED_TEMP)
 73e:	fc 01       	movw	r30, r24
 740:	80 81       	ld	r24, Z
 742:	85 36       	cpi	r24, 0x65	; 101
 744:	20 f4       	brcc	.+8      	; 0x74e <MOTORLogic_Accept+0x10>
   {
      MOTOR_Start(MOTOR_CH_0);
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	0e 94 0e 02 	call	0x41c	; 0x41c <MOTOR_Start>
 74c:	08 95       	ret
   }
   else
   {
      MOTOR_Stop(MOTOR_CH_0);
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	0e 94 1b 02 	call	0x436	; 0x436 <MOTOR_Stop>
   }
}
 754:	08 95       	ret

00000756 <LCDLogic_Accept>:
* @param [in]  Temp -  Temperature value.
*
* @return function error state.
*/
ERROR_STATE_t LCDLogic_Accept(uint8_t * Temp)
{
 756:	1f 93       	push	r17
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
   uint8_t u8_CurrentTempDigit1;
   uint8_t u8_CurrentTempDigit2;
   uint8_t u8_CurrentTempDigit3;
   
   /* get each number of current temp in single character */
   u8_CurrentTempDigit1 = (*Temp/100);
 75c:	fc 01       	movw	r30, r24
 75e:	20 81       	ld	r18, Z
 760:	c9 e2       	ldi	r28, 0x29	; 41
 762:	2c 9f       	mul	r18, r28
 764:	c1 2d       	mov	r28, r1
 766:	11 24       	eor	r1, r1
 768:	c2 95       	swap	r28
 76a:	cf 70       	andi	r28, 0x0F	; 15
   u8_CurrentTempDigit2 = ((*Temp - (u8_CurrentTempDigit1*100)) / 10);
 76c:	82 2f       	mov	r24, r18
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	f4 e6       	ldi	r31, 0x64	; 100
 772:	cf 9f       	mul	r28, r31
 774:	80 19       	sub	r24, r0
 776:	91 09       	sbc	r25, r1
 778:	11 24       	eor	r1, r1
 77a:	6a e0       	ldi	r22, 0x0A	; 10
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	0e 94 47 04 	call	0x88e	; 0x88e <__divmodhi4>
 782:	16 2f       	mov	r17, r22
   u8_CurrentTempDigit3 = (*Temp - (u8_CurrentTempDigit1*100+u8_CurrentTempDigit2*10));
 784:	96 2f       	mov	r25, r22
 786:	99 0f       	add	r25, r25
 788:	89 2f       	mov	r24, r25
 78a:	88 0f       	add	r24, r24
 78c:	88 0f       	add	r24, r24
 78e:	89 0f       	add	r24, r25
 790:	34 e6       	ldi	r19, 0x64	; 100
 792:	c3 9f       	mul	r28, r19
 794:	80 0d       	add	r24, r0
 796:	11 24       	eor	r1, r1
 798:	d2 2f       	mov	r29, r18
 79a:	d8 1b       	sub	r29, r24
   
   /* print current temp on LCD */
   LCD_SetToRowCol(LCD_CH_0, ROW_0, NUMBER_START_COL);
 79c:	4a e0       	ldi	r20, 0x0A	; 10
 79e:	60 e0       	ldi	r22, 0x00	; 0
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_SetToRowCol>
   LCD_SendCharacter(LCD_CH_0, u8_CurrentTempDigit1 + ZERO_ASCII);
 7a6:	60 e3       	ldi	r22, 0x30	; 48
 7a8:	6c 0f       	add	r22, r28
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	0e 94 00 01 	call	0x200	; 0x200 <LCD_SendCharacter>
   LCD_SendCharacter(LCD_CH_0, u8_CurrentTempDigit2 + ZERO_ASCII);
 7b0:	60 e3       	ldi	r22, 0x30	; 48
 7b2:	61 0f       	add	r22, r17
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	0e 94 00 01 	call	0x200	; 0x200 <LCD_SendCharacter>
   LCD_SendCharacter(LCD_CH_0, u8_CurrentTempDigit3 + ZERO_ASCII);
 7ba:	60 e3       	ldi	r22, 0x30	; 48
 7bc:	6d 0f       	add	r22, r29
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	0e 94 00 01 	call	0x200	; 0x200 <LCD_SendCharacter>
}
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	1f 91       	pop	r17
 7ca:	08 95       	ret

000007cc <main>:

/*- APIs IMPLEMENTATION
-----------------------------------*/
int main(void)
{
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	1f 92       	push	r1
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
   /* Varibales to store old and new tempratures. */
   uint8_t u8_OldTemp;
   uint8_t u8_NewTemp;
   
   /* initialize drivers */
   TEMP_Init(TEMP_0);
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	0e 94 75 02 	call	0x4ea	; 0x4ea <TEMP_Init>
   MOTOR_Init(MOTOR_CH_0);
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	0e 94 01 02 	call	0x402	; 0x402 <MOTOR_Init>
   LCD_Init(LCD_CH_0);
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_Init>
   
   /* Print static strings */
   LCD_SendString(LCD_CH_0, gau8_CurrentTempMessage);
 7e8:	6f e6       	ldi	r22, 0x6F	; 111
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_SendString>
   LCD_SetToRowCol(LCD_CH_0, ROW_1, COL_0);
 7f2:	40 e0       	ldi	r20, 0x00	; 0
 7f4:	61 e0       	ldi	r22, 0x01	; 1
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_SetToRowCol>
   LCD_SendString(LCD_CH_0, gau8_RequiredTempMessage);
 7fc:	69 e7       	ldi	r22, 0x79	; 121
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_SendString>
   u8_RequiredTempDigit1 = (MOTOR_REQUIRED_TEMP/100);
   u8_RequiredTempDigit2 = ((MOTOR_REQUIRED_TEMP - (u8_RequiredTempDigit1*100)) / 10);
   u8_RequiredTempDigit3 = (MOTOR_REQUIRED_TEMP - (u8_RequiredTempDigit1*100+u8_RequiredTempDigit2*10));
   
   /* print required temp on LCD */
   LCD_SetToRowCol(LCD_CH_0, ROW_1, NUMBER_START_COL);
 806:	4a e0       	ldi	r20, 0x0A	; 10
 808:	61 e0       	ldi	r22, 0x01	; 1
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_SetToRowCol>
   LCD_SendCharacter(LCD_CH_0, u8_RequiredTempDigit1 + ZERO_ASCII);
 810:	61 e3       	ldi	r22, 0x31	; 49
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	0e 94 00 01 	call	0x200	; 0x200 <LCD_SendCharacter>
   LCD_SendCharacter(LCD_CH_0, u8_RequiredTempDigit2 + ZERO_ASCII);
 818:	60 e3       	ldi	r22, 0x30	; 48
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	0e 94 00 01 	call	0x200	; 0x200 <LCD_SendCharacter>
   LCD_SendCharacter(LCD_CH_0, u8_RequiredTempDigit3 + ZERO_ASCII);
 820:	60 e3       	ldi	r22, 0x30	; 48
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	0e 94 00 01 	call	0x200	; 0x200 <LCD_SendCharacter>
   
   /* Init Observer */
   TEMPObserver_Init(&gstr_TempSensorObserver);
 828:	87 e8       	ldi	r24, 0x87	; 135
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 4a 02 	call	0x494	; 0x494 <TEMPObserver_Init>
   /* Subscribe Motor Acceptor Function to Observer. */
   TEMPObserver_Subscribe(&gstr_TempSensorObserver, MOTORLogic_Accept);
 830:	6f e9       	ldi	r22, 0x9F	; 159
 832:	73 e0       	ldi	r23, 0x03	; 3
 834:	87 e8       	ldi	r24, 0x87	; 135
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 53 02 	call	0x4a6	; 0x4a6 <TEMPObserver_Subscribe>
   /* Subscribe LCD Acceptor Function to Observer. */
   TEMPObserver_Subscribe(&gstr_TempSensorObserver, LCDLogic_Accept);
 83c:	6b ea       	ldi	r22, 0xAB	; 171
 83e:	73 e0       	ldi	r23, 0x03	; 3
 840:	87 e8       	ldi	r24, 0x87	; 135
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 53 02 	call	0x4a6	; 0x4a6 <TEMPObserver_Subscribe>
   
   while (1)
   {
      /* Get Temperature from Temperature Sensor. */
      TEMP_Read(TEMP_0, &u8_NewTemp);
 848:	be 01       	movw	r22, r28
 84a:	6f 5f       	subi	r22, 0xFF	; 255
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	0e 94 7d 02 	call	0x4fa	; 0x4fa <TEMP_Read>
      /* If a new temperature. */
      if(u8_OldTemp != u8_NewTemp)
 854:	69 81       	ldd	r22, Y+1	; 0x01
 856:	16 17       	cp	r17, r22
 858:	21 f0       	breq	.+8      	; 0x862 <__stack+0x3>
      {
         /* Update Observer Data. */
         TEMPObserver_SetNewData(&gstr_TempSensorObserver, u8_NewTemp);
 85a:	87 e8       	ldi	r24, 0x87	; 135
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <TEMPObserver_SetNewData>
      }
      /* Update Old Temprature. */
      u8_OldTemp = u8_NewTemp;
 862:	19 81       	ldd	r17, Y+1	; 0x01
   }
 864:	f1 cf       	rjmp	.-30     	; 0x848 <__DATA_REGION_LENGTH__+0x48>

00000866 <__udivmodhi4>:
 866:	aa 1b       	sub	r26, r26
 868:	bb 1b       	sub	r27, r27
 86a:	51 e1       	ldi	r21, 0x11	; 17
 86c:	07 c0       	rjmp	.+14     	; 0x87c <__udivmodhi4_ep>

0000086e <__udivmodhi4_loop>:
 86e:	aa 1f       	adc	r26, r26
 870:	bb 1f       	adc	r27, r27
 872:	a6 17       	cp	r26, r22
 874:	b7 07       	cpc	r27, r23
 876:	10 f0       	brcs	.+4      	; 0x87c <__udivmodhi4_ep>
 878:	a6 1b       	sub	r26, r22
 87a:	b7 0b       	sbc	r27, r23

0000087c <__udivmodhi4_ep>:
 87c:	88 1f       	adc	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	5a 95       	dec	r21
 882:	a9 f7       	brne	.-22     	; 0x86e <__udivmodhi4_loop>
 884:	80 95       	com	r24
 886:	90 95       	com	r25
 888:	bc 01       	movw	r22, r24
 88a:	cd 01       	movw	r24, r26
 88c:	08 95       	ret

0000088e <__divmodhi4>:
 88e:	97 fb       	bst	r25, 7
 890:	07 2e       	mov	r0, r23
 892:	16 f4       	brtc	.+4      	; 0x898 <__divmodhi4+0xa>
 894:	00 94       	com	r0
 896:	07 d0       	rcall	.+14     	; 0x8a6 <__divmodhi4_neg1>
 898:	77 fd       	sbrc	r23, 7
 89a:	09 d0       	rcall	.+18     	; 0x8ae <__divmodhi4_neg2>
 89c:	0e 94 33 04 	call	0x866	; 0x866 <__udivmodhi4>
 8a0:	07 fc       	sbrc	r0, 7
 8a2:	05 d0       	rcall	.+10     	; 0x8ae <__divmodhi4_neg2>
 8a4:	3e f4       	brtc	.+14     	; 0x8b4 <__divmodhi4_exit>

000008a6 <__divmodhi4_neg1>:
 8a6:	90 95       	com	r25
 8a8:	81 95       	neg	r24
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	08 95       	ret

000008ae <__divmodhi4_neg2>:
 8ae:	70 95       	com	r23
 8b0:	61 95       	neg	r22
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255

000008b4 <__divmodhi4_exit>:
 8b4:	08 95       	ret

000008b6 <_exit>:
 8b6:	f8 94       	cli

000008b8 <__stop_program>:
 8b8:	ff cf       	rjmp	.-2      	; 0x8b8 <__stop_program>
