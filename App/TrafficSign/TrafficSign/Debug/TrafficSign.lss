
TrafficSign.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000428  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000c4  008000c4  00000520  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001486  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000987  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c46  00000000  00000000  000024f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00003138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078b  00000000  00000000  00003344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c56  00000000  00000000  00003acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004725  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3c       	cpi	r26, 0xC5	; 197
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0d 02 	call	0x41a	; 0x41a <main>
  8a:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LED_Init>:
* @return function error state.
*/
LED_ERROR_state_t LED_Init(void)
{
   /* check if init function was called before */
   if(INIT == gu8_IsLEDInit)
  92:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	c1 f0       	breq	.+48     	; 0xca <LED_Init+0x38>
   
   DIO_ERROR_state_t e_state;
   
   #ifdef LED_CH_1
      /* configure LED pin */
      e_state = DIO_SetPinDirection(LED_CH_1_PORT, LED_CH_1_PIN, OUTPUT);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinDirection>
      /* make sure pin configuration is successful */
      if(E_DIO_SUCCESS != e_state)
  a4:	81 11       	cpse	r24, r1
  a6:	13 c0       	rjmp	.+38     	; 0xce <LED_Init+0x3c>
         return E_LED_DIO_ERROR;
      }
   #endif
   #ifdef LED_CH_2
      /* configure LED pin */
      e_state = DIO_SetPinDirection(LED_CH_2_PORT, LED_CH_2_PIN, OUTPUT);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinDirection>
      /* make sure pin configuration is successful */
      if(E_DIO_SUCCESS != e_state)
  b0:	81 11       	cpse	r24, r1
  b2:	0f c0       	rjmp	.+30     	; 0xd2 <LED_Init+0x40>
         return E_LED_DIO_ERROR;
      }
   #endif
   #ifdef LED_CH_3
      /* configure LED pin */
      e_state = DIO_SetPinDirection(LED_CH_3_PORT, LED_CH_3_PIN, OUTPUT);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinDirection>
      /* make sure pin configuration is successful */
      if(E_DIO_SUCCESS != e_state)
  bc:	81 11       	cpse	r24, r1
  be:	0b c0       	rjmp	.+22     	; 0xd6 <LED_Init+0x44>
         return E_LED_DIO_ERROR;
      }
   #endif
   
   /* set global variable to initialized */
   gu8_IsLEDInit = INIT;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
   
   /* return success message */
   return E_LED_SUCCESS;
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	08 95       	ret
LED_ERROR_state_t LED_Init(void)
{
   /* check if init function was called before */
   if(INIT == gu8_IsLEDInit)
   {
      return E_LED_INIT_BEFORE;
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	08 95       	ret
      /* configure LED pin */
      e_state = DIO_SetPinDirection(LED_CH_1_PORT, LED_CH_1_PIN, OUTPUT);
      /* make sure pin configuration is successful */
      if(E_DIO_SUCCESS != e_state)
      {
         return E_LED_DIO_ERROR;
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	08 95       	ret
      /* configure LED pin */
      e_state = DIO_SetPinDirection(LED_CH_2_PORT, LED_CH_2_PIN, OUTPUT);
      /* make sure pin configuration is successful */
      if(E_DIO_SUCCESS != e_state)
      {
         return E_LED_DIO_ERROR;
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	08 95       	ret
      /* configure LED pin */
      e_state = DIO_SetPinDirection(LED_CH_3_PORT, LED_CH_3_PIN, OUTPUT);
      /* make sure pin configuration is successful */
      if(E_DIO_SUCCESS != e_state)
      {
         return E_LED_DIO_ERROR;
  d6:	82 e0       	ldi	r24, 0x02	; 2
   /* set global variable to initialized */
   gu8_IsLEDInit = INIT;
   
   /* return success message */
   return E_LED_SUCCESS;
}
  d8:	08 95       	ret

000000da <LED_Off>:
* @return function error state.
*/
LED_ERROR_state_t LED_Off(uint8_t LED_ch)
{
   /* check if init function wasn't called before */
   if(NOT_INIT == gu8_IsLEDInit)
  da:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <__data_end>
  de:	99 23       	and	r25, r25
  e0:	99 f0       	breq	.+38     	; 0x108 <LED_Off+0x2e>
   
   uint8_t u8_ChPort;
   uint8_t u8_ChPin;
   
   /* set the required port and pin to the LED */
   switch(LED_ch)
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	41 f0       	breq	.+16     	; 0xf6 <LED_Off+0x1c>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	21 f0       	breq	.+8      	; 0xf2 <LED_Off+0x18>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	79 f4       	brne	.+30     	; 0x10c <LED_Off+0x32>
   {
      #ifdef LED_CH_1
      case LED_CH_1:
         u8_ChPort = LED_CH_1_PORT;
         u8_ChPin = LED_CH_1_PIN;
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <LED_Off+0x1e>
         break;
      #endif
      #ifdef LED_CH_3
      case LED_CH_3:
         u8_ChPort = LED_CH_3_PORT;
         u8_ChPin = LED_CH_3_PIN;
  f2:	62 e0       	ldi	r22, 0x02	; 2
         break;
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <LED_Off+0x1e>
         break;   
      #endif
      #ifdef LED_CH_2
      case LED_CH_2:
         u8_ChPort = LED_CH_2_PORT;
         u8_ChPin = LED_CH_2_PIN;
  f6:	61 e0       	ldi	r22, 0x01	; 1
   }
   
   DIO_ERROR_state_t DIOErrorState;
   
   /* set LED pin to low */
   DIOErrorState = DIO_WritePin(u8_ChPort, u8_ChPin, LOW);
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_WritePin>
   
   /* make sure DIO function was successful */
   if(E_DIO_SUCCESS != DIOErrorState)
 100:	88 23       	and	r24, r24
 102:	31 f0       	breq	.+12     	; 0x110 <LED_Off+0x36>
   {
      return E_LED_DIO_ERROR;
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	08 95       	ret
LED_ERROR_state_t LED_Off(uint8_t LED_ch)
{
   /* check if init function wasn't called before */
   if(NOT_INIT == gu8_IsLEDInit)
   {
      return E_LED_NOT_INIT;
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	08 95       	ret
         u8_ChPort = LED_CH_3_PORT;
         u8_ChPin = LED_CH_3_PIN;
         break;
      #endif
      default:
         return E_LED_INVALID_CH_NO;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret
   {
      return E_LED_DIO_ERROR;
   }
   
   /* return success message */
   return E_LED_SUCCESS;
 110:	80 e0       	ldi	r24, 0x00	; 0
}
 112:	08 95       	ret

00000114 <LED_On>:
* @return function error state.
*/
LED_ERROR_state_t LED_On(uint8_t LED_ch)
{
   /* check if init function wasn't called before */
   if(NOT_INIT == gu8_IsLEDInit)
 114:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <__data_end>
 118:	99 23       	and	r25, r25
 11a:	99 f0       	breq	.+38     	; 0x142 <LED_On+0x2e>
   
   uint8_t u8_ChPort;
   uint8_t u8_ChPin;
   
   /* set the required port and pin to the LED */
   switch(LED_ch)
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	41 f0       	breq	.+16     	; 0x130 <LED_On+0x1c>
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	21 f0       	breq	.+8      	; 0x12c <LED_On+0x18>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	79 f4       	brne	.+30     	; 0x146 <LED_On+0x32>
   {
      #ifdef LED_CH_1
      case LED_CH_1:
         u8_ChPort = LED_CH_1_PORT;
         u8_ChPin = LED_CH_1_PIN;
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	03 c0       	rjmp	.+6      	; 0x132 <LED_On+0x1e>
         break;
      #endif
      #ifdef LED_CH_3
      case LED_CH_3:
         u8_ChPort = LED_CH_3_PORT;
         u8_ChPin = LED_CH_3_PIN;
 12c:	62 e0       	ldi	r22, 0x02	; 2
         break;
 12e:	01 c0       	rjmp	.+2      	; 0x132 <LED_On+0x1e>
         break;
      #endif
      #ifdef LED_CH_2
      case LED_CH_2:
         u8_ChPort = LED_CH_2_PORT;
         u8_ChPin = LED_CH_2_PIN;
 130:	61 e0       	ldi	r22, 0x01	; 1
   }
   
   DIO_ERROR_state_t DIOErrorState;
   
   /* set LED pin to high */
   DIOErrorState = DIO_WritePin(u8_ChPort, u8_ChPin, HIGH);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_WritePin>
   
   /* make sure DIO function was successful */
   if(E_DIO_SUCCESS != DIOErrorState)
 13a:	88 23       	and	r24, r24
 13c:	31 f0       	breq	.+12     	; 0x14a <LED_On+0x36>
   {
      return E_LED_DIO_ERROR;
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	08 95       	ret
LED_ERROR_state_t LED_On(uint8_t LED_ch)
{
   /* check if init function wasn't called before */
   if(NOT_INIT == gu8_IsLEDInit)
   {
      return E_LED_NOT_INIT;
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	08 95       	ret
         u8_ChPort = LED_CH_3_PORT;
         u8_ChPin = LED_CH_3_PIN;
         break;
      #endif
      default:
         return E_LED_INVALID_CH_NO;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	08 95       	ret
   {
      return E_LED_DIO_ERROR;
   }
   
   /* return success message */
   return E_LED_SUCCESS;
 14a:	80 e0       	ldi	r24, 0x00	; 0
}
 14c:	08 95       	ret

0000014e <DIO_SetPinDirection>:
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
}
 14e:	68 30       	cpi	r22, 0x08	; 8
 150:	80 f5       	brcc	.+96     	; 0x1b2 <DIO_SetPinDirection+0x64>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	79 f0       	breq	.+30     	; 0x174 <DIO_SetPinDirection+0x26>
 156:	28 f0       	brcs	.+10     	; 0x162 <DIO_SetPinDirection+0x14>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	31 f0       	breq	.+12     	; 0x168 <DIO_SetPinDirection+0x1a>
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	39 f0       	breq	.+14     	; 0x16e <DIO_SetPinDirection+0x20>
 160:	2a c0       	rjmp	.+84     	; 0x1b6 <DIO_SetPinDirection+0x68>
 162:	ea e3       	ldi	r30, 0x3A	; 58
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	08 c0       	rjmp	.+16     	; 0x178 <DIO_SetPinDirection+0x2a>
 168:	e4 e3       	ldi	r30, 0x34	; 52
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	05 c0       	rjmp	.+10     	; 0x178 <DIO_SetPinDirection+0x2a>
 16e:	e1 e3       	ldi	r30, 0x31	; 49
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SetPinDirection+0x2a>
 174:	e7 e3       	ldi	r30, 0x37	; 55
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	61 f4       	brne	.+24     	; 0x194 <DIO_SetPinDirection+0x46>
 17c:	20 81       	ld	r18, Z
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_SetPinDirection+0x3a>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_SetPinDirection+0x36>
 18c:	82 2b       	or	r24, r18
 18e:	80 83       	st	Z, r24
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	08 95       	ret
 194:	41 11       	cpse	r20, r1
 196:	11 c0       	rjmp	.+34     	; 0x1ba <DIO_SetPinDirection+0x6c>
 198:	20 81       	ld	r18, Z
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPinDirection+0x56>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPinDirection+0x52>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	80 83       	st	Z, r24
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	08 95       	ret
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	08 95       	ret
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	08 95       	ret

000001be <DIO_WritePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 1be:	68 30       	cpi	r22, 0x08	; 8
 1c0:	80 f5       	brcc	.+96     	; 0x222 <DIO_WritePin+0x64>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data pointer according to the required port. */
   switch(port)
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	79 f0       	breq	.+30     	; 0x1e4 <DIO_WritePin+0x26>
 1c6:	28 f0       	brcs	.+10     	; 0x1d2 <DIO_WritePin+0x14>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	31 f0       	breq	.+12     	; 0x1d8 <DIO_WritePin+0x1a>
 1cc:	83 30       	cpi	r24, 0x03	; 3
 1ce:	39 f0       	breq	.+14     	; 0x1de <DIO_WritePin+0x20>
 1d0:	2a c0       	rjmp	.+84     	; 0x226 <DIO_WritePin+0x68>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 1d2:	eb e3       	ldi	r30, 0x3B	; 59
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <DIO_WritePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 1d8:	e5 e3       	ldi	r30, 0x35	; 53
 1da:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <DIO_WritePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 1de:	e2 e3       	ldi	r30, 0x32	; 50
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_WritePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 1e4:	e8 e3       	ldi	r30, 0x38	; 56
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   /* set or clear value in the pin. */
   if(HIGH == data)
 1e8:	41 30       	cpi	r20, 0x01	; 1
 1ea:	61 f4       	brne	.+24     	; 0x204 <DIO_WritePin+0x46>
   {
      SET_BIT(*prt_port_data,pin);
 1ec:	20 81       	ld	r18, Z
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_WritePin+0x3a>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_WritePin+0x36>
 1fc:	82 2b       	or	r24, r18
 1fe:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	08 95       	ret
   /* set or clear value in the pin. */
   if(HIGH == data)
   {
      SET_BIT(*prt_port_data,pin);
   }
   else if(LOW == data)
 204:	41 11       	cpse	r20, r1
 206:	11 c0       	rjmp	.+34     	; 0x22a <DIO_WritePin+0x6c>
   {
      CLEAR_BIT(*prt_port_data,pin);
 208:	20 81       	ld	r18, Z
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_WritePin+0x56>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_WritePin+0x52>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	08 95       	ret
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	08 95       	ret
      CLEAR_BIT(*prt_port_data,pin);
   }
   /* if data is invalid. */
   else
   {
      return E_DIO_INVALID_WRITE_DATA;
 22a:	84 e0       	ldi	r24, 0x04	; 4
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 22c:	08 95       	ret

0000022e <UART_Init>:
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
   
   /* return success status */
   return E_UART_SUCCESS;
}
 22e:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <UART_CH_0>
 232:	98 13       	cpse	r25, r24
 234:	0b c0       	rjmp	.+22     	; 0x24c <UART_Init+0x1e>
 236:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <UART_CH_0_CONTROL>
 23a:	8a b9       	out	0x0a, r24	; 10
 23c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <UART_CH_0_CONTROL_2>
 240:	80 bd       	out	0x20, r24	; 32
 242:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <UART_CH_0_BaudRate>
 246:	89 b9       	out	0x09, r24	; 9
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	08 95       	ret
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	08 95       	ret

00000250 <UART_TransmitString>:
UART_ERROR_state_t UART_TransmitString(uint8_t UartNumber,uint8_t * TxString)
{
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
 250:	61 15       	cp	r22, r1
 252:	71 05       	cpc	r23, r1
 254:	99 f0       	breq	.+38     	; 0x27c <UART_TransmitString+0x2c>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   if(UART_CH_0 == UartNumber)
 256:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <UART_CH_0>
 25a:	98 17       	cp	r25, r24
 25c:	39 f0       	breq	.+14     	; 0x26c <UART_TransmitString+0x1c>
      ptru8_UARTStatusR = &UART_STATUS_R;
      ptru8_UARTDataR = &UART_DATA_R;
   }
   else
   {
       return E_UART_INVALID_CH;
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	08 95       	ret
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
   {
      /* Wait for empty transmit buffer */
      while ( !( *ptru8_UARTStatusR & EMPTY_BUFFER_BIT) );
 262:	5d 9b       	sbis	0x0b, 5	; 11
 264:	fe cf       	rjmp	.-4      	; 0x262 <UART_TransmitString+0x12>
      
      /* Put data into buffer, sends the data */
      *ptru8_UARTDataR = TxString[counter];
 266:	8c b9       	out	0x0c, r24	; 12
      counter++;
 268:	9f 5f       	subi	r25, 0xFF	; 255
 26a:	01 c0       	rjmp	.+2      	; 0x26e <UART_TransmitString+0x1e>
 26c:	90 e0       	ldi	r25, 0x00	; 0
   {
       return E_UART_INVALID_CH;
   }
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
 26e:	fb 01       	movw	r30, r22
 270:	e9 0f       	add	r30, r25
 272:	f1 1d       	adc	r31, r1
 274:	80 81       	ld	r24, Z
 276:	81 11       	cpse	r24, r1
 278:	f4 cf       	rjmp	.-24     	; 0x262 <UART_TransmitString+0x12>
 27a:	08 95       	ret
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
   {
      return E_UART_NULL_PTR;
 27c:	84 e0       	ldi	r24, 0x04	; 4
      counter++;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 27e:	08 95       	ret

00000280 <UART_ReceiveString>:
UART_ERROR_state_t UART_ReceiveString(uint8_t UartNumber, uint8_t * RxString)
{
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
 280:	61 15       	cp	r22, r1
 282:	71 05       	cpc	r23, r1
 284:	59 f1       	breq	.+86     	; 0x2dc <UART_ReceiveString+0x5c>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   if(UART_CH_0 == UartNumber)
 286:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <UART_CH_0>
 28a:	98 17       	cp	r25, r24
 28c:	29 f0       	breq	.+10     	; 0x298 <UART_ReceiveString+0x18>
      ptru8_UARTStatusR = &UART_STATUS_R;
      ptru8_UARTDataR = &UART_DATA_R;
   }
   else
   {
      return E_UART_INVALID_CH;
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	08 95       	ret
            counter -= STRING_RETURN_TO_PREV_CHAR;
         }
         /* return to the string start if the counter is still at first character */
         else
         {
            counter = STRING_COUNTER_START;
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	98 2f       	mov	r25, r24
 296:	01 c0       	rjmp	.+2      	; 0x29a <UART_ReceiveString+0x1a>
 298:	90 e0       	ldi	r25, 0x00	; 0
   }
   
   while(1)
   {
      /* Wait for data to be received */
      while ( !(*ptru8_UARTStatusR & RECEIVE_COMPLETE_BIT) );
 29a:	5f 9b       	sbis	0x0b, 7	; 11
 29c:	fe cf       	rjmp	.-4      	; 0x29a <UART_ReceiveString+0x1a>
      /* Get and return received data from buffer */
      RxString[counter] = *ptru8_UARTDataR;
 29e:	29 2f       	mov	r18, r25
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	fb 01       	movw	r30, r22
 2a4:	e2 0f       	add	r30, r18
 2a6:	f3 1f       	adc	r31, r19
 2a8:	8c b1       	in	r24, 0x0c	; 12
 2aa:	80 83       	st	Z, r24
      
      /* enters an end of string character and breaks from the loop on receiving
         a new line character */
      if(RxString[counter] == NEW_LINE)
 2ac:	8d 30       	cpi	r24, 0x0D	; 13
 2ae:	41 f4       	brne	.+16     	; 0x2c0 <UART_ReceiveString+0x40>
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
 2b0:	2f 5f       	subi	r18, 0xFF	; 255
 2b2:	3f 4f       	sbci	r19, 0xFF	; 255
 2b4:	fb 01       	movw	r30, r22
 2b6:	e2 0f       	add	r30, r18
 2b8:	f3 1f       	adc	r31, r19
 2ba:	10 82       	st	Z, r1
         }
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	08 95       	ret
      if(RxString[counter] == NEW_LINE)
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
         break;
      }
      counter++;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	89 0f       	add	r24, r25
      
      /* return to the previous character to overwrite if the entered character 
         is backspace */
      if(RxString[counter - STRING_PREV_CHAR] == BACKSPACE)
 2c4:	fb 01       	movw	r30, r22
 2c6:	e8 0f       	add	r30, r24
 2c8:	f1 1d       	adc	r31, r1
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	20 81       	ld	r18, Z
 2ce:	28 30       	cpi	r18, 0x08	; 8
 2d0:	09 f7       	brne	.-62     	; 0x294 <UART_ReceiveString+0x14>
      {
         if (counter - STRING_PREV_CHAR != STRING_COUNTER_START)
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	f1 f2       	breq	.-68     	; 0x292 <UART_ReceiveString+0x12>
         {
            counter -= STRING_RETURN_TO_PREV_CHAR;
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	89 0f       	add	r24, r25
 2da:	dc cf       	rjmp	.-72     	; 0x294 <UART_ReceiveString+0x14>
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
   {
      return E_UART_NULL_PTR;
 2dc:	84 e0       	ldi	r24, 0x04	; 4
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 2de:	08 95       	ret

000002e0 <StringCompare>:
extern const uint8_t UART_CH_0;

/*- LOCAL FUNCTIONS IMPLEMENTATION
------------------------*/
static uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
 2e0:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
 2e2:	40 e0       	ldi	r20, 0x00	; 0
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
 2e4:	0a c0       	rjmp	.+20     	; 0x2fa <StringCompare+0x1a>
   {
      if(str1[u8_counter] != str2[u8_counter])
 2e6:	fb 01       	movw	r30, r22
 2e8:	e2 0f       	add	r30, r18
 2ea:	f3 1f       	adc	r31, r19
 2ec:	20 81       	ld	r18, Z
 2ee:	92 17       	cp	r25, r18
 2f0:	19 f0       	breq	.+6      	; 0x2f8 <StringCompare+0x18>
      {
         u8_isEqual = FALSE;
         u8_counter++;
 2f2:	4f 5f       	subi	r20, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
 2f6:	0e c0       	rjmp	.+28     	; 0x314 <StringCompare+0x34>
      }
      u8_counter++;
 2f8:	4f 5f       	subi	r20, 0xFF	; 255
static uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
 2fa:	24 2f       	mov	r18, r20
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	fd 01       	movw	r30, r26
 300:	e2 0f       	add	r30, r18
 302:	f3 1f       	adc	r31, r19
 304:	90 81       	ld	r25, Z
 306:	99 23       	and	r25, r25
 308:	21 f0       	breq	.+8      	; 0x312 <StringCompare+0x32>
 30a:	9d 30       	cpi	r25, 0x0D	; 13
 30c:	61 f7       	brne	.-40     	; 0x2e6 <StringCompare+0x6>
/*- LOCAL FUNCTIONS IMPLEMENTATION
------------------------*/
static uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	01 c0       	rjmp	.+2      	; 0x314 <StringCompare+0x34>
 312:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
 314:	fb 01       	movw	r30, r22
 316:	e4 0f       	add	r30, r20
 318:	f1 1d       	adc	r31, r1
 31a:	90 81       	ld	r25, Z
 31c:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
 31e:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
}
 320:	08 95       	ret

00000322 <Traffic_init>:

/*- APIs IMPLEMENTATION
-----------------------------------*/
void Traffic_init(void)
{
   LED_Init();
 322:	0e 94 49 00 	call	0x92	; 0x92 <LED_Init>
   UART_Init(UART_CH_0);
 326:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <UART_CH_0>
 32a:	0e 94 17 01 	call	0x22e	; 0x22e <UART_Init>
 32e:	08 95       	ret

00000330 <Traffic_update>:
}

void Traffic_update(void)
{
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	c8 5c       	subi	r28, 0xC8	; 200
 33c:	d1 09       	sbc	r29, r1
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61
   uint8_t string[MAX_STRING_SIZE];
   UART_ReceiveString(UART_CH_0, string);
 348:	10 91 c2 00 	lds	r17, 0x00C2	; 0x8000c2 <UART_CH_0>
 34c:	be 01       	movw	r22, r28
 34e:	6f 5f       	subi	r22, 0xFF	; 255
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	81 2f       	mov	r24, r17
 354:	0e 94 40 01 	call	0x280	; 0x280 <UART_ReceiveString>
   
   if(StringCompare(string,gu8_StartMessage) == TRUE)
 358:	60 e6       	ldi	r22, 0x60	; 96
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	ce 01       	movw	r24, r28
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	0e 94 70 01 	call	0x2e0	; 0x2e0 <StringCompare>
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	79 f4       	brne	.+30     	; 0x386 <Traffic_update+0x56>
   {
      LED_Off(LED_CH_2);
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 6d 00 	call	0xda	; 0xda <LED_Off>
      LED_Off(LED_CH_3);
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	0e 94 6d 00 	call	0xda	; 0xda <LED_Off>
      LED_On(LED_CH_1);
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 8a 00 	call	0x114	; 0x114 <LED_On>
      UART_TransmitString(UART_CH_0, gu8_StartMessageReply);
 37a:	66 e6       	ldi	r22, 0x66	; 102
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	81 2f       	mov	r24, r17
 380:	0e 94 28 01 	call	0x250	; 0x250 <UART_TransmitString>
 384:	3f c0       	rjmp	.+126    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
   }
   else if(StringCompare(string, gu8_WaitMessage) == TRUE)
 386:	68 e7       	ldi	r22, 0x78	; 120
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	ce 01       	movw	r24, r28
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <StringCompare>
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	71 f4       	brne	.+28     	; 0x3b2 <Traffic_update+0x82>
   {
      LED_Off(LED_CH_1);
 396:	0e 94 6d 00 	call	0xda	; 0xda <LED_Off>
      LED_Off(LED_CH_3);
 39a:	83 e0       	ldi	r24, 0x03	; 3
 39c:	0e 94 6d 00 	call	0xda	; 0xda <LED_Off>
      LED_On(LED_CH_2);
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	0e 94 8a 00 	call	0x114	; 0x114 <LED_On>
      UART_TransmitString(UART_CH_0, gu8_WaitMessageReply);
 3a6:	6d e7       	ldi	r22, 0x7D	; 125
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	81 2f       	mov	r24, r17
 3ac:	0e 94 28 01 	call	0x250	; 0x250 <UART_TransmitString>
 3b0:	29 c0       	rjmp	.+82     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
   }
   else if(StringCompare(string, gu8_StopMessage) == TRUE)
 3b2:	60 e9       	ldi	r22, 0x90	; 144
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	ce 01       	movw	r24, r28
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	0e 94 70 01 	call	0x2e0	; 0x2e0 <StringCompare>
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	71 f4       	brne	.+28     	; 0x3de <Traffic_update+0xae>
   {
      LED_Off(LED_CH_1);
 3c2:	0e 94 6d 00 	call	0xda	; 0xda <LED_Off>
      LED_Off(LED_CH_2);
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	0e 94 6d 00 	call	0xda	; 0xda <LED_Off>
      LED_On(LED_CH_3);
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	0e 94 8a 00 	call	0x114	; 0x114 <LED_On>
      UART_TransmitString(UART_CH_0, gu8_StopMessageReply);
 3d2:	65 e9       	ldi	r22, 0x95	; 149
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	81 2f       	mov	r24, r17
 3d8:	0e 94 28 01 	call	0x250	; 0x250 <UART_TransmitString>
 3dc:	13 c0       	rjmp	.+38     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
   }
   else if(StringCompare(string, gu8_ATMessage) == TRUE)
 3de:	65 ea       	ldi	r22, 0xA5	; 165
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	ce 01       	movw	r24, r28
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <StringCompare>
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	31 f4       	brne	.+12     	; 0x3fa <Traffic_update+0xca>
   {
      UART_TransmitString(UART_CH_0, gu8_ATMessageReply);
 3ee:	68 ea       	ldi	r22, 0xA8	; 168
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	81 2f       	mov	r24, r17
 3f4:	0e 94 28 01 	call	0x250	; 0x250 <UART_TransmitString>
 3f8:	05 c0       	rjmp	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
   }
   else
   {
      UART_TransmitString(UART_CH_0, gu8_InvalidMessageReply);
 3fa:	6d ea       	ldi	r22, 0xAD	; 173
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	81 2f       	mov	r24, r17
 400:	0e 94 28 01 	call	0x250	; 0x250 <UART_TransmitString>
   }
 404:	c8 53       	subi	r28, 0x38	; 56
 406:	df 4f       	sbci	r29, 0xFF	; 255
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	08 95       	ret

0000041a <main>:
-----------------------------------------------*/
#include "App/TrafficSign/TrafficSign.h"

int main(void)
{
   Traffic_init();
 41a:	0e 94 91 01 	call	0x322	; 0x322 <Traffic_init>
   while (1) 
   {
      Traffic_update();
 41e:	0e 94 98 01 	call	0x330	; 0x330 <Traffic_update>
 422:	fd cf       	rjmp	.-6      	; 0x41e <main+0x4>

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
