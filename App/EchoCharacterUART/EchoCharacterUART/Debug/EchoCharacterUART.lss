
EchoCharacterUART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000166  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b3a  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d2  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000558  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00001a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051d  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ed  00000000  00000000  00002071  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000245e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  7a:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_Init>:
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
   
   /* return success status */
   return E_UART_SUCCESS;
}
  82:	81 11       	cpse	r24, r1
  84:	0b c0       	rjmp	.+22     	; 0x9c <UART_Init+0x1a>
  86:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <UART_CH_0_CONTROL>
  8a:	8a b9       	out	0x0a, r24	; 10
  8c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <UART_CH_0_CONTROL_2>
  90:	80 bd       	out	0x20, r24	; 32
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	89 b9       	out	0x09, r24	; 9
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	08 95       	ret
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	08 95       	ret

000000a0 <UART_TransmitString>:
UART_ERROR_state_t UART_TransmitString(uint8_t UartNumber,uint8_t * TxString)
{
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
  a0:	61 15       	cp	r22, r1
  a2:	71 05       	cpc	r23, r1
  a4:	81 f0       	breq	.+32     	; 0xc6 <UART_TransmitString+0x26>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
  a6:	81 11       	cpse	r24, r1
  a8:	10 c0       	rjmp	.+32     	; 0xca <UART_TransmitString+0x2a>
  aa:	05 c0       	rjmp	.+10     	; 0xb6 <UART_TransmitString+0x16>
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
   {
      /* Wait for empty transmit buffer */
      while ( !( *ptru8_UARTStatusR & EMPTY_BUFFER_BIT) );
  ac:	5d 9b       	sbis	0x0b, 5	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <UART_TransmitString+0xc>
      
      /* Put data into buffer, sends the data */
      *ptru8_UARTDataR = TxString[counter];
  b0:	8c b9       	out	0x0c, r24	; 12
      counter++;
  b2:	9f 5f       	subi	r25, 0xFF	; 255
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <UART_TransmitString+0x18>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
  b6:	90 e0       	ldi	r25, 0x00	; 0
      default:
         return E_UART_INVALID_CH;
   }
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
  b8:	fb 01       	movw	r30, r22
  ba:	e9 0f       	add	r30, r25
  bc:	f1 1d       	adc	r31, r1
  be:	80 81       	ld	r24, Z
  c0:	81 11       	cpse	r24, r1
  c2:	f4 cf       	rjmp	.-24     	; 0xac <UART_TransmitString+0xc>
  c4:	08 95       	ret
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
   {
      return E_UART_NULL_PTR;
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
  ca:	86 e0       	ldi	r24, 0x06	; 6
      counter++;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
  cc:	08 95       	ret

000000ce <UART_ReceiveString>:
UART_ERROR_state_t UART_ReceiveString(uint8_t UartNumber, uint8_t * RxString)
{
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
  ce:	61 15       	cp	r22, r1
  d0:	71 05       	cpc	r23, r1
  d2:	41 f1       	breq	.+80     	; 0x124 <UART_ReceiveString+0x56>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
  d4:	81 11       	cpse	r24, r1
  d6:	28 c0       	rjmp	.+80     	; 0x128 <UART_ReceiveString+0x5a>
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <UART_ReceiveString+0x12>
            counter -= STRING_RETURN_TO_PREV_CHAR;
         }
         /* return to the string start if the counter is still at first character */
         else
         {
            counter = STRING_COUNTER_START;
  da:	80 e0       	ldi	r24, 0x00	; 0
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
  dc:	98 2f       	mov	r25, r24
  de:	01 c0       	rjmp	.+2      	; 0xe2 <UART_ReceiveString+0x14>
  e0:	90 e0       	ldi	r25, 0x00	; 0
   }
   
   while(1)
   {
      /* Wait for data to be received */
      while ( !(*ptru8_UARTStatusR & RECEIVE_COMPLETE_BIT) );
  e2:	5f 9b       	sbis	0x0b, 7	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <UART_ReceiveString+0x14>
      /* Get and return received data from buffer */
      RxString[counter] = *ptru8_UARTDataR;
  e6:	29 2f       	mov	r18, r25
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	fb 01       	movw	r30, r22
  ec:	e2 0f       	add	r30, r18
  ee:	f3 1f       	adc	r31, r19
  f0:	8c b1       	in	r24, 0x0c	; 12
  f2:	80 83       	st	Z, r24
      
      /* enters an end of string character and breaks from the loop on receiving
         a new line character */
      if(RxString[counter] == NEW_LINE)
  f4:	8d 30       	cpi	r24, 0x0D	; 13
  f6:	41 f4       	brne	.+16     	; 0x108 <UART_ReceiveString+0x3a>
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
  fc:	fb 01       	movw	r30, r22
  fe:	e2 0f       	add	r30, r18
 100:	f3 1f       	adc	r31, r19
 102:	10 82       	st	Z, r1
         }
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 95       	ret
      if(RxString[counter] == NEW_LINE)
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
         break;
      }
      counter++;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	89 0f       	add	r24, r25
      
      /* return to the previous character to overwrite if the entered character 
         is backspace */
      if(RxString[counter - STRING_PREV_CHAR] == BACKSPACE)
 10c:	fb 01       	movw	r30, r22
 10e:	e8 0f       	add	r30, r24
 110:	f1 1d       	adc	r31, r1
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	20 81       	ld	r18, Z
 116:	28 30       	cpi	r18, 0x08	; 8
 118:	09 f7       	brne	.-62     	; 0xdc <UART_ReceiveString+0xe>
      {
         if (counter - STRING_PREV_CHAR != STRING_COUNTER_START)
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	f1 f2       	breq	.-68     	; 0xda <UART_ReceiveString+0xc>
         {
            counter -= STRING_RETURN_TO_PREV_CHAR;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	89 0f       	add	r24, r25
 122:	dc cf       	rjmp	.-72     	; 0xdc <UART_ReceiveString+0xe>
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
   {
      return E_UART_NULL_PTR;
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
 128:	86 e0       	ldi	r24, 0x06	; 6
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 12a:	08 95       	ret

0000012c <main>:
/*- LOCAL MACROS
------------------------------------------*/
#define MAX_STRING_SIZE       (uint16_t)(200)

int main(void)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	c8 5c       	subi	r28, 0xC8	; 200
 136:	d1 09       	sbc	r29, r1
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
   uint8_t string[MAX_STRING_SIZE];
   UART_Init(UART_CH_0);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 41 00 	call	0x82	; 0x82 <UART_Init>
   
   while(1)
   {
      UART_ReceiveString(UART_CH_0, string);
 148:	be 01       	movw	r22, r28
 14a:	6f 5f       	subi	r22, 0xFF	; 255
 14c:	7f 4f       	sbci	r23, 0xFF	; 255
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 67 00 	call	0xce	; 0xce <UART_ReceiveString>
      UART_TransmitString(UART_CH_0, string);
 154:	be 01       	movw	r22, r28
 156:	6f 5f       	subi	r22, 0xFF	; 255
 158:	7f 4f       	sbci	r23, 0xFF	; 255
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 50 00 	call	0xa0	; 0xa0 <UART_TransmitString>
 160:	f3 cf       	rjmp	.-26     	; 0x148 <main+0x1c>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
