
EchoCharacterUART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000190  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b5e  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ee  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000624  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051d  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000058d  00000000  00000000  000021b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  7a:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_Init>:
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
   
   /* return success status */
   return E_UART_SUCCESS;
}
  82:	81 11       	cpse	r24, r1
  84:	1c c0       	rjmp	.+56     	; 0xbe <UART_Init+0x3c>
  86:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <UART_CH_0_BaudRate>
  8a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <UART_CH_0_BaudRate+0x1>
  8e:	8f 3f       	cpi	r24, 0xFF	; 255
  90:	91 05       	cpc	r25, r1
  92:	09 f0       	breq	.+2      	; 0x96 <UART_Init+0x14>
  94:	b0 f4       	brcc	.+44     	; 0xc2 <UART_Init+0x40>
  96:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <UART_CH_0_CONTROL>
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <UART_CH_0_CONTROL_2>
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <UART_CH_0_BaudRate>
  a6:	89 b9       	out	0x09, r24	; 9
  a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <UART_CH_0_BaudRate>
  ac:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <UART_CH_0_BaudRate+0x1>
  b0:	8f 3f       	cpi	r24, 0xFF	; 255
  b2:	91 05       	cpc	r25, r1
  b4:	41 f0       	breq	.+16     	; 0xc6 <UART_Init+0x44>
  b6:	38 f0       	brcs	.+14     	; 0xc6 <UART_Init+0x44>
  b8:	90 bd       	out	0x20, r25	; 32
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	08 95       	ret
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	08 95       	ret
  c2:	85 e0       	ldi	r24, 0x05	; 5
  c4:	08 95       	ret
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	08 95       	ret

000000ca <UART_TransmitString>:
UART_ERROR_state_t UART_TransmitString(uint8_t UartNumber,uint8_t * TxString)
{
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
  ca:	61 15       	cp	r22, r1
  cc:	71 05       	cpc	r23, r1
  ce:	81 f0       	breq	.+32     	; 0xf0 <UART_TransmitString+0x26>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
  d0:	81 11       	cpse	r24, r1
  d2:	10 c0       	rjmp	.+32     	; 0xf4 <UART_TransmitString+0x2a>
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <UART_TransmitString+0x16>
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
   {
      /* Wait for empty transmit buffer */
      while ( !( *ptru8_UARTStatusR & EMPTY_BUFFER_BIT) );
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <UART_TransmitString+0xc>
      
      /* Put data into buffer, sends the data */
      *ptru8_UARTDataR = TxString[counter];
  da:	8c b9       	out	0x0c, r24	; 12
      counter++;
  dc:	9f 5f       	subi	r25, 0xFF	; 255
  de:	01 c0       	rjmp	.+2      	; 0xe2 <UART_TransmitString+0x18>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
  e0:	90 e0       	ldi	r25, 0x00	; 0
      default:
         return E_UART_INVALID_CH;
   }
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
  e2:	fb 01       	movw	r30, r22
  e4:	e9 0f       	add	r30, r25
  e6:	f1 1d       	adc	r31, r1
  e8:	80 81       	ld	r24, Z
  ea:	81 11       	cpse	r24, r1
  ec:	f4 cf       	rjmp	.-24     	; 0xd6 <UART_TransmitString+0xc>
  ee:	08 95       	ret
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
   {
      return E_UART_NULL_PTR;
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
  f4:	86 e0       	ldi	r24, 0x06	; 6
      counter++;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
  f6:	08 95       	ret

000000f8 <UART_ReceiveString>:
UART_ERROR_state_t UART_ReceiveString(uint8_t UartNumber, uint8_t * RxString)
{
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
  f8:	61 15       	cp	r22, r1
  fa:	71 05       	cpc	r23, r1
  fc:	41 f1       	breq	.+80     	; 0x14e <UART_ReceiveString+0x56>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
  fe:	81 11       	cpse	r24, r1
 100:	28 c0       	rjmp	.+80     	; 0x152 <UART_ReceiveString+0x5a>
 102:	03 c0       	rjmp	.+6      	; 0x10a <UART_ReceiveString+0x12>
            counter -= STRING_RETURN_TO_PREV_CHAR;
         }
         /* return to the string start if the counter is still at first character */
         else
         {
            counter = STRING_COUNTER_START;
 104:	80 e0       	ldi	r24, 0x00	; 0
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 106:	98 2f       	mov	r25, r24
 108:	01 c0       	rjmp	.+2      	; 0x10c <UART_ReceiveString+0x14>
 10a:	90 e0       	ldi	r25, 0x00	; 0
   }
   
   while(1)
   {
      /* Wait for data to be received */
      while ( !(*ptru8_UARTStatusR & RECEIVE_COMPLETE_BIT) );
 10c:	5f 9b       	sbis	0x0b, 7	; 11
 10e:	fe cf       	rjmp	.-4      	; 0x10c <UART_ReceiveString+0x14>
      /* Get and return received data from buffer */
      RxString[counter] = *ptru8_UARTDataR;
 110:	29 2f       	mov	r18, r25
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	fb 01       	movw	r30, r22
 116:	e2 0f       	add	r30, r18
 118:	f3 1f       	adc	r31, r19
 11a:	8c b1       	in	r24, 0x0c	; 12
 11c:	80 83       	st	Z, r24
      
      /* enters an end of string character and breaks from the loop on receiving
         a new line character */
      if(RxString[counter] == NEW_LINE)
 11e:	8d 30       	cpi	r24, 0x0D	; 13
 120:	41 f4       	brne	.+16     	; 0x132 <UART_ReceiveString+0x3a>
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	3f 4f       	sbci	r19, 0xFF	; 255
 126:	fb 01       	movw	r30, r22
 128:	e2 0f       	add	r30, r18
 12a:	f3 1f       	adc	r31, r19
 12c:	10 82       	st	Z, r1
         }
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret
      if(RxString[counter] == NEW_LINE)
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
         break;
      }
      counter++;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	89 0f       	add	r24, r25
      
      /* return to the previous character to overwrite if the entered character 
         is backspace */
      if(RxString[counter - STRING_PREV_CHAR] == BACKSPACE)
 136:	fb 01       	movw	r30, r22
 138:	e8 0f       	add	r30, r24
 13a:	f1 1d       	adc	r31, r1
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	20 81       	ld	r18, Z
 140:	28 30       	cpi	r18, 0x08	; 8
 142:	09 f7       	brne	.-62     	; 0x106 <UART_ReceiveString+0xe>
      {
         if (counter - STRING_PREV_CHAR != STRING_COUNTER_START)
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	f1 f2       	breq	.-68     	; 0x104 <UART_ReceiveString+0xc>
         {
            counter -= STRING_RETURN_TO_PREV_CHAR;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	89 0f       	add	r24, r25
 14c:	dc cf       	rjmp	.-72     	; 0x106 <UART_ReceiveString+0xe>
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
   {
      return E_UART_NULL_PTR;
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
 152:	86 e0       	ldi	r24, 0x06	; 6
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 154:	08 95       	ret

00000156 <main>:
/*- LOCAL MACROS
------------------------------------------*/
#define MAX_STRING_SIZE       (uint16_t)(200)

int main(void)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	c8 5c       	subi	r28, 0xC8	; 200
 160:	d1 09       	sbc	r29, r1
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
   uint8_t string[MAX_STRING_SIZE];
   UART_Init(UART_CH_0);
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 41 00 	call	0x82	; 0x82 <UART_Init>
   
   while(1)
   {
      UART_ReceiveString(UART_CH_0, string);
 172:	be 01       	movw	r22, r28
 174:	6f 5f       	subi	r22, 0xFF	; 255
 176:	7f 4f       	sbci	r23, 0xFF	; 255
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_ReceiveString>
      UART_TransmitString(UART_CH_0, string);
 17e:	be 01       	movw	r22, r28
 180:	6f 5f       	subi	r22, 0xFF	; 255
 182:	7f 4f       	sbci	r23, 0xFF	; 255
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 65 00 	call	0xca	; 0xca <UART_TransmitString>
 18a:	f3 cf       	rjmp	.-26     	; 0x172 <main+0x1c>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
