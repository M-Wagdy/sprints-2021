
SmallOSTestAPP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000014c0  00001554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b0  00800078  00800078  0000156c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eb9  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d72  00000000  00000000  00003779  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001753  00000000  00000000  000044eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab0  00000000  00000000  00005c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c3d  00000000  00000000  000066f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002465  00000000  00000000  0000732d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00009792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_1>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_2>
       c:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_3>
      10:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_4>
      14:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_5>
      18:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_6>
      1c:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_7>
      20:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_8>
      24:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_9>
      28:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_10>
      2c:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_11>
      30:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_12>
      34:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_13>
      38:	0c 94 33 03 	jmp	0x666	; 0x666 <__vector_14>
      3c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__vector_15>
      40:	0c 94 85 03 	jmp	0x70a	; 0x70a <__vector_16>
      44:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__vector_17>
      48:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__vector_18>
      4c:	0c 94 00 04 	jmp	0x800	; 0x800 <__vector_19>
      50:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_20>
      54:	f6 04       	cpc	r15, r6
      56:	01 05       	cpc	r16, r1
      58:	0c 05       	cpc	r16, r12
      5a:	17 05       	cpc	r17, r7
      5c:	22 05       	cpc	r18, r2
      5e:	2d 05       	cpc	r18, r13
      60:	38 05       	cpc	r19, r8

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e0 ec       	ldi	r30, 0xC0	; 192
      76:	f4 e1       	ldi	r31, 0x14	; 20
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a8 37       	cpi	r26, 0x78	; 120
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	21 e0       	ldi	r18, 0x01	; 1
      86:	a8 e7       	ldi	r26, 0x78	; 120
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a8 32       	cpi	r26, 0x28	; 40
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 aa 07 	call	0xf54	; 0xf54 <main>
      98:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <_exit>

0000009c <LED_Init>:
      return E_LED_DIO_ERROR;
   }
   
   /* return success message */
   return E_LED_SUCCESS;
}
      9c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
      a0:	81 30       	cpi	r24, 0x01	; 1
      a2:	01 f1       	breq	.+64     	; 0xe4 <LED_Init+0x48>
      a4:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <LED_CH_1_PIN>
      a8:	41 e0       	ldi	r20, 0x01	; 1
      aa:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <LED_CH_1_PORT>
      ae:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_SetPinDirection>
      b2:	81 11       	cpse	r24, r1
      b4:	19 c0       	rjmp	.+50     	; 0xe8 <LED_Init+0x4c>
      b6:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <LED_CH_2_PIN>
      ba:	41 e0       	ldi	r20, 0x01	; 1
      bc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <LED_CH_2_PORT>
      c0:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_SetPinDirection>
      c4:	81 11       	cpse	r24, r1
      c6:	12 c0       	rjmp	.+36     	; 0xec <LED_Init+0x50>
      c8:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <LED_CH_3_PIN>
      cc:	41 e0       	ldi	r20, 0x01	; 1
      ce:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <LED_CH_3_PORT>
      d2:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_SetPinDirection>
      d6:	81 11       	cpse	r24, r1
      d8:	0b c0       	rjmp	.+22     	; 0xf0 <LED_Init+0x54>
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	08 95       	ret
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	08 95       	ret
      e8:	82 e0       	ldi	r24, 0x02	; 2
      ea:	08 95       	ret
      ec:	82 e0       	ldi	r24, 0x02	; 2
      ee:	08 95       	ret
      f0:	82 e0       	ldi	r24, 0x02	; 2
      f2:	08 95       	ret

000000f4 <LED_Toggle>:
* @return function error state.
*/
LED_ERROR_state_t LED_Toggle(uint8_t LED_ch)
{
   /* check if init function wasn't called before */
   if(NOT_INIT == gu8_IsLEDInit)
      f4:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__data_end>
      f8:	99 23       	and	r25, r25
      fa:	d1 f0       	breq	.+52     	; 0x130 <LED_Toggle+0x3c>
   
   uint8_t u8_ChPort;
   uint8_t u8_ChPin;
   
   /* set the required port and pin to the LED */
   switch(LED_ch)
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	49 f0       	breq	.+18     	; 0x112 <LED_Toggle+0x1e>
     100:	83 30       	cpi	r24, 0x03	; 3
     102:	61 f0       	breq	.+24     	; 0x11c <LED_Toggle+0x28>
     104:	81 30       	cpi	r24, 0x01	; 1
     106:	b1 f4       	brne	.+44     	; 0x134 <LED_Toggle+0x40>
   {
      #ifdef LED_CH_1
      case LED_CH_1:
         u8_ChPort = LED_CH_1_PORT;
     108:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <LED_CH_1_PORT>
         u8_ChPin = LED_CH_1_PIN;
     10c:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <LED_CH_1_PIN>
         break;
     110:	09 c0       	rjmp	.+18     	; 0x124 <LED_Toggle+0x30>
      #endif
      #ifdef LED_CH_2
      case LED_CH_2:
         u8_ChPort = LED_CH_2_PORT;
     112:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <LED_CH_2_PORT>
         u8_ChPin = LED_CH_2_PIN;
     116:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <LED_CH_2_PIN>
         break;
     11a:	04 c0       	rjmp	.+8      	; 0x124 <LED_Toggle+0x30>
      #endif
      #ifdef LED_CH_3
      case LED_CH_3:
         u8_ChPort = LED_CH_3_PORT;
     11c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <LED_CH_3_PORT>
         u8_ChPin = LED_CH_3_PIN;
     120:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <LED_CH_3_PIN>
   }
   
   DIO_ERROR_state_t DIOErrorState;
   
   /* toggle LED pin */
   DIOErrorState = DIO_TogglePin(u8_ChPort, u8_ChPin);
     124:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_TogglePin>
   
   /* make sure DIO function was successful */
   if(E_DIO_SUCCESS != DIOErrorState)
     128:	88 23       	and	r24, r24
     12a:	31 f0       	breq	.+12     	; 0x138 <LED_Toggle+0x44>
   {
      return E_LED_DIO_ERROR;
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	08 95       	ret
LED_ERROR_state_t LED_Toggle(uint8_t LED_ch)
{
   /* check if init function wasn't called before */
   if(NOT_INIT == gu8_IsLEDInit)
   {
      return E_LED_NOT_INIT;
     130:	84 e0       	ldi	r24, 0x04	; 4
     132:	08 95       	ret
         u8_ChPort = LED_CH_3_PORT;
         u8_ChPin = LED_CH_3_PIN;
         break;
      #endif
      default:
         return E_LED_INVALID_CH_NO;
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	08 95       	ret
   {
      return E_LED_DIO_ERROR;
   }
   
   /* return success message */
   return E_LED_SUCCESS;
     138:	80 e0       	ldi	r24, 0x00	; 0
}
     13a:	08 95       	ret

0000013c <Interrupt_Install>:
*/
void Interrupt_Install(uint8_t Vector_No, Ptr_VoidFuncVoid_t Callback)
{
   /* Validate Before Changing ISR Vector Table */
	if( 
      (NULL_PTR == aptr_OldVectors[Vector_No]) && (NULL_PTR != Callback) && 
     13c:	28 2f       	mov	r18, r24
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	f9 01       	movw	r30, r18
     142:	ee 0f       	add	r30, r30
     144:	ff 1f       	adc	r31, r31
     146:	e7 58       	subi	r30, 0x87	; 135
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	40 81       	ld	r20, Z
     14c:	51 81       	ldd	r21, Z+1	; 0x01
* @param [in]  Callback    -  New Callback Function of ISR.
*/
void Interrupt_Install(uint8_t Vector_No, Ptr_VoidFuncVoid_t Callback)
{
   /* Validate Before Changing ISR Vector Table */
	if( 
     14e:	45 2b       	or	r20, r21
     150:	99 f4       	brne	.+38     	; 0x178 <Interrupt_Install+0x3c>
      (NULL_PTR == aptr_OldVectors[Vector_No]) && (NULL_PTR != Callback) && 
     152:	61 15       	cp	r22, r1
     154:	71 05       	cpc	r23, r1
     156:	81 f0       	breq	.+32     	; 0x178 <Interrupt_Install+0x3c>
      (Vector_No >= IRQ_MIN_VECTOR_NUMBER) &&  (Vector_No <= IRQ_MAX_VECTOR_NUMBER)
     158:	84 31       	cpi	r24, 0x14	; 20
     15a:	70 f4       	brcc	.+28     	; 0x178 <Interrupt_Install+0x3c>
     )
	{
      /* Store The Current ISR in a History Table. */
		aptr_OldVectors[Vector_No] = aptr_ISRAddress[Vector_No];
     15c:	22 0f       	add	r18, r18
     15e:	33 1f       	adc	r19, r19
     160:	f9 01       	movw	r30, r18
     162:	e1 50       	subi	r30, 0x01	; 1
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	80 81       	ld	r24, Z
     168:	91 81       	ldd	r25, Z+1	; 0x01
     16a:	d9 01       	movw	r26, r18
     16c:	a7 58       	subi	r26, 0x87	; 135
     16e:	bf 4f       	sbci	r27, 0xFF	; 255
     170:	8d 93       	st	X+, r24
     172:	9c 93       	st	X, r25
      /* Set the new Callback in the ISR. */
      aptr_ISRAddress[Vector_No] = Callback;
     174:	71 83       	std	Z+1, r23	; 0x01
     176:	60 83       	st	Z, r22
     178:	08 95       	ret

0000017a <DIO_SetPinDirection>:
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
     17a:	68 30       	cpi	r22, 0x08	; 8
     17c:	80 f5       	brcc	.+96     	; 0x1de <DIO_SetPinDirection+0x64>
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	79 f0       	breq	.+30     	; 0x1a0 <DIO_SetPinDirection+0x26>
     182:	28 f0       	brcs	.+10     	; 0x18e <DIO_SetPinDirection+0x14>
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	31 f0       	breq	.+12     	; 0x194 <DIO_SetPinDirection+0x1a>
     188:	83 30       	cpi	r24, 0x03	; 3
     18a:	39 f0       	breq	.+14     	; 0x19a <DIO_SetPinDirection+0x20>
     18c:	2a c0       	rjmp	.+84     	; 0x1e2 <DIO_SetPinDirection+0x68>
     18e:	ea e3       	ldi	r30, 0x3A	; 58
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	08 c0       	rjmp	.+16     	; 0x1a4 <DIO_SetPinDirection+0x2a>
     194:	e4 e3       	ldi	r30, 0x34	; 52
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	05 c0       	rjmp	.+10     	; 0x1a4 <DIO_SetPinDirection+0x2a>
     19a:	e1 e3       	ldi	r30, 0x31	; 49
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPinDirection+0x2a>
     1a0:	e7 e3       	ldi	r30, 0x37	; 55
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	41 30       	cpi	r20, 0x01	; 1
     1a6:	61 f4       	brne	.+24     	; 0x1c0 <DIO_SetPinDirection+0x46>
     1a8:	20 81       	ld	r18, Z
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_SetPinDirection+0x3a>
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	6a 95       	dec	r22
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_SetPinDirection+0x36>
     1b8:	82 2b       	or	r24, r18
     1ba:	80 83       	st	Z, r24
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	08 95       	ret
     1c0:	41 11       	cpse	r20, r1
     1c2:	11 c0       	rjmp	.+34     	; 0x1e6 <DIO_SetPinDirection+0x6c>
     1c4:	20 81       	ld	r18, Z
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_SetPinDirection+0x56>
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	6a 95       	dec	r22
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_SetPinDirection+0x52>
     1d4:	80 95       	com	r24
     1d6:	82 23       	and	r24, r18
     1d8:	80 83       	st	Z, r24
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	08 95       	ret
     1de:	82 e0       	ldi	r24, 0x02	; 2
     1e0:	08 95       	ret
     1e2:	83 e0       	ldi	r24, 0x03	; 3
     1e4:	08 95       	ret
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	08 95       	ret

000001ea <DIO_TogglePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
     1ea:	68 30       	cpi	r22, 0x08	; 8
     1ec:	f8 f4       	brcc	.+62     	; 0x22c <DIO_TogglePin+0x42>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the stat pointer according to the required port. */
   switch(port)
     1ee:	81 30       	cpi	r24, 0x01	; 1
     1f0:	79 f0       	breq	.+30     	; 0x210 <DIO_TogglePin+0x26>
     1f2:	28 f0       	brcs	.+10     	; 0x1fe <DIO_TogglePin+0x14>
     1f4:	82 30       	cpi	r24, 0x02	; 2
     1f6:	31 f0       	breq	.+12     	; 0x204 <DIO_TogglePin+0x1a>
     1f8:	83 30       	cpi	r24, 0x03	; 3
     1fa:	39 f0       	breq	.+14     	; 0x20a <DIO_TogglePin+0x20>
     1fc:	19 c0       	rjmp	.+50     	; 0x230 <DIO_TogglePin+0x46>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
     1fe:	eb e3       	ldi	r30, 0x3B	; 59
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	08 c0       	rjmp	.+16     	; 0x214 <DIO_TogglePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
     204:	e5 e3       	ldi	r30, 0x35	; 53
     206:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     208:	05 c0       	rjmp	.+10     	; 0x214 <DIO_TogglePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
     20a:	e2 e3       	ldi	r30, 0x32	; 50
     20c:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_TogglePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
     210:	e8 e3       	ldi	r30, 0x38	; 56
     212:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
     214:	20 81       	ld	r18, Z
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_TogglePin+0x36>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	6a 95       	dec	r22
     222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_TogglePin+0x32>
     224:	82 27       	eor	r24, r18
     226:	80 83       	st	Z, r24
   
   /* return success message. */
   return E_DIO_SUCCESS;
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	08 95       	ret
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
     22c:	82 e0       	ldi	r24, 0x02	; 2
     22e:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
     230:	83 e0       	ldi	r24, 0x03	; 3
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
   
   /* return success message. */
   return E_DIO_SUCCESS;
     232:	08 95       	ret

00000234 <INTERRUPTS_Enable>:
/**
* @brief: This function disables global interrupts.
*/
void INTERRUPTS_Disable(void)
{
   CLEAR_BIT(SREG, BIT7);
     234:	8f b7       	in	r24, 0x3f	; 63
     236:	80 68       	ori	r24, 0x80	; 128
     238:	8f bf       	out	0x3f, r24	; 63
     23a:	08 95       	ret

0000023c <__vector_1>:

/**
* @brief: INT0 ISR.
*/
ISR(INT0_IRQ)
{
     23c:	1f 92       	push	r1
     23e:	0f 92       	push	r0
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	0f 92       	push	r0
     244:	11 24       	eor	r1, r1
     246:	2f 93       	push	r18
     248:	3f 93       	push	r19
     24a:	4f 93       	push	r20
     24c:	5f 93       	push	r21
     24e:	6f 93       	push	r22
     250:	7f 93       	push	r23
     252:	8f 93       	push	r24
     254:	9f 93       	push	r25
     256:	af 93       	push	r26
     258:	bf 93       	push	r27
     25a:	ef 93       	push	r30
     25c:	ff 93       	push	r31
   if(aptr_ISRAddress[INT0_VECTOR_NUMBER] != NULL_PTR)
     25e:	e0 91 ff 00 	lds	r30, 0x00FF	; 0x8000ff <aptr_ISRAddress>
     262:	f0 91 00 01 	lds	r31, 0x0100	; 0x800100 <aptr_ISRAddress+0x1>
     266:	30 97       	sbiw	r30, 0x00	; 0
     268:	09 f0       	breq	.+2      	; 0x26c <__vector_1+0x30>
   {
      aptr_ISRAddress[INT0_VECTOR_NUMBER]();
     26a:	09 95       	icall
   }
}
     26c:	ff 91       	pop	r31
     26e:	ef 91       	pop	r30
     270:	bf 91       	pop	r27
     272:	af 91       	pop	r26
     274:	9f 91       	pop	r25
     276:	8f 91       	pop	r24
     278:	7f 91       	pop	r23
     27a:	6f 91       	pop	r22
     27c:	5f 91       	pop	r21
     27e:	4f 91       	pop	r20
     280:	3f 91       	pop	r19
     282:	2f 91       	pop	r18
     284:	0f 90       	pop	r0
     286:	0f be       	out	0x3f, r0	; 63
     288:	0f 90       	pop	r0
     28a:	1f 90       	pop	r1
     28c:	18 95       	reti

0000028e <__vector_2>:

/**
* @brief: INT1 ISR.
*/
ISR(INT1_IRQ)
{
     28e:	1f 92       	push	r1
     290:	0f 92       	push	r0
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	2f 93       	push	r18
     29a:	3f 93       	push	r19
     29c:	4f 93       	push	r20
     29e:	5f 93       	push	r21
     2a0:	6f 93       	push	r22
     2a2:	7f 93       	push	r23
     2a4:	8f 93       	push	r24
     2a6:	9f 93       	push	r25
     2a8:	af 93       	push	r26
     2aa:	bf 93       	push	r27
     2ac:	ef 93       	push	r30
     2ae:	ff 93       	push	r31
   if(aptr_ISRAddress[INT1_VECTOR_NUMBER] != NULL_PTR)
     2b0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <aptr_ISRAddress+0x2>
     2b4:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <aptr_ISRAddress+0x3>
     2b8:	30 97       	sbiw	r30, 0x00	; 0
     2ba:	09 f0       	breq	.+2      	; 0x2be <__vector_2+0x30>
   {
      aptr_ISRAddress[INT1_VECTOR_NUMBER]();
     2bc:	09 95       	icall
   }
}
     2be:	ff 91       	pop	r31
     2c0:	ef 91       	pop	r30
     2c2:	bf 91       	pop	r27
     2c4:	af 91       	pop	r26
     2c6:	9f 91       	pop	r25
     2c8:	8f 91       	pop	r24
     2ca:	7f 91       	pop	r23
     2cc:	6f 91       	pop	r22
     2ce:	5f 91       	pop	r21
     2d0:	4f 91       	pop	r20
     2d2:	3f 91       	pop	r19
     2d4:	2f 91       	pop	r18
     2d6:	0f 90       	pop	r0
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	0f 90       	pop	r0
     2dc:	1f 90       	pop	r1
     2de:	18 95       	reti

000002e0 <__vector_3>:

/**
* @brief: INT2 ISR.
*/
ISR(INT2_IRQ)
{
     2e0:	1f 92       	push	r1
     2e2:	0f 92       	push	r0
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
     2ea:	2f 93       	push	r18
     2ec:	3f 93       	push	r19
     2ee:	4f 93       	push	r20
     2f0:	5f 93       	push	r21
     2f2:	6f 93       	push	r22
     2f4:	7f 93       	push	r23
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
     2fa:	af 93       	push	r26
     2fc:	bf 93       	push	r27
     2fe:	ef 93       	push	r30
     300:	ff 93       	push	r31
   if(aptr_ISRAddress[INT2_VECTOR_NUMBER] != NULL_PTR)
     302:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <aptr_ISRAddress+0x4>
     306:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <aptr_ISRAddress+0x5>
     30a:	30 97       	sbiw	r30, 0x00	; 0
     30c:	09 f0       	breq	.+2      	; 0x310 <__vector_3+0x30>
   {
      aptr_ISRAddress[INT2_VECTOR_NUMBER]();
     30e:	09 95       	icall
   }
}
     310:	ff 91       	pop	r31
     312:	ef 91       	pop	r30
     314:	bf 91       	pop	r27
     316:	af 91       	pop	r26
     318:	9f 91       	pop	r25
     31a:	8f 91       	pop	r24
     31c:	7f 91       	pop	r23
     31e:	6f 91       	pop	r22
     320:	5f 91       	pop	r21
     322:	4f 91       	pop	r20
     324:	3f 91       	pop	r19
     326:	2f 91       	pop	r18
     328:	0f 90       	pop	r0
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	0f 90       	pop	r0
     32e:	1f 90       	pop	r1
     330:	18 95       	reti

00000332 <__vector_4>:

/**
* @brief: TIMER2_COMP ISR.
*/
ISR(TIMER2_COMP_IRQ)
{
     332:	1f 92       	push	r1
     334:	0f 92       	push	r0
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	0f 92       	push	r0
     33a:	11 24       	eor	r1, r1
     33c:	2f 93       	push	r18
     33e:	3f 93       	push	r19
     340:	4f 93       	push	r20
     342:	5f 93       	push	r21
     344:	6f 93       	push	r22
     346:	7f 93       	push	r23
     348:	8f 93       	push	r24
     34a:	9f 93       	push	r25
     34c:	af 93       	push	r26
     34e:	bf 93       	push	r27
     350:	ef 93       	push	r30
     352:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER2_COMP_VECTOR_NUMBER] != NULL_PTR)
     354:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <aptr_ISRAddress+0x6>
     358:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <aptr_ISRAddress+0x7>
     35c:	30 97       	sbiw	r30, 0x00	; 0
     35e:	09 f0       	breq	.+2      	; 0x362 <__vector_4+0x30>
   {
      aptr_ISRAddress[TIMER2_COMP_VECTOR_NUMBER]();
     360:	09 95       	icall
   }
}
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	bf 91       	pop	r27
     368:	af 91       	pop	r26
     36a:	9f 91       	pop	r25
     36c:	8f 91       	pop	r24
     36e:	7f 91       	pop	r23
     370:	6f 91       	pop	r22
     372:	5f 91       	pop	r21
     374:	4f 91       	pop	r20
     376:	3f 91       	pop	r19
     378:	2f 91       	pop	r18
     37a:	0f 90       	pop	r0
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	0f 90       	pop	r0
     380:	1f 90       	pop	r1
     382:	18 95       	reti

00000384 <__vector_5>:

/**
* @brief: TIMER2_OVF ISR.
*/
ISR(TIMER2_OVF_IRQ)
{
     384:	1f 92       	push	r1
     386:	0f 92       	push	r0
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	0f 92       	push	r0
     38c:	11 24       	eor	r1, r1
     38e:	2f 93       	push	r18
     390:	3f 93       	push	r19
     392:	4f 93       	push	r20
     394:	5f 93       	push	r21
     396:	6f 93       	push	r22
     398:	7f 93       	push	r23
     39a:	8f 93       	push	r24
     39c:	9f 93       	push	r25
     39e:	af 93       	push	r26
     3a0:	bf 93       	push	r27
     3a2:	ef 93       	push	r30
     3a4:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER2_OVF_VECTOR_NUMBER] != NULL_PTR)
     3a6:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <aptr_ISRAddress+0x8>
     3aa:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <aptr_ISRAddress+0x9>
     3ae:	30 97       	sbiw	r30, 0x00	; 0
     3b0:	09 f0       	breq	.+2      	; 0x3b4 <__vector_5+0x30>
   {
      aptr_ISRAddress[TIMER2_OVF_VECTOR_NUMBER]();
     3b2:	09 95       	icall
   }
}
     3b4:	ff 91       	pop	r31
     3b6:	ef 91       	pop	r30
     3b8:	bf 91       	pop	r27
     3ba:	af 91       	pop	r26
     3bc:	9f 91       	pop	r25
     3be:	8f 91       	pop	r24
     3c0:	7f 91       	pop	r23
     3c2:	6f 91       	pop	r22
     3c4:	5f 91       	pop	r21
     3c6:	4f 91       	pop	r20
     3c8:	3f 91       	pop	r19
     3ca:	2f 91       	pop	r18
     3cc:	0f 90       	pop	r0
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0f 90       	pop	r0
     3d2:	1f 90       	pop	r1
     3d4:	18 95       	reti

000003d6 <__vector_6>:

/**
* @brief: TIMER1_CAPT ISR.
*/
ISR(TIMER1_CAPT_IRQ)
{
     3d6:	1f 92       	push	r1
     3d8:	0f 92       	push	r0
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	0f 92       	push	r0
     3de:	11 24       	eor	r1, r1
     3e0:	2f 93       	push	r18
     3e2:	3f 93       	push	r19
     3e4:	4f 93       	push	r20
     3e6:	5f 93       	push	r21
     3e8:	6f 93       	push	r22
     3ea:	7f 93       	push	r23
     3ec:	8f 93       	push	r24
     3ee:	9f 93       	push	r25
     3f0:	af 93       	push	r26
     3f2:	bf 93       	push	r27
     3f4:	ef 93       	push	r30
     3f6:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_CAPT_VECTOR_NUMBER] != NULL_PTR)
     3f8:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <aptr_ISRAddress+0xa>
     3fc:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <aptr_ISRAddress+0xb>
     400:	30 97       	sbiw	r30, 0x00	; 0
     402:	09 f0       	breq	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
   {
      aptr_ISRAddress[TIMER1_CAPT_VECTOR_NUMBER]();
     404:	09 95       	icall
   }
}
     406:	ff 91       	pop	r31
     408:	ef 91       	pop	r30
     40a:	bf 91       	pop	r27
     40c:	af 91       	pop	r26
     40e:	9f 91       	pop	r25
     410:	8f 91       	pop	r24
     412:	7f 91       	pop	r23
     414:	6f 91       	pop	r22
     416:	5f 91       	pop	r21
     418:	4f 91       	pop	r20
     41a:	3f 91       	pop	r19
     41c:	2f 91       	pop	r18
     41e:	0f 90       	pop	r0
     420:	0f be       	out	0x3f, r0	; 63
     422:	0f 90       	pop	r0
     424:	1f 90       	pop	r1
     426:	18 95       	reti

00000428 <__vector_7>:

/**
* @brief: TIMER1_COMPA ISR.
*/
ISR(TIMER1_COMPA_IRQ)
{
     428:	1f 92       	push	r1
     42a:	0f 92       	push	r0
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	0f 92       	push	r0
     430:	11 24       	eor	r1, r1
     432:	2f 93       	push	r18
     434:	3f 93       	push	r19
     436:	4f 93       	push	r20
     438:	5f 93       	push	r21
     43a:	6f 93       	push	r22
     43c:	7f 93       	push	r23
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
     442:	af 93       	push	r26
     444:	bf 93       	push	r27
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_COMPA_VECTOR_NUMBER] != NULL_PTR)
     44a:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <aptr_ISRAddress+0xc>
     44e:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <aptr_ISRAddress+0xd>
     452:	30 97       	sbiw	r30, 0x00	; 0
     454:	09 f0       	breq	.+2      	; 0x458 <__vector_7+0x30>
   {
      aptr_ISRAddress[TIMER1_COMPA_VECTOR_NUMBER]();
     456:	09 95       	icall
   }
}
     458:	ff 91       	pop	r31
     45a:	ef 91       	pop	r30
     45c:	bf 91       	pop	r27
     45e:	af 91       	pop	r26
     460:	9f 91       	pop	r25
     462:	8f 91       	pop	r24
     464:	7f 91       	pop	r23
     466:	6f 91       	pop	r22
     468:	5f 91       	pop	r21
     46a:	4f 91       	pop	r20
     46c:	3f 91       	pop	r19
     46e:	2f 91       	pop	r18
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <__vector_8>:

/**
* @brief: TIMER1_COMPB ISR.
*/
ISR(TIMER1_COMPB_IRQ)
{
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	2f 93       	push	r18
     486:	3f 93       	push	r19
     488:	4f 93       	push	r20
     48a:	5f 93       	push	r21
     48c:	6f 93       	push	r22
     48e:	7f 93       	push	r23
     490:	8f 93       	push	r24
     492:	9f 93       	push	r25
     494:	af 93       	push	r26
     496:	bf 93       	push	r27
     498:	ef 93       	push	r30
     49a:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_COMPB_VECTOR_NUMBER] != NULL_PTR)
     49c:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <aptr_ISRAddress+0xe>
     4a0:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <aptr_ISRAddress+0xf>
     4a4:	30 97       	sbiw	r30, 0x00	; 0
     4a6:	09 f0       	breq	.+2      	; 0x4aa <__vector_8+0x30>
   {
      aptr_ISRAddress[TIMER1_COMPB_VECTOR_NUMBER]();
     4a8:	09 95       	icall
   }
}
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	bf 91       	pop	r27
     4b0:	af 91       	pop	r26
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	7f 91       	pop	r23
     4b8:	6f 91       	pop	r22
     4ba:	5f 91       	pop	r21
     4bc:	4f 91       	pop	r20
     4be:	3f 91       	pop	r19
     4c0:	2f 91       	pop	r18
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <__vector_9>:

/**
* @brief: TIMER1_OVF ISR.
*/
ISR(TIMER1_OVF_IRQ)
{
     4cc:	1f 92       	push	r1
     4ce:	0f 92       	push	r0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	2f 93       	push	r18
     4d8:	3f 93       	push	r19
     4da:	4f 93       	push	r20
     4dc:	5f 93       	push	r21
     4de:	6f 93       	push	r22
     4e0:	7f 93       	push	r23
     4e2:	8f 93       	push	r24
     4e4:	9f 93       	push	r25
     4e6:	af 93       	push	r26
     4e8:	bf 93       	push	r27
     4ea:	ef 93       	push	r30
     4ec:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_OVF_VECTOR_NUMBER] != NULL_PTR)
     4ee:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <aptr_ISRAddress+0x10>
     4f2:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <aptr_ISRAddress+0x11>
     4f6:	30 97       	sbiw	r30, 0x00	; 0
     4f8:	09 f0       	breq	.+2      	; 0x4fc <__vector_9+0x30>
   {
      aptr_ISRAddress[TIMER1_OVF_VECTOR_NUMBER]();
     4fa:	09 95       	icall
   }
}
     4fc:	ff 91       	pop	r31
     4fe:	ef 91       	pop	r30
     500:	bf 91       	pop	r27
     502:	af 91       	pop	r26
     504:	9f 91       	pop	r25
     506:	8f 91       	pop	r24
     508:	7f 91       	pop	r23
     50a:	6f 91       	pop	r22
     50c:	5f 91       	pop	r21
     50e:	4f 91       	pop	r20
     510:	3f 91       	pop	r19
     512:	2f 91       	pop	r18
     514:	0f 90       	pop	r0
     516:	0f be       	out	0x3f, r0	; 63
     518:	0f 90       	pop	r0
     51a:	1f 90       	pop	r1
     51c:	18 95       	reti

0000051e <__vector_10>:

/**
* @brief: TIMER0_COMP ISR.
*/
ISR(TIMER0_COMP_IRQ)
{
     51e:	1f 92       	push	r1
     520:	0f 92       	push	r0
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	0f 92       	push	r0
     526:	11 24       	eor	r1, r1
     528:	2f 93       	push	r18
     52a:	3f 93       	push	r19
     52c:	4f 93       	push	r20
     52e:	5f 93       	push	r21
     530:	6f 93       	push	r22
     532:	7f 93       	push	r23
     534:	8f 93       	push	r24
     536:	9f 93       	push	r25
     538:	af 93       	push	r26
     53a:	bf 93       	push	r27
     53c:	ef 93       	push	r30
     53e:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER0_COMP_VECTOR_NUMBER] != NULL_PTR)
     540:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <aptr_ISRAddress+0x12>
     544:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <aptr_ISRAddress+0x13>
     548:	30 97       	sbiw	r30, 0x00	; 0
     54a:	09 f0       	breq	.+2      	; 0x54e <__vector_10+0x30>
   {
      aptr_ISRAddress[TIMER0_COMP_VECTOR_NUMBER]();
     54c:	09 95       	icall
   }
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0f be       	out	0x3f, r0	; 63
     56a:	0f 90       	pop	r0
     56c:	1f 90       	pop	r1
     56e:	18 95       	reti

00000570 <__vector_11>:

/**
* @brief: TIMER0_OVF ISR.
*/
ISR(TIMER0_OVF_IRQ)
{
     570:	1f 92       	push	r1
     572:	0f 92       	push	r0
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	0f 92       	push	r0
     578:	11 24       	eor	r1, r1
     57a:	2f 93       	push	r18
     57c:	3f 93       	push	r19
     57e:	4f 93       	push	r20
     580:	5f 93       	push	r21
     582:	6f 93       	push	r22
     584:	7f 93       	push	r23
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
     58a:	af 93       	push	r26
     58c:	bf 93       	push	r27
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER0_OVF_VECTOR_NUMBER] != NULL_PTR)
     592:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <aptr_ISRAddress+0x14>
     596:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <aptr_ISRAddress+0x15>
     59a:	30 97       	sbiw	r30, 0x00	; 0
     59c:	09 f0       	breq	.+2      	; 0x5a0 <__vector_11+0x30>
   {
      aptr_ISRAddress[TIMER0_OVF_VECTOR_NUMBER]();
     59e:	09 95       	icall
   }
}
     5a0:	ff 91       	pop	r31
     5a2:	ef 91       	pop	r30
     5a4:	bf 91       	pop	r27
     5a6:	af 91       	pop	r26
     5a8:	9f 91       	pop	r25
     5aa:	8f 91       	pop	r24
     5ac:	7f 91       	pop	r23
     5ae:	6f 91       	pop	r22
     5b0:	5f 91       	pop	r21
     5b2:	4f 91       	pop	r20
     5b4:	3f 91       	pop	r19
     5b6:	2f 91       	pop	r18
     5b8:	0f 90       	pop	r0
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	0f 90       	pop	r0
     5be:	1f 90       	pop	r1
     5c0:	18 95       	reti

000005c2 <__vector_12>:

/**
* @brief: SPI_STC ISR.
*/
ISR(SPI_STC_IRQ)
{
     5c2:	1f 92       	push	r1
     5c4:	0f 92       	push	r0
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	0f 92       	push	r0
     5ca:	11 24       	eor	r1, r1
     5cc:	2f 93       	push	r18
     5ce:	3f 93       	push	r19
     5d0:	4f 93       	push	r20
     5d2:	5f 93       	push	r21
     5d4:	6f 93       	push	r22
     5d6:	7f 93       	push	r23
     5d8:	8f 93       	push	r24
     5da:	9f 93       	push	r25
     5dc:	af 93       	push	r26
     5de:	bf 93       	push	r27
     5e0:	ef 93       	push	r30
     5e2:	ff 93       	push	r31
   if(aptr_ISRAddress[SPI_STC_VECTOR_NUMBER] != NULL_PTR)
     5e4:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <aptr_ISRAddress+0x16>
     5e8:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <aptr_ISRAddress+0x17>
     5ec:	30 97       	sbiw	r30, 0x00	; 0
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <__vector_12+0x30>
   {
      aptr_ISRAddress[SPI_STC_VECTOR_NUMBER]();
     5f0:	09 95       	icall
   }
}
     5f2:	ff 91       	pop	r31
     5f4:	ef 91       	pop	r30
     5f6:	bf 91       	pop	r27
     5f8:	af 91       	pop	r26
     5fa:	9f 91       	pop	r25
     5fc:	8f 91       	pop	r24
     5fe:	7f 91       	pop	r23
     600:	6f 91       	pop	r22
     602:	5f 91       	pop	r21
     604:	4f 91       	pop	r20
     606:	3f 91       	pop	r19
     608:	2f 91       	pop	r18
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	0f 90       	pop	r0
     610:	1f 90       	pop	r1
     612:	18 95       	reti

00000614 <__vector_13>:

/**
* @brief: USART_RXC ISR.
*/
ISR(USART_RXC_IRQ)
{
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	2f 93       	push	r18
     620:	3f 93       	push	r19
     622:	4f 93       	push	r20
     624:	5f 93       	push	r21
     626:	6f 93       	push	r22
     628:	7f 93       	push	r23
     62a:	8f 93       	push	r24
     62c:	9f 93       	push	r25
     62e:	af 93       	push	r26
     630:	bf 93       	push	r27
     632:	ef 93       	push	r30
     634:	ff 93       	push	r31
   if(aptr_ISRAddress[USART_RXC_VECTOR_NUMBER] != NULL_PTR)
     636:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <aptr_ISRAddress+0x18>
     63a:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <aptr_ISRAddress+0x19>
     63e:	30 97       	sbiw	r30, 0x00	; 0
     640:	09 f0       	breq	.+2      	; 0x644 <__vector_13+0x30>
   {
      aptr_ISRAddress[USART_RXC_VECTOR_NUMBER]();
     642:	09 95       	icall
   }
}
     644:	ff 91       	pop	r31
     646:	ef 91       	pop	r30
     648:	bf 91       	pop	r27
     64a:	af 91       	pop	r26
     64c:	9f 91       	pop	r25
     64e:	8f 91       	pop	r24
     650:	7f 91       	pop	r23
     652:	6f 91       	pop	r22
     654:	5f 91       	pop	r21
     656:	4f 91       	pop	r20
     658:	3f 91       	pop	r19
     65a:	2f 91       	pop	r18
     65c:	0f 90       	pop	r0
     65e:	0f be       	out	0x3f, r0	; 63
     660:	0f 90       	pop	r0
     662:	1f 90       	pop	r1
     664:	18 95       	reti

00000666 <__vector_14>:

/**
* @brief: USART_UDRE ISR.
*/
ISR(USART_UDRE_IRQ)
{
     666:	1f 92       	push	r1
     668:	0f 92       	push	r0
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	0f 92       	push	r0
     66e:	11 24       	eor	r1, r1
     670:	2f 93       	push	r18
     672:	3f 93       	push	r19
     674:	4f 93       	push	r20
     676:	5f 93       	push	r21
     678:	6f 93       	push	r22
     67a:	7f 93       	push	r23
     67c:	8f 93       	push	r24
     67e:	9f 93       	push	r25
     680:	af 93       	push	r26
     682:	bf 93       	push	r27
     684:	ef 93       	push	r30
     686:	ff 93       	push	r31
   if(aptr_ISRAddress[USART_UDRE_VECTOR_NUMBER] != NULL_PTR)
     688:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <aptr_ISRAddress+0x1a>
     68c:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <aptr_ISRAddress+0x1b>
     690:	30 97       	sbiw	r30, 0x00	; 0
     692:	09 f0       	breq	.+2      	; 0x696 <__vector_14+0x30>
   {
      aptr_ISRAddress[USART_UDRE_VECTOR_NUMBER]();
     694:	09 95       	icall
   }
}
     696:	ff 91       	pop	r31
     698:	ef 91       	pop	r30
     69a:	bf 91       	pop	r27
     69c:	af 91       	pop	r26
     69e:	9f 91       	pop	r25
     6a0:	8f 91       	pop	r24
     6a2:	7f 91       	pop	r23
     6a4:	6f 91       	pop	r22
     6a6:	5f 91       	pop	r21
     6a8:	4f 91       	pop	r20
     6aa:	3f 91       	pop	r19
     6ac:	2f 91       	pop	r18
     6ae:	0f 90       	pop	r0
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	0f 90       	pop	r0
     6b4:	1f 90       	pop	r1
     6b6:	18 95       	reti

000006b8 <__vector_15>:

/**
* @brief: USART_TXC ISR.
*/
ISR(USART_TXC_IRQ)
{
     6b8:	1f 92       	push	r1
     6ba:	0f 92       	push	r0
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	0f 92       	push	r0
     6c0:	11 24       	eor	r1, r1
     6c2:	2f 93       	push	r18
     6c4:	3f 93       	push	r19
     6c6:	4f 93       	push	r20
     6c8:	5f 93       	push	r21
     6ca:	6f 93       	push	r22
     6cc:	7f 93       	push	r23
     6ce:	8f 93       	push	r24
     6d0:	9f 93       	push	r25
     6d2:	af 93       	push	r26
     6d4:	bf 93       	push	r27
     6d6:	ef 93       	push	r30
     6d8:	ff 93       	push	r31
   if(aptr_ISRAddress[USART_TXC_VECTOR_NUMBER] != NULL_PTR)
     6da:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <aptr_ISRAddress+0x1c>
     6de:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <aptr_ISRAddress+0x1d>
     6e2:	30 97       	sbiw	r30, 0x00	; 0
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <__vector_15+0x30>
   {
      aptr_ISRAddress[USART_TXC_VECTOR_NUMBER]();
     6e6:	09 95       	icall
   }
}
     6e8:	ff 91       	pop	r31
     6ea:	ef 91       	pop	r30
     6ec:	bf 91       	pop	r27
     6ee:	af 91       	pop	r26
     6f0:	9f 91       	pop	r25
     6f2:	8f 91       	pop	r24
     6f4:	7f 91       	pop	r23
     6f6:	6f 91       	pop	r22
     6f8:	5f 91       	pop	r21
     6fa:	4f 91       	pop	r20
     6fc:	3f 91       	pop	r19
     6fe:	2f 91       	pop	r18
     700:	0f 90       	pop	r0
     702:	0f be       	out	0x3f, r0	; 63
     704:	0f 90       	pop	r0
     706:	1f 90       	pop	r1
     708:	18 95       	reti

0000070a <__vector_16>:

/**
* @brief: ADC ISR.
*/
ISR(ADC_IRQ)
{
     70a:	1f 92       	push	r1
     70c:	0f 92       	push	r0
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	0f 92       	push	r0
     712:	11 24       	eor	r1, r1
     714:	2f 93       	push	r18
     716:	3f 93       	push	r19
     718:	4f 93       	push	r20
     71a:	5f 93       	push	r21
     71c:	6f 93       	push	r22
     71e:	7f 93       	push	r23
     720:	8f 93       	push	r24
     722:	9f 93       	push	r25
     724:	af 93       	push	r26
     726:	bf 93       	push	r27
     728:	ef 93       	push	r30
     72a:	ff 93       	push	r31
   if(aptr_ISRAddress[ADC_VECTOR_NUMBER] != NULL_PTR)
     72c:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <aptr_ISRAddress+0x1e>
     730:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <aptr_ISRAddress+0x1f>
     734:	30 97       	sbiw	r30, 0x00	; 0
     736:	09 f0       	breq	.+2      	; 0x73a <__vector_16+0x30>
   {
      aptr_ISRAddress[ADC_VECTOR_NUMBER]();
     738:	09 95       	icall
   }
}
     73a:	ff 91       	pop	r31
     73c:	ef 91       	pop	r30
     73e:	bf 91       	pop	r27
     740:	af 91       	pop	r26
     742:	9f 91       	pop	r25
     744:	8f 91       	pop	r24
     746:	7f 91       	pop	r23
     748:	6f 91       	pop	r22
     74a:	5f 91       	pop	r21
     74c:	4f 91       	pop	r20
     74e:	3f 91       	pop	r19
     750:	2f 91       	pop	r18
     752:	0f 90       	pop	r0
     754:	0f be       	out	0x3f, r0	; 63
     756:	0f 90       	pop	r0
     758:	1f 90       	pop	r1
     75a:	18 95       	reti

0000075c <__vector_17>:

/**
* @brief: EE_RDY ISR.
*/
ISR(EE_RDY_IRQ)
{
     75c:	1f 92       	push	r1
     75e:	0f 92       	push	r0
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	0f 92       	push	r0
     764:	11 24       	eor	r1, r1
     766:	2f 93       	push	r18
     768:	3f 93       	push	r19
     76a:	4f 93       	push	r20
     76c:	5f 93       	push	r21
     76e:	6f 93       	push	r22
     770:	7f 93       	push	r23
     772:	8f 93       	push	r24
     774:	9f 93       	push	r25
     776:	af 93       	push	r26
     778:	bf 93       	push	r27
     77a:	ef 93       	push	r30
     77c:	ff 93       	push	r31
   if(aptr_ISRAddress[EE_RDY_VECTOR_NUMBER] != NULL_PTR)
     77e:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <aptr_ISRAddress+0x20>
     782:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <aptr_ISRAddress+0x21>
     786:	30 97       	sbiw	r30, 0x00	; 0
     788:	09 f0       	breq	.+2      	; 0x78c <__vector_17+0x30>
   {
      aptr_ISRAddress[EE_RDY_VECTOR_NUMBER]();
     78a:	09 95       	icall
   }
}
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	0f 90       	pop	r0
     7aa:	1f 90       	pop	r1
     7ac:	18 95       	reti

000007ae <__vector_18>:

/**
* @brief: ANA_COMP ISR.
*/
ISR(ANA_COMP_IRQ)
{
     7ae:	1f 92       	push	r1
     7b0:	0f 92       	push	r0
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	0f 92       	push	r0
     7b6:	11 24       	eor	r1, r1
     7b8:	2f 93       	push	r18
     7ba:	3f 93       	push	r19
     7bc:	4f 93       	push	r20
     7be:	5f 93       	push	r21
     7c0:	6f 93       	push	r22
     7c2:	7f 93       	push	r23
     7c4:	8f 93       	push	r24
     7c6:	9f 93       	push	r25
     7c8:	af 93       	push	r26
     7ca:	bf 93       	push	r27
     7cc:	ef 93       	push	r30
     7ce:	ff 93       	push	r31
   if(aptr_ISRAddress[ANA_COMP_VECTOR_NUMBER] != NULL_PTR)
     7d0:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <aptr_ISRAddress+0x22>
     7d4:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <aptr_ISRAddress+0x23>
     7d8:	30 97       	sbiw	r30, 0x00	; 0
     7da:	09 f0       	breq	.+2      	; 0x7de <__vector_18+0x30>
   {
      aptr_ISRAddress[ANA_COMP_VECTOR_NUMBER]();
     7dc:	09 95       	icall
   }
}
     7de:	ff 91       	pop	r31
     7e0:	ef 91       	pop	r30
     7e2:	bf 91       	pop	r27
     7e4:	af 91       	pop	r26
     7e6:	9f 91       	pop	r25
     7e8:	8f 91       	pop	r24
     7ea:	7f 91       	pop	r23
     7ec:	6f 91       	pop	r22
     7ee:	5f 91       	pop	r21
     7f0:	4f 91       	pop	r20
     7f2:	3f 91       	pop	r19
     7f4:	2f 91       	pop	r18
     7f6:	0f 90       	pop	r0
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	0f 90       	pop	r0
     7fc:	1f 90       	pop	r1
     7fe:	18 95       	reti

00000800 <__vector_19>:

/**
* @brief: TWI ISR.
*/
ISR(TWI_IRQ)
{
     800:	1f 92       	push	r1
     802:	0f 92       	push	r0
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	0f 92       	push	r0
     808:	11 24       	eor	r1, r1
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
   if(aptr_ISRAddress[TWI_VECTOR_NUMBER] != NULL_PTR)
     822:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <aptr_ISRAddress+0x24>
     826:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <aptr_ISRAddress+0x25>
     82a:	30 97       	sbiw	r30, 0x00	; 0
     82c:	09 f0       	breq	.+2      	; 0x830 <__vector_19+0x30>
   {
      aptr_ISRAddress[TWI_VECTOR_NUMBER]();
     82e:	09 95       	icall
   }
}
     830:	ff 91       	pop	r31
     832:	ef 91       	pop	r30
     834:	bf 91       	pop	r27
     836:	af 91       	pop	r26
     838:	9f 91       	pop	r25
     83a:	8f 91       	pop	r24
     83c:	7f 91       	pop	r23
     83e:	6f 91       	pop	r22
     840:	5f 91       	pop	r21
     842:	4f 91       	pop	r20
     844:	3f 91       	pop	r19
     846:	2f 91       	pop	r18
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <__vector_20>:

/**
* @brief: SPM_RDY ISR.
*/
ISR(SPM_RDY_IRQ)
{
     852:	1f 92       	push	r1
     854:	0f 92       	push	r0
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	0f 92       	push	r0
     85a:	11 24       	eor	r1, r1
     85c:	2f 93       	push	r18
     85e:	3f 93       	push	r19
     860:	4f 93       	push	r20
     862:	5f 93       	push	r21
     864:	6f 93       	push	r22
     866:	7f 93       	push	r23
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	af 93       	push	r26
     86e:	bf 93       	push	r27
     870:	ef 93       	push	r30
     872:	ff 93       	push	r31
   if(aptr_ISRAddress[SPM_RDY_VECTOR_NUMBER] != NULL_PTR)
     874:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <aptr_ISRAddress+0x26>
     878:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <aptr_ISRAddress+0x27>
     87c:	30 97       	sbiw	r30, 0x00	; 0
     87e:	09 f0       	breq	.+2      	; 0x882 <__stack+0x23>
   {
      aptr_ISRAddress[SPM_RDY_VECTOR_NUMBER]();
     880:	09 95       	icall
   }
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	bf 91       	pop	r27
     888:	af 91       	pop	r26
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	7f 91       	pop	r23
     890:	6f 91       	pop	r22
     892:	5f 91       	pop	r21
     894:	4f 91       	pop	r20
     896:	3f 91       	pop	r19
     898:	2f 91       	pop	r18
     89a:	0f 90       	pop	r0
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	0f 90       	pop	r0
     8a0:	1f 90       	pop	r1
     8a2:	18 95       	reti

000008a4 <UART_Init>:
*
* @return function error state.
*/
UART_ERROR_state_t UART_Init(uint8_t UartNumber)
{
   switch(UartNumber)
     8a4:	81 11       	cpse	r24, r1
     8a6:	1c c0       	rjmp	.+56     	; 0x8e0 <UART_Init+0x3c>
   {
      #ifdef UART_CH_0
      case UART_CH_0:
         /* make sure valid baud rate is given */
         if(MAX_BAUD_VALUE < UART_CH_0_BaudRate)
     8a8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <UART_CH_0_BaudRate>
     8ac:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <UART_CH_0_BaudRate+0x1>
     8b0:	8f 3f       	cpi	r24, 0xFF	; 255
     8b2:	91 05       	cpc	r25, r1
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <UART_Init+0x14>
     8b6:	b0 f4       	brcc	.+44     	; 0x8e4 <UART_Init+0x40>
         {
            return E_UART_INVALID_BAUD_RATE;
         }
      
         /* Enable Receiver and Transmitter */
         UART_CONTROL_R = UART_CH_0_CONTROL;
     8b8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <UART_CH_0_CONTROL>
     8bc:	8a b9       	out	0x0a, r24	; 10
         /* Set Odd parity, 2 stop bits and 8 bits data size */
         UART_CONTROL_2_R = UART_CH_0_CONTROL_2;
     8be:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <UART_CH_0_CONTROL_2>
     8c2:	80 bd       	out	0x20, r24	; 32
      
         /* Set Baud Rate low bits */
         UART_BAUDRATE_LOW_R = (uint8_t)UART_CH_0_BaudRate;
     8c4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <UART_CH_0_BaudRate>
     8c8:	89 b9       	out	0x09, r24	; 9
         /* Set Baud Rate high bits if needed */
         if(BAUD_MAX_LOW_BITS < UART_CH_0_BaudRate)
     8ca:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <UART_CH_0_BaudRate>
     8ce:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <UART_CH_0_BaudRate+0x1>
     8d2:	8f 3f       	cpi	r24, 0xFF	; 255
     8d4:	91 05       	cpc	r25, r1
     8d6:	41 f0       	breq	.+16     	; 0x8e8 <UART_Init+0x44>
     8d8:	38 f0       	brcs	.+14     	; 0x8e8 <UART_Init+0x44>
         {
            UART_BAUDRATE_HIGH_R = (uint8_t)( UART_CH_0_BaudRate >> BAUD_HIGH_BITS_SHIFT );
     8da:	90 bd       	out	0x20, r25	; 32
      default:
         return E_UART_INVALID_CH;
   }

   /* return success status */
   return E_UART_SUCCESS;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	08 95       	ret
         }
         
         break;
      #endif
      default:
         return E_UART_INVALID_CH;
     8e0:	86 e0       	ldi	r24, 0x06	; 6
     8e2:	08 95       	ret
      #ifdef UART_CH_0
      case UART_CH_0:
         /* make sure valid baud rate is given */
         if(MAX_BAUD_VALUE < UART_CH_0_BaudRate)
         {
            return E_UART_INVALID_BAUD_RATE;
     8e4:	85 e0       	ldi	r24, 0x05	; 5
     8e6:	08 95       	ret
      default:
         return E_UART_INVALID_CH;
   }

   /* return success status */
   return E_UART_SUCCESS;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
}
     8ea:	08 95       	ret

000008ec <UART_TransmitChar>:
UART_ERROR_state_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar)
{
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
     8ec:	81 11       	cpse	r24, r1
     8ee:	05 c0       	rjmp	.+10     	; 0x8fa <UART_TransmitChar+0xe>
      default:
         return E_UART_INVALID_CH;
   }

   /* Wait for empty transmit buffer */
   while ( !( *ptru8_UARTStatusR & EMPTY_BUFFER_BIT) );
     8f0:	5d 9b       	sbis	0x0b, 5	; 11
     8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <UART_TransmitChar+0x4>
   
   /* Put data into buffer, sends the data */
   *ptru8_UARTDataR = TxChar;
     8f4:	6c b9       	out	0x0c, r22	; 12
   
   /* return success status */
   return E_UART_SUCCESS;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
     8fa:	86 e0       	ldi	r24, 0x06	; 6
   /* Put data into buffer, sends the data */
   *ptru8_UARTDataR = TxChar;
   
   /* return success status */
   return E_UART_SUCCESS;
}
     8fc:	08 95       	ret

000008fe <Idle_Task>:
      Delete_ErrorState = ERROR_OK;
   }
   
   /* Return Function error state. */
   return Delete_ErrorState;
}
     8fe:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <CPU_State>
     902:	08 95       	ret

00000904 <SOS_UpdateStates>:
     904:	9f 92       	push	r9
     906:	af 92       	push	r10
     908:	bf 92       	push	r11
     90a:	cf 92       	push	r12
     90c:	df 92       	push	r13
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	91 2c       	mov	r9, r1
     91c:	48 c0       	rjmp	.+144    	; 0x9ae <SOS_UpdateStates+0xaa>
     91e:	c9 2d       	mov	r28, r9
     920:	d0 e0       	ldi	r29, 0x00	; 0
     922:	fe 01       	movw	r30, r28
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	ec 0f       	add	r30, r28
     92a:	fd 1f       	adc	r31, r29
     92c:	ee 0f       	add	r30, r30
     92e:	ff 1f       	adc	r31, r31
     930:	ed 53       	subi	r30, 0x3D	; 61
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	81 81       	ldd	r24, Z+1	; 0x01
     936:	81 30       	cpi	r24, 0x01	; 1
     938:	c9 f5       	brne	.+114    	; 0x9ac <SOS_UpdateStates+0xa8>
     93a:	fe 01       	movw	r30, r28
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	ec 0f       	add	r30, r28
     942:	fd 1f       	adc	r31, r29
     944:	ee 0f       	add	r30, r30
     946:	ff 1f       	adc	r31, r31
     948:	ed 53       	subi	r30, 0x3D	; 61
     94a:	ff 4f       	sbci	r31, 0xFF	; 255
     94c:	02 81       	ldd	r16, Z+2	; 0x02
     94e:	13 81       	ldd	r17, Z+3	; 0x03
     950:	b0 91 60 00 	lds	r27, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     954:	a0 91 61 00 	lds	r26, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     958:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     95c:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     960:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     964:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     968:	a0 2e       	mov	r10, r16
     96a:	b1 2e       	mov	r11, r17
     96c:	c1 2c       	mov	r12, r1
     96e:	d1 2c       	mov	r13, r1
     970:	e1 2c       	mov	r14, r1
     972:	f1 2c       	mov	r15, r1
     974:	00 e0       	ldi	r16, 0x00	; 0
     976:	10 e0       	ldi	r17, 0x00	; 0
     978:	2b 2f       	mov	r18, r27
     97a:	3a 2f       	mov	r19, r26
     97c:	4f 2f       	mov	r20, r31
     97e:	5e 2f       	mov	r21, r30
     980:	69 2f       	mov	r22, r25
     982:	78 2f       	mov	r23, r24
     984:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     988:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
     98c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__umoddi3>
     990:	a0 e0       	ldi	r26, 0x00	; 0
     992:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__cmpdi2_s8>
     996:	51 f4       	brne	.+20     	; 0x9ac <SOS_UpdateStates+0xa8>
     998:	ce 01       	movw	r24, r28
     99a:	88 0f       	add	r24, r24
     99c:	99 1f       	adc	r25, r25
     99e:	c8 0f       	add	r28, r24
     9a0:	d9 1f       	adc	r29, r25
     9a2:	cc 0f       	add	r28, r28
     9a4:	dd 1f       	adc	r29, r29
     9a6:	cd 53       	subi	r28, 0x3D	; 61
     9a8:	df 4f       	sbci	r29, 0xFF	; 255
     9aa:	19 82       	std	Y+1, r1	; 0x01
     9ac:	93 94       	inc	r9
     9ae:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <gu8_CreatedTasks>
     9b2:	98 16       	cp	r9, r24
     9b4:	08 f4       	brcc	.+2      	; 0x9b8 <SOS_UpdateStates+0xb4>
     9b6:	b3 cf       	rjmp	.-154    	; 0x91e <SOS_UpdateStates+0x1a>
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	9f 90       	pop	r9
     9ce:	08 95       	ret

000009d0 <GetFreqPrescaleRatio>:
     9d0:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <gstr_SYSTICK_Config+0x2>
     9d4:	4e 2f       	mov	r20, r30
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	fa 01       	movw	r30, r20
     9da:	31 97       	sbiw	r30, 0x01	; 1
     9dc:	e7 30       	cpi	r30, 0x07	; 7
     9de:	f1 05       	cpc	r31, r1
     9e0:	08 f0       	brcs	.+2      	; 0x9e4 <GetFreqPrescaleRatio+0x14>
     9e2:	51 c0       	rjmp	.+162    	; 0xa86 <GetFreqPrescaleRatio+0xb6>
     9e4:	e6 5d       	subi	r30, 0xD6	; 214
     9e6:	ff 4f       	sbci	r31, 0xFF	; 255
     9e8:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__tablejump2__>
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	60 e8       	ldi	r22, 0x80	; 128
     9f2:	7d e3       	ldi	r23, 0x3D	; 61
     9f4:	fc 01       	movw	r30, r24
     9f6:	40 83       	st	Z, r20
     9f8:	51 83       	std	Z+1, r21	; 0x01
     9fa:	62 83       	std	Z+2, r22	; 0x02
     9fc:	73 83       	std	Z+3, r23	; 0x03
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	08 95       	ret
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	7f e3       	ldi	r23, 0x3F	; 63
     a0a:	fc 01       	movw	r30, r24
     a0c:	40 83       	st	Z, r20
     a0e:	51 83       	std	Z+1, r21	; 0x01
     a10:	62 83       	std	Z+2, r22	; 0x02
     a12:	73 83       	std	Z+3, r23	; 0x03
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	08 95       	ret
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	70 e4       	ldi	r23, 0x40	; 64
     a20:	fc 01       	movw	r30, r24
     a22:	40 83       	st	Z, r20
     a24:	51 83       	std	Z+1, r21	; 0x01
     a26:	62 83       	std	Z+2, r22	; 0x02
     a28:	73 83       	std	Z+3, r23	; 0x03
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	08 95       	ret
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	60 e8       	ldi	r22, 0x80	; 128
     a34:	70 e4       	ldi	r23, 0x40	; 64
     a36:	fc 01       	movw	r30, r24
     a38:	40 83       	st	Z, r20
     a3a:	51 83       	std	Z+1, r21	; 0x01
     a3c:	62 83       	std	Z+2, r22	; 0x02
     a3e:	73 83       	std	Z+3, r23	; 0x03
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	08 95       	ret
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	71 e4       	ldi	r23, 0x41	; 65
     a4c:	fc 01       	movw	r30, r24
     a4e:	40 83       	st	Z, r20
     a50:	51 83       	std	Z+1, r21	; 0x01
     a52:	62 83       	std	Z+2, r22	; 0x02
     a54:	73 83       	std	Z+3, r23	; 0x03
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 95       	ret
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	60 e8       	ldi	r22, 0x80	; 128
     a60:	71 e4       	ldi	r23, 0x41	; 65
     a62:	fc 01       	movw	r30, r24
     a64:	40 83       	st	Z, r20
     a66:	51 83       	std	Z+1, r21	; 0x01
     a68:	62 83       	std	Z+2, r22	; 0x02
     a6a:	73 83       	std	Z+3, r23	; 0x03
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	08 95       	ret
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e8       	ldi	r22, 0x80	; 128
     a76:	72 e4       	ldi	r23, 0x42	; 66
     a78:	fc 01       	movw	r30, r24
     a7a:	40 83       	st	Z, r20
     a7c:	51 83       	std	Z+1, r21	; 0x01
     a7e:	62 83       	std	Z+2, r22	; 0x02
     a80:	73 83       	std	Z+3, r23	; 0x03
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	08 95       	ret
     a86:	81 ef       	ldi	r24, 0xF1	; 241
     a88:	08 95       	ret

00000a8a <TransmitCPULoad>:
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <UART_Init>
     a90:	c0 90 a1 00 	lds	r12, 0x00A1	; 0x8000a1 <CPU_WorkingTime>
     a94:	d0 90 a2 00 	lds	r13, 0x00A2	; 0x8000a2 <CPU_WorkingTime+0x1>
     a98:	e0 90 a3 00 	lds	r14, 0x00A3	; 0x8000a3 <CPU_WorkingTime+0x2>
     a9c:	f0 90 a4 00 	lds	r15, 0x00A4	; 0x8000a4 <CPU_WorkingTime+0x3>
     aa0:	00 91 a5 00 	lds	r16, 0x00A5	; 0x8000a5 <CPU_WorkingTime+0x4>
     aa4:	10 91 a6 00 	lds	r17, 0x00A6	; 0x8000a6 <CPU_WorkingTime+0x5>
     aa8:	d0 91 a7 00 	lds	r29, 0x00A7	; 0x8000a7 <CPU_WorkingTime+0x6>
     aac:	c0 91 a8 00 	lds	r28, 0x00A8	; 0x8000a8 <CPU_WorkingTime+0x7>
     ab0:	2c 2d       	mov	r18, r12
     ab2:	3d 2d       	mov	r19, r13
     ab4:	4e 2d       	mov	r20, r14
     ab6:	5f 2d       	mov	r21, r15
     ab8:	60 2f       	mov	r22, r16
     aba:	71 2f       	mov	r23, r17
     abc:	8d 2f       	mov	r24, r29
     abe:	9c 2f       	mov	r25, r28
     ac0:	0e 94 af 08 	call	0x115e	; 0x115e <__floatundisf>
     ac4:	2b 01       	movw	r4, r22
     ac6:	3c 01       	movw	r6, r24
     ac8:	2c 2d       	mov	r18, r12
     aca:	3d 2d       	mov	r19, r13
     acc:	4e 2d       	mov	r20, r14
     ace:	5f 2d       	mov	r21, r15
     ad0:	60 2f       	mov	r22, r16
     ad2:	71 2f       	mov	r23, r17
     ad4:	8d 2f       	mov	r24, r29
     ad6:	9c 2f       	mov	r25, r28
     ad8:	a0 90 a9 00 	lds	r10, 0x00A9	; 0x8000a9 <CPU_IdleTime>
     adc:	b0 90 aa 00 	lds	r11, 0x00AA	; 0x8000aa <CPU_IdleTime+0x1>
     ae0:	c0 90 ab 00 	lds	r12, 0x00AB	; 0x8000ab <CPU_IdleTime+0x2>
     ae4:	d0 90 ac 00 	lds	r13, 0x00AC	; 0x8000ac <CPU_IdleTime+0x3>
     ae8:	e0 90 ad 00 	lds	r14, 0x00AD	; 0x8000ad <CPU_IdleTime+0x4>
     aec:	f0 90 ae 00 	lds	r15, 0x00AE	; 0x8000ae <CPU_IdleTime+0x5>
     af0:	00 91 af 00 	lds	r16, 0x00AF	; 0x8000af <CPU_IdleTime+0x6>
     af4:	10 91 b0 00 	lds	r17, 0x00B0	; 0x8000b0 <CPU_IdleTime+0x7>
     af8:	0e 94 34 0a 	call	0x1468	; 0x1468 <__adddi3>
     afc:	0e 94 af 08 	call	0x115e	; 0x115e <__floatundisf>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	c3 01       	movw	r24, r6
     b06:	b2 01       	movw	r22, r4
     b08:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__divsf3>
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	48 ec       	ldi	r20, 0xC8	; 200
     b12:	52 e4       	ldi	r21, 0x42	; 66
     b14:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__mulsf3>
     b18:	0e 94 43 08 	call	0x1086	; 0x1086 <__fixunssfsi>
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	0e 94 76 04 	call	0x8ec	; 0x8ec <UART_TransmitChar>
     b22:	ff cf       	rjmp	.-2      	; 0xb22 <TransmitCPULoad+0x98>

00000b24 <Systick_ISR>:
     b24:	af 92       	push	r10
     b26:	bf 92       	push	r11
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <CPU_State>
     b38:	81 11       	cpse	r24, r1
     b3a:	24 c0       	rjmp	.+72     	; 0xb84 <Systick_ISR+0x60>
     b3c:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <CPU_IdleTime>
     b40:	30 91 aa 00 	lds	r19, 0x00AA	; 0x8000aa <CPU_IdleTime+0x1>
     b44:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <CPU_IdleTime+0x2>
     b48:	50 91 ac 00 	lds	r21, 0x00AC	; 0x8000ac <CPU_IdleTime+0x3>
     b4c:	60 91 ad 00 	lds	r22, 0x00AD	; 0x8000ad <CPU_IdleTime+0x4>
     b50:	70 91 ae 00 	lds	r23, 0x00AE	; 0x8000ae <CPU_IdleTime+0x5>
     b54:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <CPU_IdleTime+0x6>
     b58:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <CPU_IdleTime+0x7>
     b5c:	a1 e0       	ldi	r26, 0x01	; 1
     b5e:	0e 94 3d 0a 	call	0x147a	; 0x147a <__adddi3_s8>
     b62:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <CPU_IdleTime>
     b66:	30 93 aa 00 	sts	0x00AA, r19	; 0x8000aa <CPU_IdleTime+0x1>
     b6a:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <CPU_IdleTime+0x2>
     b6e:	50 93 ac 00 	sts	0x00AC, r21	; 0x8000ac <CPU_IdleTime+0x3>
     b72:	60 93 ad 00 	sts	0x00AD, r22	; 0x8000ad <CPU_IdleTime+0x4>
     b76:	70 93 ae 00 	sts	0x00AE, r23	; 0x8000ae <CPU_IdleTime+0x5>
     b7a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <CPU_IdleTime+0x6>
     b7e:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <CPU_IdleTime+0x7>
     b82:	23 c0       	rjmp	.+70     	; 0xbca <Systick_ISR+0xa6>
     b84:	20 91 a1 00 	lds	r18, 0x00A1	; 0x8000a1 <CPU_WorkingTime>
     b88:	30 91 a2 00 	lds	r19, 0x00A2	; 0x8000a2 <CPU_WorkingTime+0x1>
     b8c:	40 91 a3 00 	lds	r20, 0x00A3	; 0x8000a3 <CPU_WorkingTime+0x2>
     b90:	50 91 a4 00 	lds	r21, 0x00A4	; 0x8000a4 <CPU_WorkingTime+0x3>
     b94:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <CPU_WorkingTime+0x4>
     b98:	70 91 a6 00 	lds	r23, 0x00A6	; 0x8000a6 <CPU_WorkingTime+0x5>
     b9c:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <CPU_WorkingTime+0x6>
     ba0:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <CPU_WorkingTime+0x7>
     ba4:	a1 e0       	ldi	r26, 0x01	; 1
     ba6:	0e 94 3d 0a 	call	0x147a	; 0x147a <__adddi3_s8>
     baa:	20 93 a1 00 	sts	0x00A1, r18	; 0x8000a1 <CPU_WorkingTime>
     bae:	30 93 a2 00 	sts	0x00A2, r19	; 0x8000a2 <CPU_WorkingTime+0x1>
     bb2:	40 93 a3 00 	sts	0x00A3, r20	; 0x8000a3 <CPU_WorkingTime+0x2>
     bb6:	50 93 a4 00 	sts	0x00A4, r21	; 0x8000a4 <CPU_WorkingTime+0x3>
     bba:	60 93 a5 00 	sts	0x00A5, r22	; 0x8000a5 <CPU_WorkingTime+0x4>
     bbe:	70 93 a6 00 	sts	0x00A6, r23	; 0x8000a6 <CPU_WorkingTime+0x5>
     bc2:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <CPU_WorkingTime+0x6>
     bc6:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <CPU_WorkingTime+0x7>
     bca:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <gu64_SYSTICK_Overflows>
     bce:	30 91 b3 00 	lds	r19, 0x00B3	; 0x8000b3 <gu64_SYSTICK_Overflows+0x1>
     bd2:	40 91 b4 00 	lds	r20, 0x00B4	; 0x8000b4 <gu64_SYSTICK_Overflows+0x2>
     bd6:	50 91 b5 00 	lds	r21, 0x00B5	; 0x8000b5 <gu64_SYSTICK_Overflows+0x3>
     bda:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <gu64_SYSTICK_Overflows+0x4>
     bde:	70 91 b7 00 	lds	r23, 0x00B7	; 0x8000b7 <gu64_SYSTICK_Overflows+0x5>
     be2:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <gu64_SYSTICK_Overflows+0x6>
     be6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <gu64_SYSTICK_Overflows+0x7>
     bea:	a1 e0       	ldi	r26, 0x01	; 1
     bec:	0e 94 3d 0a 	call	0x147a	; 0x147a <__adddi3_s8>
     bf0:	20 93 b2 00 	sts	0x00B2, r18	; 0x8000b2 <gu64_SYSTICK_Overflows>
     bf4:	30 93 b3 00 	sts	0x00B3, r19	; 0x8000b3 <gu64_SYSTICK_Overflows+0x1>
     bf8:	40 93 b4 00 	sts	0x00B4, r20	; 0x8000b4 <gu64_SYSTICK_Overflows+0x2>
     bfc:	50 93 b5 00 	sts	0x00B5, r21	; 0x8000b5 <gu64_SYSTICK_Overflows+0x3>
     c00:	60 93 b6 00 	sts	0x00B6, r22	; 0x8000b6 <gu64_SYSTICK_Overflows+0x4>
     c04:	70 93 b7 00 	sts	0x00B7, r23	; 0x8000b7 <gu64_SYSTICK_Overflows+0x5>
     c08:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <gu64_SYSTICK_Overflows+0x6>
     c0c:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <gu64_SYSTICK_Overflows+0x7>
     c10:	a0 90 ba 00 	lds	r10, 0x00BA	; 0x8000ba <gu64_SYSTICK_OverflowsNeeded>
     c14:	b0 90 bb 00 	lds	r11, 0x00BB	; 0x8000bb <gu64_SYSTICK_OverflowsNeeded+0x1>
     c18:	c0 90 bc 00 	lds	r12, 0x00BC	; 0x8000bc <gu64_SYSTICK_OverflowsNeeded+0x2>
     c1c:	d0 90 bd 00 	lds	r13, 0x00BD	; 0x8000bd <gu64_SYSTICK_OverflowsNeeded+0x3>
     c20:	e0 90 be 00 	lds	r14, 0x00BE	; 0x8000be <gu64_SYSTICK_OverflowsNeeded+0x4>
     c24:	f0 90 bf 00 	lds	r15, 0x00BF	; 0x8000bf <gu64_SYSTICK_OverflowsNeeded+0x5>
     c28:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <gu64_SYSTICK_OverflowsNeeded+0x6>
     c2c:	10 91 c1 00 	lds	r17, 0x00C1	; 0x8000c1 <gu64_SYSTICK_OverflowsNeeded+0x7>
     c30:	0e 94 49 0a 	call	0x1492	; 0x1492 <__cmpdi2>
     c34:	09 f0       	breq	.+2      	; 0xc38 <Systick_ISR+0x114>
     c36:	40 c0       	rjmp	.+128    	; 0xcb8 <Systick_ISR+0x194>
     c38:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <gu64_SYSTICK_Overflows>
     c3c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <gu64_SYSTICK_Overflows+0x1>
     c40:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <gu64_SYSTICK_Overflows+0x2>
     c44:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <gu64_SYSTICK_Overflows+0x3>
     c48:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <gu64_SYSTICK_Overflows+0x4>
     c4c:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <gu64_SYSTICK_Overflows+0x5>
     c50:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <gu64_SYSTICK_Overflows+0x6>
     c54:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <gu64_SYSTICK_Overflows+0x7>
     c58:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     c5c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     c60:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     c64:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     c68:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     c6c:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     c70:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     c74:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
     c78:	0e 94 3d 0a 	call	0x147a	; 0x147a <__adddi3_s8>
     c7c:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
     c80:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     c84:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     c88:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     c8c:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     c90:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     c94:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     c98:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
     c9c:	27 3c       	cpi	r18, 0xC7	; 199
     c9e:	31 05       	cpc	r19, r1
     ca0:	41 05       	cpc	r20, r1
     ca2:	51 05       	cpc	r21, r1
     ca4:	61 05       	cpc	r22, r1
     ca6:	71 05       	cpc	r23, r1
     ca8:	81 05       	cpc	r24, r1
     caa:	91 05       	cpc	r25, r1
     cac:	19 f0       	breq	.+6      	; 0xcb4 <Systick_ISR+0x190>
     cae:	10 f0       	brcs	.+4      	; 0xcb4 <Systick_ISR+0x190>
     cb0:	0e 94 45 05 	call	0xa8a	; 0xa8a <TransmitCPULoad>
     cb4:	0e 94 82 04 	call	0x904	; 0x904 <SOS_UpdateStates>
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	08 95       	ret

00000cca <SOS_Init>:
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	00 d0       	rcall	.+0      	; 0xcdc <SOS_Init+0x12>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <SOS_Init+0x14>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	e4 e7       	ldi	r30, 0x74	; 116
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	85 bd       	out	0x25, r24	; 37
     cea:	89 b7       	in	r24, 0x39	; 57
     cec:	8f 73       	andi	r24, 0x3F	; 63
     cee:	91 81       	ldd	r25, Z+1	; 0x01
     cf0:	89 2b       	or	r24, r25
     cf2:	89 bf       	out	0x39, r24	; 57
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <GetFreqPrescaleRatio>
     cfc:	81 11       	cpse	r24, r1
     cfe:	30 c0       	rjmp	.+96     	; 0xd60 <SOS_Init+0x96>
     d00:	00 91 72 00 	lds	r16, 0x0072	; 0x800072 <gu16_TICK_Interval>
     d04:	10 91 73 00 	lds	r17, 0x0073	; 0x800073 <gu16_TICK_Interval+0x1>
     d08:	c9 80       	ldd	r12, Y+1	; 0x01
     d0a:	da 80       	ldd	r13, Y+2	; 0x02
     d0c:	eb 80       	ldd	r14, Y+3	; 0x03
     d0e:	fc 80       	ldd	r15, Y+4	; 0x04
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	a9 01       	movw	r20, r18
     d16:	c7 01       	movw	r24, r14
     d18:	b6 01       	movw	r22, r12
     d1a:	0e 94 cc 07 	call	0xf98	; 0xf98 <__cmpsf2>
     d1e:	88 23       	and	r24, r24
     d20:	61 f0       	breq	.+24     	; 0xd3a <SOS_Init+0x70>
     d22:	b8 01       	movw	r22, r16
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__floatunsisf>
     d2c:	a7 01       	movw	r20, r14
     d2e:	96 01       	movw	r18, r12
     d30:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__divsf3>
     d34:	0e 94 43 08 	call	0x1086	; 0x1086 <__fixunssfsi>
     d38:	8b 01       	movw	r16, r22
     d3a:	61 2f       	mov	r22, r17
     d3c:	77 27       	eor	r23, r23
     d3e:	8b 01       	movw	r16, r22
     d40:	00 93 ba 00 	sts	0x00BA, r16	; 0x8000ba <gu64_SYSTICK_OverflowsNeeded>
     d44:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <gu64_SYSTICK_OverflowsNeeded+0x1>
     d48:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <gu64_SYSTICK_OverflowsNeeded+0x2>
     d4c:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <gu64_SYSTICK_OverflowsNeeded+0x3>
     d50:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <gu64_SYSTICK_OverflowsNeeded+0x4>
     d54:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <gu64_SYSTICK_OverflowsNeeded+0x5>
     d58:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <gu64_SYSTICK_OverflowsNeeded+0x6>
     d5c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <gu64_SYSTICK_OverflowsNeeded+0x7>
     d60:	62 e9       	ldi	r22, 0x92	; 146
     d62:	75 e0       	ldi	r23, 0x05	; 5
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	0e 94 9e 00 	call	0x13c	; 0x13c <Interrupt_Install>
     d6a:	0e 94 1a 01 	call	0x234	; 0x234 <INTERRUPTS_Enable>
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	08 95       	ret

00000d88 <SOS_Run>:
     d88:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <gstr_SYSTICK_Config+0x2>
     d8c:	95 b5       	in	r25, 0x25	; 37
     d8e:	89 2b       	or	r24, r25
     d90:	85 bd       	out	0x25, r24	; 37
     d92:	0e 94 82 04 	call	0x904	; 0x904 <SOS_UpdateStates>
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	48 e0       	ldi	r20, 0x08	; 8
     d9a:	cf ef       	ldi	r28, 0xFF	; 255
     d9c:	1d c0       	rjmp	.+58     	; 0xdd8 <SOS_Run+0x50>
     d9e:	82 2f       	mov	r24, r18
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	fc 01       	movw	r30, r24
     da4:	ee 0f       	add	r30, r30
     da6:	ff 1f       	adc	r31, r31
     da8:	e8 0f       	add	r30, r24
     daa:	f9 1f       	adc	r31, r25
     dac:	ee 0f       	add	r30, r30
     dae:	ff 1f       	adc	r31, r31
     db0:	ed 53       	subi	r30, 0x3D	; 61
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	31 81       	ldd	r19, Z+1	; 0x01
     db6:	31 11       	cpse	r19, r1
     db8:	0e c0       	rjmp	.+28     	; 0xdd6 <SOS_Run+0x4e>
     dba:	fc 01       	movw	r30, r24
     dbc:	ee 0f       	add	r30, r30
     dbe:	ff 1f       	adc	r31, r31
     dc0:	e8 0f       	add	r30, r24
     dc2:	f9 1f       	adc	r31, r25
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	ed 53       	subi	r30, 0x3D	; 61
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	80 81       	ld	r24, Z
     dce:	84 17       	cp	r24, r20
     dd0:	10 f4       	brcc	.+4      	; 0xdd6 <SOS_Run+0x4e>
     dd2:	48 2f       	mov	r20, r24
     dd4:	c2 2f       	mov	r28, r18
     dd6:	2f 5f       	subi	r18, 0xFF	; 255
     dd8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <gu8_CreatedTasks>
     ddc:	28 17       	cp	r18, r24
     dde:	f8 f2       	brcs	.-66     	; 0xd9e <SOS_Run+0x16>
     de0:	cf 3f       	cpi	r28, 0xFF	; 255
     de2:	e1 f0       	breq	.+56     	; 0xe1c <SOS_Run+0x94>
     de4:	d0 e0       	ldi	r29, 0x00	; 0
     de6:	7e 01       	movw	r14, r28
     de8:	ee 0c       	add	r14, r14
     dea:	ff 1c       	adc	r15, r15
     dec:	f7 01       	movw	r30, r14
     dee:	ec 0f       	add	r30, r28
     df0:	fd 1f       	adc	r31, r29
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	ed 53       	subi	r30, 0x3D	; 61
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	81 83       	std	Z+1, r24	; 0x01
     dfe:	11 e0       	ldi	r17, 0x01	; 1
     e00:	10 93 b1 00 	sts	0x00B1, r17	; 0x8000b1 <CPU_State>
     e04:	04 80       	ldd	r0, Z+4	; 0x04
     e06:	f5 81       	ldd	r31, Z+5	; 0x05
     e08:	e0 2d       	mov	r30, r0
     e0a:	09 95       	icall
     e0c:	ce 0d       	add	r28, r14
     e0e:	df 1d       	adc	r29, r15
     e10:	cc 0f       	add	r28, r28
     e12:	dd 1f       	adc	r29, r29
     e14:	cd 53       	subi	r28, 0x3D	; 61
     e16:	df 4f       	sbci	r29, 0xFF	; 255
     e18:	19 83       	std	Y+1, r17	; 0x01
     e1a:	bd cf       	rjmp	.-134    	; 0xd96 <SOS_Run+0xe>
     e1c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Idle_Task>
     e20:	ba cf       	rjmp	.-140    	; 0xd96 <SOS_Run+0xe>

00000e22 <SOS_CreateTask>:
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	fc 01       	movw	r30, r24
     e2c:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <gu8_CreatedTasks>
     e30:	9a 30       	cpi	r25, 0x0A	; 10
     e32:	09 f1       	breq	.+66     	; 0xe76 <SOS_CreateTask+0x54>
     e34:	30 97       	sbiw	r30, 0x00	; 0
     e36:	09 f1       	breq	.+66     	; 0xe7a <SOS_CreateTask+0x58>
     e38:	69 30       	cpi	r22, 0x09	; 9
     e3a:	08 f5       	brcc	.+66     	; 0xe7e <SOS_CreateTask+0x5c>
     e3c:	a9 2f       	mov	r26, r25
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	8d 01       	movw	r16, r26
     e42:	00 0f       	add	r16, r16
     e44:	11 1f       	adc	r17, r17
     e46:	e8 01       	movw	r28, r16
     e48:	ca 0f       	add	r28, r26
     e4a:	db 1f       	adc	r29, r27
     e4c:	cc 0f       	add	r28, r28
     e4e:	dd 1f       	adc	r29, r29
     e50:	cd 53       	subi	r28, 0x3D	; 61
     e52:	df 4f       	sbci	r29, 0xFF	; 255
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	68 83       	st	Y, r22
     e5a:	5b 83       	std	Y+3, r21	; 0x03
     e5c:	4a 83       	std	Y+2, r20	; 0x02
     e5e:	fd 83       	std	Y+5, r31	; 0x05
     e60:	ec 83       	std	Y+4, r30	; 0x04
     e62:	21 15       	cp	r18, r1
     e64:	31 05       	cpc	r19, r1
     e66:	11 f0       	breq	.+4      	; 0xe6c <SOS_CreateTask+0x4a>
     e68:	f9 01       	movw	r30, r18
     e6a:	90 83       	st	Z, r25
     e6c:	9f 5f       	subi	r25, 0xFF	; 255
     e6e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <gu8_CreatedTasks>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <SOS_CreateTask+0x5e>
     e76:	84 ef       	ldi	r24, 0xF4	; 244
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <SOS_CreateTask+0x5e>
     e7a:	82 ef       	ldi	r24, 0xF2	; 242
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <SOS_CreateTask+0x5e>
     e7e:	83 ef       	ldi	r24, 0xF3	; 243
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	08 95       	ret

00000e8a <SOS_SuspendTask>:
{
   /* variable to store function error state. */
   ERROR_STATE_t Suspend_ErrorState;
   
   /* Validate valid Task Handler. */
   if(NULL_PTR == TaskHandler)
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	c1 f0       	breq	.+48     	; 0xebe <SOS_SuspendTask+0x34>
   {
      /* Set Function Error State To Null Pointer. */
      Suspend_ErrorState = (SOS_MODULE_ID | E_NULL_PTR);
   }
   else if((gu8_CreatedTasks-1) < TaskHandler->u8_ID)
     e8e:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <gu8_CreatedTasks>
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	21 50       	subi	r18, 0x01	; 1
     e96:	31 09       	sbc	r19, r1
     e98:	fc 01       	movw	r30, r24
     e9a:	80 81       	ld	r24, Z
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	28 17       	cp	r18, r24
     ea0:	39 07       	cpc	r19, r25
     ea2:	7c f0       	brlt	.+30     	; 0xec2 <SOS_SuspendTask+0x38>
      Suspend_ErrorState = (SOS_MODULE_ID | E_INVALID_ID);
   }
   else
   {
      /* Set Task State to suspended. */
      gastr_Tasks[TaskHandler->u8_ID].u8_State = SOS_TASK_SUSPENDED;
     ea4:	fc 01       	movw	r30, r24
     ea6:	ee 0f       	add	r30, r30
     ea8:	ff 1f       	adc	r31, r31
     eaa:	e8 0f       	add	r30, r24
     eac:	f9 1f       	adc	r31, r25
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	ed 53       	subi	r30, 0x3D	; 61
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	81 83       	std	Z+1, r24	; 0x01
      /* Set Function Error State To Ok. */
      Suspend_ErrorState = ERROR_OK;
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	08 95       	ret
   
   /* Validate valid Task Handler. */
   if(NULL_PTR == TaskHandler)
   {
      /* Set Function Error State To Null Pointer. */
      Suspend_ErrorState = (SOS_MODULE_ID | E_NULL_PTR);
     ebe:	82 ef       	ldi	r24, 0xF2	; 242
     ec0:	08 95       	ret
   }
   else if((gu8_CreatedTasks-1) < TaskHandler->u8_ID)
   {
      /* Set Function Error State To Invalid ID. */
      Suspend_ErrorState = (SOS_MODULE_ID | E_INVALID_ID);
     ec2:	85 ef       	ldi	r24, 0xF5	; 245
      Suspend_ErrorState = ERROR_OK;
   }
   
   /* Return Function error state. */
   return Suspend_ErrorState;
}
     ec4:	08 95       	ret

00000ec6 <SOS_UnsuspendTask>:
{
   /* variable to store function error state. */
   ERROR_STATE_t Unsuspend_ErrorState;
   
   /* Validate valid Task Handler. */
   if(NULL_PTR == TaskHandler)
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	c1 f0       	breq	.+48     	; 0xefa <SOS_UnsuspendTask+0x34>
   {
      /* Set Function Error State To Null Pointer. */
      Unsuspend_ErrorState = (SOS_MODULE_ID | E_NULL_PTR);
   }
   else if((gu8_CreatedTasks-1) < TaskHandler->u8_ID)
     eca:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <gu8_CreatedTasks>
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	21 50       	subi	r18, 0x01	; 1
     ed2:	31 09       	sbc	r19, r1
     ed4:	fc 01       	movw	r30, r24
     ed6:	80 81       	ld	r24, Z
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	7c f0       	brlt	.+30     	; 0xefe <SOS_UnsuspendTask+0x38>
      Unsuspend_ErrorState = (SOS_MODULE_ID | E_INVALID_ID);
   }
   else
   {
      /* Set Task State to waiting. */
      gastr_Tasks[TaskHandler->u8_ID].u8_State = SOS_TASK_WAITING;
     ee0:	fc 01       	movw	r30, r24
     ee2:	ee 0f       	add	r30, r30
     ee4:	ff 1f       	adc	r31, r31
     ee6:	e8 0f       	add	r30, r24
     ee8:	f9 1f       	adc	r31, r25
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	ed 53       	subi	r30, 0x3D	; 61
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	81 83       	std	Z+1, r24	; 0x01
      /* Set Function Error State To Ok. */
      Unsuspend_ErrorState = ERROR_OK;
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	08 95       	ret
   
   /* Validate valid Task Handler. */
   if(NULL_PTR == TaskHandler)
   {
      /* Set Function Error State To Null Pointer. */
      Unsuspend_ErrorState = (SOS_MODULE_ID | E_NULL_PTR);
     efa:	82 ef       	ldi	r24, 0xF2	; 242
     efc:	08 95       	ret
   }
   else if((gu8_CreatedTasks-1) < TaskHandler->u8_ID)
   {
      /* Set Function Error State To Invalid ID. */
      Unsuspend_ErrorState = (SOS_MODULE_ID | E_INVALID_ID);
     efe:	85 ef       	ldi	r24, 0xF5	; 245
      Unsuspend_ErrorState = ERROR_OK;
   }
   
   /* Return Function error state. */
   return Unsuspend_ErrorState;
     f00:	08 95       	ret

00000f02 <LED_1_Toggle>:
void LED_1_Toggle(void);
void LED_2_Toggle(void);
void LED_3_Toggle(void);

void LED_1_Toggle(void)
{
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	00 d0       	rcall	.+0      	; 0xf08 <LED_1_Toggle+0x6>
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
   LED_Toggle(LED_CH_1);
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	0e 94 7a 00 	call	0xf4	; 0xf4 <LED_Toggle>
   for(volatile uint8_t x = 0; x<255;x++)
     f12:	1a 82       	std	Y+2, r1	; 0x02
     f14:	0b c0       	rjmp	.+22     	; 0xf2c <LED_1_Toggle+0x2a>
   {
      for(volatile uint8_t y =0; y<10;y++);
     f16:	19 82       	std	Y+1, r1	; 0x01
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <LED_1_Toggle+0x1e>
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	8a 30       	cpi	r24, 0x0A	; 10
     f24:	d0 f3       	brcs	.-12     	; 0xf1a <LED_1_Toggle+0x18>
void LED_3_Toggle(void);

void LED_1_Toggle(void)
{
   LED_Toggle(LED_CH_1);
   for(volatile uint8_t x = 0; x<255;x++)
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	8a 83       	std	Y+2, r24	; 0x02
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	8f 3f       	cpi	r24, 0xFF	; 255
     f30:	91 f7       	brne	.-28     	; 0xf16 <LED_1_Toggle+0x14>
     f32:	ff cf       	rjmp	.-2      	; 0xf32 <LED_1_Toggle+0x30>

00000f34 <LED_2_Toggle>:
   }
}

void LED_2_Toggle(void)
{
   LED_Toggle(LED_CH_2);
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	0e 94 7a 00 	call	0xf4	; 0xf4 <LED_Toggle>
   SOS_SuspendTask(&LED_1_Handler);
     f3a:	87 e2       	ldi	r24, 0x27	; 39
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	0e 94 45 07 	call	0xe8a	; 0xe8a <SOS_SuspendTask>
     f42:	08 95       	ret

00000f44 <LED_3_Toggle>:
}

void LED_3_Toggle(void)
{
   LED_Toggle(LED_CH_3);
     f44:	83 e0       	ldi	r24, 0x03	; 3
     f46:	0e 94 7a 00 	call	0xf4	; 0xf4 <LED_Toggle>
   SOS_UnsuspendTask(&LED_1_Handler);
     f4a:	87 e2       	ldi	r24, 0x27	; 39
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	0e 94 63 07 	call	0xec6	; 0xec6 <SOS_UnsuspendTask>
     f52:	08 95       	ret

00000f54 <main>:
}

int main(void)
{
   LED_Init();
     f54:	0e 94 4e 00 	call	0x9c	; 0x9c <LED_Init>
   
   SOS_Init();
     f58:	0e 94 65 06 	call	0xcca	; 0xcca <SOS_Init>
   
   SOS_CreateTask(LED_1_Toggle, 0, 1, &LED_1_Handler);
     f5c:	27 e2       	ldi	r18, 0x27	; 39
     f5e:	31 e0       	ldi	r19, 0x01	; 1
     f60:	41 e0       	ldi	r20, 0x01	; 1
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	81 e8       	ldi	r24, 0x81	; 129
     f68:	97 e0       	ldi	r25, 0x07	; 7
     f6a:	0e 94 11 07 	call	0xe22	; 0xe22 <SOS_CreateTask>
   SOS_CreateTask(LED_2_Toggle, 1, 5, NULL_PTR);
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	45 e0       	ldi	r20, 0x05	; 5
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	8a e9       	ldi	r24, 0x9A	; 154
     f7a:	97 e0       	ldi	r25, 0x07	; 7
     f7c:	0e 94 11 07 	call	0xe22	; 0xe22 <SOS_CreateTask>
   SOS_CreateTask(LED_3_Toggle, 1, 8, NULL_PTR);
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	48 e0       	ldi	r20, 0x08	; 8
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	61 e0       	ldi	r22, 0x01	; 1
     f8a:	82 ea       	ldi	r24, 0xA2	; 162
     f8c:	97 e0       	ldi	r25, 0x07	; 7
     f8e:	0e 94 11 07 	call	0xe22	; 0xe22 <SOS_CreateTask>
   
   SOS_Run();
     f92:	0e 94 c4 06 	call	0xd88	; 0xd88 <SOS_Run>
     f96:	ff cf       	rjmp	.-2      	; 0xf96 <main+0x42>

00000f98 <__cmpsf2>:
     f98:	0e 94 ed 08 	call	0x11da	; 0x11da <__fp_cmp>
     f9c:	08 f4       	brcc	.+2      	; 0xfa0 <__cmpsf2+0x8>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	08 95       	ret

00000fa2 <__divsf3>:
     fa2:	0e 94 e5 07 	call	0xfca	; 0xfca <__divsf3x>
     fa6:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__fp_round>
     faa:	0e 94 21 09 	call	0x1242	; 0x1242 <__fp_pscB>
     fae:	58 f0       	brcs	.+22     	; 0xfc6 <__divsf3+0x24>
     fb0:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fp_pscA>
     fb4:	40 f0       	brcs	.+16     	; 0xfc6 <__divsf3+0x24>
     fb6:	29 f4       	brne	.+10     	; 0xfc2 <__divsf3+0x20>
     fb8:	5f 3f       	cpi	r21, 0xFF	; 255
     fba:	29 f0       	breq	.+10     	; 0xfc6 <__divsf3+0x24>
     fbc:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_inf>
     fc0:	51 11       	cpse	r21, r1
     fc2:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_szero>
     fc6:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_nan>

00000fca <__divsf3x>:
     fca:	0e 94 39 09 	call	0x1272	; 0x1272 <__fp_split3>
     fce:	68 f3       	brcs	.-38     	; 0xfaa <__divsf3+0x8>

00000fd0 <__divsf3_pse>:
     fd0:	99 23       	and	r25, r25
     fd2:	b1 f3       	breq	.-20     	; 0xfc0 <__divsf3+0x1e>
     fd4:	55 23       	and	r21, r21
     fd6:	91 f3       	breq	.-28     	; 0xfbc <__divsf3+0x1a>
     fd8:	95 1b       	sub	r25, r21
     fda:	55 0b       	sbc	r21, r21
     fdc:	bb 27       	eor	r27, r27
     fde:	aa 27       	eor	r26, r26
     fe0:	62 17       	cp	r22, r18
     fe2:	73 07       	cpc	r23, r19
     fe4:	84 07       	cpc	r24, r20
     fe6:	38 f0       	brcs	.+14     	; 0xff6 <__divsf3_pse+0x26>
     fe8:	9f 5f       	subi	r25, 0xFF	; 255
     fea:	5f 4f       	sbci	r21, 0xFF	; 255
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	44 1f       	adc	r20, r20
     ff2:	aa 1f       	adc	r26, r26
     ff4:	a9 f3       	breq	.-22     	; 0xfe0 <__divsf3_pse+0x10>
     ff6:	35 d0       	rcall	.+106    	; 0x1062 <__divsf3_pse+0x92>
     ff8:	0e 2e       	mov	r0, r30
     ffa:	3a f0       	brmi	.+14     	; 0x100a <__divsf3_pse+0x3a>
     ffc:	e0 e8       	ldi	r30, 0x80	; 128
     ffe:	32 d0       	rcall	.+100    	; 0x1064 <__divsf3_pse+0x94>
    1000:	91 50       	subi	r25, 0x01	; 1
    1002:	50 40       	sbci	r21, 0x00	; 0
    1004:	e6 95       	lsr	r30
    1006:	00 1c       	adc	r0, r0
    1008:	ca f7       	brpl	.-14     	; 0xffc <__divsf3_pse+0x2c>
    100a:	2b d0       	rcall	.+86     	; 0x1062 <__divsf3_pse+0x92>
    100c:	fe 2f       	mov	r31, r30
    100e:	29 d0       	rcall	.+82     	; 0x1062 <__divsf3_pse+0x92>
    1010:	66 0f       	add	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	88 1f       	adc	r24, r24
    1016:	bb 1f       	adc	r27, r27
    1018:	26 17       	cp	r18, r22
    101a:	37 07       	cpc	r19, r23
    101c:	48 07       	cpc	r20, r24
    101e:	ab 07       	cpc	r26, r27
    1020:	b0 e8       	ldi	r27, 0x80	; 128
    1022:	09 f0       	breq	.+2      	; 0x1026 <__divsf3_pse+0x56>
    1024:	bb 0b       	sbc	r27, r27
    1026:	80 2d       	mov	r24, r0
    1028:	bf 01       	movw	r22, r30
    102a:	ff 27       	eor	r31, r31
    102c:	93 58       	subi	r25, 0x83	; 131
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
    1030:	3a f0       	brmi	.+14     	; 0x1040 <__divsf3_pse+0x70>
    1032:	9e 3f       	cpi	r25, 0xFE	; 254
    1034:	51 05       	cpc	r21, r1
    1036:	78 f0       	brcs	.+30     	; 0x1056 <__divsf3_pse+0x86>
    1038:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_inf>
    103c:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_szero>
    1040:	5f 3f       	cpi	r21, 0xFF	; 255
    1042:	e4 f3       	brlt	.-8      	; 0x103c <__divsf3_pse+0x6c>
    1044:	98 3e       	cpi	r25, 0xE8	; 232
    1046:	d4 f3       	brlt	.-12     	; 0x103c <__divsf3_pse+0x6c>
    1048:	86 95       	lsr	r24
    104a:	77 95       	ror	r23
    104c:	67 95       	ror	r22
    104e:	b7 95       	ror	r27
    1050:	f7 95       	ror	r31
    1052:	9f 5f       	subi	r25, 0xFF	; 255
    1054:	c9 f7       	brne	.-14     	; 0x1048 <__divsf3_pse+0x78>
    1056:	88 0f       	add	r24, r24
    1058:	91 1d       	adc	r25, r1
    105a:	96 95       	lsr	r25
    105c:	87 95       	ror	r24
    105e:	97 f9       	bld	r25, 7
    1060:	08 95       	ret
    1062:	e1 e0       	ldi	r30, 0x01	; 1
    1064:	66 0f       	add	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	88 1f       	adc	r24, r24
    106a:	bb 1f       	adc	r27, r27
    106c:	62 17       	cp	r22, r18
    106e:	73 07       	cpc	r23, r19
    1070:	84 07       	cpc	r24, r20
    1072:	ba 07       	cpc	r27, r26
    1074:	20 f0       	brcs	.+8      	; 0x107e <__divsf3_pse+0xae>
    1076:	62 1b       	sub	r22, r18
    1078:	73 0b       	sbc	r23, r19
    107a:	84 0b       	sbc	r24, r20
    107c:	ba 0b       	sbc	r27, r26
    107e:	ee 1f       	adc	r30, r30
    1080:	88 f7       	brcc	.-30     	; 0x1064 <__divsf3_pse+0x94>
    1082:	e0 95       	com	r30
    1084:	08 95       	ret

00001086 <__fixunssfsi>:
    1086:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_splitA>
    108a:	88 f0       	brcs	.+34     	; 0x10ae <__fixunssfsi+0x28>
    108c:	9f 57       	subi	r25, 0x7F	; 127
    108e:	98 f0       	brcs	.+38     	; 0x10b6 <__fixunssfsi+0x30>
    1090:	b9 2f       	mov	r27, r25
    1092:	99 27       	eor	r25, r25
    1094:	b7 51       	subi	r27, 0x17	; 23
    1096:	b0 f0       	brcs	.+44     	; 0x10c4 <__fixunssfsi+0x3e>
    1098:	e1 f0       	breq	.+56     	; 0x10d2 <__fixunssfsi+0x4c>
    109a:	66 0f       	add	r22, r22
    109c:	77 1f       	adc	r23, r23
    109e:	88 1f       	adc	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	1a f0       	brmi	.+6      	; 0x10aa <__fixunssfsi+0x24>
    10a4:	ba 95       	dec	r27
    10a6:	c9 f7       	brne	.-14     	; 0x109a <__fixunssfsi+0x14>
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <__fixunssfsi+0x4c>
    10aa:	b1 30       	cpi	r27, 0x01	; 1
    10ac:	91 f0       	breq	.+36     	; 0x10d2 <__fixunssfsi+0x4c>
    10ae:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__fp_zero>
    10b2:	b1 e0       	ldi	r27, 0x01	; 1
    10b4:	08 95       	ret
    10b6:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__fp_zero>
    10ba:	67 2f       	mov	r22, r23
    10bc:	78 2f       	mov	r23, r24
    10be:	88 27       	eor	r24, r24
    10c0:	b8 5f       	subi	r27, 0xF8	; 248
    10c2:	39 f0       	breq	.+14     	; 0x10d2 <__fixunssfsi+0x4c>
    10c4:	b9 3f       	cpi	r27, 0xF9	; 249
    10c6:	cc f3       	brlt	.-14     	; 0x10ba <__fixunssfsi+0x34>
    10c8:	86 95       	lsr	r24
    10ca:	77 95       	ror	r23
    10cc:	67 95       	ror	r22
    10ce:	b3 95       	inc	r27
    10d0:	d9 f7       	brne	.-10     	; 0x10c8 <__fixunssfsi+0x42>
    10d2:	3e f4       	brtc	.+14     	; 0x10e2 <__fixunssfsi+0x5c>
    10d4:	90 95       	com	r25
    10d6:	80 95       	com	r24
    10d8:	70 95       	com	r23
    10da:	61 95       	neg	r22
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	8f 4f       	sbci	r24, 0xFF	; 255
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	08 95       	ret

000010e4 <__floatunsisf>:
    10e4:	e8 94       	clt
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <__floatsisf+0x12>

000010e8 <__floatsisf>:
    10e8:	97 fb       	bst	r25, 7
    10ea:	3e f4       	brtc	.+14     	; 0x10fa <__floatsisf+0x12>
    10ec:	90 95       	com	r25
    10ee:	80 95       	com	r24
    10f0:	70 95       	com	r23
    10f2:	61 95       	neg	r22
    10f4:	7f 4f       	sbci	r23, 0xFF	; 255
    10f6:	8f 4f       	sbci	r24, 0xFF	; 255
    10f8:	9f 4f       	sbci	r25, 0xFF	; 255
    10fa:	99 23       	and	r25, r25
    10fc:	a9 f0       	breq	.+42     	; 0x1128 <__floatsisf+0x40>
    10fe:	f9 2f       	mov	r31, r25
    1100:	96 e9       	ldi	r25, 0x96	; 150
    1102:	bb 27       	eor	r27, r27
    1104:	93 95       	inc	r25
    1106:	f6 95       	lsr	r31
    1108:	87 95       	ror	r24
    110a:	77 95       	ror	r23
    110c:	67 95       	ror	r22
    110e:	b7 95       	ror	r27
    1110:	f1 11       	cpse	r31, r1
    1112:	f8 cf       	rjmp	.-16     	; 0x1104 <__floatsisf+0x1c>
    1114:	fa f4       	brpl	.+62     	; 0x1154 <__floatsisf+0x6c>
    1116:	bb 0f       	add	r27, r27
    1118:	11 f4       	brne	.+4      	; 0x111e <__floatsisf+0x36>
    111a:	60 ff       	sbrs	r22, 0
    111c:	1b c0       	rjmp	.+54     	; 0x1154 <__floatsisf+0x6c>
    111e:	6f 5f       	subi	r22, 0xFF	; 255
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	8f 4f       	sbci	r24, 0xFF	; 255
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	16 c0       	rjmp	.+44     	; 0x1154 <__floatsisf+0x6c>
    1128:	88 23       	and	r24, r24
    112a:	11 f0       	breq	.+4      	; 0x1130 <__floatsisf+0x48>
    112c:	96 e9       	ldi	r25, 0x96	; 150
    112e:	11 c0       	rjmp	.+34     	; 0x1152 <__floatsisf+0x6a>
    1130:	77 23       	and	r23, r23
    1132:	21 f0       	breq	.+8      	; 0x113c <__floatsisf+0x54>
    1134:	9e e8       	ldi	r25, 0x8E	; 142
    1136:	87 2f       	mov	r24, r23
    1138:	76 2f       	mov	r23, r22
    113a:	05 c0       	rjmp	.+10     	; 0x1146 <__floatsisf+0x5e>
    113c:	66 23       	and	r22, r22
    113e:	71 f0       	breq	.+28     	; 0x115c <__floatsisf+0x74>
    1140:	96 e8       	ldi	r25, 0x86	; 134
    1142:	86 2f       	mov	r24, r22
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	2a f0       	brmi	.+10     	; 0x1154 <__floatsisf+0x6c>
    114a:	9a 95       	dec	r25
    114c:	66 0f       	add	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	da f7       	brpl	.-10     	; 0x114a <__floatsisf+0x62>
    1154:	88 0f       	add	r24, r24
    1156:	96 95       	lsr	r25
    1158:	87 95       	ror	r24
    115a:	97 f9       	bld	r25, 7
    115c:	08 95       	ret

0000115e <__floatundisf>:
    115e:	e8 94       	clt

00001160 <__fp_di2sf>:
    1160:	f9 2f       	mov	r31, r25
    1162:	96 eb       	ldi	r25, 0xB6	; 182
    1164:	ff 23       	and	r31, r31
    1166:	81 f0       	breq	.+32     	; 0x1188 <__fp_di2sf+0x28>
    1168:	12 16       	cp	r1, r18
    116a:	13 06       	cpc	r1, r19
    116c:	14 06       	cpc	r1, r20
    116e:	44 0b       	sbc	r20, r20
    1170:	93 95       	inc	r25
    1172:	f6 95       	lsr	r31
    1174:	87 95       	ror	r24
    1176:	77 95       	ror	r23
    1178:	67 95       	ror	r22
    117a:	57 95       	ror	r21
    117c:	40 40       	sbci	r20, 0x00	; 0
    117e:	ff 23       	and	r31, r31
    1180:	b9 f7       	brne	.-18     	; 0x1170 <__fp_di2sf+0x10>
    1182:	1b c0       	rjmp	.+54     	; 0x11ba <__fp_di2sf+0x5a>
    1184:	99 27       	eor	r25, r25
    1186:	08 95       	ret
    1188:	88 23       	and	r24, r24
    118a:	51 f4       	brne	.+20     	; 0x11a0 <__fp_di2sf+0x40>
    118c:	98 50       	subi	r25, 0x08	; 8
    118e:	d2 f7       	brpl	.-12     	; 0x1184 <__fp_di2sf+0x24>
    1190:	87 2b       	or	r24, r23
    1192:	76 2f       	mov	r23, r22
    1194:	65 2f       	mov	r22, r21
    1196:	54 2f       	mov	r21, r20
    1198:	43 2f       	mov	r20, r19
    119a:	32 2f       	mov	r19, r18
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	b1 f3       	breq	.-20     	; 0x118c <__fp_di2sf+0x2c>
    11a0:	12 16       	cp	r1, r18
    11a2:	13 06       	cpc	r1, r19
    11a4:	14 06       	cpc	r1, r20
    11a6:	44 0b       	sbc	r20, r20
    11a8:	88 23       	and	r24, r24
    11aa:	3a f0       	brmi	.+14     	; 0x11ba <__fp_di2sf+0x5a>
    11ac:	9a 95       	dec	r25
    11ae:	44 0f       	add	r20, r20
    11b0:	55 1f       	adc	r21, r21
    11b2:	66 1f       	adc	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	88 1f       	adc	r24, r24
    11b8:	ca f7       	brpl	.-14     	; 0x11ac <__fp_di2sf+0x4c>
    11ba:	55 23       	and	r21, r21
    11bc:	4a f4       	brpl	.+18     	; 0x11d0 <__fp_di2sf+0x70>
    11be:	44 0f       	add	r20, r20
    11c0:	55 1f       	adc	r21, r21
    11c2:	11 f4       	brne	.+4      	; 0x11c8 <__fp_di2sf+0x68>
    11c4:	60 ff       	sbrs	r22, 0
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <__fp_di2sf+0x70>
    11c8:	6f 5f       	subi	r22, 0xFF	; 255
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	8f 4f       	sbci	r24, 0xFF	; 255
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	88 0f       	add	r24, r24
    11d2:	96 95       	lsr	r25
    11d4:	87 95       	ror	r24
    11d6:	97 f9       	bld	r25, 7
    11d8:	08 95       	ret

000011da <__fp_cmp>:
    11da:	99 0f       	add	r25, r25
    11dc:	00 08       	sbc	r0, r0
    11de:	55 0f       	add	r21, r21
    11e0:	aa 0b       	sbc	r26, r26
    11e2:	e0 e8       	ldi	r30, 0x80	; 128
    11e4:	fe ef       	ldi	r31, 0xFE	; 254
    11e6:	16 16       	cp	r1, r22
    11e8:	17 06       	cpc	r1, r23
    11ea:	e8 07       	cpc	r30, r24
    11ec:	f9 07       	cpc	r31, r25
    11ee:	c0 f0       	brcs	.+48     	; 0x1220 <__fp_cmp+0x46>
    11f0:	12 16       	cp	r1, r18
    11f2:	13 06       	cpc	r1, r19
    11f4:	e4 07       	cpc	r30, r20
    11f6:	f5 07       	cpc	r31, r21
    11f8:	98 f0       	brcs	.+38     	; 0x1220 <__fp_cmp+0x46>
    11fa:	62 1b       	sub	r22, r18
    11fc:	73 0b       	sbc	r23, r19
    11fe:	84 0b       	sbc	r24, r20
    1200:	95 0b       	sbc	r25, r21
    1202:	39 f4       	brne	.+14     	; 0x1212 <__fp_cmp+0x38>
    1204:	0a 26       	eor	r0, r26
    1206:	61 f0       	breq	.+24     	; 0x1220 <__fp_cmp+0x46>
    1208:	23 2b       	or	r18, r19
    120a:	24 2b       	or	r18, r20
    120c:	25 2b       	or	r18, r21
    120e:	21 f4       	brne	.+8      	; 0x1218 <__fp_cmp+0x3e>
    1210:	08 95       	ret
    1212:	0a 26       	eor	r0, r26
    1214:	09 f4       	brne	.+2      	; 0x1218 <__fp_cmp+0x3e>
    1216:	a1 40       	sbci	r26, 0x01	; 1
    1218:	a6 95       	lsr	r26
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	81 1d       	adc	r24, r1
    121e:	81 1d       	adc	r24, r1
    1220:	08 95       	ret

00001222 <__fp_inf>:
    1222:	97 f9       	bld	r25, 7
    1224:	9f 67       	ori	r25, 0x7F	; 127
    1226:	80 e8       	ldi	r24, 0x80	; 128
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	08 95       	ret

0000122e <__fp_nan>:
    122e:	9f ef       	ldi	r25, 0xFF	; 255
    1230:	80 ec       	ldi	r24, 0xC0	; 192
    1232:	08 95       	ret

00001234 <__fp_pscA>:
    1234:	00 24       	eor	r0, r0
    1236:	0a 94       	dec	r0
    1238:	16 16       	cp	r1, r22
    123a:	17 06       	cpc	r1, r23
    123c:	18 06       	cpc	r1, r24
    123e:	09 06       	cpc	r0, r25
    1240:	08 95       	ret

00001242 <__fp_pscB>:
    1242:	00 24       	eor	r0, r0
    1244:	0a 94       	dec	r0
    1246:	12 16       	cp	r1, r18
    1248:	13 06       	cpc	r1, r19
    124a:	14 06       	cpc	r1, r20
    124c:	05 06       	cpc	r0, r21
    124e:	08 95       	ret

00001250 <__fp_round>:
    1250:	09 2e       	mov	r0, r25
    1252:	03 94       	inc	r0
    1254:	00 0c       	add	r0, r0
    1256:	11 f4       	brne	.+4      	; 0x125c <__fp_round+0xc>
    1258:	88 23       	and	r24, r24
    125a:	52 f0       	brmi	.+20     	; 0x1270 <__fp_round+0x20>
    125c:	bb 0f       	add	r27, r27
    125e:	40 f4       	brcc	.+16     	; 0x1270 <__fp_round+0x20>
    1260:	bf 2b       	or	r27, r31
    1262:	11 f4       	brne	.+4      	; 0x1268 <__fp_round+0x18>
    1264:	60 ff       	sbrs	r22, 0
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <__fp_round+0x20>
    1268:	6f 5f       	subi	r22, 0xFF	; 255
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	8f 4f       	sbci	r24, 0xFF	; 255
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	08 95       	ret

00001272 <__fp_split3>:
    1272:	57 fd       	sbrc	r21, 7
    1274:	90 58       	subi	r25, 0x80	; 128
    1276:	44 0f       	add	r20, r20
    1278:	55 1f       	adc	r21, r21
    127a:	59 f0       	breq	.+22     	; 0x1292 <__fp_splitA+0x10>
    127c:	5f 3f       	cpi	r21, 0xFF	; 255
    127e:	71 f0       	breq	.+28     	; 0x129c <__fp_splitA+0x1a>
    1280:	47 95       	ror	r20

00001282 <__fp_splitA>:
    1282:	88 0f       	add	r24, r24
    1284:	97 fb       	bst	r25, 7
    1286:	99 1f       	adc	r25, r25
    1288:	61 f0       	breq	.+24     	; 0x12a2 <__fp_splitA+0x20>
    128a:	9f 3f       	cpi	r25, 0xFF	; 255
    128c:	79 f0       	breq	.+30     	; 0x12ac <__fp_splitA+0x2a>
    128e:	87 95       	ror	r24
    1290:	08 95       	ret
    1292:	12 16       	cp	r1, r18
    1294:	13 06       	cpc	r1, r19
    1296:	14 06       	cpc	r1, r20
    1298:	55 1f       	adc	r21, r21
    129a:	f2 cf       	rjmp	.-28     	; 0x1280 <__fp_split3+0xe>
    129c:	46 95       	lsr	r20
    129e:	f1 df       	rcall	.-30     	; 0x1282 <__fp_splitA>
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <__fp_splitA+0x30>
    12a2:	16 16       	cp	r1, r22
    12a4:	17 06       	cpc	r1, r23
    12a6:	18 06       	cpc	r1, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	f1 cf       	rjmp	.-30     	; 0x128e <__fp_splitA+0xc>
    12ac:	86 95       	lsr	r24
    12ae:	71 05       	cpc	r23, r1
    12b0:	61 05       	cpc	r22, r1
    12b2:	08 94       	sec
    12b4:	08 95       	ret

000012b6 <__fp_zero>:
    12b6:	e8 94       	clt

000012b8 <__fp_szero>:
    12b8:	bb 27       	eor	r27, r27
    12ba:	66 27       	eor	r22, r22
    12bc:	77 27       	eor	r23, r23
    12be:	cb 01       	movw	r24, r22
    12c0:	97 f9       	bld	r25, 7
    12c2:	08 95       	ret

000012c4 <__mulsf3>:
    12c4:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulsf3x>
    12c8:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__fp_round>
    12cc:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fp_pscA>
    12d0:	38 f0       	brcs	.+14     	; 0x12e0 <__mulsf3+0x1c>
    12d2:	0e 94 21 09 	call	0x1242	; 0x1242 <__fp_pscB>
    12d6:	20 f0       	brcs	.+8      	; 0x12e0 <__mulsf3+0x1c>
    12d8:	95 23       	and	r25, r21
    12da:	11 f0       	breq	.+4      	; 0x12e0 <__mulsf3+0x1c>
    12dc:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_inf>
    12e0:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_nan>
    12e4:	11 24       	eor	r1, r1
    12e6:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_szero>

000012ea <__mulsf3x>:
    12ea:	0e 94 39 09 	call	0x1272	; 0x1272 <__fp_split3>
    12ee:	70 f3       	brcs	.-36     	; 0x12cc <__mulsf3+0x8>

000012f0 <__mulsf3_pse>:
    12f0:	95 9f       	mul	r25, r21
    12f2:	c1 f3       	breq	.-16     	; 0x12e4 <__mulsf3+0x20>
    12f4:	95 0f       	add	r25, r21
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	55 1f       	adc	r21, r21
    12fa:	62 9f       	mul	r22, r18
    12fc:	f0 01       	movw	r30, r0
    12fe:	72 9f       	mul	r23, r18
    1300:	bb 27       	eor	r27, r27
    1302:	f0 0d       	add	r31, r0
    1304:	b1 1d       	adc	r27, r1
    1306:	63 9f       	mul	r22, r19
    1308:	aa 27       	eor	r26, r26
    130a:	f0 0d       	add	r31, r0
    130c:	b1 1d       	adc	r27, r1
    130e:	aa 1f       	adc	r26, r26
    1310:	64 9f       	mul	r22, r20
    1312:	66 27       	eor	r22, r22
    1314:	b0 0d       	add	r27, r0
    1316:	a1 1d       	adc	r26, r1
    1318:	66 1f       	adc	r22, r22
    131a:	82 9f       	mul	r24, r18
    131c:	22 27       	eor	r18, r18
    131e:	b0 0d       	add	r27, r0
    1320:	a1 1d       	adc	r26, r1
    1322:	62 1f       	adc	r22, r18
    1324:	73 9f       	mul	r23, r19
    1326:	b0 0d       	add	r27, r0
    1328:	a1 1d       	adc	r26, r1
    132a:	62 1f       	adc	r22, r18
    132c:	83 9f       	mul	r24, r19
    132e:	a0 0d       	add	r26, r0
    1330:	61 1d       	adc	r22, r1
    1332:	22 1f       	adc	r18, r18
    1334:	74 9f       	mul	r23, r20
    1336:	33 27       	eor	r19, r19
    1338:	a0 0d       	add	r26, r0
    133a:	61 1d       	adc	r22, r1
    133c:	23 1f       	adc	r18, r19
    133e:	84 9f       	mul	r24, r20
    1340:	60 0d       	add	r22, r0
    1342:	21 1d       	adc	r18, r1
    1344:	82 2f       	mov	r24, r18
    1346:	76 2f       	mov	r23, r22
    1348:	6a 2f       	mov	r22, r26
    134a:	11 24       	eor	r1, r1
    134c:	9f 57       	subi	r25, 0x7F	; 127
    134e:	50 40       	sbci	r21, 0x00	; 0
    1350:	9a f0       	brmi	.+38     	; 0x1378 <__mulsf3_pse+0x88>
    1352:	f1 f0       	breq	.+60     	; 0x1390 <__mulsf3_pse+0xa0>
    1354:	88 23       	and	r24, r24
    1356:	4a f0       	brmi	.+18     	; 0x136a <__mulsf3_pse+0x7a>
    1358:	ee 0f       	add	r30, r30
    135a:	ff 1f       	adc	r31, r31
    135c:	bb 1f       	adc	r27, r27
    135e:	66 1f       	adc	r22, r22
    1360:	77 1f       	adc	r23, r23
    1362:	88 1f       	adc	r24, r24
    1364:	91 50       	subi	r25, 0x01	; 1
    1366:	50 40       	sbci	r21, 0x00	; 0
    1368:	a9 f7       	brne	.-22     	; 0x1354 <__mulsf3_pse+0x64>
    136a:	9e 3f       	cpi	r25, 0xFE	; 254
    136c:	51 05       	cpc	r21, r1
    136e:	80 f0       	brcs	.+32     	; 0x1390 <__mulsf3_pse+0xa0>
    1370:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_inf>
    1374:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_szero>
    1378:	5f 3f       	cpi	r21, 0xFF	; 255
    137a:	e4 f3       	brlt	.-8      	; 0x1374 <__mulsf3_pse+0x84>
    137c:	98 3e       	cpi	r25, 0xE8	; 232
    137e:	d4 f3       	brlt	.-12     	; 0x1374 <__mulsf3_pse+0x84>
    1380:	86 95       	lsr	r24
    1382:	77 95       	ror	r23
    1384:	67 95       	ror	r22
    1386:	b7 95       	ror	r27
    1388:	f7 95       	ror	r31
    138a:	e7 95       	ror	r30
    138c:	9f 5f       	subi	r25, 0xFF	; 255
    138e:	c1 f7       	brne	.-16     	; 0x1380 <__mulsf3_pse+0x90>
    1390:	fe 2b       	or	r31, r30
    1392:	88 0f       	add	r24, r24
    1394:	91 1d       	adc	r25, r1
    1396:	96 95       	lsr	r25
    1398:	87 95       	ror	r24
    139a:	97 f9       	bld	r25, 7
    139c:	08 95       	ret

0000139e <__tablejump2__>:
    139e:	ee 0f       	add	r30, r30
    13a0:	ff 1f       	adc	r31, r31
    13a2:	05 90       	lpm	r0, Z+
    13a4:	f4 91       	lpm	r31, Z
    13a6:	e0 2d       	mov	r30, r0
    13a8:	09 94       	ijmp

000013aa <__umoddi3>:
    13aa:	68 94       	set
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <__udivdi3_umoddi3>

000013ae <__udivdi3>:
    13ae:	e8 94       	clt

000013b0 <__udivdi3_umoddi3>:
    13b0:	8f 92       	push	r8
    13b2:	9f 92       	push	r9
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__udivmod64>
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	9f 90       	pop	r9
    13c2:	8f 90       	pop	r8
    13c4:	08 95       	ret

000013c6 <__udivmod64>:
    13c6:	88 24       	eor	r8, r8
    13c8:	99 24       	eor	r9, r9
    13ca:	f4 01       	movw	r30, r8
    13cc:	e4 01       	movw	r28, r8
    13ce:	b0 e4       	ldi	r27, 0x40	; 64
    13d0:	9f 93       	push	r25
    13d2:	aa 27       	eor	r26, r26
    13d4:	9a 15       	cp	r25, r10
    13d6:	8b 04       	cpc	r8, r11
    13d8:	9c 04       	cpc	r9, r12
    13da:	ed 05       	cpc	r30, r13
    13dc:	fe 05       	cpc	r31, r14
    13de:	cf 05       	cpc	r28, r15
    13e0:	d0 07       	cpc	r29, r16
    13e2:	a1 07       	cpc	r26, r17
    13e4:	98 f4       	brcc	.+38     	; 0x140c <__udivmod64+0x46>
    13e6:	ad 2f       	mov	r26, r29
    13e8:	dc 2f       	mov	r29, r28
    13ea:	cf 2f       	mov	r28, r31
    13ec:	fe 2f       	mov	r31, r30
    13ee:	e9 2d       	mov	r30, r9
    13f0:	98 2c       	mov	r9, r8
    13f2:	89 2e       	mov	r8, r25
    13f4:	98 2f       	mov	r25, r24
    13f6:	87 2f       	mov	r24, r23
    13f8:	76 2f       	mov	r23, r22
    13fa:	65 2f       	mov	r22, r21
    13fc:	54 2f       	mov	r21, r20
    13fe:	43 2f       	mov	r20, r19
    1400:	32 2f       	mov	r19, r18
    1402:	22 27       	eor	r18, r18
    1404:	b8 50       	subi	r27, 0x08	; 8
    1406:	31 f7       	brne	.-52     	; 0x13d4 <__udivmod64+0xe>
    1408:	bf 91       	pop	r27
    140a:	27 c0       	rjmp	.+78     	; 0x145a <__udivmod64+0x94>
    140c:	1b 2e       	mov	r1, r27
    140e:	bf 91       	pop	r27
    1410:	bb 27       	eor	r27, r27
    1412:	22 0f       	add	r18, r18
    1414:	33 1f       	adc	r19, r19
    1416:	44 1f       	adc	r20, r20
    1418:	55 1f       	adc	r21, r21
    141a:	66 1f       	adc	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	88 1f       	adc	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	88 1c       	adc	r8, r8
    1424:	99 1c       	adc	r9, r9
    1426:	ee 1f       	adc	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	cc 1f       	adc	r28, r28
    142c:	dd 1f       	adc	r29, r29
    142e:	aa 1f       	adc	r26, r26
    1430:	bb 1f       	adc	r27, r27
    1432:	8a 14       	cp	r8, r10
    1434:	9b 04       	cpc	r9, r11
    1436:	ec 05       	cpc	r30, r12
    1438:	fd 05       	cpc	r31, r13
    143a:	ce 05       	cpc	r28, r14
    143c:	df 05       	cpc	r29, r15
    143e:	a0 07       	cpc	r26, r16
    1440:	b1 07       	cpc	r27, r17
    1442:	48 f0       	brcs	.+18     	; 0x1456 <__udivmod64+0x90>
    1444:	8a 18       	sub	r8, r10
    1446:	9b 08       	sbc	r9, r11
    1448:	ec 09       	sbc	r30, r12
    144a:	fd 09       	sbc	r31, r13
    144c:	ce 09       	sbc	r28, r14
    144e:	df 09       	sbc	r29, r15
    1450:	a0 0b       	sbc	r26, r16
    1452:	b1 0b       	sbc	r27, r17
    1454:	21 60       	ori	r18, 0x01	; 1
    1456:	1a 94       	dec	r1
    1458:	e1 f6       	brne	.-72     	; 0x1412 <__udivmod64+0x4c>
    145a:	2e f4       	brtc	.+10     	; 0x1466 <__udivmod64+0xa0>
    145c:	94 01       	movw	r18, r8
    145e:	af 01       	movw	r20, r30
    1460:	be 01       	movw	r22, r28
    1462:	cd 01       	movw	r24, r26
    1464:	00 0c       	add	r0, r0
    1466:	08 95       	ret

00001468 <__adddi3>:
    1468:	2a 0d       	add	r18, r10
    146a:	3b 1d       	adc	r19, r11
    146c:	4c 1d       	adc	r20, r12
    146e:	5d 1d       	adc	r21, r13
    1470:	6e 1d       	adc	r22, r14
    1472:	7f 1d       	adc	r23, r15
    1474:	80 1f       	adc	r24, r16
    1476:	91 1f       	adc	r25, r17
    1478:	08 95       	ret

0000147a <__adddi3_s8>:
    147a:	00 24       	eor	r0, r0
    147c:	a7 fd       	sbrc	r26, 7
    147e:	00 94       	com	r0
    1480:	2a 0f       	add	r18, r26
    1482:	30 1d       	adc	r19, r0
    1484:	40 1d       	adc	r20, r0
    1486:	50 1d       	adc	r21, r0
    1488:	60 1d       	adc	r22, r0
    148a:	70 1d       	adc	r23, r0
    148c:	80 1d       	adc	r24, r0
    148e:	90 1d       	adc	r25, r0
    1490:	08 95       	ret

00001492 <__cmpdi2>:
    1492:	2a 15       	cp	r18, r10
    1494:	3b 05       	cpc	r19, r11
    1496:	4c 05       	cpc	r20, r12
    1498:	5d 05       	cpc	r21, r13
    149a:	6e 05       	cpc	r22, r14
    149c:	7f 05       	cpc	r23, r15
    149e:	80 07       	cpc	r24, r16
    14a0:	91 07       	cpc	r25, r17
    14a2:	08 95       	ret

000014a4 <__cmpdi2_s8>:
    14a4:	00 24       	eor	r0, r0
    14a6:	a7 fd       	sbrc	r26, 7
    14a8:	00 94       	com	r0
    14aa:	2a 17       	cp	r18, r26
    14ac:	30 05       	cpc	r19, r0
    14ae:	40 05       	cpc	r20, r0
    14b0:	50 05       	cpc	r21, r0
    14b2:	60 05       	cpc	r22, r0
    14b4:	70 05       	cpc	r23, r0
    14b6:	80 05       	cpc	r24, r0
    14b8:	90 05       	cpc	r25, r0
    14ba:	08 95       	ret

000014bc <_exit>:
    14bc:	f8 94       	cli

000014be <__stop_program>:
    14be:	ff cf       	rjmp	.-2      	; 0x14be <__stop_program>
