
DebouncingPatternTestApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000b94  00000c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080006c  0080006c  00000c34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016e8  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b32  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000105a  00000000  00000000  00003012  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  0000406c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f6  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea0  00000000  00000000  00004bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005a7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	1f 02       	muls	r17, r31
  56:	2a 02       	muls	r18, r26
  58:	35 02       	muls	r19, r21
  5a:	40 02       	muls	r20, r16
  5c:	4b 02       	muls	r20, r27
  5e:	56 02       	muls	r21, r22
  60:	61 02       	muls	r22, r17

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e4 e9       	ldi	r30, 0x94	; 148
  76:	fb e0       	ldi	r31, 0x0B	; 11
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	ac 36       	cpi	r26, 0x6C	; 108
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	ac e6       	ldi	r26, 0x6C	; 108
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a1 38       	cpi	r26, 0x81	; 129
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 2b 04 	call	0x856	; 0x856 <main>
  98:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <BUTTONClient_EventReceive>:
* @param [in]  ClientData -  Struct containing Client Data.
*
* @return function error state.
*/
ERROR_STATE_t BUTTONClient_EventReceive(STR_BTNClient_t * const ClientData)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	ec 01       	movw	r28, r24
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
   
   /* State Machine */
   switch(ENU_ClientState)
  a6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	81 f0       	breq	.+32     	; 0xce <BUTTONClient_EventReceive+0x2e>
  ae:	18 f0       	brcs	.+6      	; 0xb6 <BUTTONClient_EventReceive+0x16>
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	31 f1       	breq	.+76     	; 0x100 <BUTTONClient_EventReceive+0x60>
  b4:	3c c0       	rjmp	.+120    	; 0x12e <BUTTONClient_EventReceive+0x8e>
   {
      /* Get First Button Reading State */
      case ButtonClient_Ready:
         RetErrorState = BUTTON_getState(ClientData->u8_ButtonCh, &ClientData->u8_OldButtonState);
  b6:	be 01       	movw	r22, r28
  b8:	6e 5f       	subi	r22, 0xFE	; 254
  ba:	7f 4f       	sbci	r23, 0xFF	; 255
  bc:	88 81       	ld	r24, Y
  be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <BUTTON_getState>
         if(ERROR_OK == RetErrorState)
  c2:	81 11       	cpse	r24, r1
  c4:	36 c0       	rjmp	.+108    	; 0x132 <BUTTONClient_EventReceive+0x92>
         {  
            /* Go to debounce Delay State. */
            ENU_ClientState = ButtonClient_Delay;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
  cc:	35 c0       	rjmp	.+106    	; 0x138 <BUTTONClient_EventReceive+0x98>
         }
         break;
      /* Debounce Delay State */
      case ButtonClient_Delay:
         /* Call Delay Status. */
         RetErrorState = TIM_DelayStatus(ClientData->u8_TimerCh, BUTTONClient_EventReceive);
  ce:	60 e5       	ldi	r22, 0x50	; 80
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	0e 94 bd 03 	call	0x77a	; 0x77a <TIM_DelayStatus>
         /* If Delay is not used by another API. */
         if(TIMER_E_DELAY_EMPTY == RetErrorState)
  d8:	8b 3f       	cpi	r24, 0xFB	; 251
  da:	59 f4       	brne	.+22     	; 0xf2 <BUTTONClient_EventReceive+0x52>
         {
            /* Start Delay with 20 Milliseconds. */
            TIM_DelayMs(ClientData->u8_TimerCh, ClientData->u32_DebounceDelay, BUTTONClient_EventReceive);
  dc:	4c 81       	ldd	r20, Y+4	; 0x04
  de:	5d 81       	ldd	r21, Y+5	; 0x05
  e0:	6e 81       	ldd	r22, Y+6	; 0x06
  e2:	7f 81       	ldd	r23, Y+7	; 0x07
  e4:	20 e5       	ldi	r18, 0x50	; 80
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	0e 94 2c 03 	call	0x658	; 0x658 <TIM_DelayMs>
   
   /* Used Function Return Error State */
   ERROR_STATE_t RetErrorState;
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	23 c0       	rjmp	.+70     	; 0x138 <BUTTONClient_EventReceive+0x98>
         {
            /* Start Delay with 20 Milliseconds. */
            TIM_DelayMs(ClientData->u8_TimerCh, ClientData->u32_DebounceDelay, BUTTONClient_EventReceive);
         }
         /* If Delay Finished */
         else if(ERROR_OK == RetErrorState)
  f2:	81 11       	cpse	r24, r1
  f4:	20 c0       	rjmp	.+64     	; 0x136 <BUTTONClient_EventReceive+0x96>
         {
            /* Go To Get Second Button Reading State. */
            ENU_ClientState = ButtonClient_StateReady;
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
   
   /* Used Function Return Error State */
   ERROR_STATE_t RetErrorState;
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	1c c0       	rjmp	.+56     	; 0x138 <BUTTONClient_EventReceive+0x98>
            /* Do Nothing */
         }
         break;
      /* Get Second Button Reading State. */
      case ButtonClient_StateReady:
         ErrorState = BUTTON_getState(ClientData->u8_ButtonCh, &ClientData->u8_ButtonState);
 100:	be 01       	movw	r22, r28
 102:	6f 5f       	subi	r22, 0xFF	; 255
 104:	7f 4f       	sbci	r23, 0xFF	; 255
 106:	88 81       	ld	r24, Y
 108:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <BUTTON_getState>
         if(ERROR_OK == RetErrorState)
         {
            /* Compare the button old state with the new state. */
            if(ClientData->u8_OldButtonState == ClientData->u8_ButtonState)
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	98 13       	cpse	r25, r24
 112:	07 c0       	rjmp	.+14     	; 0x122 <BUTTONClient_EventReceive+0x82>
            {
               /* Make Sure Callback is not pointing to null. */
               if(NULL_PTR != ClientData->EventCallback)
 114:	e8 85       	ldd	r30, Y+8	; 0x08
 116:	f9 85       	ldd	r31, Y+9	; 0x09
 118:	30 97       	sbiw	r30, 0x00	; 0
 11a:	29 f0       	breq	.+10     	; 0x126 <BUTTONClient_EventReceive+0x86>
               {
                  /* Call The callback function. */
                  ClientData->EventCallback();
 11c:	09 95       	icall
               }                 
               ErrorState = ERROR_OK;
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	03 c0       	rjmp	.+6      	; 0x128 <BUTTONClient_EventReceive+0x88>
            }
            else
            {
               ErrorState = ERROR_NOK;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	01 c0       	rjmp	.+2      	; 0x128 <BUTTONClient_EventReceive+0x88>
               if(NULL_PTR != ClientData->EventCallback)
               {
                  /* Call The callback function. */
                  ClientData->EventCallback();
               }                 
               ErrorState = ERROR_OK;
 126:	80 e0       	ldi	r24, 0x00	; 0
         else
         {
            /* Do Nothing */
         }
         /* Go To New Button Reading State. */
         ENU_ClientState = ButtonClient_Ready;
 128:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
         break;
 12c:	05 c0       	rjmp	.+10     	; 0x138 <BUTTONClient_EventReceive+0x98>
   
   /* Used Function Return Error State */
   ERROR_STATE_t RetErrorState;
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	03 c0       	rjmp	.+6      	; 0x138 <BUTTONClient_EventReceive+0x98>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	01 c0       	rjmp	.+2      	; 0x138 <BUTTONClient_EventReceive+0x98>
 136:	81 e0       	ldi	r24, 0x01	; 1
         break;
   }
   
   /* Return Function Error State. */
   return ErrorState;
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <BUTTONClient_Init>:
* @param [in]  ClientData  -  Struct containing Client Data.
*
* @return function error state.
*/
ERROR_STATE_t BUTTONClient_Init(STR_BTNClient_t * const ClientData)
{
 13e:	fc 01       	movw	r30, r24
   ClientData->u8_ButtonCh = BTN_INVALID_CH;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 83       	st	Z, r24
   ClientData->u8_ButtonState = 0;
 144:	11 82       	std	Z+1, r1	; 0x01
   ClientData->u8_OldButtonState = 0;
 146:	12 82       	std	Z+2, r1	; 0x02
   ClientData->u8_TimerCh = INVALID_TIMER_CH;
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	83 83       	std	Z+3, r24	; 0x03
   ClientData->u32_DebounceDelay = 0;
 14c:	14 82       	std	Z+4, r1	; 0x04
 14e:	15 82       	std	Z+5, r1	; 0x05
 150:	16 82       	std	Z+6, r1	; 0x06
 152:	17 82       	std	Z+7, r1	; 0x07
   ClientData->EventCallback = NULL_PTR;
 154:	11 86       	std	Z+9, r1	; 0x09
 156:	10 86       	std	Z+8, r1	; 0x08
   return ERROR_OK;
}
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret

0000015c <BUTTONClient_SetBtn>:
*/
ERROR_STATE_t BUTTONClient_SetBtn(STR_BTNClient_t * const ClientData, uint8_t BTN_CH)
{
   ERROR_STATE_t Client_ErrorState;
   
   if(BTN_CH >= BTN_INVALID_CH)
 15c:	61 11       	cpse	r22, r1
 15e:	02 c0       	rjmp	.+4      	; 0x164 <BUTTONClient_SetBtn+0x8>
   {
      Client_ErrorState = ERROR_NOK;
   }
   else
   {
      ClientData->u8_ButtonCh = BTN_CH;
 160:	fc 01       	movw	r30, r24
 162:	60 83       	st	Z, r22
   }
   
   return Client_ErrorState;
}
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	08 95       	ret

00000168 <BUTTONClient_SetTimer>:
*/
ERROR_STATE_t BUTTONClient_SetTimer(STR_BTNClient_t * const ClientData, uint8_t TIM_CH, uint32_t DelayMS)
{
   ERROR_STATE_t Client_ErrorState;
   
   if(TIM_CH >= INVALID_TIMER_CH)
 168:	63 30       	cpi	r22, 0x03	; 3
 16a:	40 f4       	brcc	.+16     	; 0x17c <BUTTONClient_SetTimer+0x14>
   {
      Client_ErrorState = ERROR_NOK;
   }
   else
   {
      ClientData->u8_TimerCh = TIM_CH;
 16c:	fc 01       	movw	r30, r24
 16e:	63 83       	std	Z+3, r22	; 0x03
      ClientData->u32_DebounceDelay = DelayMS;
 170:	24 83       	std	Z+4, r18	; 0x04
 172:	35 83       	std	Z+5, r19	; 0x05
 174:	46 83       	std	Z+6, r20	; 0x06
 176:	57 83       	std	Z+7, r21	; 0x07
      Client_ErrorState = ERROR_OK;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
{
   ERROR_STATE_t Client_ErrorState;
   
   if(TIM_CH >= INVALID_TIMER_CH)
   {
      Client_ErrorState = ERROR_NOK;
 17c:	81 e0       	ldi	r24, 0x01	; 1
      ClientData->u32_DebounceDelay = DelayMS;
      Client_ErrorState = ERROR_OK;
   }
   
   return Client_ErrorState;
}
 17e:	08 95       	ret

00000180 <BUTTONClient_SetEventCallback>:
*/
ERROR_STATE_t BUTTONClient_SetEventCallback(STR_BTNClient_t * const ClientData, Ptr_VoidFuncVoid_t Callback)
{
   ERROR_STATE_t Client_ErrorState;
   
   if(NULL_PTR == Callback)
 180:	61 15       	cp	r22, r1
 182:	71 05       	cpc	r23, r1
 184:	29 f0       	breq	.+10     	; 0x190 <BUTTONClient_SetEventCallback+0x10>
   {
      Client_ErrorState = ERROR_NOK;
   }
   else
   {
      ClientData->EventCallback = Callback;
 186:	fc 01       	movw	r30, r24
 188:	71 87       	std	Z+9, r23	; 0x09
 18a:	60 87       	std	Z+8, r22	; 0x08
      Client_ErrorState = ERROR_OK;
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
{
   ERROR_STATE_t Client_ErrorState;
   
   if(NULL_PTR == Callback)
   {
      Client_ErrorState = ERROR_NOK;
 190:	81 e0       	ldi	r24, 0x01	; 1
      ClientData->EventCallback = Callback;
      Client_ErrorState = ERROR_OK;
   }
   
   return Client_ErrorState;
}
 192:	08 95       	ret

00000194 <Button_Init>:
* @param [in]  BUTTON_CH -  Button channel number.
*
* @return button state.
*/
ERROR_STATE_t Button_Init(uint8_t BUTTON_CH)
{
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
   ERROR_STATE_t BUTTON_ErrorState;
   if(BUTTON_CH >= BTN_INVALID_CH)
 19a:	81 11       	cpse	r24, r1
 19c:	14 c0       	rjmp	.+40     	; 0x1c6 <Button_Init+0x32>
   {
      uint8_t BTN_Port;
      uint8_t BTN_Pin;
      uint8_t BTN_PullUp;
      
      switch(BUTTON_CH)
 19e:	81 11       	cpse	r24, r1
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <Button_Init+0x18>
      {
         case BTN_0:
            BTN_Port = gastr_Button_Config[BTN_0].u8_Port;
 1a2:	e0 e6       	ldi	r30, 0x60	; 96
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	c0 81       	ld	r28, Z
            BTN_Pin = gastr_Button_Config[BTN_0].u8_Pin;
 1a8:	d1 81       	ldd	r29, Z+1	; 0x01
            BTN_PullUp = gastr_Button_Config[BTN_0].u8_PullUp;
 1aa:	12 81       	ldd	r17, Z+2	; 0x02
            BUTTON_ErrorState = BTN_E_INVALID_CH_NUM;
            break;
      }
      
      /* Init Button Pins */
      DIO_SetPinDirection(BTN_Port, BTN_Pin, INPUT);
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	6d 2f       	mov	r22, r29
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 03 01 	call	0x206	; 0x206 <DIO_SetPinDirection>
      if(PULL_UP == BTN_PullUp)
 1b6:	11 30       	cpi	r17, 0x01	; 1
 1b8:	41 f4       	brne	.+16     	; 0x1ca <Button_Init+0x36>
      {
         DIO_EnablePinPullup(BTN_Port, BTN_Pin);
 1ba:	6d 2f       	mov	r22, r29
 1bc:	8c 2f       	mov	r24, r28
 1be:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_EnablePinPullup>
      }
      BUTTON_ErrorState = ERROR_OK;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <Button_Init+0x38>
ERROR_STATE_t Button_Init(uint8_t BUTTON_CH)
{
   ERROR_STATE_t BUTTON_ErrorState;
   if(BUTTON_CH >= BTN_INVALID_CH)
   {
      BUTTON_ErrorState = BTN_E_INVALID_CH_NUM;
 1c6:	8e ef       	ldi	r24, 0xFE	; 254
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <Button_Init+0x38>
      DIO_SetPinDirection(BTN_Port, BTN_Pin, INPUT);
      if(PULL_UP == BTN_PullUp)
      {
         DIO_EnablePinPullup(BTN_Port, BTN_Pin);
      }
      BUTTON_ErrorState = ERROR_OK;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
   }
   
   /* return function Error State. */   
   return BUTTON_ErrorState;
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	08 95       	ret

000001d4 <BUTTON_getState>:
* @return button state.
*/
ERROR_STATE_t BUTTON_getState(uint8_t BUTTON_CH, uint8_t * State)
{
   ERROR_STATE_t BUTTON_ErrorState;
   if(BUTTON_CH >= BTN_INVALID_CH)
 1d4:	81 11       	cpse	r24, r1
 1d6:	11 c0       	rjmp	.+34     	; 0x1fa <BUTTON_getState+0x26>
   {
      BUTTON_ErrorState = BTN_E_INVALID_CH_NUM;
   }
   else if(NULL_PTR == State)
 1d8:	61 15       	cp	r22, r1
 1da:	71 05       	cpc	r23, r1
 1dc:	81 f0       	breq	.+32     	; 0x1fe <BUTTON_getState+0x2a>
   {
      uint8_t BTN_Port;
      uint8_t BTN_Pin;
      uint8_t BTN_PullUp;
      
      switch(BUTTON_CH)
 1de:	81 11       	cpse	r24, r1
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <BUTTON_getState+0x16>
      {
         case BTN_0:
            BTN_Port = gastr_Button_Config[BTN_0].u8_Port;
 1e2:	e0 e6       	ldi	r30, 0x60	; 96
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	90 81       	ld	r25, Z
            BTN_Pin = gastr_Button_Config[BTN_0].u8_Pin;
 1e8:	21 81       	ldd	r18, Z+1	; 0x01
 1ea:	ab 01       	movw	r20, r22
      
      /* variable to get error status of the DIO API. */
      DIO_ERROR_state_t e_status;
      
      /* read DIO pin. */
      e_status = DIO_ReadPin(BTN_Port, BTN_Pin, State);
 1ec:	62 2f       	mov	r22, r18
 1ee:	89 2f       	mov	r24, r25
 1f0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <DIO_ReadPin>
      
      /* return data if DIO API returns success. */
      if(E_DIO_SUCCESS == e_status)
 1f4:	81 11       	cpse	r24, r1
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <BUTTON_getState+0x2e>
 1f8:	08 95       	ret
ERROR_STATE_t BUTTON_getState(uint8_t BUTTON_CH, uint8_t * State)
{
   ERROR_STATE_t BUTTON_ErrorState;
   if(BUTTON_CH >= BTN_INVALID_CH)
   {
      BUTTON_ErrorState = BTN_E_INVALID_CH_NUM;
 1fa:	8e ef       	ldi	r24, 0xFE	; 254
 1fc:	08 95       	ret
   }
   else if(NULL_PTR == State)
   {
      BUTTON_ErrorState = BTN_E_NULL_PTR;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	08 95       	ret
      {
         BUTTON_ErrorState = ERROR_OK;
      }
      else
      {
         BUTTON_ErrorState = ERROR_NOK;
 202:	81 e0       	ldi	r24, 0x01	; 1
      }
   }   
   
   /* return function Error State. */
   return BUTTON_ErrorState;
 204:	08 95       	ret

00000206 <DIO_SetPinDirection>:
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 206:	68 30       	cpi	r22, 0x08	; 8
 208:	80 f5       	brcc	.+96     	; 0x26a <DIO_SetPinDirection+0x64>
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	79 f0       	breq	.+30     	; 0x22c <DIO_SetPinDirection+0x26>
 20e:	28 f0       	brcs	.+10     	; 0x21a <DIO_SetPinDirection+0x14>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	31 f0       	breq	.+12     	; 0x220 <DIO_SetPinDirection+0x1a>
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	39 f0       	breq	.+14     	; 0x226 <DIO_SetPinDirection+0x20>
 218:	2a c0       	rjmp	.+84     	; 0x26e <DIO_SetPinDirection+0x68>
 21a:	ea e3       	ldi	r30, 0x3A	; 58
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	08 c0       	rjmp	.+16     	; 0x230 <DIO_SetPinDirection+0x2a>
 220:	e4 e3       	ldi	r30, 0x34	; 52
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	05 c0       	rjmp	.+10     	; 0x230 <DIO_SetPinDirection+0x2a>
 226:	e1 e3       	ldi	r30, 0x31	; 49
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_SetPinDirection+0x2a>
 22c:	e7 e3       	ldi	r30, 0x37	; 55
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	41 30       	cpi	r20, 0x01	; 1
 232:	61 f4       	brne	.+24     	; 0x24c <DIO_SetPinDirection+0x46>
 234:	20 81       	ld	r18, Z
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_SetPinDirection+0x3a>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_SetPinDirection+0x36>
 244:	82 2b       	or	r24, r18
 246:	80 83       	st	Z, r24
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	08 95       	ret
 24c:	41 11       	cpse	r20, r1
 24e:	11 c0       	rjmp	.+34     	; 0x272 <DIO_SetPinDirection+0x6c>
 250:	20 81       	ld	r18, Z
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_SetPinDirection+0x56>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_SetPinDirection+0x52>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	80 83       	st	Z, r24
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	08 95       	ret
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	08 95       	ret
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	08 95       	ret

00000276 <DIO_EnablePinPullup>:
 276:	68 30       	cpi	r22, 0x08	; 8
 278:	f8 f4       	brcc	.+62     	; 0x2b8 <DIO_EnablePinPullup+0x42>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	79 f0       	breq	.+30     	; 0x29c <DIO_EnablePinPullup+0x26>
 27e:	28 f0       	brcs	.+10     	; 0x28a <DIO_EnablePinPullup+0x14>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	31 f0       	breq	.+12     	; 0x290 <DIO_EnablePinPullup+0x1a>
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	39 f0       	breq	.+14     	; 0x296 <DIO_EnablePinPullup+0x20>
 288:	19 c0       	rjmp	.+50     	; 0x2bc <DIO_EnablePinPullup+0x46>
 28a:	eb e3       	ldi	r30, 0x3B	; 59
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	08 c0       	rjmp	.+16     	; 0x2a0 <DIO_EnablePinPullup+0x2a>
 290:	e5 e3       	ldi	r30, 0x35	; 53
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <DIO_EnablePinPullup+0x2a>
 296:	e2 e3       	ldi	r30, 0x32	; 50
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_EnablePinPullup+0x2a>
 29c:	e8 e3       	ldi	r30, 0x38	; 56
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	20 81       	ld	r18, Z
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_EnablePinPullup+0x36>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_EnablePinPullup+0x32>
 2b0:	82 2b       	or	r24, r18
 2b2:	80 83       	st	Z, r24
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	08 95       	ret
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	08 95       	ret

000002c0 <DIO_ReadPin>:
{
   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
 2c0:	41 15       	cp	r20, r1
 2c2:	51 05       	cpc	r21, r1
 2c4:	39 f1       	breq	.+78     	; 0x314 <DIO_ReadPin+0x54>
   {
      return E_DIO_NULL_PTR;
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
 2c6:	68 30       	cpi	r22, 0x08	; 8
 2c8:	38 f5       	brcc	.+78     	; 0x318 <DIO_ReadPin+0x58>
   {
      /* do nothing */
   }
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	79 f0       	breq	.+30     	; 0x2ec <DIO_ReadPin+0x2c>
 2ce:	28 f0       	brcs	.+10     	; 0x2da <DIO_ReadPin+0x1a>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	31 f0       	breq	.+12     	; 0x2e0 <DIO_ReadPin+0x20>
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	39 f0       	breq	.+14     	; 0x2e6 <DIO_ReadPin+0x26>
 2d8:	21 c0       	rjmp	.+66     	; 0x31c <DIO_ReadPin+0x5c>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
 2da:	e9 e3       	ldi	r30, 0x39	; 57
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	08 c0       	rjmp	.+16     	; 0x2f0 <DIO_ReadPin+0x30>
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
         break;
      case PORTC:
         prt_port_stat = &PORTC_STAT;
 2e0:	e3 e3       	ldi	r30, 0x33	; 51
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <DIO_ReadPin+0x30>
      case PORTD:
         prt_port_stat = &PORTD_STAT;
 2e6:	e0 e3       	ldi	r30, 0x30	; 48
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_ReadPin+0x30>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
 2ec:	e6 e3       	ldi	r30, 0x36	; 54
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* read the pin value and put it in the data. */
   if(BIT_IS_SET(*prt_port_stat,pin))
 2f0:	80 81       	ld	r24, Z
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_ReadPin+0x3a>
 2f6:	95 95       	asr	r25
 2f8:	87 95       	ror	r24
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_ReadPin+0x36>
 2fe:	80 ff       	sbrs	r24, 0
 300:	05 c0       	rjmp	.+10     	; 0x30c <DIO_ReadPin+0x4c>
   {
      *data = HIGH;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	fa 01       	movw	r30, r20
 306:	80 83       	st	Z, r24
   {
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret
   {
      *data = HIGH;
   }
   else
   {
      *data = LOW;
 30c:	fa 01       	movw	r30, r20
 30e:	10 82       	st	Z, r1
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
   {
      return E_DIO_NULL_PTR;
 314:	85 e0       	ldi	r24, 0x05	; 5
 316:	08 95       	ret
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	08 95       	ret
         break;
      case PORTD:
         prt_port_stat = &PORTD_STAT;
         break;
      default:
         return E_DIO_INVALID_PORT;
 31c:	83 e0       	ldi	r24, 0x03	; 3
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 31e:	08 95       	ret

00000320 <DIO_TogglePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 320:	68 30       	cpi	r22, 0x08	; 8
 322:	f8 f4       	brcc	.+62     	; 0x362 <DIO_TogglePin+0x42>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	79 f0       	breq	.+30     	; 0x346 <DIO_TogglePin+0x26>
 328:	28 f0       	brcs	.+10     	; 0x334 <DIO_TogglePin+0x14>
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	31 f0       	breq	.+12     	; 0x33a <DIO_TogglePin+0x1a>
 32e:	83 30       	cpi	r24, 0x03	; 3
 330:	39 f0       	breq	.+14     	; 0x340 <DIO_TogglePin+0x20>
 332:	19 c0       	rjmp	.+50     	; 0x366 <DIO_TogglePin+0x46>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 334:	eb e3       	ldi	r30, 0x3B	; 59
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	08 c0       	rjmp	.+16     	; 0x34a <DIO_TogglePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 33a:	e5 e3       	ldi	r30, 0x35	; 53
 33c:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 33e:	05 c0       	rjmp	.+10     	; 0x34a <DIO_TogglePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 340:	e2 e3       	ldi	r30, 0x32	; 50
 342:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_TogglePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 346:	e8 e3       	ldi	r30, 0x38	; 56
 348:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
 34a:	20 81       	ld	r18, Z
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_TogglePin+0x36>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_TogglePin+0x32>
 35a:	82 27       	eor	r24, r18
 35c:	80 83       	st	Z, r24
   
   /* return success message. */
   return E_DIO_SUCCESS;
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	08 95       	ret
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 366:	83 e0       	ldi	r24, 0x03	; 3
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
   
   /* return success message. */
   return E_DIO_SUCCESS;
 368:	08 95       	ret

0000036a <GetFreqPrescaleRatio>:
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
}
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	08 f0       	brcs	.+2      	; 0x370 <GetFreqPrescaleRatio+0x6>
 36e:	4e c0       	rjmp	.+156    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	fc 01       	movw	r30, r24
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	8e 0f       	add	r24, r30
 37a:	9f 1f       	adc	r25, r31
 37c:	fc 01       	movw	r30, r24
 37e:	ed 59       	subi	r30, 0x9D	; 157
 380:	ff 4f       	sbci	r31, 0xFF	; 255
 382:	82 81       	ldd	r24, Z+2	; 0x02
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	09 f1       	breq	.+66     	; 0x3ca <GetFreqPrescaleRatio+0x60>
 388:	28 f4       	brcc	.+10     	; 0x394 <GetFreqPrescaleRatio+0x2a>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	41 f0       	breq	.+16     	; 0x39e <GetFreqPrescaleRatio+0x34>
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	89 f0       	breq	.+34     	; 0x3b4 <GetFreqPrescaleRatio+0x4a>
 392:	a2 c0       	rjmp	.+324    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 394:	84 30       	cpi	r24, 0x04	; 4
 396:	21 f1       	breq	.+72     	; 0x3e0 <GetFreqPrescaleRatio+0x76>
 398:	85 30       	cpi	r24, 0x05	; 5
 39a:	69 f1       	breq	.+90     	; 0x3f6 <GetFreqPrescaleRatio+0x8c>
 39c:	9d c0       	rjmp	.+314    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	a0 e8       	ldi	r26, 0x80	; 128
 3a4:	bd e3       	ldi	r27, 0x3D	; 61
 3a6:	fb 01       	movw	r30, r22
 3a8:	80 83       	st	Z, r24
 3aa:	91 83       	std	Z+1, r25	; 0x01
 3ac:	a2 83       	std	Z+2, r26	; 0x02
 3ae:	b3 83       	std	Z+3, r27	; 0x03
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	08 95       	ret
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	a0 e0       	ldi	r26, 0x00	; 0
 3ba:	bf e3       	ldi	r27, 0x3F	; 63
 3bc:	fb 01       	movw	r30, r22
 3be:	80 83       	st	Z, r24
 3c0:	91 83       	std	Z+1, r25	; 0x01
 3c2:	a2 83       	std	Z+2, r26	; 0x02
 3c4:	b3 83       	std	Z+3, r27	; 0x03
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	08 95       	ret
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	a0 e8       	ldi	r26, 0x80	; 128
 3d0:	b0 e4       	ldi	r27, 0x40	; 64
 3d2:	fb 01       	movw	r30, r22
 3d4:	80 83       	st	Z, r24
 3d6:	91 83       	std	Z+1, r25	; 0x01
 3d8:	a2 83       	std	Z+2, r26	; 0x02
 3da:	b3 83       	std	Z+3, r27	; 0x03
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	08 95       	ret
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	a0 e8       	ldi	r26, 0x80	; 128
 3e6:	b1 e4       	ldi	r27, 0x41	; 65
 3e8:	fb 01       	movw	r30, r22
 3ea:	80 83       	st	Z, r24
 3ec:	91 83       	std	Z+1, r25	; 0x01
 3ee:	a2 83       	std	Z+2, r26	; 0x02
 3f0:	b3 83       	std	Z+3, r27	; 0x03
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	a0 e8       	ldi	r26, 0x80	; 128
 3fc:	b2 e4       	ldi	r27, 0x42	; 66
 3fe:	fb 01       	movw	r30, r22
 400:	80 83       	st	Z, r24
 402:	91 83       	std	Z+1, r25	; 0x01
 404:	a2 83       	std	Z+2, r26	; 0x02
 406:	b3 83       	std	Z+3, r27	; 0x03
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	08 95       	ret
 40c:	82 30       	cpi	r24, 0x02	; 2
 40e:	09 f0       	breq	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	65 c0       	rjmp	.+202    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	fc 01       	movw	r30, r24
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	8e 0f       	add	r24, r30
 41c:	9f 1f       	adc	r25, r31
 41e:	fc 01       	movw	r30, r24
 420:	ed 59       	subi	r30, 0x9D	; 157
 422:	ff 4f       	sbci	r31, 0xFF	; 255
 424:	e2 81       	ldd	r30, Z+2	; 0x02
 426:	8e 2f       	mov	r24, r30
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	fc 01       	movw	r30, r24
 42c:	31 97       	sbiw	r30, 0x01	; 1
 42e:	e7 30       	cpi	r30, 0x07	; 7
 430:	f1 05       	cpc	r31, r1
 432:	08 f0       	brcs	.+2      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 434:	55 c0       	rjmp	.+170    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 436:	e6 5d       	subi	r30, 0xD6	; 214
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__tablejump2__>
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	a0 e8       	ldi	r26, 0x80	; 128
 444:	bd e3       	ldi	r27, 0x3D	; 61
 446:	fb 01       	movw	r30, r22
 448:	80 83       	st	Z, r24
 44a:	91 83       	std	Z+1, r25	; 0x01
 44c:	a2 83       	std	Z+2, r26	; 0x02
 44e:	b3 83       	std	Z+3, r27	; 0x03
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	08 95       	ret
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	a0 e0       	ldi	r26, 0x00	; 0
 45a:	bf e3       	ldi	r27, 0x3F	; 63
 45c:	fb 01       	movw	r30, r22
 45e:	80 83       	st	Z, r24
 460:	91 83       	std	Z+1, r25	; 0x01
 462:	a2 83       	std	Z+2, r26	; 0x02
 464:	b3 83       	std	Z+3, r27	; 0x03
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	08 95       	ret
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	a0 e0       	ldi	r26, 0x00	; 0
 470:	b0 e4       	ldi	r27, 0x40	; 64
 472:	fb 01       	movw	r30, r22
 474:	80 83       	st	Z, r24
 476:	91 83       	std	Z+1, r25	; 0x01
 478:	a2 83       	std	Z+2, r26	; 0x02
 47a:	b3 83       	std	Z+3, r27	; 0x03
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	08 95       	ret
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	a0 e8       	ldi	r26, 0x80	; 128
 486:	b0 e4       	ldi	r27, 0x40	; 64
 488:	fb 01       	movw	r30, r22
 48a:	80 83       	st	Z, r24
 48c:	91 83       	std	Z+1, r25	; 0x01
 48e:	a2 83       	std	Z+2, r26	; 0x02
 490:	b3 83       	std	Z+3, r27	; 0x03
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	08 95       	ret
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	a0 e0       	ldi	r26, 0x00	; 0
 49c:	b1 e4       	ldi	r27, 0x41	; 65
 49e:	fb 01       	movw	r30, r22
 4a0:	80 83       	st	Z, r24
 4a2:	91 83       	std	Z+1, r25	; 0x01
 4a4:	a2 83       	std	Z+2, r26	; 0x02
 4a6:	b3 83       	std	Z+3, r27	; 0x03
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	08 95       	ret
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	a0 e8       	ldi	r26, 0x80	; 128
 4b2:	b1 e4       	ldi	r27, 0x41	; 65
 4b4:	fb 01       	movw	r30, r22
 4b6:	80 83       	st	Z, r24
 4b8:	91 83       	std	Z+1, r25	; 0x01
 4ba:	a2 83       	std	Z+2, r26	; 0x02
 4bc:	b3 83       	std	Z+3, r27	; 0x03
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	08 95       	ret
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	a0 e8       	ldi	r26, 0x80	; 128
 4c8:	b2 e4       	ldi	r27, 0x42	; 66
 4ca:	fb 01       	movw	r30, r22
 4cc:	80 83       	st	Z, r24
 4ce:	91 83       	std	Z+1, r25	; 0x01
 4d0:	a2 83       	std	Z+2, r26	; 0x02
 4d2:	b3 83       	std	Z+3, r27	; 0x03
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	08 95       	ret
 4d8:	8c ef       	ldi	r24, 0xFC	; 252
 4da:	08 95       	ret
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	08 95       	ret
 4e0:	8c ef       	ldi	r24, 0xFC	; 252
 4e2:	08 95       	ret

000004e4 <TIM_Start>:
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	71 f0       	breq	.+28     	; 0x504 <TIM_Start+0x20>
 4e8:	18 f0       	brcs	.+6      	; 0x4f0 <TIM_Start+0xc>
 4ea:	82 30       	cpi	r24, 0x02	; 2
 4ec:	31 f0       	breq	.+12     	; 0x4fa <TIM_Start+0x16>
 4ee:	1e c0       	rjmp	.+60     	; 0x52c <TIM_Start+0x48>
 4f0:	e2 e5       	ldi	r30, 0x52	; 82
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	a3 e5       	ldi	r26, 0x53	; 83
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	09 c0       	rjmp	.+18     	; 0x50c <TIM_Start+0x28>
 4fa:	e4 e4       	ldi	r30, 0x44	; 68
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	a5 e4       	ldi	r26, 0x45	; 69
 500:	b0 e0       	ldi	r27, 0x00	; 0
 502:	04 c0       	rjmp	.+8      	; 0x50c <TIM_Start+0x28>
 504:	ec e4       	ldi	r30, 0x4C	; 76
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	ae e4       	ldi	r26, 0x4E	; 78
 50a:	b0 e0       	ldi	r27, 0x00	; 0
 50c:	60 83       	st	Z, r22
 50e:	2c 91       	ld	r18, X
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	fc 01       	movw	r30, r24
 514:	ee 0f       	add	r30, r30
 516:	ff 1f       	adc	r31, r31
 518:	8e 0f       	add	r24, r30
 51a:	9f 1f       	adc	r25, r31
 51c:	fc 01       	movw	r30, r24
 51e:	ed 59       	subi	r30, 0x9D	; 157
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	82 81       	ldd	r24, Z+2	; 0x02
 524:	82 2b       	or	r24, r18
 526:	8c 93       	st	X, r24
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
 52c:	8e ef       	ldi	r24, 0xFE	; 254
 52e:	08 95       	ret

00000530 <TIM_GetStatus>:
 530:	61 15       	cp	r22, r1
 532:	71 05       	cpc	r23, r1
 534:	09 f4       	brne	.+2      	; 0x538 <TIM_GetStatus+0x8>
 536:	7a c0       	rjmp	.+244    	; 0x62c <TIM_GetStatus+0xfc>
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	41 f1       	breq	.+80     	; 0x58c <TIM_GetStatus+0x5c>
 53c:	20 f0       	brcs	.+8      	; 0x546 <TIM_GetStatus+0x16>
 53e:	82 30       	cpi	r24, 0x02	; 2
 540:	09 f4       	brne	.+2      	; 0x544 <TIM_GetStatus+0x14>
 542:	52 c0       	rjmp	.+164    	; 0x5e8 <TIM_GetStatus+0xb8>
 544:	75 c0       	rjmp	.+234    	; 0x630 <TIM_GetStatus+0x100>
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	fc 01       	movw	r30, r24
 54a:	ee 0f       	add	r30, r30
 54c:	ff 1f       	adc	r31, r31
 54e:	8e 0f       	add	r24, r30
 550:	9f 1f       	adc	r25, r31
 552:	fc 01       	movw	r30, r24
 554:	ed 59       	subi	r30, 0x9D	; 157
 556:	ff 4f       	sbci	r31, 0xFF	; 255
 558:	80 81       	ld	r24, Z
 55a:	81 11       	cpse	r24, r1
 55c:	09 c0       	rjmp	.+18     	; 0x570 <TIM_GetStatus+0x40>
 55e:	08 b6       	in	r0, 0x38	; 56
 560:	00 fe       	sbrs	r0, 0
 562:	68 c0       	rjmp	.+208    	; 0x634 <TIM_GetStatus+0x104>
 564:	fb 01       	movw	r30, r22
 566:	10 82       	st	Z, r1
 568:	98 b7       	in	r25, 0x38	; 56
 56a:	91 60       	ori	r25, 0x01	; 1
 56c:	98 bf       	out	0x38, r25	; 56
 56e:	08 95       	ret
 570:	88 30       	cpi	r24, 0x08	; 8
 572:	09 f0       	breq	.+2      	; 0x576 <TIM_GetStatus+0x46>
 574:	61 c0       	rjmp	.+194    	; 0x638 <TIM_GetStatus+0x108>
 576:	08 b6       	in	r0, 0x38	; 56
 578:	01 fe       	sbrs	r0, 1
 57a:	60 c0       	rjmp	.+192    	; 0x63c <TIM_GetStatus+0x10c>
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	fb 01       	movw	r30, r22
 580:	80 83       	st	Z, r24
 582:	88 b7       	in	r24, 0x38	; 56
 584:	82 60       	ori	r24, 0x02	; 2
 586:	88 bf       	out	0x38, r24	; 56
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	08 95       	ret
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	fc 01       	movw	r30, r24
 590:	ee 0f       	add	r30, r30
 592:	ff 1f       	adc	r31, r31
 594:	8e 0f       	add	r24, r30
 596:	9f 1f       	adc	r25, r31
 598:	fc 01       	movw	r30, r24
 59a:	ed 59       	subi	r30, 0x9D	; 157
 59c:	ff 4f       	sbci	r31, 0xFF	; 255
 59e:	80 81       	ld	r24, Z
 5a0:	81 11       	cpse	r24, r1
 5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <TIM_GetStatus+0x86>
 5a4:	08 b6       	in	r0, 0x38	; 56
 5a6:	02 fe       	sbrs	r0, 2
 5a8:	4b c0       	rjmp	.+150    	; 0x640 <TIM_GetStatus+0x110>
 5aa:	fb 01       	movw	r30, r22
 5ac:	10 82       	st	Z, r1
 5ae:	98 b7       	in	r25, 0x38	; 56
 5b0:	94 60       	ori	r25, 0x04	; 4
 5b2:	98 bf       	out	0x38, r25	; 56
 5b4:	08 95       	ret
 5b6:	88 30       	cpi	r24, 0x08	; 8
 5b8:	09 f0       	breq	.+2      	; 0x5bc <TIM_GetStatus+0x8c>
 5ba:	44 c0       	rjmp	.+136    	; 0x644 <TIM_GetStatus+0x114>
 5bc:	98 b7       	in	r25, 0x38	; 56
 5be:	89 2f       	mov	r24, r25
 5c0:	80 71       	andi	r24, 0x10	; 16
 5c2:	94 ff       	sbrs	r25, 4
 5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <TIM_GetStatus+0xa6>
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	fb 01       	movw	r30, r22
 5ca:	80 83       	st	Z, r24
 5cc:	88 b7       	in	r24, 0x38	; 56
 5ce:	80 61       	ori	r24, 0x10	; 16
 5d0:	88 bf       	out	0x38, r24	; 56
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	08 95       	ret
 5d6:	93 ff       	sbrs	r25, 3
 5d8:	37 c0       	rjmp	.+110    	; 0x648 <TIM_GetStatus+0x118>
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	fb 01       	movw	r30, r22
 5de:	90 83       	st	Z, r25
 5e0:	98 b7       	in	r25, 0x38	; 56
 5e2:	98 60       	ori	r25, 0x08	; 8
 5e4:	98 bf       	out	0x38, r25	; 56
 5e6:	08 95       	ret
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	fc 01       	movw	r30, r24
 5ec:	ee 0f       	add	r30, r30
 5ee:	ff 1f       	adc	r31, r31
 5f0:	8e 0f       	add	r24, r30
 5f2:	9f 1f       	adc	r25, r31
 5f4:	fc 01       	movw	r30, r24
 5f6:	ed 59       	subi	r30, 0x9D	; 157
 5f8:	ff 4f       	sbci	r31, 0xFF	; 255
 5fa:	80 81       	ld	r24, Z
 5fc:	81 11       	cpse	r24, r1
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <TIM_GetStatus+0xe2>
 600:	08 b6       	in	r0, 0x38	; 56
 602:	06 fe       	sbrs	r0, 6
 604:	23 c0       	rjmp	.+70     	; 0x64c <TIM_GetStatus+0x11c>
 606:	fb 01       	movw	r30, r22
 608:	10 82       	st	Z, r1
 60a:	98 b7       	in	r25, 0x38	; 56
 60c:	90 64       	ori	r25, 0x40	; 64
 60e:	98 bf       	out	0x38, r25	; 56
 610:	08 95       	ret
 612:	88 30       	cpi	r24, 0x08	; 8
 614:	e9 f4       	brne	.+58     	; 0x650 <TIM_GetStatus+0x120>
 616:	08 b6       	in	r0, 0x38	; 56
 618:	07 fe       	sbrs	r0, 7
 61a:	1c c0       	rjmp	.+56     	; 0x654 <TIM_GetStatus+0x124>
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	fb 01       	movw	r30, r22
 620:	80 83       	st	Z, r24
 622:	88 b7       	in	r24, 0x38	; 56
 624:	80 68       	ori	r24, 0x80	; 128
 626:	88 bf       	out	0x38, r24	; 56
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	08 95       	ret
 62c:	8f ef       	ldi	r24, 0xFF	; 255
 62e:	08 95       	ret
 630:	8e ef       	ldi	r24, 0xFE	; 254
 632:	08 95       	ret
 634:	8d ef       	ldi	r24, 0xFD	; 253
 636:	08 95       	ret
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	08 95       	ret
 63c:	8d ef       	ldi	r24, 0xFD	; 253
 63e:	08 95       	ret
 640:	8d ef       	ldi	r24, 0xFD	; 253
 642:	08 95       	ret
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	08 95       	ret
 648:	8d ef       	ldi	r24, 0xFD	; 253
 64a:	08 95       	ret
 64c:	8d ef       	ldi	r24, 0xFD	; 253
 64e:	08 95       	ret
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	08 95       	ret
 654:	8d ef       	ldi	r24, 0xFD	; 253
 656:	08 95       	ret

00000658 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
 658:	8f 92       	push	r8
 65a:	9f 92       	push	r9
 65c:	af 92       	push	r10
 65e:	bf 92       	push	r11
 660:	df 92       	push	r13
 662:	ef 92       	push	r14
 664:	ff 92       	push	r15
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	00 d0       	rcall	.+0      	; 0x670 <TIM_DelayMs+0x18>
 670:	00 d0       	rcall	.+0      	; 0x672 <TIM_DelayMs+0x1a>
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	18 2f       	mov	r17, r24
 678:	04 2f       	mov	r16, r20
 67a:	d5 2e       	mov	r13, r21
 67c:	e6 2e       	mov	r14, r22
 67e:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
 680:	83 30       	cpi	r24, 0x03	; 3
 682:	08 f0       	brcs	.+2      	; 0x686 <TIM_DelayMs+0x2e>
 684:	65 c0       	rjmp	.+202    	; 0x750 <TIM_DelayMs+0xf8>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
 686:	21 15       	cp	r18, r1
 688:	31 05       	cpc	r19, r1
 68a:	09 f4       	brne	.+2      	; 0x68e <TIM_DelayMs+0x36>
 68c:	63 c0       	rjmp	.+198    	; 0x754 <TIM_DelayMs+0xfc>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
 68e:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <gptr_CallerFunc+0x1>
 692:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
 696:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gEnu_State>
 69a:	81 11       	cpse	r24, r1
 69c:	5d c0       	rjmp	.+186    	; 0x758 <TIM_DelayMs+0x100>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
 69e:	be 01       	movw	r22, r28
 6a0:	6f 5f       	subi	r22, 0xFF	; 255
 6a2:	7f 4f       	sbci	r23, 0xFF	; 255
 6a4:	81 2f       	mov	r24, r17
 6a6:	0e 94 b5 01 	call	0x36a	; 0x36a <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
 6aa:	8c 3f       	cpi	r24, 0xFC	; 252
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <TIM_DelayMs+0x58>
 6ae:	4e c0       	rjmp	.+156    	; 0x74c <TIM_DelayMs+0xf4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
 6b0:	89 80       	ldd	r8, Y+1	; 0x01
 6b2:	9a 80       	ldd	r9, Y+2	; 0x02
 6b4:	ab 80       	ldd	r10, Y+3	; 0x03
 6b6:	bc 80       	ldd	r11, Y+4	; 0x04
 6b8:	20 e0       	ldi	r18, 0x00	; 0
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	a9 01       	movw	r20, r18
 6be:	c5 01       	movw	r24, r10
 6c0:	b4 01       	movw	r22, r8
 6c2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__cmpsf2>
 6c6:	88 23       	and	r24, r24
 6c8:	81 f0       	breq	.+32     	; 0x6ea <TIM_DelayMs+0x92>
      {
         TIM_Delay /= f32_FreqRatio;
 6ca:	60 2f       	mov	r22, r16
 6cc:	7d 2d       	mov	r23, r13
 6ce:	8e 2d       	mov	r24, r14
 6d0:	9f 2d       	mov	r25, r15
 6d2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__floatunsisf>
 6d6:	a5 01       	movw	r20, r10
 6d8:	94 01       	movw	r18, r8
 6da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__divsf3>
 6de:	0e 94 c7 04 	call	0x98e	; 0x98e <__fixunssfsi>
 6e2:	06 2f       	mov	r16, r22
 6e4:	d7 2e       	mov	r13, r23
 6e6:	e8 2e       	mov	r14, r24
 6e8:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
 6ea:	a8 ee       	ldi	r26, 0xE8	; 232
 6ec:	b3 e0       	ldi	r27, 0x03	; 3
 6ee:	20 2f       	mov	r18, r16
 6f0:	3d 2d       	mov	r19, r13
 6f2:	4e 2d       	mov	r20, r14
 6f4:	5f 2d       	mov	r21, r15
 6f6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__muluhisi3>
 6fa:	bb 27       	eor	r27, r27
 6fc:	a9 2f       	mov	r26, r25
 6fe:	98 2f       	mov	r25, r24
 700:	87 2f       	mov	r24, r23
 702:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <gu32_Overflows>
 706:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <gu32_Overflows+0x1>
 70a:	a0 93 74 00 	sts	0x0074, r26	; 0x800074 <gu32_Overflows+0x2>
 70e:	b0 93 75 00 	sts	0x0075, r27	; 0x800075 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
 712:	28 ee       	ldi	r18, 0xE8	; 232
 714:	02 9f       	mul	r16, r18
 716:	00 2d       	mov	r16, r0
 718:	11 24       	eor	r1, r1
 71a:	00 93 70 00 	sts	0x0070, r16	; 0x800070 <gu8_Remindar>
      
      if(gu32_Overflows == 0)
 71e:	89 2b       	or	r24, r25
 720:	8a 2b       	or	r24, r26
 722:	8b 2b       	or	r24, r27
 724:	49 f4       	brne	.+18     	; 0x738 <TIM_DelayMs+0xe0>
      {
         gu8_OverflowsComplete = HIGH;
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
 72c:	60 2f       	mov	r22, r16
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	81 2f       	mov	r24, r17
 732:	0e 94 72 02 	call	0x4e4	; 0x4e4 <TIM_Start>
 736:	05 c0       	rjmp	.+10     	; 0x742 <TIM_DelayMs+0xea>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
 738:	6f ef       	ldi	r22, 0xFF	; 255
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	81 2f       	mov	r24, r17
 73e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gEnu_State>
      return TIMER_E_PENDING;
 748:	8d ef       	ldi	r24, 0xFD	; 253
 74a:	07 c0       	rjmp	.+14     	; 0x75a <TIM_DelayMs+0x102>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
 74c:	8c ef       	ldi	r24, 0xFC	; 252
 74e:	05 c0       	rjmp	.+10     	; 0x75a <TIM_DelayMs+0x102>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
 750:	8e ef       	ldi	r24, 0xFE	; 254
 752:	03 c0       	rjmp	.+6      	; 0x75a <TIM_DelayMs+0x102>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	01 c0       	rjmp	.+2      	; 0x75a <TIM_DelayMs+0x102>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
 758:	81 e0       	ldi	r24, 0x01	; 1
}
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	df 90       	pop	r13
 770:	bf 90       	pop	r11
 772:	af 90       	pop	r10
 774:	9f 90       	pop	r9
 776:	8f 90       	pop	r8
 778:	08 95       	ret

0000077a <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
 77a:	1f 93       	push	r17
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	1f 92       	push	r1
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
   if(DelayReady == gEnu_State)
 786:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gEnu_State>
 78a:	99 23       	and	r25, r25
 78c:	09 f4       	brne	.+2      	; 0x790 <TIM_DelayStatus+0x16>
 78e:	49 c0       	rjmp	.+146    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
 790:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <gptr_CallerFunc>
 794:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <gptr_CallerFunc+0x1>
 798:	26 17       	cp	r18, r22
 79a:	37 07       	cpc	r19, r23
 79c:	09 f0       	breq	.+2      	; 0x7a0 <TIM_DelayStatus+0x26>
 79e:	43 c0       	rjmp	.+134    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
 7a0:	91 30       	cpi	r25, 0x01	; 1
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <TIM_DelayStatus+0x2c>
 7a4:	42 c0       	rjmp	.+132    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7a6:	18 2f       	mov	r17, r24
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
 7a8:	be 01       	movw	r22, r28
 7aa:	6f 5f       	subi	r22, 0xFF	; 255
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	0e 94 98 02 	call	0x530	; 0x530 <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
 7b2:	81 11       	cpse	r24, r1
 7b4:	35 c0       	rjmp	.+106    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
 7b6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <gu8_OverflowsComplete>
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	41 f4       	brne	.+16     	; 0x7ce <TIM_DelayStatus+0x54>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
 7be:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <gEnu_State>
            gu8_OverflowsComplete = LOW;
 7c2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <gu8_OverflowsComplete>
            gu8_Remindar = 0;
 7c6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	2f c0       	rjmp	.+94     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
 7ce:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <gu32_Overflows>
 7d2:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <gu32_Overflows+0x1>
 7d6:	a0 91 74 00 	lds	r26, 0x0074	; 0x800074 <gu32_Overflows+0x2>
 7da:	b0 91 75 00 	lds	r27, 0x0075	; 0x800075 <gu32_Overflows+0x3>
 7de:	01 97       	sbiw	r24, 0x01	; 1
 7e0:	a1 09       	sbc	r26, r1
 7e2:	b1 09       	sbc	r27, r1
 7e4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <gu32_Overflows>
 7e8:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <gu32_Overflows+0x1>
 7ec:	a0 93 74 00 	sts	0x0074, r26	; 0x800074 <gu32_Overflows+0x2>
 7f0:	b0 93 75 00 	sts	0x0075, r27	; 0x800075 <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
 7f4:	89 2b       	or	r24, r25
 7f6:	8a 2b       	or	r24, r26
 7f8:	8b 2b       	or	r24, r27
 7fa:	59 f4       	brne	.+22     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
         {
            gu8_OverflowsComplete = HIGH;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
 802:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <gu8_Remindar>
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	81 2f       	mov	r24, r17
 80a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
 80e:	8d ef       	ldi	r24, 0xFD	; 253
 810:	0d c0       	rjmp	.+26     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
 812:	6f ef       	ldi	r22, 0xFF	; 255
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	81 2f       	mov	r24, r17
 818:	0e 94 72 02 	call	0x4e4	; 0x4e4 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
 81c:	8d ef       	ldi	r24, 0xFD	; 253
 81e:	06 c0       	rjmp	.+12     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
   }
   else
   {
      return ERROR_NOK;
   }      
 820:	05 c0       	rjmp	.+10     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
 822:	8b ef       	ldi	r24, 0xFB	; 251
 824:	03 c0       	rjmp	.+6      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	01 c0       	rjmp	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
 82a:	81 e0       	ldi	r24, 0x01	; 1
   }      
 82c:	0f 90       	pop	r0
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	08 95       	ret

00000836 <GreenLedMain>:
/*- LOCAL FUNCTIONS IMPLEMENTATION
------------------------*/
void GreenLedMain(void)
{
   /* If Button is Pressed */
   if(PRESSED == GreenLed_BTNClient.u8_ButtonState && OldButtonState != GreenLed_BTNClient.u8_ButtonState)
 836:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <GreenLed_BTNClient+0x1>
 83a:	81 11       	cpse	r24, r1
 83c:	07 c0       	rjmp	.+14     	; 0x84c <GreenLedMain+0x16>
 83e:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <OldButtonState>
 842:	89 17       	cp	r24, r25
 844:	19 f0       	breq	.+6      	; 0x84c <GreenLedMain+0x16>
   {
      /* Toggle Pin */
      DIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	0e 94 90 01 	call	0x320	; 0x320 <DIO_TogglePin>
   }
   else{/* Do Nothing */}
   OldButtonState = GreenLed_BTNClient.u8_ButtonState;
 84c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <GreenLed_BTNClient+0x1>
 850:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <OldButtonState>
 854:	08 95       	ret

00000856 <main>:
/*- APIs IMPLEMENTATION
-----------------------------------*/
int main(void)
{
   /* Init Button Pins */
   Button_Init(BTN_0);
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	0e 94 ca 00 	call	0x194	; 0x194 <Button_Init>
   
   /* Init Led Pin */
   DIO_SetPinDirection(GREEN_LED_PORT, GREEN_LED_PIN, OUTPUT);
 85c:	41 e0       	ldi	r20, 0x01	; 1
 85e:	60 e0       	ldi	r22, 0x00	; 0
 860:	80 e0       	ldi	r24, 0x00	; 0
 862:	0e 94 03 01 	call	0x206	; 0x206 <DIO_SetPinDirection>
   
   BUTTONClient_Init(&GreenLed_BTNClient);
 866:	86 e7       	ldi	r24, 0x76	; 118
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 9f 00 	call	0x13e	; 0x13e <BUTTONClient_Init>
   BUTTONClient_SetBtn(&GreenLed_BTNClient, BTN_0);
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	86 e7       	ldi	r24, 0x76	; 118
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 94 ae 00 	call	0x15c	; 0x15c <BUTTONClient_SetBtn>
   BUTTONClient_SetTimer(&GreenLed_BTNClient, TIMER_2, 20);
 878:	24 e1       	ldi	r18, 0x14	; 20
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	50 e0       	ldi	r21, 0x00	; 0
 880:	62 e0       	ldi	r22, 0x02	; 2
 882:	86 e7       	ldi	r24, 0x76	; 118
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 b4 00 	call	0x168	; 0x168 <BUTTONClient_SetTimer>
   BUTTONClient_SetEventCallback(&GreenLed_BTNClient, GreenLedMain);
 88a:	6b e1       	ldi	r22, 0x1B	; 27
 88c:	74 e0       	ldi	r23, 0x04	; 4
 88e:	86 e7       	ldi	r24, 0x76	; 118
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	0e 94 c0 00 	call	0x180	; 0x180 <BUTTONClient_SetEventCallback>
   
   while (1) 
   {
      BUTTONClient_EventReceive(&GreenLed_BTNClient);
 896:	86 e7       	ldi	r24, 0x76	; 118
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 50 00 	call	0xa0	; 0xa0 <BUTTONClient_EventReceive>
 89e:	fb cf       	rjmp	.-10     	; 0x896 <__stack+0x37>

000008a0 <__cmpsf2>:
 8a0:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_cmp>
 8a4:	08 f4       	brcc	.+2      	; 0x8a8 <__cmpsf2+0x8>
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	08 95       	ret

000008aa <__divsf3>:
 8aa:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__divsf3x>
 8ae:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_round>
 8b2:	0e 94 67 05 	call	0xace	; 0xace <__fp_pscB>
 8b6:	58 f0       	brcs	.+22     	; 0x8ce <__divsf3+0x24>
 8b8:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_pscA>
 8bc:	40 f0       	brcs	.+16     	; 0x8ce <__divsf3+0x24>
 8be:	29 f4       	brne	.+10     	; 0x8ca <__divsf3+0x20>
 8c0:	5f 3f       	cpi	r21, 0xFF	; 255
 8c2:	29 f0       	breq	.+10     	; 0x8ce <__divsf3+0x24>
 8c4:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_inf>
 8c8:	51 11       	cpse	r21, r1
 8ca:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_szero>
 8ce:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__fp_nan>

000008d2 <__divsf3x>:
 8d2:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_split3>
 8d6:	68 f3       	brcs	.-38     	; 0x8b2 <__divsf3+0x8>

000008d8 <__divsf3_pse>:
 8d8:	99 23       	and	r25, r25
 8da:	b1 f3       	breq	.-20     	; 0x8c8 <__divsf3+0x1e>
 8dc:	55 23       	and	r21, r21
 8de:	91 f3       	breq	.-28     	; 0x8c4 <__divsf3+0x1a>
 8e0:	95 1b       	sub	r25, r21
 8e2:	55 0b       	sbc	r21, r21
 8e4:	bb 27       	eor	r27, r27
 8e6:	aa 27       	eor	r26, r26
 8e8:	62 17       	cp	r22, r18
 8ea:	73 07       	cpc	r23, r19
 8ec:	84 07       	cpc	r24, r20
 8ee:	38 f0       	brcs	.+14     	; 0x8fe <__divsf3_pse+0x26>
 8f0:	9f 5f       	subi	r25, 0xFF	; 255
 8f2:	5f 4f       	sbci	r21, 0xFF	; 255
 8f4:	22 0f       	add	r18, r18
 8f6:	33 1f       	adc	r19, r19
 8f8:	44 1f       	adc	r20, r20
 8fa:	aa 1f       	adc	r26, r26
 8fc:	a9 f3       	breq	.-22     	; 0x8e8 <__divsf3_pse+0x10>
 8fe:	35 d0       	rcall	.+106    	; 0x96a <__divsf3_pse+0x92>
 900:	0e 2e       	mov	r0, r30
 902:	3a f0       	brmi	.+14     	; 0x912 <__divsf3_pse+0x3a>
 904:	e0 e8       	ldi	r30, 0x80	; 128
 906:	32 d0       	rcall	.+100    	; 0x96c <__divsf3_pse+0x94>
 908:	91 50       	subi	r25, 0x01	; 1
 90a:	50 40       	sbci	r21, 0x00	; 0
 90c:	e6 95       	lsr	r30
 90e:	00 1c       	adc	r0, r0
 910:	ca f7       	brpl	.-14     	; 0x904 <__divsf3_pse+0x2c>
 912:	2b d0       	rcall	.+86     	; 0x96a <__divsf3_pse+0x92>
 914:	fe 2f       	mov	r31, r30
 916:	29 d0       	rcall	.+82     	; 0x96a <__divsf3_pse+0x92>
 918:	66 0f       	add	r22, r22
 91a:	77 1f       	adc	r23, r23
 91c:	88 1f       	adc	r24, r24
 91e:	bb 1f       	adc	r27, r27
 920:	26 17       	cp	r18, r22
 922:	37 07       	cpc	r19, r23
 924:	48 07       	cpc	r20, r24
 926:	ab 07       	cpc	r26, r27
 928:	b0 e8       	ldi	r27, 0x80	; 128
 92a:	09 f0       	breq	.+2      	; 0x92e <__divsf3_pse+0x56>
 92c:	bb 0b       	sbc	r27, r27
 92e:	80 2d       	mov	r24, r0
 930:	bf 01       	movw	r22, r30
 932:	ff 27       	eor	r31, r31
 934:	93 58       	subi	r25, 0x83	; 131
 936:	5f 4f       	sbci	r21, 0xFF	; 255
 938:	3a f0       	brmi	.+14     	; 0x948 <__divsf3_pse+0x70>
 93a:	9e 3f       	cpi	r25, 0xFE	; 254
 93c:	51 05       	cpc	r21, r1
 93e:	78 f0       	brcs	.+30     	; 0x95e <__divsf3_pse+0x86>
 940:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_inf>
 944:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_szero>
 948:	5f 3f       	cpi	r21, 0xFF	; 255
 94a:	e4 f3       	brlt	.-8      	; 0x944 <__divsf3_pse+0x6c>
 94c:	98 3e       	cpi	r25, 0xE8	; 232
 94e:	d4 f3       	brlt	.-12     	; 0x944 <__divsf3_pse+0x6c>
 950:	86 95       	lsr	r24
 952:	77 95       	ror	r23
 954:	67 95       	ror	r22
 956:	b7 95       	ror	r27
 958:	f7 95       	ror	r31
 95a:	9f 5f       	subi	r25, 0xFF	; 255
 95c:	c9 f7       	brne	.-14     	; 0x950 <__divsf3_pse+0x78>
 95e:	88 0f       	add	r24, r24
 960:	91 1d       	adc	r25, r1
 962:	96 95       	lsr	r25
 964:	87 95       	ror	r24
 966:	97 f9       	bld	r25, 7
 968:	08 95       	ret
 96a:	e1 e0       	ldi	r30, 0x01	; 1
 96c:	66 0f       	add	r22, r22
 96e:	77 1f       	adc	r23, r23
 970:	88 1f       	adc	r24, r24
 972:	bb 1f       	adc	r27, r27
 974:	62 17       	cp	r22, r18
 976:	73 07       	cpc	r23, r19
 978:	84 07       	cpc	r24, r20
 97a:	ba 07       	cpc	r27, r26
 97c:	20 f0       	brcs	.+8      	; 0x986 <__divsf3_pse+0xae>
 97e:	62 1b       	sub	r22, r18
 980:	73 0b       	sbc	r23, r19
 982:	84 0b       	sbc	r24, r20
 984:	ba 0b       	sbc	r27, r26
 986:	ee 1f       	adc	r30, r30
 988:	88 f7       	brcc	.-30     	; 0x96c <__divsf3_pse+0x94>
 98a:	e0 95       	com	r30
 98c:	08 95       	ret

0000098e <__fixunssfsi>:
 98e:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_splitA>
 992:	88 f0       	brcs	.+34     	; 0x9b6 <__fixunssfsi+0x28>
 994:	9f 57       	subi	r25, 0x7F	; 127
 996:	98 f0       	brcs	.+38     	; 0x9be <__fixunssfsi+0x30>
 998:	b9 2f       	mov	r27, r25
 99a:	99 27       	eor	r25, r25
 99c:	b7 51       	subi	r27, 0x17	; 23
 99e:	b0 f0       	brcs	.+44     	; 0x9cc <__fixunssfsi+0x3e>
 9a0:	e1 f0       	breq	.+56     	; 0x9da <__fixunssfsi+0x4c>
 9a2:	66 0f       	add	r22, r22
 9a4:	77 1f       	adc	r23, r23
 9a6:	88 1f       	adc	r24, r24
 9a8:	99 1f       	adc	r25, r25
 9aa:	1a f0       	brmi	.+6      	; 0x9b2 <__fixunssfsi+0x24>
 9ac:	ba 95       	dec	r27
 9ae:	c9 f7       	brne	.-14     	; 0x9a2 <__fixunssfsi+0x14>
 9b0:	14 c0       	rjmp	.+40     	; 0x9da <__fixunssfsi+0x4c>
 9b2:	b1 30       	cpi	r27, 0x01	; 1
 9b4:	91 f0       	breq	.+36     	; 0x9da <__fixunssfsi+0x4c>
 9b6:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_zero>
 9ba:	b1 e0       	ldi	r27, 0x01	; 1
 9bc:	08 95       	ret
 9be:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_zero>
 9c2:	67 2f       	mov	r22, r23
 9c4:	78 2f       	mov	r23, r24
 9c6:	88 27       	eor	r24, r24
 9c8:	b8 5f       	subi	r27, 0xF8	; 248
 9ca:	39 f0       	breq	.+14     	; 0x9da <__fixunssfsi+0x4c>
 9cc:	b9 3f       	cpi	r27, 0xF9	; 249
 9ce:	cc f3       	brlt	.-14     	; 0x9c2 <__fixunssfsi+0x34>
 9d0:	86 95       	lsr	r24
 9d2:	77 95       	ror	r23
 9d4:	67 95       	ror	r22
 9d6:	b3 95       	inc	r27
 9d8:	d9 f7       	brne	.-10     	; 0x9d0 <__fixunssfsi+0x42>
 9da:	3e f4       	brtc	.+14     	; 0x9ea <__fixunssfsi+0x5c>
 9dc:	90 95       	com	r25
 9de:	80 95       	com	r24
 9e0:	70 95       	com	r23
 9e2:	61 95       	neg	r22
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	8f 4f       	sbci	r24, 0xFF	; 255
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	08 95       	ret

000009ec <__floatunsisf>:
 9ec:	e8 94       	clt
 9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__floatsisf+0x12>

000009f0 <__floatsisf>:
 9f0:	97 fb       	bst	r25, 7
 9f2:	3e f4       	brtc	.+14     	; 0xa02 <__floatsisf+0x12>
 9f4:	90 95       	com	r25
 9f6:	80 95       	com	r24
 9f8:	70 95       	com	r23
 9fa:	61 95       	neg	r22
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255
 9fe:	8f 4f       	sbci	r24, 0xFF	; 255
 a00:	9f 4f       	sbci	r25, 0xFF	; 255
 a02:	99 23       	and	r25, r25
 a04:	a9 f0       	breq	.+42     	; 0xa30 <__floatsisf+0x40>
 a06:	f9 2f       	mov	r31, r25
 a08:	96 e9       	ldi	r25, 0x96	; 150
 a0a:	bb 27       	eor	r27, r27
 a0c:	93 95       	inc	r25
 a0e:	f6 95       	lsr	r31
 a10:	87 95       	ror	r24
 a12:	77 95       	ror	r23
 a14:	67 95       	ror	r22
 a16:	b7 95       	ror	r27
 a18:	f1 11       	cpse	r31, r1
 a1a:	f8 cf       	rjmp	.-16     	; 0xa0c <__floatsisf+0x1c>
 a1c:	fa f4       	brpl	.+62     	; 0xa5c <__floatsisf+0x6c>
 a1e:	bb 0f       	add	r27, r27
 a20:	11 f4       	brne	.+4      	; 0xa26 <__floatsisf+0x36>
 a22:	60 ff       	sbrs	r22, 0
 a24:	1b c0       	rjmp	.+54     	; 0xa5c <__floatsisf+0x6c>
 a26:	6f 5f       	subi	r22, 0xFF	; 255
 a28:	7f 4f       	sbci	r23, 0xFF	; 255
 a2a:	8f 4f       	sbci	r24, 0xFF	; 255
 a2c:	9f 4f       	sbci	r25, 0xFF	; 255
 a2e:	16 c0       	rjmp	.+44     	; 0xa5c <__floatsisf+0x6c>
 a30:	88 23       	and	r24, r24
 a32:	11 f0       	breq	.+4      	; 0xa38 <__floatsisf+0x48>
 a34:	96 e9       	ldi	r25, 0x96	; 150
 a36:	11 c0       	rjmp	.+34     	; 0xa5a <__floatsisf+0x6a>
 a38:	77 23       	and	r23, r23
 a3a:	21 f0       	breq	.+8      	; 0xa44 <__floatsisf+0x54>
 a3c:	9e e8       	ldi	r25, 0x8E	; 142
 a3e:	87 2f       	mov	r24, r23
 a40:	76 2f       	mov	r23, r22
 a42:	05 c0       	rjmp	.+10     	; 0xa4e <__floatsisf+0x5e>
 a44:	66 23       	and	r22, r22
 a46:	71 f0       	breq	.+28     	; 0xa64 <__floatsisf+0x74>
 a48:	96 e8       	ldi	r25, 0x86	; 134
 a4a:	86 2f       	mov	r24, r22
 a4c:	70 e0       	ldi	r23, 0x00	; 0
 a4e:	60 e0       	ldi	r22, 0x00	; 0
 a50:	2a f0       	brmi	.+10     	; 0xa5c <__floatsisf+0x6c>
 a52:	9a 95       	dec	r25
 a54:	66 0f       	add	r22, r22
 a56:	77 1f       	adc	r23, r23
 a58:	88 1f       	adc	r24, r24
 a5a:	da f7       	brpl	.-10     	; 0xa52 <__floatsisf+0x62>
 a5c:	88 0f       	add	r24, r24
 a5e:	96 95       	lsr	r25
 a60:	87 95       	ror	r24
 a62:	97 f9       	bld	r25, 7
 a64:	08 95       	ret

00000a66 <__fp_cmp>:
 a66:	99 0f       	add	r25, r25
 a68:	00 08       	sbc	r0, r0
 a6a:	55 0f       	add	r21, r21
 a6c:	aa 0b       	sbc	r26, r26
 a6e:	e0 e8       	ldi	r30, 0x80	; 128
 a70:	fe ef       	ldi	r31, 0xFE	; 254
 a72:	16 16       	cp	r1, r22
 a74:	17 06       	cpc	r1, r23
 a76:	e8 07       	cpc	r30, r24
 a78:	f9 07       	cpc	r31, r25
 a7a:	c0 f0       	brcs	.+48     	; 0xaac <__fp_cmp+0x46>
 a7c:	12 16       	cp	r1, r18
 a7e:	13 06       	cpc	r1, r19
 a80:	e4 07       	cpc	r30, r20
 a82:	f5 07       	cpc	r31, r21
 a84:	98 f0       	brcs	.+38     	; 0xaac <__fp_cmp+0x46>
 a86:	62 1b       	sub	r22, r18
 a88:	73 0b       	sbc	r23, r19
 a8a:	84 0b       	sbc	r24, r20
 a8c:	95 0b       	sbc	r25, r21
 a8e:	39 f4       	brne	.+14     	; 0xa9e <__fp_cmp+0x38>
 a90:	0a 26       	eor	r0, r26
 a92:	61 f0       	breq	.+24     	; 0xaac <__fp_cmp+0x46>
 a94:	23 2b       	or	r18, r19
 a96:	24 2b       	or	r18, r20
 a98:	25 2b       	or	r18, r21
 a9a:	21 f4       	brne	.+8      	; 0xaa4 <__fp_cmp+0x3e>
 a9c:	08 95       	ret
 a9e:	0a 26       	eor	r0, r26
 aa0:	09 f4       	brne	.+2      	; 0xaa4 <__fp_cmp+0x3e>
 aa2:	a1 40       	sbci	r26, 0x01	; 1
 aa4:	a6 95       	lsr	r26
 aa6:	8f ef       	ldi	r24, 0xFF	; 255
 aa8:	81 1d       	adc	r24, r1
 aaa:	81 1d       	adc	r24, r1
 aac:	08 95       	ret

00000aae <__fp_inf>:
 aae:	97 f9       	bld	r25, 7
 ab0:	9f 67       	ori	r25, 0x7F	; 127
 ab2:	80 e8       	ldi	r24, 0x80	; 128
 ab4:	70 e0       	ldi	r23, 0x00	; 0
 ab6:	60 e0       	ldi	r22, 0x00	; 0
 ab8:	08 95       	ret

00000aba <__fp_nan>:
 aba:	9f ef       	ldi	r25, 0xFF	; 255
 abc:	80 ec       	ldi	r24, 0xC0	; 192
 abe:	08 95       	ret

00000ac0 <__fp_pscA>:
 ac0:	00 24       	eor	r0, r0
 ac2:	0a 94       	dec	r0
 ac4:	16 16       	cp	r1, r22
 ac6:	17 06       	cpc	r1, r23
 ac8:	18 06       	cpc	r1, r24
 aca:	09 06       	cpc	r0, r25
 acc:	08 95       	ret

00000ace <__fp_pscB>:
 ace:	00 24       	eor	r0, r0
 ad0:	0a 94       	dec	r0
 ad2:	12 16       	cp	r1, r18
 ad4:	13 06       	cpc	r1, r19
 ad6:	14 06       	cpc	r1, r20
 ad8:	05 06       	cpc	r0, r21
 ada:	08 95       	ret

00000adc <__fp_round>:
 adc:	09 2e       	mov	r0, r25
 ade:	03 94       	inc	r0
 ae0:	00 0c       	add	r0, r0
 ae2:	11 f4       	brne	.+4      	; 0xae8 <__fp_round+0xc>
 ae4:	88 23       	and	r24, r24
 ae6:	52 f0       	brmi	.+20     	; 0xafc <__fp_round+0x20>
 ae8:	bb 0f       	add	r27, r27
 aea:	40 f4       	brcc	.+16     	; 0xafc <__fp_round+0x20>
 aec:	bf 2b       	or	r27, r31
 aee:	11 f4       	brne	.+4      	; 0xaf4 <__fp_round+0x18>
 af0:	60 ff       	sbrs	r22, 0
 af2:	04 c0       	rjmp	.+8      	; 0xafc <__fp_round+0x20>
 af4:	6f 5f       	subi	r22, 0xFF	; 255
 af6:	7f 4f       	sbci	r23, 0xFF	; 255
 af8:	8f 4f       	sbci	r24, 0xFF	; 255
 afa:	9f 4f       	sbci	r25, 0xFF	; 255
 afc:	08 95       	ret

00000afe <__fp_split3>:
 afe:	57 fd       	sbrc	r21, 7
 b00:	90 58       	subi	r25, 0x80	; 128
 b02:	44 0f       	add	r20, r20
 b04:	55 1f       	adc	r21, r21
 b06:	59 f0       	breq	.+22     	; 0xb1e <__fp_splitA+0x10>
 b08:	5f 3f       	cpi	r21, 0xFF	; 255
 b0a:	71 f0       	breq	.+28     	; 0xb28 <__fp_splitA+0x1a>
 b0c:	47 95       	ror	r20

00000b0e <__fp_splitA>:
 b0e:	88 0f       	add	r24, r24
 b10:	97 fb       	bst	r25, 7
 b12:	99 1f       	adc	r25, r25
 b14:	61 f0       	breq	.+24     	; 0xb2e <__fp_splitA+0x20>
 b16:	9f 3f       	cpi	r25, 0xFF	; 255
 b18:	79 f0       	breq	.+30     	; 0xb38 <__fp_splitA+0x2a>
 b1a:	87 95       	ror	r24
 b1c:	08 95       	ret
 b1e:	12 16       	cp	r1, r18
 b20:	13 06       	cpc	r1, r19
 b22:	14 06       	cpc	r1, r20
 b24:	55 1f       	adc	r21, r21
 b26:	f2 cf       	rjmp	.-28     	; 0xb0c <__fp_split3+0xe>
 b28:	46 95       	lsr	r20
 b2a:	f1 df       	rcall	.-30     	; 0xb0e <__fp_splitA>
 b2c:	08 c0       	rjmp	.+16     	; 0xb3e <__fp_splitA+0x30>
 b2e:	16 16       	cp	r1, r22
 b30:	17 06       	cpc	r1, r23
 b32:	18 06       	cpc	r1, r24
 b34:	99 1f       	adc	r25, r25
 b36:	f1 cf       	rjmp	.-30     	; 0xb1a <__fp_splitA+0xc>
 b38:	86 95       	lsr	r24
 b3a:	71 05       	cpc	r23, r1
 b3c:	61 05       	cpc	r22, r1
 b3e:	08 94       	sec
 b40:	08 95       	ret

00000b42 <__fp_zero>:
 b42:	e8 94       	clt

00000b44 <__fp_szero>:
 b44:	bb 27       	eor	r27, r27
 b46:	66 27       	eor	r22, r22
 b48:	77 27       	eor	r23, r23
 b4a:	cb 01       	movw	r24, r22
 b4c:	97 f9       	bld	r25, 7
 b4e:	08 95       	ret

00000b50 <__tablejump2__>:
 b50:	ee 0f       	add	r30, r30
 b52:	ff 1f       	adc	r31, r31
 b54:	05 90       	lpm	r0, Z+
 b56:	f4 91       	lpm	r31, Z
 b58:	e0 2d       	mov	r30, r0
 b5a:	09 94       	ijmp

00000b5c <__muluhisi3>:
 b5c:	0e 94 b9 05 	call	0xb72	; 0xb72 <__umulhisi3>
 b60:	a5 9f       	mul	r26, r21
 b62:	90 0d       	add	r25, r0
 b64:	b4 9f       	mul	r27, r20
 b66:	90 0d       	add	r25, r0
 b68:	a4 9f       	mul	r26, r20
 b6a:	80 0d       	add	r24, r0
 b6c:	91 1d       	adc	r25, r1
 b6e:	11 24       	eor	r1, r1
 b70:	08 95       	ret

00000b72 <__umulhisi3>:
 b72:	a2 9f       	mul	r26, r18
 b74:	b0 01       	movw	r22, r0
 b76:	b3 9f       	mul	r27, r19
 b78:	c0 01       	movw	r24, r0
 b7a:	a3 9f       	mul	r26, r19
 b7c:	70 0d       	add	r23, r0
 b7e:	81 1d       	adc	r24, r1
 b80:	11 24       	eor	r1, r1
 b82:	91 1d       	adc	r25, r1
 b84:	b2 9f       	mul	r27, r18
 b86:	70 0d       	add	r23, r0
 b88:	81 1d       	adc	r24, r1
 b8a:	11 24       	eor	r1, r1
 b8c:	91 1d       	adc	r25, r1
 b8e:	08 95       	ret

00000b90 <_exit>:
 b90:	f8 94       	cli

00000b92 <__stop_program>:
 b92:	ff cf       	rjmp	.-2      	; 0xb92 <__stop_program>
