
DebouncingPatternTestApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ab8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000ab8  00000b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080006a  0080006a  00000b56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d2  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098f  00000000  00000000  00001ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d8a  00000000  00000000  00002835  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000035c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000763  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca5  00000000  00000000  00003f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	c6 01       	movw	r24, r12
  56:	d1 01       	movw	r26, r2
  58:	dc 01       	movw	r26, r24
  5a:	e7 01       	movw	r28, r14
  5c:	f2 01       	movw	r30, r4
  5e:	fd 01       	movw	r30, r26
  60:	08 02       	muls	r16, r24

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e8 eb       	ldi	r30, 0xB8	; 184
  76:	fa e0       	ldi	r31, 0x0A	; 10
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	aa 36       	cpi	r26, 0x6A	; 106
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	aa e6       	ldi	r26, 0x6A	; 106
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a5 37       	cpi	r26, 0x75	; 117
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 c2 03 	call	0x784	; 0x784 <main>
  98:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <BUTTONClient_EventReceive>:
* @param [in]  State -  Button State.
*
* @return function error state.
*/
ERROR_STATE_t BUTTONClient_EventReceive(uint8_t * State)
{
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	8c 01       	movw	r16, r24
   static Enu_ButtonClientStateMachine ENU_ClientState = ButtonClient_Ready;
   ERROR_STATE_t RetErrorState;
   ERROR_STATE_t ErrorState = ERROR_NOK;
   uint8_t u8_state;
   switch(ENU_ClientState)
  b0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	89 f0       	breq	.+34     	; 0xda <BUTTONClient_EventReceive+0x3a>
  b8:	18 f0       	brcs	.+6      	; 0xc0 <BUTTONClient_EventReceive+0x20>
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	39 f1       	breq	.+78     	; 0x10c <BUTTONClient_EventReceive+0x6c>
  be:	37 c0       	rjmp	.+110    	; 0x12e <BUTTONClient_EventReceive+0x8e>
   {
      case ButtonClient_Ready:
         RetErrorState = BUTTON_getState(&u8_state);
  c0:	ce 01       	movw	r24, r28
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	0e 94 a2 00 	call	0x144	; 0x144 <BUTTON_getState>
         if(ERROR_OK == RetErrorState)
  c8:	81 11       	cpse	r24, r1
  ca:	33 c0       	rjmp	.+102    	; 0x132 <BUTTONClient_EventReceive+0x92>
         {
            gu8_OldState = u8_state;
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <gu8_OldState>
            ENU_ClientState = ButtonClient_Delay;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
  d8:	2f c0       	rjmp	.+94     	; 0x138 <BUTTONClient_EventReceive+0x98>
         {
            /* Do Nothing */
         }
         break;
      case ButtonClient_Delay:
         RetErrorState = TIM_DelayStatus(TIMER_2, BUTTONClient_EventReceive);
  da:	60 e5       	ldi	r22, 0x50	; 80
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <TIM_DelayStatus>
         if(TIMER_E_DELAY_EMPTY == RetErrorState)
  e4:	8b 3f       	cpi	r24, 0xFB	; 251
  e6:	59 f4       	brne	.+22     	; 0xfe <BUTTONClient_EventReceive+0x5e>
         {
            TIM_DelayMs(TIMER_2, 20, BUTTONClient_EventReceive);
  e8:	20 e5       	ldi	r18, 0x50	; 80
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	44 e1       	ldi	r20, 0x14	; 20
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TIM_DelayMs>
*/
ERROR_STATE_t BUTTONClient_EventReceive(uint8_t * State)
{
   static Enu_ButtonClientStateMachine ENU_ClientState = ButtonClient_Ready;
   ERROR_STATE_t RetErrorState;
   ERROR_STATE_t ErrorState = ERROR_NOK;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	1d c0       	rjmp	.+58     	; 0x138 <BUTTONClient_EventReceive+0x98>
         RetErrorState = TIM_DelayStatus(TIMER_2, BUTTONClient_EventReceive);
         if(TIMER_E_DELAY_EMPTY == RetErrorState)
         {
            TIM_DelayMs(TIMER_2, 20, BUTTONClient_EventReceive);
         }
         else if(ERROR_OK == RetErrorState)
  fe:	81 11       	cpse	r24, r1
 100:	1a c0       	rjmp	.+52     	; 0x136 <BUTTONClient_EventReceive+0x96>
         {
            ENU_ClientState = ButtonClient_StateReady;
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
*/
ERROR_STATE_t BUTTONClient_EventReceive(uint8_t * State)
{
   static Enu_ButtonClientStateMachine ENU_ClientState = ButtonClient_Ready;
   ERROR_STATE_t RetErrorState;
   ERROR_STATE_t ErrorState = ERROR_NOK;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	16 c0       	rjmp	.+44     	; 0x138 <BUTTONClient_EventReceive+0x98>
         {
            /* Do Nothing */
         }
         break;
      case ButtonClient_StateReady:
         ErrorState = BUTTON_getState(&u8_state);
 10c:	ce 01       	movw	r24, r28
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	0e 94 a2 00 	call	0x144	; 0x144 <BUTTON_getState>
         if(ERROR_OK == RetErrorState)
         {
            if(gu8_OldState == u8_state)
 114:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <gu8_OldState>
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	98 13       	cpse	r25, r24
 11c:	04 c0       	rjmp	.+8      	; 0x126 <BUTTONClient_EventReceive+0x86>
            {
               *State = u8_state;
 11e:	f8 01       	movw	r30, r16
 120:	80 83       	st	Z, r24
               ErrorState = ERROR_OK;
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	01 c0       	rjmp	.+2      	; 0x128 <BUTTONClient_EventReceive+0x88>
            }
            else
            {
               ErrorState = ERROR_NOK;
 126:	81 e0       	ldi	r24, 0x01	; 1
         }
         else
         {
            /* Do Nothing */
         }
         ENU_ClientState = ButtonClient_Ready;
 128:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
         break;
 12c:	05 c0       	rjmp	.+10     	; 0x138 <BUTTONClient_EventReceive+0x98>
*/
ERROR_STATE_t BUTTONClient_EventReceive(uint8_t * State)
{
   static Enu_ButtonClientStateMachine ENU_ClientState = ButtonClient_Ready;
   ERROR_STATE_t RetErrorState;
   ERROR_STATE_t ErrorState = ERROR_NOK;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	03 c0       	rjmp	.+6      	; 0x138 <BUTTONClient_EventReceive+0x98>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	01 c0       	rjmp	.+2      	; 0x138 <BUTTONClient_EventReceive+0x98>
 136:	81 e0       	ldi	r24, 0x01	; 1
         break;
      default:
         break;
   }
   return ErrorState;
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	0f 91       	pop	r16
 142:	08 95       	ret

00000144 <BUTTON_getState>:
{
   /* variable to get error status of the DIO API. */
   DIO_ERROR_state_t e_status;
   
   /* read DIO pin. */
   e_status = DIO_ReadPin(BTN_PORT, BTN_PIN, State);
 144:	ac 01       	movw	r20, r24
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_ReadPin>
   
   /* return data if DIO API returns success. */
   if(E_DIO_SUCCESS == e_status)
 14e:	81 11       	cpse	r24, r1
      return ERROR_OK;
   }
   /* if DIO returned error make the program stuck in super loop for debugging. */
   else
   {
      return ERROR_NOK;
 150:	81 e0       	ldi	r24, 0x01	; 1
   }
 152:	08 95       	ret

00000154 <DIO_SetPinDirection>:
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 154:	68 30       	cpi	r22, 0x08	; 8
 156:	80 f5       	brcc	.+96     	; 0x1b8 <DIO_SetPinDirection+0x64>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	79 f0       	breq	.+30     	; 0x17a <DIO_SetPinDirection+0x26>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_SetPinDirection+0x14>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	31 f0       	breq	.+12     	; 0x16e <DIO_SetPinDirection+0x1a>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	39 f0       	breq	.+14     	; 0x174 <DIO_SetPinDirection+0x20>
 166:	2a c0       	rjmp	.+84     	; 0x1bc <DIO_SetPinDirection+0x68>
 168:	ea e3       	ldi	r30, 0x3A	; 58
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	08 c0       	rjmp	.+16     	; 0x17e <DIO_SetPinDirection+0x2a>
 16e:	e4 e3       	ldi	r30, 0x34	; 52
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	05 c0       	rjmp	.+10     	; 0x17e <DIO_SetPinDirection+0x2a>
 174:	e1 e3       	ldi	r30, 0x31	; 49
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_SetPinDirection+0x2a>
 17a:	e7 e3       	ldi	r30, 0x37	; 55
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	61 f4       	brne	.+24     	; 0x19a <DIO_SetPinDirection+0x46>
 182:	20 81       	ld	r18, Z
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_SetPinDirection+0x3a>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_SetPinDirection+0x36>
 192:	82 2b       	or	r24, r18
 194:	80 83       	st	Z, r24
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
 19a:	41 11       	cpse	r20, r1
 19c:	11 c0       	rjmp	.+34     	; 0x1c0 <DIO_SetPinDirection+0x6c>
 19e:	20 81       	ld	r18, Z
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_SetPinDirection+0x56>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_SetPinDirection+0x52>
 1ae:	80 95       	com	r24
 1b0:	82 23       	and	r24, r18
 1b2:	80 83       	st	Z, r24
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	08 95       	ret
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	08 95       	ret
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	08 95       	ret
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	08 95       	ret

000001c4 <DIO_EnablePinPullup>:
 1c4:	68 30       	cpi	r22, 0x08	; 8
 1c6:	f8 f4       	brcc	.+62     	; 0x206 <DIO_EnablePinPullup+0x42>
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	79 f0       	breq	.+30     	; 0x1ea <DIO_EnablePinPullup+0x26>
 1cc:	28 f0       	brcs	.+10     	; 0x1d8 <DIO_EnablePinPullup+0x14>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	31 f0       	breq	.+12     	; 0x1de <DIO_EnablePinPullup+0x1a>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	39 f0       	breq	.+14     	; 0x1e4 <DIO_EnablePinPullup+0x20>
 1d6:	19 c0       	rjmp	.+50     	; 0x20a <DIO_EnablePinPullup+0x46>
 1d8:	eb e3       	ldi	r30, 0x3B	; 59
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	08 c0       	rjmp	.+16     	; 0x1ee <DIO_EnablePinPullup+0x2a>
 1de:	e5 e3       	ldi	r30, 0x35	; 53
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <DIO_EnablePinPullup+0x2a>
 1e4:	e2 e3       	ldi	r30, 0x32	; 50
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_EnablePinPullup+0x2a>
 1ea:	e8 e3       	ldi	r30, 0x38	; 56
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	20 81       	ld	r18, Z
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_EnablePinPullup+0x36>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_EnablePinPullup+0x32>
 1fe:	82 2b       	or	r24, r18
 200:	80 83       	st	Z, r24
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	08 95       	ret
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	08 95       	ret

0000020e <DIO_ReadPin>:
{
   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
 20e:	41 15       	cp	r20, r1
 210:	51 05       	cpc	r21, r1
 212:	39 f1       	breq	.+78     	; 0x262 <DIO_ReadPin+0x54>
   {
      return E_DIO_NULL_PTR;
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
 214:	68 30       	cpi	r22, 0x08	; 8
 216:	38 f5       	brcc	.+78     	; 0x266 <DIO_ReadPin+0x58>
   {
      /* do nothing */
   }
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	79 f0       	breq	.+30     	; 0x23a <DIO_ReadPin+0x2c>
 21c:	28 f0       	brcs	.+10     	; 0x228 <DIO_ReadPin+0x1a>
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	31 f0       	breq	.+12     	; 0x22e <DIO_ReadPin+0x20>
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	39 f0       	breq	.+14     	; 0x234 <DIO_ReadPin+0x26>
 226:	21 c0       	rjmp	.+66     	; 0x26a <DIO_ReadPin+0x5c>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
 228:	e9 e3       	ldi	r30, 0x39	; 57
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	08 c0       	rjmp	.+16     	; 0x23e <DIO_ReadPin+0x30>
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
         break;
      case PORTC:
         prt_port_stat = &PORTC_STAT;
 22e:	e3 e3       	ldi	r30, 0x33	; 51
 230:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 232:	05 c0       	rjmp	.+10     	; 0x23e <DIO_ReadPin+0x30>
      case PORTD:
         prt_port_stat = &PORTD_STAT;
 234:	e0 e3       	ldi	r30, 0x30	; 48
 236:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_ReadPin+0x30>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
 23a:	e6 e3       	ldi	r30, 0x36	; 54
 23c:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* read the pin value and put it in the data. */
   if(BIT_IS_SET(*prt_port_stat,pin))
 23e:	80 81       	ld	r24, Z
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_ReadPin+0x3a>
 244:	95 95       	asr	r25
 246:	87 95       	ror	r24
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_ReadPin+0x36>
 24c:	80 ff       	sbrs	r24, 0
 24e:	05 c0       	rjmp	.+10     	; 0x25a <DIO_ReadPin+0x4c>
   {
      *data = HIGH;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	fa 01       	movw	r30, r20
 254:	80 83       	st	Z, r24
   {
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 95       	ret
   {
      *data = HIGH;
   }
   else
   {
      *data = LOW;
 25a:	fa 01       	movw	r30, r20
 25c:	10 82       	st	Z, r1
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	08 95       	ret
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
   {
      return E_DIO_NULL_PTR;
 262:	85 e0       	ldi	r24, 0x05	; 5
 264:	08 95       	ret
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	08 95       	ret
         break;
      case PORTD:
         prt_port_stat = &PORTD_STAT;
         break;
      default:
         return E_DIO_INVALID_PORT;
 26a:	83 e0       	ldi	r24, 0x03	; 3
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 26c:	08 95       	ret

0000026e <DIO_TogglePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 26e:	68 30       	cpi	r22, 0x08	; 8
 270:	f8 f4       	brcc	.+62     	; 0x2b0 <DIO_TogglePin+0x42>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	79 f0       	breq	.+30     	; 0x294 <DIO_TogglePin+0x26>
 276:	28 f0       	brcs	.+10     	; 0x282 <DIO_TogglePin+0x14>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	31 f0       	breq	.+12     	; 0x288 <DIO_TogglePin+0x1a>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	39 f0       	breq	.+14     	; 0x28e <DIO_TogglePin+0x20>
 280:	19 c0       	rjmp	.+50     	; 0x2b4 <DIO_TogglePin+0x46>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 282:	eb e3       	ldi	r30, 0x3B	; 59
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	08 c0       	rjmp	.+16     	; 0x298 <DIO_TogglePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 288:	e5 e3       	ldi	r30, 0x35	; 53
 28a:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 28c:	05 c0       	rjmp	.+10     	; 0x298 <DIO_TogglePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 28e:	e2 e3       	ldi	r30, 0x32	; 50
 290:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_TogglePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 294:	e8 e3       	ldi	r30, 0x38	; 56
 296:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
 298:	20 81       	ld	r18, Z
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_TogglePin+0x36>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_TogglePin+0x32>
 2a8:	82 27       	eor	r24, r18
 2aa:	80 83       	st	Z, r24
   
   /* return success message. */
   return E_DIO_SUCCESS;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	08 95       	ret
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 2b4:	83 e0       	ldi	r24, 0x03	; 3
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
   
   /* return success message. */
   return E_DIO_SUCCESS;
 2b6:	08 95       	ret

000002b8 <GetFreqPrescaleRatio>:
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
}
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	08 f0       	brcs	.+2      	; 0x2be <GetFreqPrescaleRatio+0x6>
 2bc:	4e c0       	rjmp	.+156    	; 0x35a <GetFreqPrescaleRatio+0xa2>
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	fc 01       	movw	r30, r24
 2c2:	ee 0f       	add	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	8e 0f       	add	r24, r30
 2c8:	9f 1f       	adc	r25, r31
 2ca:	fc 01       	movw	r30, r24
 2cc:	e0 5a       	subi	r30, 0xA0	; 160
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	82 81       	ldd	r24, Z+2	; 0x02
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	09 f1       	breq	.+66     	; 0x318 <GetFreqPrescaleRatio+0x60>
 2d6:	28 f4       	brcc	.+10     	; 0x2e2 <GetFreqPrescaleRatio+0x2a>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	41 f0       	breq	.+16     	; 0x2ec <GetFreqPrescaleRatio+0x34>
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	89 f0       	breq	.+34     	; 0x302 <GetFreqPrescaleRatio+0x4a>
 2e0:	a2 c0       	rjmp	.+324    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 2e2:	84 30       	cpi	r24, 0x04	; 4
 2e4:	21 f1       	breq	.+72     	; 0x32e <GetFreqPrescaleRatio+0x76>
 2e6:	85 30       	cpi	r24, 0x05	; 5
 2e8:	69 f1       	breq	.+90     	; 0x344 <GetFreqPrescaleRatio+0x8c>
 2ea:	9d c0       	rjmp	.+314    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	a0 e8       	ldi	r26, 0x80	; 128
 2f2:	bd e3       	ldi	r27, 0x3D	; 61
 2f4:	fb 01       	movw	r30, r22
 2f6:	80 83       	st	Z, r24
 2f8:	91 83       	std	Z+1, r25	; 0x01
 2fa:	a2 83       	std	Z+2, r26	; 0x02
 2fc:	b3 83       	std	Z+3, r27	; 0x03
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	a0 e0       	ldi	r26, 0x00	; 0
 308:	bf e3       	ldi	r27, 0x3F	; 63
 30a:	fb 01       	movw	r30, r22
 30c:	80 83       	st	Z, r24
 30e:	91 83       	std	Z+1, r25	; 0x01
 310:	a2 83       	std	Z+2, r26	; 0x02
 312:	b3 83       	std	Z+3, r27	; 0x03
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	08 95       	ret
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	a0 e8       	ldi	r26, 0x80	; 128
 31e:	b0 e4       	ldi	r27, 0x40	; 64
 320:	fb 01       	movw	r30, r22
 322:	80 83       	st	Z, r24
 324:	91 83       	std	Z+1, r25	; 0x01
 326:	a2 83       	std	Z+2, r26	; 0x02
 328:	b3 83       	std	Z+3, r27	; 0x03
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	08 95       	ret
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	a0 e8       	ldi	r26, 0x80	; 128
 334:	b1 e4       	ldi	r27, 0x41	; 65
 336:	fb 01       	movw	r30, r22
 338:	80 83       	st	Z, r24
 33a:	91 83       	std	Z+1, r25	; 0x01
 33c:	a2 83       	std	Z+2, r26	; 0x02
 33e:	b3 83       	std	Z+3, r27	; 0x03
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	08 95       	ret
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	a0 e8       	ldi	r26, 0x80	; 128
 34a:	b2 e4       	ldi	r27, 0x42	; 66
 34c:	fb 01       	movw	r30, r22
 34e:	80 83       	st	Z, r24
 350:	91 83       	std	Z+1, r25	; 0x01
 352:	a2 83       	std	Z+2, r26	; 0x02
 354:	b3 83       	std	Z+3, r27	; 0x03
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	09 f0       	breq	.+2      	; 0x360 <GetFreqPrescaleRatio+0xa8>
 35e:	65 c0       	rjmp	.+202    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	fc 01       	movw	r30, r24
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	8e 0f       	add	r24, r30
 36a:	9f 1f       	adc	r25, r31
 36c:	fc 01       	movw	r30, r24
 36e:	e0 5a       	subi	r30, 0xA0	; 160
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	e2 81       	ldd	r30, Z+2	; 0x02
 374:	8e 2f       	mov	r24, r30
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	fc 01       	movw	r30, r24
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	e7 30       	cpi	r30, 0x07	; 7
 37e:	f1 05       	cpc	r31, r1
 380:	08 f0       	brcs	.+2      	; 0x384 <GetFreqPrescaleRatio+0xcc>
 382:	55 c0       	rjmp	.+170    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 384:	e6 5d       	subi	r30, 0xD6	; 214
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__tablejump2__>
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	a0 e8       	ldi	r26, 0x80	; 128
 392:	bd e3       	ldi	r27, 0x3D	; 61
 394:	fb 01       	movw	r30, r22
 396:	80 83       	st	Z, r24
 398:	91 83       	std	Z+1, r25	; 0x01
 39a:	a2 83       	std	Z+2, r26	; 0x02
 39c:	b3 83       	std	Z+3, r27	; 0x03
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	08 95       	ret
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	a0 e0       	ldi	r26, 0x00	; 0
 3a8:	bf e3       	ldi	r27, 0x3F	; 63
 3aa:	fb 01       	movw	r30, r22
 3ac:	80 83       	st	Z, r24
 3ae:	91 83       	std	Z+1, r25	; 0x01
 3b0:	a2 83       	std	Z+2, r26	; 0x02
 3b2:	b3 83       	std	Z+3, r27	; 0x03
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	a0 e0       	ldi	r26, 0x00	; 0
 3be:	b0 e4       	ldi	r27, 0x40	; 64
 3c0:	fb 01       	movw	r30, r22
 3c2:	80 83       	st	Z, r24
 3c4:	91 83       	std	Z+1, r25	; 0x01
 3c6:	a2 83       	std	Z+2, r26	; 0x02
 3c8:	b3 83       	std	Z+3, r27	; 0x03
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	a0 e8       	ldi	r26, 0x80	; 128
 3d4:	b0 e4       	ldi	r27, 0x40	; 64
 3d6:	fb 01       	movw	r30, r22
 3d8:	80 83       	st	Z, r24
 3da:	91 83       	std	Z+1, r25	; 0x01
 3dc:	a2 83       	std	Z+2, r26	; 0x02
 3de:	b3 83       	std	Z+3, r27	; 0x03
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	08 95       	ret
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	a0 e0       	ldi	r26, 0x00	; 0
 3ea:	b1 e4       	ldi	r27, 0x41	; 65
 3ec:	fb 01       	movw	r30, r22
 3ee:	80 83       	st	Z, r24
 3f0:	91 83       	std	Z+1, r25	; 0x01
 3f2:	a2 83       	std	Z+2, r26	; 0x02
 3f4:	b3 83       	std	Z+3, r27	; 0x03
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	a0 e8       	ldi	r26, 0x80	; 128
 400:	b1 e4       	ldi	r27, 0x41	; 65
 402:	fb 01       	movw	r30, r22
 404:	80 83       	st	Z, r24
 406:	91 83       	std	Z+1, r25	; 0x01
 408:	a2 83       	std	Z+2, r26	; 0x02
 40a:	b3 83       	std	Z+3, r27	; 0x03
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	08 95       	ret
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	a0 e8       	ldi	r26, 0x80	; 128
 416:	b2 e4       	ldi	r27, 0x42	; 66
 418:	fb 01       	movw	r30, r22
 41a:	80 83       	st	Z, r24
 41c:	91 83       	std	Z+1, r25	; 0x01
 41e:	a2 83       	std	Z+2, r26	; 0x02
 420:	b3 83       	std	Z+3, r27	; 0x03
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	08 95       	ret
 426:	8c ef       	ldi	r24, 0xFC	; 252
 428:	08 95       	ret
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret
 42e:	8c ef       	ldi	r24, 0xFC	; 252
 430:	08 95       	ret

00000432 <TIM_Start>:
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	71 f0       	breq	.+28     	; 0x452 <TIM_Start+0x20>
 436:	18 f0       	brcs	.+6      	; 0x43e <TIM_Start+0xc>
 438:	82 30       	cpi	r24, 0x02	; 2
 43a:	31 f0       	breq	.+12     	; 0x448 <TIM_Start+0x16>
 43c:	1e c0       	rjmp	.+60     	; 0x47a <TIM_Start+0x48>
 43e:	e2 e5       	ldi	r30, 0x52	; 82
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	a3 e5       	ldi	r26, 0x53	; 83
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	09 c0       	rjmp	.+18     	; 0x45a <TIM_Start+0x28>
 448:	e4 e4       	ldi	r30, 0x44	; 68
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	a5 e4       	ldi	r26, 0x45	; 69
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	04 c0       	rjmp	.+8      	; 0x45a <TIM_Start+0x28>
 452:	ec e4       	ldi	r30, 0x4C	; 76
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	ae e4       	ldi	r26, 0x4E	; 78
 458:	b0 e0       	ldi	r27, 0x00	; 0
 45a:	60 83       	st	Z, r22
 45c:	2c 91       	ld	r18, X
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	fc 01       	movw	r30, r24
 462:	ee 0f       	add	r30, r30
 464:	ff 1f       	adc	r31, r31
 466:	8e 0f       	add	r24, r30
 468:	9f 1f       	adc	r25, r31
 46a:	fc 01       	movw	r30, r24
 46c:	e0 5a       	subi	r30, 0xA0	; 160
 46e:	ff 4f       	sbci	r31, 0xFF	; 255
 470:	82 81       	ldd	r24, Z+2	; 0x02
 472:	82 2b       	or	r24, r18
 474:	8c 93       	st	X, r24
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret
 47a:	8e ef       	ldi	r24, 0xFE	; 254
 47c:	08 95       	ret

0000047e <TIM_GetStatus>:
 47e:	61 15       	cp	r22, r1
 480:	71 05       	cpc	r23, r1
 482:	09 f4       	brne	.+2      	; 0x486 <TIM_GetStatus+0x8>
 484:	7a c0       	rjmp	.+244    	; 0x57a <TIM_GetStatus+0xfc>
 486:	81 30       	cpi	r24, 0x01	; 1
 488:	41 f1       	breq	.+80     	; 0x4da <TIM_GetStatus+0x5c>
 48a:	20 f0       	brcs	.+8      	; 0x494 <TIM_GetStatus+0x16>
 48c:	82 30       	cpi	r24, 0x02	; 2
 48e:	09 f4       	brne	.+2      	; 0x492 <TIM_GetStatus+0x14>
 490:	52 c0       	rjmp	.+164    	; 0x536 <TIM_GetStatus+0xb8>
 492:	75 c0       	rjmp	.+234    	; 0x57e <TIM_GetStatus+0x100>
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	fc 01       	movw	r30, r24
 498:	ee 0f       	add	r30, r30
 49a:	ff 1f       	adc	r31, r31
 49c:	8e 0f       	add	r24, r30
 49e:	9f 1f       	adc	r25, r31
 4a0:	fc 01       	movw	r30, r24
 4a2:	e0 5a       	subi	r30, 0xA0	; 160
 4a4:	ff 4f       	sbci	r31, 0xFF	; 255
 4a6:	80 81       	ld	r24, Z
 4a8:	81 11       	cpse	r24, r1
 4aa:	09 c0       	rjmp	.+18     	; 0x4be <TIM_GetStatus+0x40>
 4ac:	08 b6       	in	r0, 0x38	; 56
 4ae:	00 fe       	sbrs	r0, 0
 4b0:	68 c0       	rjmp	.+208    	; 0x582 <TIM_GetStatus+0x104>
 4b2:	fb 01       	movw	r30, r22
 4b4:	10 82       	st	Z, r1
 4b6:	98 b7       	in	r25, 0x38	; 56
 4b8:	91 60       	ori	r25, 0x01	; 1
 4ba:	98 bf       	out	0x38, r25	; 56
 4bc:	08 95       	ret
 4be:	88 30       	cpi	r24, 0x08	; 8
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <TIM_GetStatus+0x46>
 4c2:	61 c0       	rjmp	.+194    	; 0x586 <TIM_GetStatus+0x108>
 4c4:	08 b6       	in	r0, 0x38	; 56
 4c6:	01 fe       	sbrs	r0, 1
 4c8:	60 c0       	rjmp	.+192    	; 0x58a <TIM_GetStatus+0x10c>
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	fb 01       	movw	r30, r22
 4ce:	80 83       	st	Z, r24
 4d0:	88 b7       	in	r24, 0x38	; 56
 4d2:	82 60       	ori	r24, 0x02	; 2
 4d4:	88 bf       	out	0x38, r24	; 56
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	08 95       	ret
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	fc 01       	movw	r30, r24
 4de:	ee 0f       	add	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	8e 0f       	add	r24, r30
 4e4:	9f 1f       	adc	r25, r31
 4e6:	fc 01       	movw	r30, r24
 4e8:	e0 5a       	subi	r30, 0xA0	; 160
 4ea:	ff 4f       	sbci	r31, 0xFF	; 255
 4ec:	80 81       	ld	r24, Z
 4ee:	81 11       	cpse	r24, r1
 4f0:	09 c0       	rjmp	.+18     	; 0x504 <TIM_GetStatus+0x86>
 4f2:	08 b6       	in	r0, 0x38	; 56
 4f4:	02 fe       	sbrs	r0, 2
 4f6:	4b c0       	rjmp	.+150    	; 0x58e <TIM_GetStatus+0x110>
 4f8:	fb 01       	movw	r30, r22
 4fa:	10 82       	st	Z, r1
 4fc:	98 b7       	in	r25, 0x38	; 56
 4fe:	94 60       	ori	r25, 0x04	; 4
 500:	98 bf       	out	0x38, r25	; 56
 502:	08 95       	ret
 504:	88 30       	cpi	r24, 0x08	; 8
 506:	09 f0       	breq	.+2      	; 0x50a <TIM_GetStatus+0x8c>
 508:	44 c0       	rjmp	.+136    	; 0x592 <TIM_GetStatus+0x114>
 50a:	98 b7       	in	r25, 0x38	; 56
 50c:	89 2f       	mov	r24, r25
 50e:	80 71       	andi	r24, 0x10	; 16
 510:	94 ff       	sbrs	r25, 4
 512:	08 c0       	rjmp	.+16     	; 0x524 <TIM_GetStatus+0xa6>
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	fb 01       	movw	r30, r22
 518:	80 83       	st	Z, r24
 51a:	88 b7       	in	r24, 0x38	; 56
 51c:	80 61       	ori	r24, 0x10	; 16
 51e:	88 bf       	out	0x38, r24	; 56
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	08 95       	ret
 524:	93 ff       	sbrs	r25, 3
 526:	37 c0       	rjmp	.+110    	; 0x596 <TIM_GetStatus+0x118>
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	fb 01       	movw	r30, r22
 52c:	90 83       	st	Z, r25
 52e:	98 b7       	in	r25, 0x38	; 56
 530:	98 60       	ori	r25, 0x08	; 8
 532:	98 bf       	out	0x38, r25	; 56
 534:	08 95       	ret
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	fc 01       	movw	r30, r24
 53a:	ee 0f       	add	r30, r30
 53c:	ff 1f       	adc	r31, r31
 53e:	8e 0f       	add	r24, r30
 540:	9f 1f       	adc	r25, r31
 542:	fc 01       	movw	r30, r24
 544:	e0 5a       	subi	r30, 0xA0	; 160
 546:	ff 4f       	sbci	r31, 0xFF	; 255
 548:	80 81       	ld	r24, Z
 54a:	81 11       	cpse	r24, r1
 54c:	09 c0       	rjmp	.+18     	; 0x560 <TIM_GetStatus+0xe2>
 54e:	08 b6       	in	r0, 0x38	; 56
 550:	06 fe       	sbrs	r0, 6
 552:	23 c0       	rjmp	.+70     	; 0x59a <TIM_GetStatus+0x11c>
 554:	fb 01       	movw	r30, r22
 556:	10 82       	st	Z, r1
 558:	98 b7       	in	r25, 0x38	; 56
 55a:	90 64       	ori	r25, 0x40	; 64
 55c:	98 bf       	out	0x38, r25	; 56
 55e:	08 95       	ret
 560:	88 30       	cpi	r24, 0x08	; 8
 562:	e9 f4       	brne	.+58     	; 0x59e <TIM_GetStatus+0x120>
 564:	08 b6       	in	r0, 0x38	; 56
 566:	07 fe       	sbrs	r0, 7
 568:	1c c0       	rjmp	.+56     	; 0x5a2 <TIM_GetStatus+0x124>
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	fb 01       	movw	r30, r22
 56e:	80 83       	st	Z, r24
 570:	88 b7       	in	r24, 0x38	; 56
 572:	80 68       	ori	r24, 0x80	; 128
 574:	88 bf       	out	0x38, r24	; 56
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	08 95       	ret
 57a:	8f ef       	ldi	r24, 0xFF	; 255
 57c:	08 95       	ret
 57e:	8e ef       	ldi	r24, 0xFE	; 254
 580:	08 95       	ret
 582:	8d ef       	ldi	r24, 0xFD	; 253
 584:	08 95       	ret
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	08 95       	ret
 58a:	8d ef       	ldi	r24, 0xFD	; 253
 58c:	08 95       	ret
 58e:	8d ef       	ldi	r24, 0xFD	; 253
 590:	08 95       	ret
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	08 95       	ret
 596:	8d ef       	ldi	r24, 0xFD	; 253
 598:	08 95       	ret
 59a:	8d ef       	ldi	r24, 0xFD	; 253
 59c:	08 95       	ret
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	08 95       	ret
 5a2:	8d ef       	ldi	r24, 0xFD	; 253
 5a4:	08 95       	ret

000005a6 <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
 5a6:	8f 92       	push	r8
 5a8:	9f 92       	push	r9
 5aa:	af 92       	push	r10
 5ac:	bf 92       	push	r11
 5ae:	df 92       	push	r13
 5b0:	ef 92       	push	r14
 5b2:	ff 92       	push	r15
 5b4:	0f 93       	push	r16
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	00 d0       	rcall	.+0      	; 0x5be <TIM_DelayMs+0x18>
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <TIM_DelayMs+0x1a>
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	18 2f       	mov	r17, r24
 5c6:	04 2f       	mov	r16, r20
 5c8:	d5 2e       	mov	r13, r21
 5ca:	e6 2e       	mov	r14, r22
 5cc:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
 5ce:	83 30       	cpi	r24, 0x03	; 3
 5d0:	08 f0       	brcs	.+2      	; 0x5d4 <TIM_DelayMs+0x2e>
 5d2:	65 c0       	rjmp	.+202    	; 0x69e <TIM_DelayMs+0xf8>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
 5d4:	21 15       	cp	r18, r1
 5d6:	31 05       	cpc	r19, r1
 5d8:	09 f4       	brne	.+2      	; 0x5dc <TIM_DelayMs+0x36>
 5da:	63 c0       	rjmp	.+198    	; 0x6a2 <TIM_DelayMs+0xfc>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
 5dc:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <gptr_CallerFunc+0x1>
 5e0:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <gptr_CallerFunc>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
 5e4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gEnu_State>
 5e8:	81 11       	cpse	r24, r1
 5ea:	5d c0       	rjmp	.+186    	; 0x6a6 <TIM_DelayMs+0x100>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
 5ec:	be 01       	movw	r22, r28
 5ee:	6f 5f       	subi	r22, 0xFF	; 255
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	81 2f       	mov	r24, r17
 5f4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
 5f8:	8c 3f       	cpi	r24, 0xFC	; 252
 5fa:	09 f4       	brne	.+2      	; 0x5fe <TIM_DelayMs+0x58>
 5fc:	4e c0       	rjmp	.+156    	; 0x69a <TIM_DelayMs+0xf4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
 5fe:	89 80       	ldd	r8, Y+1	; 0x01
 600:	9a 80       	ldd	r9, Y+2	; 0x02
 602:	ab 80       	ldd	r10, Y+3	; 0x03
 604:	bc 80       	ldd	r11, Y+4	; 0x04
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	a9 01       	movw	r20, r18
 60c:	c5 01       	movw	r24, r10
 60e:	b4 01       	movw	r22, r8
 610:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__cmpsf2>
 614:	88 23       	and	r24, r24
 616:	81 f0       	breq	.+32     	; 0x638 <TIM_DelayMs+0x92>
      {
         TIM_Delay /= f32_FreqRatio;
 618:	60 2f       	mov	r22, r16
 61a:	7d 2d       	mov	r23, r13
 61c:	8e 2d       	mov	r24, r14
 61e:	9f 2d       	mov	r25, r15
 620:	0e 94 88 04 	call	0x910	; 0x910 <__floatunsisf>
 624:	a5 01       	movw	r20, r10
 626:	94 01       	movw	r18, r8
 628:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__divsf3>
 62c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fixunssfsi>
 630:	06 2f       	mov	r16, r22
 632:	d7 2e       	mov	r13, r23
 634:	e8 2e       	mov	r14, r24
 636:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
 638:	a8 ee       	ldi	r26, 0xE8	; 232
 63a:	b3 e0       	ldi	r27, 0x03	; 3
 63c:	20 2f       	mov	r18, r16
 63e:	3d 2d       	mov	r19, r13
 640:	4e 2d       	mov	r20, r14
 642:	5f 2d       	mov	r21, r15
 644:	0e 94 40 05 	call	0xa80	; 0xa80 <__muluhisi3>
 648:	bb 27       	eor	r27, r27
 64a:	a9 2f       	mov	r26, r25
 64c:	98 2f       	mov	r25, r24
 64e:	87 2f       	mov	r24, r23
 650:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <gu32_Overflows>
 654:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <gu32_Overflows+0x1>
 658:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <gu32_Overflows+0x2>
 65c:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
 660:	28 ee       	ldi	r18, 0xE8	; 232
 662:	02 9f       	mul	r16, r18
 664:	00 2d       	mov	r16, r0
 666:	11 24       	eor	r1, r1
 668:	00 93 6f 00 	sts	0x006F, r16	; 0x80006f <gu8_Remindar>
      
      if(gu32_Overflows == 0)
 66c:	89 2b       	or	r24, r25
 66e:	8a 2b       	or	r24, r26
 670:	8b 2b       	or	r24, r27
 672:	49 f4       	brne	.+18     	; 0x686 <TIM_DelayMs+0xe0>
      {
         gu8_OverflowsComplete = HIGH;
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
 67a:	60 2f       	mov	r22, r16
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	81 2f       	mov	r24, r17
 680:	0e 94 19 02 	call	0x432	; 0x432 <TIM_Start>
 684:	05 c0       	rjmp	.+10     	; 0x690 <TIM_DelayMs+0xea>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
 686:	6f ef       	ldi	r22, 0xFF	; 255
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	81 2f       	mov	r24, r17
 68c:	0e 94 19 02 	call	0x432	; 0x432 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <gEnu_State>
      return TIMER_E_PENDING;
 696:	8d ef       	ldi	r24, 0xFD	; 253
 698:	07 c0       	rjmp	.+14     	; 0x6a8 <TIM_DelayMs+0x102>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
 69a:	8c ef       	ldi	r24, 0xFC	; 252
 69c:	05 c0       	rjmp	.+10     	; 0x6a8 <TIM_DelayMs+0x102>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
 69e:	8e ef       	ldi	r24, 0xFE	; 254
 6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <TIM_DelayMs+0x102>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <TIM_DelayMs+0x102>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
 6a6:	81 e0       	ldi	r24, 0x01	; 1
}
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	0f 90       	pop	r0
 6ae:	0f 90       	pop	r0
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	ff 90       	pop	r15
 6ba:	ef 90       	pop	r14
 6bc:	df 90       	pop	r13
 6be:	bf 90       	pop	r11
 6c0:	af 90       	pop	r10
 6c2:	9f 90       	pop	r9
 6c4:	8f 90       	pop	r8
 6c6:	08 95       	ret

000006c8 <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
 6c8:	1f 93       	push	r17
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	1f 92       	push	r1
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
   if(DelayReady == gEnu_State)
 6d4:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <gEnu_State>
 6d8:	99 23       	and	r25, r25
 6da:	09 f4       	brne	.+2      	; 0x6de <TIM_DelayStatus+0x16>
 6dc:	49 c0       	rjmp	.+146    	; 0x770 <TIM_DelayStatus+0xa8>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
 6de:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <gptr_CallerFunc>
 6e2:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <gptr_CallerFunc+0x1>
 6e6:	26 17       	cp	r18, r22
 6e8:	37 07       	cpc	r19, r23
 6ea:	09 f0       	breq	.+2      	; 0x6ee <TIM_DelayStatus+0x26>
 6ec:	43 c0       	rjmp	.+134    	; 0x774 <TIM_DelayStatus+0xac>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
 6ee:	91 30       	cpi	r25, 0x01	; 1
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <TIM_DelayStatus+0x2c>
 6f2:	42 c0       	rjmp	.+132    	; 0x778 <TIM_DelayStatus+0xb0>
 6f4:	18 2f       	mov	r17, r24
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
 6f6:	be 01       	movw	r22, r28
 6f8:	6f 5f       	subi	r22, 0xFF	; 255
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	0e 94 3f 02 	call	0x47e	; 0x47e <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
 700:	81 11       	cpse	r24, r1
 702:	35 c0       	rjmp	.+106    	; 0x76e <TIM_DelayStatus+0xa6>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
 704:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gu8_OverflowsComplete>
 708:	81 30       	cpi	r24, 0x01	; 1
 70a:	41 f4       	brne	.+16     	; 0x71c <TIM_DelayStatus+0x54>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
 70c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <gEnu_State>
            gu8_OverflowsComplete = LOW;
 710:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <gu8_OverflowsComplete>
            gu8_Remindar = 0;
 714:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	2f c0       	rjmp	.+94     	; 0x77a <TIM_DelayStatus+0xb2>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
 71c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <gu32_Overflows>
 720:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gu32_Overflows+0x1>
 724:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <gu32_Overflows+0x2>
 728:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <gu32_Overflows+0x3>
 72c:	01 97       	sbiw	r24, 0x01	; 1
 72e:	a1 09       	sbc	r26, r1
 730:	b1 09       	sbc	r27, r1
 732:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <gu32_Overflows>
 736:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <gu32_Overflows+0x1>
 73a:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <gu32_Overflows+0x2>
 73e:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
 742:	89 2b       	or	r24, r25
 744:	8a 2b       	or	r24, r26
 746:	8b 2b       	or	r24, r27
 748:	59 f4       	brne	.+22     	; 0x760 <TIM_DelayStatus+0x98>
         {
            gu8_OverflowsComplete = HIGH;
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
 750:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <gu8_Remindar>
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	81 2f       	mov	r24, r17
 758:	0e 94 19 02 	call	0x432	; 0x432 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
 75c:	8d ef       	ldi	r24, 0xFD	; 253
 75e:	0d c0       	rjmp	.+26     	; 0x77a <TIM_DelayStatus+0xb2>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
 760:	6f ef       	ldi	r22, 0xFF	; 255
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	81 2f       	mov	r24, r17
 766:	0e 94 19 02 	call	0x432	; 0x432 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
 76a:	8d ef       	ldi	r24, 0xFD	; 253
 76c:	06 c0       	rjmp	.+12     	; 0x77a <TIM_DelayStatus+0xb2>
   }
   else
   {
      return ERROR_NOK;
   }      
 76e:	05 c0       	rjmp	.+10     	; 0x77a <TIM_DelayStatus+0xb2>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
 770:	8b ef       	ldi	r24, 0xFB	; 251
 772:	03 c0       	rjmp	.+6      	; 0x77a <TIM_DelayStatus+0xb2>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	01 c0       	rjmp	.+2      	; 0x77a <TIM_DelayStatus+0xb2>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
 778:	81 e0       	ldi	r24, 0x01	; 1
   }      
 77a:	0f 90       	pop	r0
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	1f 91       	pop	r17
 782:	08 95       	ret

00000784 <main>:
#define PRESSED            (uint8_t)(0)

/*- APIs IMPLEMENTATION
-----------------------------------*/
int main(void)
{
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	1f 92       	push	r1
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
   DIO_SetPinDirection(BTN_PORT, BTN_PIN, INPUT);
 78e:	40 e0       	ldi	r20, 0x00	; 0
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	82 e0       	ldi	r24, 0x02	; 2
 794:	0e 94 aa 00 	call	0x154	; 0x154 <DIO_SetPinDirection>
   DIO_EnablePinPullup(BTN_PORT, BTN_PIN);
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <DIO_EnablePinPullup>
   DIO_SetPinDirection(GREEN_LED_PORT, GREEN_LED_PIN, OUTPUT);
 7a0:	41 e0       	ldi	r20, 0x01	; 1
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	0e 94 aa 00 	call	0x154	; 0x154 <DIO_SetPinDirection>
   
   uint8_t ButtonState;
   ERROR_STATE_t ErrorState;
   while (1) 
   {
      ErrorState = BUTTONClient_EventReceive(&ButtonState);
 7aa:	ce 01       	movw	r24, r28
 7ac:	01 96       	adiw	r24, 0x01	; 1
 7ae:	0e 94 50 00 	call	0xa0	; 0xa0 <BUTTONClient_EventReceive>
      {
         if(ERROR_OK == ErrorState)
 7b2:	81 11       	cpse	r24, r1
 7b4:	fa cf       	rjmp	.-12     	; 0x7aa <main+0x26>
         {
            if(PRESSED == ButtonState)
 7b6:	89 81       	ldd	r24, Y+1	; 0x01
 7b8:	81 11       	cpse	r24, r1
 7ba:	f7 cf       	rjmp	.-18     	; 0x7aa <main+0x26>
            {
               DIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_TogglePin>
 7c2:	f3 cf       	rjmp	.-26     	; 0x7aa <main+0x26>

000007c4 <__cmpsf2>:
 7c4:	0e 94 c5 04 	call	0x98a	; 0x98a <__fp_cmp>
 7c8:	08 f4       	brcc	.+2      	; 0x7cc <__cmpsf2+0x8>
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	08 95       	ret

000007ce <__divsf3>:
 7ce:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divsf3x>
 7d2:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_round>
 7d6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fp_pscB>
 7da:	58 f0       	brcs	.+22     	; 0x7f2 <__divsf3+0x24>
 7dc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_pscA>
 7e0:	40 f0       	brcs	.+16     	; 0x7f2 <__divsf3+0x24>
 7e2:	29 f4       	brne	.+10     	; 0x7ee <__divsf3+0x20>
 7e4:	5f 3f       	cpi	r21, 0xFF	; 255
 7e6:	29 f0       	breq	.+10     	; 0x7f2 <__divsf3+0x24>
 7e8:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 7ec:	51 11       	cpse	r21, r1
 7ee:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_szero>
 7f2:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_nan>

000007f6 <__divsf3x>:
 7f6:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_split3>
 7fa:	68 f3       	brcs	.-38     	; 0x7d6 <__divsf3+0x8>

000007fc <__divsf3_pse>:
 7fc:	99 23       	and	r25, r25
 7fe:	b1 f3       	breq	.-20     	; 0x7ec <__divsf3+0x1e>
 800:	55 23       	and	r21, r21
 802:	91 f3       	breq	.-28     	; 0x7e8 <__divsf3+0x1a>
 804:	95 1b       	sub	r25, r21
 806:	55 0b       	sbc	r21, r21
 808:	bb 27       	eor	r27, r27
 80a:	aa 27       	eor	r26, r26
 80c:	62 17       	cp	r22, r18
 80e:	73 07       	cpc	r23, r19
 810:	84 07       	cpc	r24, r20
 812:	38 f0       	brcs	.+14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 814:	9f 5f       	subi	r25, 0xFF	; 255
 816:	5f 4f       	sbci	r21, 0xFF	; 255
 818:	22 0f       	add	r18, r18
 81a:	33 1f       	adc	r19, r19
 81c:	44 1f       	adc	r20, r20
 81e:	aa 1f       	adc	r26, r26
 820:	a9 f3       	breq	.-22     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 822:	35 d0       	rcall	.+106    	; 0x88e <__stack+0x2f>
 824:	0e 2e       	mov	r0, r30
 826:	3a f0       	brmi	.+14     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 828:	e0 e8       	ldi	r30, 0x80	; 128
 82a:	32 d0       	rcall	.+100    	; 0x890 <__stack+0x31>
 82c:	91 50       	subi	r25, 0x01	; 1
 82e:	50 40       	sbci	r21, 0x00	; 0
 830:	e6 95       	lsr	r30
 832:	00 1c       	adc	r0, r0
 834:	ca f7       	brpl	.-14     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 836:	2b d0       	rcall	.+86     	; 0x88e <__stack+0x2f>
 838:	fe 2f       	mov	r31, r30
 83a:	29 d0       	rcall	.+82     	; 0x88e <__stack+0x2f>
 83c:	66 0f       	add	r22, r22
 83e:	77 1f       	adc	r23, r23
 840:	88 1f       	adc	r24, r24
 842:	bb 1f       	adc	r27, r27
 844:	26 17       	cp	r18, r22
 846:	37 07       	cpc	r19, r23
 848:	48 07       	cpc	r20, r24
 84a:	ab 07       	cpc	r26, r27
 84c:	b0 e8       	ldi	r27, 0x80	; 128
 84e:	09 f0       	breq	.+2      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 850:	bb 0b       	sbc	r27, r27
 852:	80 2d       	mov	r24, r0
 854:	bf 01       	movw	r22, r30
 856:	ff 27       	eor	r31, r31
 858:	93 58       	subi	r25, 0x83	; 131
 85a:	5f 4f       	sbci	r21, 0xFF	; 255
 85c:	3a f0       	brmi	.+14     	; 0x86c <__stack+0xd>
 85e:	9e 3f       	cpi	r25, 0xFE	; 254
 860:	51 05       	cpc	r21, r1
 862:	78 f0       	brcs	.+30     	; 0x882 <__stack+0x23>
 864:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 868:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_szero>
 86c:	5f 3f       	cpi	r21, 0xFF	; 255
 86e:	e4 f3       	brlt	.-8      	; 0x868 <__stack+0x9>
 870:	98 3e       	cpi	r25, 0xE8	; 232
 872:	d4 f3       	brlt	.-12     	; 0x868 <__stack+0x9>
 874:	86 95       	lsr	r24
 876:	77 95       	ror	r23
 878:	67 95       	ror	r22
 87a:	b7 95       	ror	r27
 87c:	f7 95       	ror	r31
 87e:	9f 5f       	subi	r25, 0xFF	; 255
 880:	c9 f7       	brne	.-14     	; 0x874 <__stack+0x15>
 882:	88 0f       	add	r24, r24
 884:	91 1d       	adc	r25, r1
 886:	96 95       	lsr	r25
 888:	87 95       	ror	r24
 88a:	97 f9       	bld	r25, 7
 88c:	08 95       	ret
 88e:	e1 e0       	ldi	r30, 0x01	; 1
 890:	66 0f       	add	r22, r22
 892:	77 1f       	adc	r23, r23
 894:	88 1f       	adc	r24, r24
 896:	bb 1f       	adc	r27, r27
 898:	62 17       	cp	r22, r18
 89a:	73 07       	cpc	r23, r19
 89c:	84 07       	cpc	r24, r20
 89e:	ba 07       	cpc	r27, r26
 8a0:	20 f0       	brcs	.+8      	; 0x8aa <__stack+0x4b>
 8a2:	62 1b       	sub	r22, r18
 8a4:	73 0b       	sbc	r23, r19
 8a6:	84 0b       	sbc	r24, r20
 8a8:	ba 0b       	sbc	r27, r26
 8aa:	ee 1f       	adc	r30, r30
 8ac:	88 f7       	brcc	.-30     	; 0x890 <__stack+0x31>
 8ae:	e0 95       	com	r30
 8b0:	08 95       	ret

000008b2 <__fixunssfsi>:
 8b2:	0e 94 19 05 	call	0xa32	; 0xa32 <__fp_splitA>
 8b6:	88 f0       	brcs	.+34     	; 0x8da <__fixunssfsi+0x28>
 8b8:	9f 57       	subi	r25, 0x7F	; 127
 8ba:	98 f0       	brcs	.+38     	; 0x8e2 <__fixunssfsi+0x30>
 8bc:	b9 2f       	mov	r27, r25
 8be:	99 27       	eor	r25, r25
 8c0:	b7 51       	subi	r27, 0x17	; 23
 8c2:	b0 f0       	brcs	.+44     	; 0x8f0 <__fixunssfsi+0x3e>
 8c4:	e1 f0       	breq	.+56     	; 0x8fe <__fixunssfsi+0x4c>
 8c6:	66 0f       	add	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 1f       	adc	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	1a f0       	brmi	.+6      	; 0x8d6 <__fixunssfsi+0x24>
 8d0:	ba 95       	dec	r27
 8d2:	c9 f7       	brne	.-14     	; 0x8c6 <__fixunssfsi+0x14>
 8d4:	14 c0       	rjmp	.+40     	; 0x8fe <__fixunssfsi+0x4c>
 8d6:	b1 30       	cpi	r27, 0x01	; 1
 8d8:	91 f0       	breq	.+36     	; 0x8fe <__fixunssfsi+0x4c>
 8da:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_zero>
 8de:	b1 e0       	ldi	r27, 0x01	; 1
 8e0:	08 95       	ret
 8e2:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_zero>
 8e6:	67 2f       	mov	r22, r23
 8e8:	78 2f       	mov	r23, r24
 8ea:	88 27       	eor	r24, r24
 8ec:	b8 5f       	subi	r27, 0xF8	; 248
 8ee:	39 f0       	breq	.+14     	; 0x8fe <__fixunssfsi+0x4c>
 8f0:	b9 3f       	cpi	r27, 0xF9	; 249
 8f2:	cc f3       	brlt	.-14     	; 0x8e6 <__fixunssfsi+0x34>
 8f4:	86 95       	lsr	r24
 8f6:	77 95       	ror	r23
 8f8:	67 95       	ror	r22
 8fa:	b3 95       	inc	r27
 8fc:	d9 f7       	brne	.-10     	; 0x8f4 <__fixunssfsi+0x42>
 8fe:	3e f4       	brtc	.+14     	; 0x90e <__fixunssfsi+0x5c>
 900:	90 95       	com	r25
 902:	80 95       	com	r24
 904:	70 95       	com	r23
 906:	61 95       	neg	r22
 908:	7f 4f       	sbci	r23, 0xFF	; 255
 90a:	8f 4f       	sbci	r24, 0xFF	; 255
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	08 95       	ret

00000910 <__floatunsisf>:
 910:	e8 94       	clt
 912:	09 c0       	rjmp	.+18     	; 0x926 <__floatsisf+0x12>

00000914 <__floatsisf>:
 914:	97 fb       	bst	r25, 7
 916:	3e f4       	brtc	.+14     	; 0x926 <__floatsisf+0x12>
 918:	90 95       	com	r25
 91a:	80 95       	com	r24
 91c:	70 95       	com	r23
 91e:	61 95       	neg	r22
 920:	7f 4f       	sbci	r23, 0xFF	; 255
 922:	8f 4f       	sbci	r24, 0xFF	; 255
 924:	9f 4f       	sbci	r25, 0xFF	; 255
 926:	99 23       	and	r25, r25
 928:	a9 f0       	breq	.+42     	; 0x954 <__floatsisf+0x40>
 92a:	f9 2f       	mov	r31, r25
 92c:	96 e9       	ldi	r25, 0x96	; 150
 92e:	bb 27       	eor	r27, r27
 930:	93 95       	inc	r25
 932:	f6 95       	lsr	r31
 934:	87 95       	ror	r24
 936:	77 95       	ror	r23
 938:	67 95       	ror	r22
 93a:	b7 95       	ror	r27
 93c:	f1 11       	cpse	r31, r1
 93e:	f8 cf       	rjmp	.-16     	; 0x930 <__floatsisf+0x1c>
 940:	fa f4       	brpl	.+62     	; 0x980 <__floatsisf+0x6c>
 942:	bb 0f       	add	r27, r27
 944:	11 f4       	brne	.+4      	; 0x94a <__floatsisf+0x36>
 946:	60 ff       	sbrs	r22, 0
 948:	1b c0       	rjmp	.+54     	; 0x980 <__floatsisf+0x6c>
 94a:	6f 5f       	subi	r22, 0xFF	; 255
 94c:	7f 4f       	sbci	r23, 0xFF	; 255
 94e:	8f 4f       	sbci	r24, 0xFF	; 255
 950:	9f 4f       	sbci	r25, 0xFF	; 255
 952:	16 c0       	rjmp	.+44     	; 0x980 <__floatsisf+0x6c>
 954:	88 23       	and	r24, r24
 956:	11 f0       	breq	.+4      	; 0x95c <__floatsisf+0x48>
 958:	96 e9       	ldi	r25, 0x96	; 150
 95a:	11 c0       	rjmp	.+34     	; 0x97e <__floatsisf+0x6a>
 95c:	77 23       	and	r23, r23
 95e:	21 f0       	breq	.+8      	; 0x968 <__floatsisf+0x54>
 960:	9e e8       	ldi	r25, 0x8E	; 142
 962:	87 2f       	mov	r24, r23
 964:	76 2f       	mov	r23, r22
 966:	05 c0       	rjmp	.+10     	; 0x972 <__floatsisf+0x5e>
 968:	66 23       	and	r22, r22
 96a:	71 f0       	breq	.+28     	; 0x988 <__floatsisf+0x74>
 96c:	96 e8       	ldi	r25, 0x86	; 134
 96e:	86 2f       	mov	r24, r22
 970:	70 e0       	ldi	r23, 0x00	; 0
 972:	60 e0       	ldi	r22, 0x00	; 0
 974:	2a f0       	brmi	.+10     	; 0x980 <__floatsisf+0x6c>
 976:	9a 95       	dec	r25
 978:	66 0f       	add	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	88 1f       	adc	r24, r24
 97e:	da f7       	brpl	.-10     	; 0x976 <__floatsisf+0x62>
 980:	88 0f       	add	r24, r24
 982:	96 95       	lsr	r25
 984:	87 95       	ror	r24
 986:	97 f9       	bld	r25, 7
 988:	08 95       	ret

0000098a <__fp_cmp>:
 98a:	99 0f       	add	r25, r25
 98c:	00 08       	sbc	r0, r0
 98e:	55 0f       	add	r21, r21
 990:	aa 0b       	sbc	r26, r26
 992:	e0 e8       	ldi	r30, 0x80	; 128
 994:	fe ef       	ldi	r31, 0xFE	; 254
 996:	16 16       	cp	r1, r22
 998:	17 06       	cpc	r1, r23
 99a:	e8 07       	cpc	r30, r24
 99c:	f9 07       	cpc	r31, r25
 99e:	c0 f0       	brcs	.+48     	; 0x9d0 <__fp_cmp+0x46>
 9a0:	12 16       	cp	r1, r18
 9a2:	13 06       	cpc	r1, r19
 9a4:	e4 07       	cpc	r30, r20
 9a6:	f5 07       	cpc	r31, r21
 9a8:	98 f0       	brcs	.+38     	; 0x9d0 <__fp_cmp+0x46>
 9aa:	62 1b       	sub	r22, r18
 9ac:	73 0b       	sbc	r23, r19
 9ae:	84 0b       	sbc	r24, r20
 9b0:	95 0b       	sbc	r25, r21
 9b2:	39 f4       	brne	.+14     	; 0x9c2 <__fp_cmp+0x38>
 9b4:	0a 26       	eor	r0, r26
 9b6:	61 f0       	breq	.+24     	; 0x9d0 <__fp_cmp+0x46>
 9b8:	23 2b       	or	r18, r19
 9ba:	24 2b       	or	r18, r20
 9bc:	25 2b       	or	r18, r21
 9be:	21 f4       	brne	.+8      	; 0x9c8 <__fp_cmp+0x3e>
 9c0:	08 95       	ret
 9c2:	0a 26       	eor	r0, r26
 9c4:	09 f4       	brne	.+2      	; 0x9c8 <__fp_cmp+0x3e>
 9c6:	a1 40       	sbci	r26, 0x01	; 1
 9c8:	a6 95       	lsr	r26
 9ca:	8f ef       	ldi	r24, 0xFF	; 255
 9cc:	81 1d       	adc	r24, r1
 9ce:	81 1d       	adc	r24, r1
 9d0:	08 95       	ret

000009d2 <__fp_inf>:
 9d2:	97 f9       	bld	r25, 7
 9d4:	9f 67       	ori	r25, 0x7F	; 127
 9d6:	80 e8       	ldi	r24, 0x80	; 128
 9d8:	70 e0       	ldi	r23, 0x00	; 0
 9da:	60 e0       	ldi	r22, 0x00	; 0
 9dc:	08 95       	ret

000009de <__fp_nan>:
 9de:	9f ef       	ldi	r25, 0xFF	; 255
 9e0:	80 ec       	ldi	r24, 0xC0	; 192
 9e2:	08 95       	ret

000009e4 <__fp_pscA>:
 9e4:	00 24       	eor	r0, r0
 9e6:	0a 94       	dec	r0
 9e8:	16 16       	cp	r1, r22
 9ea:	17 06       	cpc	r1, r23
 9ec:	18 06       	cpc	r1, r24
 9ee:	09 06       	cpc	r0, r25
 9f0:	08 95       	ret

000009f2 <__fp_pscB>:
 9f2:	00 24       	eor	r0, r0
 9f4:	0a 94       	dec	r0
 9f6:	12 16       	cp	r1, r18
 9f8:	13 06       	cpc	r1, r19
 9fa:	14 06       	cpc	r1, r20
 9fc:	05 06       	cpc	r0, r21
 9fe:	08 95       	ret

00000a00 <__fp_round>:
 a00:	09 2e       	mov	r0, r25
 a02:	03 94       	inc	r0
 a04:	00 0c       	add	r0, r0
 a06:	11 f4       	brne	.+4      	; 0xa0c <__fp_round+0xc>
 a08:	88 23       	and	r24, r24
 a0a:	52 f0       	brmi	.+20     	; 0xa20 <__fp_round+0x20>
 a0c:	bb 0f       	add	r27, r27
 a0e:	40 f4       	brcc	.+16     	; 0xa20 <__fp_round+0x20>
 a10:	bf 2b       	or	r27, r31
 a12:	11 f4       	brne	.+4      	; 0xa18 <__fp_round+0x18>
 a14:	60 ff       	sbrs	r22, 0
 a16:	04 c0       	rjmp	.+8      	; 0xa20 <__fp_round+0x20>
 a18:	6f 5f       	subi	r22, 0xFF	; 255
 a1a:	7f 4f       	sbci	r23, 0xFF	; 255
 a1c:	8f 4f       	sbci	r24, 0xFF	; 255
 a1e:	9f 4f       	sbci	r25, 0xFF	; 255
 a20:	08 95       	ret

00000a22 <__fp_split3>:
 a22:	57 fd       	sbrc	r21, 7
 a24:	90 58       	subi	r25, 0x80	; 128
 a26:	44 0f       	add	r20, r20
 a28:	55 1f       	adc	r21, r21
 a2a:	59 f0       	breq	.+22     	; 0xa42 <__fp_splitA+0x10>
 a2c:	5f 3f       	cpi	r21, 0xFF	; 255
 a2e:	71 f0       	breq	.+28     	; 0xa4c <__fp_splitA+0x1a>
 a30:	47 95       	ror	r20

00000a32 <__fp_splitA>:
 a32:	88 0f       	add	r24, r24
 a34:	97 fb       	bst	r25, 7
 a36:	99 1f       	adc	r25, r25
 a38:	61 f0       	breq	.+24     	; 0xa52 <__fp_splitA+0x20>
 a3a:	9f 3f       	cpi	r25, 0xFF	; 255
 a3c:	79 f0       	breq	.+30     	; 0xa5c <__fp_splitA+0x2a>
 a3e:	87 95       	ror	r24
 a40:	08 95       	ret
 a42:	12 16       	cp	r1, r18
 a44:	13 06       	cpc	r1, r19
 a46:	14 06       	cpc	r1, r20
 a48:	55 1f       	adc	r21, r21
 a4a:	f2 cf       	rjmp	.-28     	; 0xa30 <__fp_split3+0xe>
 a4c:	46 95       	lsr	r20
 a4e:	f1 df       	rcall	.-30     	; 0xa32 <__fp_splitA>
 a50:	08 c0       	rjmp	.+16     	; 0xa62 <__fp_splitA+0x30>
 a52:	16 16       	cp	r1, r22
 a54:	17 06       	cpc	r1, r23
 a56:	18 06       	cpc	r1, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	f1 cf       	rjmp	.-30     	; 0xa3e <__fp_splitA+0xc>
 a5c:	86 95       	lsr	r24
 a5e:	71 05       	cpc	r23, r1
 a60:	61 05       	cpc	r22, r1
 a62:	08 94       	sec
 a64:	08 95       	ret

00000a66 <__fp_zero>:
 a66:	e8 94       	clt

00000a68 <__fp_szero>:
 a68:	bb 27       	eor	r27, r27
 a6a:	66 27       	eor	r22, r22
 a6c:	77 27       	eor	r23, r23
 a6e:	cb 01       	movw	r24, r22
 a70:	97 f9       	bld	r25, 7
 a72:	08 95       	ret

00000a74 <__tablejump2__>:
 a74:	ee 0f       	add	r30, r30
 a76:	ff 1f       	adc	r31, r31
 a78:	05 90       	lpm	r0, Z+
 a7a:	f4 91       	lpm	r31, Z
 a7c:	e0 2d       	mov	r30, r0
 a7e:	09 94       	ijmp

00000a80 <__muluhisi3>:
 a80:	0e 94 4b 05 	call	0xa96	; 0xa96 <__umulhisi3>
 a84:	a5 9f       	mul	r26, r21
 a86:	90 0d       	add	r25, r0
 a88:	b4 9f       	mul	r27, r20
 a8a:	90 0d       	add	r25, r0
 a8c:	a4 9f       	mul	r26, r20
 a8e:	80 0d       	add	r24, r0
 a90:	91 1d       	adc	r25, r1
 a92:	11 24       	eor	r1, r1
 a94:	08 95       	ret

00000a96 <__umulhisi3>:
 a96:	a2 9f       	mul	r26, r18
 a98:	b0 01       	movw	r22, r0
 a9a:	b3 9f       	mul	r27, r19
 a9c:	c0 01       	movw	r24, r0
 a9e:	a3 9f       	mul	r26, r19
 aa0:	70 0d       	add	r23, r0
 aa2:	81 1d       	adc	r24, r1
 aa4:	11 24       	eor	r1, r1
 aa6:	91 1d       	adc	r25, r1
 aa8:	b2 9f       	mul	r27, r18
 aaa:	70 0d       	add	r23, r0
 aac:	81 1d       	adc	r24, r1
 aae:	11 24       	eor	r1, r1
 ab0:	91 1d       	adc	r25, r1
 ab2:	08 95       	ret

00000ab4 <_exit>:
 ab4:	f8 94       	cli

00000ab6 <__stop_program>:
 ab6:	ff cf       	rjmp	.-2      	; 0xab6 <__stop_program>
