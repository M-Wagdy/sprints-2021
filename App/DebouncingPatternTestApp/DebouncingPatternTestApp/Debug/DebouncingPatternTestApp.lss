
DebouncingPatternTestApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000b98  00000c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080006c  0080006c  00000c38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001722  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3b  00000000  00000000  0000251e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000106c  00000000  00000000  00003059  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  000040c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f6  00000000  00000000  00004340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eab  00000000  00000000  00004c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005ae1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	20 02       	muls	r18, r16
  56:	2b 02       	muls	r18, r27
  58:	36 02       	muls	r19, r22
  5a:	41 02       	muls	r20, r17
  5c:	4c 02       	muls	r20, r28
  5e:	57 02       	muls	r21, r23
  60:	62 02       	muls	r22, r18

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e8 e9       	ldi	r30, 0x98	; 152
  76:	fb e0       	ldi	r31, 0x0B	; 11
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	ac 36       	cpi	r26, 0x6C	; 108
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	ac e6       	ldi	r26, 0x6C	; 108
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a1 38       	cpi	r26, 0x81	; 129
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 2d 04 	call	0x85a	; 0x85a <main>
  98:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <BUTTONClient_EventReceive>:
* @param [in]  ClientData -  Struct containing Client Data.
*
* @return function error state.
*/
ERROR_STATE_t BUTTONClient_EventReceive(STR_BTNClient_t * const ClientData)
{  
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	ec 01       	movw	r28, r24
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
   
   /* State Machine */
   switch(ClientData->ENU_ClientState)
  a6:	88 85       	ldd	r24, Y+8	; 0x08
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	79 f0       	breq	.+30     	; 0xca <BUTTONClient_EventReceive+0x2a>
  ac:	18 f0       	brcs	.+6      	; 0xb4 <BUTTONClient_EventReceive+0x14>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	21 f1       	breq	.+72     	; 0xfa <BUTTONClient_EventReceive+0x5a>
  b2:	3d c0       	rjmp	.+122    	; 0x12e <BUTTONClient_EventReceive+0x8e>
   {
      /* Get First Button Reading State */
      case ButtonClient_Ready:
         RetErrorState = BUTTON_getState(ClientData->u8_ButtonCh, &ClientData->u8_OldButtonState);
  b4:	be 01       	movw	r22, r28
  b6:	6e 5f       	subi	r22, 0xFE	; 254
  b8:	7f 4f       	sbci	r23, 0xFF	; 255
  ba:	88 81       	ld	r24, Y
  bc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <BUTTON_getState>
         if(ERROR_OK == RetErrorState)
  c0:	81 11       	cpse	r24, r1
  c2:	37 c0       	rjmp	.+110    	; 0x132 <BUTTONClient_EventReceive+0x92>
         {  
            /* Go to debounce Delay State. */
            ClientData->ENU_ClientState = ButtonClient_Delay;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	88 87       	std	Y+8, r24	; 0x08
  c8:	37 c0       	rjmp	.+110    	; 0x138 <BUTTONClient_EventReceive+0x98>
         }
         break;
      /* Debounce Delay State */
      case ButtonClient_Delay:
         /* Call Delay Status. */
         RetErrorState = TIM_DelayStatus(ClientData->u8_TimerCh, BUTTONClient_EventReceive);
  ca:	60 e5       	ldi	r22, 0x50	; 80
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	0e 94 be 03 	call	0x77c	; 0x77c <TIM_DelayStatus>
         /* If Delay is not used by another API. */
         if(TIMER_E_DELAY_EMPTY == RetErrorState)
  d4:	8b 3f       	cpi	r24, 0xFB	; 251
  d6:	59 f4       	brne	.+22     	; 0xee <BUTTONClient_EventReceive+0x4e>
         {
            /* Start Delay with 20 Milliseconds. */
            TIM_DelayMs(ClientData->u8_TimerCh, ClientData->u32_DebounceDelay, BUTTONClient_EventReceive);
  d8:	4c 81       	ldd	r20, Y+4	; 0x04
  da:	5d 81       	ldd	r21, Y+5	; 0x05
  dc:	6e 81       	ldd	r22, Y+6	; 0x06
  de:	7f 81       	ldd	r23, Y+7	; 0x07
  e0:	20 e5       	ldi	r18, 0x50	; 80
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	0e 94 2d 03 	call	0x65a	; 0x65a <TIM_DelayMs>
{  
   /* Used Function Return Error State */
   ERROR_STATE_t RetErrorState;
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	25 c0       	rjmp	.+74     	; 0x138 <BUTTONClient_EventReceive+0x98>
         {
            /* Start Delay with 20 Milliseconds. */
            TIM_DelayMs(ClientData->u8_TimerCh, ClientData->u32_DebounceDelay, BUTTONClient_EventReceive);
         }
         /* If Delay Finished */
         else if(ERROR_OK == RetErrorState)
  ee:	81 11       	cpse	r24, r1
  f0:	22 c0       	rjmp	.+68     	; 0x136 <BUTTONClient_EventReceive+0x96>
         {
            /* Go To Get Second Button Reading State. */
            ClientData->ENU_ClientState = ButtonClient_StateReady;
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	88 87       	std	Y+8, r24	; 0x08
{  
   /* Used Function Return Error State */
   ERROR_STATE_t RetErrorState;
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	1f c0       	rjmp	.+62     	; 0x138 <BUTTONClient_EventReceive+0x98>
            /* Do Nothing */
         }
         break;
      /* Get Second Button Reading State. */
      case ButtonClient_StateReady:
         RetErrorState = BUTTON_getState(ClientData->u8_ButtonCh, &ClientData->u8_ButtonState);
  fa:	be 01       	movw	r22, r28
  fc:	6f 5f       	subi	r22, 0xFF	; 255
  fe:	7f 4f       	sbci	r23, 0xFF	; 255
 100:	88 81       	ld	r24, Y
 102:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <BUTTON_getState>
         if(ERROR_OK == RetErrorState)
 106:	81 11       	cpse	r24, r1
 108:	0b c0       	rjmp	.+22     	; 0x120 <BUTTONClient_EventReceive+0x80>
         {
            /* Compare the button old state with the new state. */
            if(ClientData->u8_OldButtonState == ClientData->u8_ButtonState)
 10a:	9a 81       	ldd	r25, Y+2	; 0x02
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	98 13       	cpse	r25, r24
 110:	09 c0       	rjmp	.+18     	; 0x124 <BUTTONClient_EventReceive+0x84>
            {
               /* Make Sure Callback is not pointing to null. */
               if(NULL_PTR != ClientData->EventCallback)
 112:	e9 85       	ldd	r30, Y+9	; 0x09
 114:	fa 85       	ldd	r31, Y+10	; 0x0a
 116:	30 97       	sbiw	r30, 0x00	; 0
 118:	39 f0       	breq	.+14     	; 0x128 <BUTTONClient_EventReceive+0x88>
               {
                  /* Call The callback function. */
                  ClientData->EventCallback();
 11a:	09 95       	icall
               }                 
               ErrorState = ERROR_OK;
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	05 c0       	rjmp	.+10     	; 0x12a <BUTTONClient_EventReceive+0x8a>
{  
   /* Used Function Return Error State */
   ERROR_STATE_t RetErrorState;
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	03 c0       	rjmp	.+6      	; 0x12a <BUTTONClient_EventReceive+0x8a>
               }                 
               ErrorState = ERROR_OK;
            }
            else
            {
               ErrorState = ERROR_NOK;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	01 c0       	rjmp	.+2      	; 0x12a <BUTTONClient_EventReceive+0x8a>
               if(NULL_PTR != ClientData->EventCallback)
               {
                  /* Call The callback function. */
                  ClientData->EventCallback();
               }                 
               ErrorState = ERROR_OK;
 128:	80 e0       	ldi	r24, 0x00	; 0
         else
         {
            /* Do Nothing */
         }
         /* Go To New Button Reading State. */
         ClientData->ENU_ClientState = ButtonClient_Ready;
 12a:	18 86       	std	Y+8, r1	; 0x08
         break;
 12c:	05 c0       	rjmp	.+10     	; 0x138 <BUTTONClient_EventReceive+0x98>
{  
   /* Used Function Return Error State */
   ERROR_STATE_t RetErrorState;
   
   /* Button Client Error State */
   ERROR_STATE_t ErrorState = ERROR_NOK;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	03 c0       	rjmp	.+6      	; 0x138 <BUTTONClient_EventReceive+0x98>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	01 c0       	rjmp	.+2      	; 0x138 <BUTTONClient_EventReceive+0x98>
 136:	81 e0       	ldi	r24, 0x01	; 1
         break;
   }
   
   /* Return Function Error State. */
   return ErrorState;
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <BUTTONClient_Init>:
* @param [in]  ClientData  -  Struct containing Client Data.
*
* @return function error state.
*/
ERROR_STATE_t BUTTONClient_Init(STR_BTNClient_t * const ClientData)
{
 13e:	fc 01       	movw	r30, r24
   ClientData->u8_ButtonCh = BTN_INVALID_CH;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 83       	st	Z, r24
   ClientData->u8_ButtonState = 0;
 144:	11 82       	std	Z+1, r1	; 0x01
   ClientData->u8_OldButtonState = 0;
 146:	12 82       	std	Z+2, r1	; 0x02
   ClientData->u8_TimerCh = INVALID_TIMER_CH;
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	83 83       	std	Z+3, r24	; 0x03
   ClientData->u32_DebounceDelay = 0;
 14c:	14 82       	std	Z+4, r1	; 0x04
 14e:	15 82       	std	Z+5, r1	; 0x05
 150:	16 82       	std	Z+6, r1	; 0x06
 152:	17 82       	std	Z+7, r1	; 0x07
   ClientData->ENU_ClientState = ButtonClient_Ready;
 154:	10 86       	std	Z+8, r1	; 0x08
   ClientData->EventCallback = NULL_PTR;
 156:	12 86       	std	Z+10, r1	; 0x0a
 158:	11 86       	std	Z+9, r1	; 0x09
   return ERROR_OK;
}
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	08 95       	ret

0000015e <BUTTONClient_SetBtn>:
*/
ERROR_STATE_t BUTTONClient_SetBtn(STR_BTNClient_t * const ClientData, uint8_t BTN_CH)
{
   ERROR_STATE_t Client_ErrorState;
   
   if(BTN_CH >= BTN_INVALID_CH)
 15e:	61 11       	cpse	r22, r1
 160:	02 c0       	rjmp	.+4      	; 0x166 <BUTTONClient_SetBtn+0x8>
   {
      Client_ErrorState = ERROR_NOK;
   }
   else
   {
      ClientData->u8_ButtonCh = BTN_CH;
 162:	fc 01       	movw	r30, r24
 164:	60 83       	st	Z, r22
   }
   
   return Client_ErrorState;
}
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	08 95       	ret

0000016a <BUTTONClient_SetTimer>:
*/
ERROR_STATE_t BUTTONClient_SetTimer(STR_BTNClient_t * const ClientData, uint8_t TIM_CH, uint32_t DelayMS)
{
   ERROR_STATE_t Client_ErrorState;
   
   if(TIM_CH >= INVALID_TIMER_CH)
 16a:	63 30       	cpi	r22, 0x03	; 3
 16c:	40 f4       	brcc	.+16     	; 0x17e <BUTTONClient_SetTimer+0x14>
   {
      Client_ErrorState = ERROR_NOK;
   }
   else
   {
      ClientData->u8_TimerCh = TIM_CH;
 16e:	fc 01       	movw	r30, r24
 170:	63 83       	std	Z+3, r22	; 0x03
      ClientData->u32_DebounceDelay = DelayMS;
 172:	24 83       	std	Z+4, r18	; 0x04
 174:	35 83       	std	Z+5, r19	; 0x05
 176:	46 83       	std	Z+6, r20	; 0x06
 178:	57 83       	std	Z+7, r21	; 0x07
      Client_ErrorState = ERROR_OK;
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
{
   ERROR_STATE_t Client_ErrorState;
   
   if(TIM_CH >= INVALID_TIMER_CH)
   {
      Client_ErrorState = ERROR_NOK;
 17e:	81 e0       	ldi	r24, 0x01	; 1
      ClientData->u32_DebounceDelay = DelayMS;
      Client_ErrorState = ERROR_OK;
   }
   
   return Client_ErrorState;
}
 180:	08 95       	ret

00000182 <BUTTONClient_SetEventCallback>:
*/
ERROR_STATE_t BUTTONClient_SetEventCallback(STR_BTNClient_t * const ClientData, Ptr_VoidFuncVoid_t Callback)
{
   ERROR_STATE_t Client_ErrorState;
   
   if(NULL_PTR == Callback)
 182:	61 15       	cp	r22, r1
 184:	71 05       	cpc	r23, r1
 186:	29 f0       	breq	.+10     	; 0x192 <BUTTONClient_SetEventCallback+0x10>
   {
      Client_ErrorState = ERROR_NOK;
   }
   else
   {
      ClientData->EventCallback = Callback;
 188:	fc 01       	movw	r30, r24
 18a:	72 87       	std	Z+10, r23	; 0x0a
 18c:	61 87       	std	Z+9, r22	; 0x09
      Client_ErrorState = ERROR_OK;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	08 95       	ret
{
   ERROR_STATE_t Client_ErrorState;
   
   if(NULL_PTR == Callback)
   {
      Client_ErrorState = ERROR_NOK;
 192:	81 e0       	ldi	r24, 0x01	; 1
      ClientData->EventCallback = Callback;
      Client_ErrorState = ERROR_OK;
   }
   
   return Client_ErrorState;
}
 194:	08 95       	ret

00000196 <Button_Init>:
* @param [in]  BUTTON_CH -  Button channel number.
*
* @return button state.
*/
ERROR_STATE_t Button_Init(uint8_t BUTTON_CH)
{
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
   ERROR_STATE_t BUTTON_ErrorState;
   if(BUTTON_CH >= BTN_INVALID_CH)
 19c:	81 11       	cpse	r24, r1
 19e:	14 c0       	rjmp	.+40     	; 0x1c8 <Button_Init+0x32>
   {
      uint8_t BTN_Port;
      uint8_t BTN_Pin;
      uint8_t BTN_PullUp;
      
      switch(BUTTON_CH)
 1a0:	81 11       	cpse	r24, r1
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <Button_Init+0x18>
      {
         case BTN_0:
            BTN_Port = gastr_Button_Config[BTN_0].u8_Port;
 1a4:	e0 e6       	ldi	r30, 0x60	; 96
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	c0 81       	ld	r28, Z
            BTN_Pin = gastr_Button_Config[BTN_0].u8_Pin;
 1aa:	d1 81       	ldd	r29, Z+1	; 0x01
            BTN_PullUp = gastr_Button_Config[BTN_0].u8_PullUp;
 1ac:	12 81       	ldd	r17, Z+2	; 0x02
            BUTTON_ErrorState = BTN_E_INVALID_CH_NUM;
            break;
      }
      
      /* Init Button Pins */
      DIO_SetPinDirection(BTN_Port, BTN_Pin, INPUT);
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	6d 2f       	mov	r22, r29
 1b2:	8c 2f       	mov	r24, r28
 1b4:	0e 94 04 01 	call	0x208	; 0x208 <DIO_SetPinDirection>
      if(PULL_UP == BTN_PullUp)
 1b8:	11 30       	cpi	r17, 0x01	; 1
 1ba:	41 f4       	brne	.+16     	; 0x1cc <Button_Init+0x36>
      {
         DIO_EnablePinPullup(BTN_Port, BTN_Pin);
 1bc:	6d 2f       	mov	r22, r29
 1be:	8c 2f       	mov	r24, r28
 1c0:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_EnablePinPullup>
      }
      BUTTON_ErrorState = ERROR_OK;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <Button_Init+0x38>
ERROR_STATE_t Button_Init(uint8_t BUTTON_CH)
{
   ERROR_STATE_t BUTTON_ErrorState;
   if(BUTTON_CH >= BTN_INVALID_CH)
   {
      BUTTON_ErrorState = BTN_E_INVALID_CH_NUM;
 1c8:	8e ef       	ldi	r24, 0xFE	; 254
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <Button_Init+0x38>
      DIO_SetPinDirection(BTN_Port, BTN_Pin, INPUT);
      if(PULL_UP == BTN_PullUp)
      {
         DIO_EnablePinPullup(BTN_Port, BTN_Pin);
      }
      BUTTON_ErrorState = ERROR_OK;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
   }
   
   /* return function Error State. */   
   return BUTTON_ErrorState;
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	08 95       	ret

000001d6 <BUTTON_getState>:
* @return button state.
*/
ERROR_STATE_t BUTTON_getState(uint8_t BUTTON_CH, uint8_t * State)
{
   ERROR_STATE_t BUTTON_ErrorState;
   if(BUTTON_CH >= BTN_INVALID_CH)
 1d6:	81 11       	cpse	r24, r1
 1d8:	11 c0       	rjmp	.+34     	; 0x1fc <BUTTON_getState+0x26>
   {
      BUTTON_ErrorState = BTN_E_INVALID_CH_NUM;
   }
   else if(NULL_PTR == State)
 1da:	61 15       	cp	r22, r1
 1dc:	71 05       	cpc	r23, r1
 1de:	81 f0       	breq	.+32     	; 0x200 <BUTTON_getState+0x2a>
   {
      uint8_t BTN_Port;
      uint8_t BTN_Pin;
      uint8_t BTN_PullUp;
      
      switch(BUTTON_CH)
 1e0:	81 11       	cpse	r24, r1
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <BUTTON_getState+0x16>
      {
         case BTN_0:
            BTN_Port = gastr_Button_Config[BTN_0].u8_Port;
 1e4:	e0 e6       	ldi	r30, 0x60	; 96
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	90 81       	ld	r25, Z
            BTN_Pin = gastr_Button_Config[BTN_0].u8_Pin;
 1ea:	21 81       	ldd	r18, Z+1	; 0x01
 1ec:	ab 01       	movw	r20, r22
      
      /* variable to get error status of the DIO API. */
      DIO_ERROR_state_t e_status;
      
      /* read DIO pin. */
      e_status = DIO_ReadPin(BTN_Port, BTN_Pin, State);
 1ee:	62 2f       	mov	r22, r18
 1f0:	89 2f       	mov	r24, r25
 1f2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIO_ReadPin>
      
      /* return data if DIO API returns success. */
      if(E_DIO_SUCCESS == e_status)
 1f6:	81 11       	cpse	r24, r1
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <BUTTON_getState+0x2e>
 1fa:	08 95       	ret
ERROR_STATE_t BUTTON_getState(uint8_t BUTTON_CH, uint8_t * State)
{
   ERROR_STATE_t BUTTON_ErrorState;
   if(BUTTON_CH >= BTN_INVALID_CH)
   {
      BUTTON_ErrorState = BTN_E_INVALID_CH_NUM;
 1fc:	8e ef       	ldi	r24, 0xFE	; 254
 1fe:	08 95       	ret
   }
   else if(NULL_PTR == State)
   {
      BUTTON_ErrorState = BTN_E_NULL_PTR;
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	08 95       	ret
      {
         BUTTON_ErrorState = ERROR_OK;
      }
      else
      {
         BUTTON_ErrorState = ERROR_NOK;
 204:	81 e0       	ldi	r24, 0x01	; 1
      }
   }   
   
   /* return function Error State. */
   return BUTTON_ErrorState;
 206:	08 95       	ret

00000208 <DIO_SetPinDirection>:
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 208:	68 30       	cpi	r22, 0x08	; 8
 20a:	80 f5       	brcc	.+96     	; 0x26c <DIO_SetPinDirection+0x64>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	79 f0       	breq	.+30     	; 0x22e <DIO_SetPinDirection+0x26>
 210:	28 f0       	brcs	.+10     	; 0x21c <DIO_SetPinDirection+0x14>
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	31 f0       	breq	.+12     	; 0x222 <DIO_SetPinDirection+0x1a>
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	39 f0       	breq	.+14     	; 0x228 <DIO_SetPinDirection+0x20>
 21a:	2a c0       	rjmp	.+84     	; 0x270 <DIO_SetPinDirection+0x68>
 21c:	ea e3       	ldi	r30, 0x3A	; 58
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	08 c0       	rjmp	.+16     	; 0x232 <DIO_SetPinDirection+0x2a>
 222:	e4 e3       	ldi	r30, 0x34	; 52
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	05 c0       	rjmp	.+10     	; 0x232 <DIO_SetPinDirection+0x2a>
 228:	e1 e3       	ldi	r30, 0x31	; 49
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SetPinDirection+0x2a>
 22e:	e7 e3       	ldi	r30, 0x37	; 55
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	41 30       	cpi	r20, 0x01	; 1
 234:	61 f4       	brne	.+24     	; 0x24e <DIO_SetPinDirection+0x46>
 236:	20 81       	ld	r18, Z
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_SetPinDirection+0x3a>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_SetPinDirection+0x36>
 246:	82 2b       	or	r24, r18
 248:	80 83       	st	Z, r24
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
 24e:	41 11       	cpse	r20, r1
 250:	11 c0       	rjmp	.+34     	; 0x274 <DIO_SetPinDirection+0x6c>
 252:	20 81       	ld	r18, Z
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPinDirection+0x56>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPinDirection+0x52>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	80 83       	st	Z, r24
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	08 95       	ret
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	08 95       	ret
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	08 95       	ret
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	08 95       	ret

00000278 <DIO_EnablePinPullup>:
 278:	68 30       	cpi	r22, 0x08	; 8
 27a:	f8 f4       	brcc	.+62     	; 0x2ba <DIO_EnablePinPullup+0x42>
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	79 f0       	breq	.+30     	; 0x29e <DIO_EnablePinPullup+0x26>
 280:	28 f0       	brcs	.+10     	; 0x28c <DIO_EnablePinPullup+0x14>
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	31 f0       	breq	.+12     	; 0x292 <DIO_EnablePinPullup+0x1a>
 286:	83 30       	cpi	r24, 0x03	; 3
 288:	39 f0       	breq	.+14     	; 0x298 <DIO_EnablePinPullup+0x20>
 28a:	19 c0       	rjmp	.+50     	; 0x2be <DIO_EnablePinPullup+0x46>
 28c:	eb e3       	ldi	r30, 0x3B	; 59
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	08 c0       	rjmp	.+16     	; 0x2a2 <DIO_EnablePinPullup+0x2a>
 292:	e5 e3       	ldi	r30, 0x35	; 53
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <DIO_EnablePinPullup+0x2a>
 298:	e2 e3       	ldi	r30, 0x32	; 50
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_EnablePinPullup+0x2a>
 29e:	e8 e3       	ldi	r30, 0x38	; 56
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	20 81       	ld	r18, Z
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_EnablePinPullup+0x36>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_EnablePinPullup+0x32>
 2b2:	82 2b       	or	r24, r18
 2b4:	80 83       	st	Z, r24
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	08 95       	ret
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	08 95       	ret

000002c2 <DIO_ReadPin>:
{
   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
 2c2:	41 15       	cp	r20, r1
 2c4:	51 05       	cpc	r21, r1
 2c6:	39 f1       	breq	.+78     	; 0x316 <DIO_ReadPin+0x54>
   {
      return E_DIO_NULL_PTR;
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
 2c8:	68 30       	cpi	r22, 0x08	; 8
 2ca:	38 f5       	brcc	.+78     	; 0x31a <DIO_ReadPin+0x58>
   {
      /* do nothing */
   }
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	79 f0       	breq	.+30     	; 0x2ee <DIO_ReadPin+0x2c>
 2d0:	28 f0       	brcs	.+10     	; 0x2dc <DIO_ReadPin+0x1a>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	31 f0       	breq	.+12     	; 0x2e2 <DIO_ReadPin+0x20>
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	39 f0       	breq	.+14     	; 0x2e8 <DIO_ReadPin+0x26>
 2da:	21 c0       	rjmp	.+66     	; 0x31e <DIO_ReadPin+0x5c>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
 2dc:	e9 e3       	ldi	r30, 0x39	; 57
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <DIO_ReadPin+0x30>
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
         break;
      case PORTC:
         prt_port_stat = &PORTC_STAT;
 2e2:	e3 e3       	ldi	r30, 0x33	; 51
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <DIO_ReadPin+0x30>
      case PORTD:
         prt_port_stat = &PORTD_STAT;
 2e8:	e0 e3       	ldi	r30, 0x30	; 48
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_ReadPin+0x30>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
 2ee:	e6 e3       	ldi	r30, 0x36	; 54
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* read the pin value and put it in the data. */
   if(BIT_IS_SET(*prt_port_stat,pin))
 2f2:	80 81       	ld	r24, Z
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_ReadPin+0x3a>
 2f8:	95 95       	asr	r25
 2fa:	87 95       	ror	r24
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_ReadPin+0x36>
 300:	80 ff       	sbrs	r24, 0
 302:	05 c0       	rjmp	.+10     	; 0x30e <DIO_ReadPin+0x4c>
   {
      *data = HIGH;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	fa 01       	movw	r30, r20
 308:	80 83       	st	Z, r24
   {
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret
   {
      *data = HIGH;
   }
   else
   {
      *data = LOW;
 30e:	fa 01       	movw	r30, r20
 310:	10 82       	st	Z, r1
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	08 95       	ret
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
   {
      return E_DIO_NULL_PTR;
 316:	85 e0       	ldi	r24, 0x05	; 5
 318:	08 95       	ret
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	08 95       	ret
         break;
      case PORTD:
         prt_port_stat = &PORTD_STAT;
         break;
      default:
         return E_DIO_INVALID_PORT;
 31e:	83 e0       	ldi	r24, 0x03	; 3
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 320:	08 95       	ret

00000322 <DIO_TogglePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 322:	68 30       	cpi	r22, 0x08	; 8
 324:	f8 f4       	brcc	.+62     	; 0x364 <DIO_TogglePin+0x42>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	79 f0       	breq	.+30     	; 0x348 <DIO_TogglePin+0x26>
 32a:	28 f0       	brcs	.+10     	; 0x336 <DIO_TogglePin+0x14>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	31 f0       	breq	.+12     	; 0x33c <DIO_TogglePin+0x1a>
 330:	83 30       	cpi	r24, 0x03	; 3
 332:	39 f0       	breq	.+14     	; 0x342 <DIO_TogglePin+0x20>
 334:	19 c0       	rjmp	.+50     	; 0x368 <DIO_TogglePin+0x46>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 336:	eb e3       	ldi	r30, 0x3B	; 59
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	08 c0       	rjmp	.+16     	; 0x34c <DIO_TogglePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 33c:	e5 e3       	ldi	r30, 0x35	; 53
 33e:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 340:	05 c0       	rjmp	.+10     	; 0x34c <DIO_TogglePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 342:	e2 e3       	ldi	r30, 0x32	; 50
 344:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_TogglePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 348:	e8 e3       	ldi	r30, 0x38	; 56
 34a:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
 34c:	20 81       	ld	r18, Z
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_TogglePin+0x36>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_TogglePin+0x32>
 35c:	82 27       	eor	r24, r18
 35e:	80 83       	st	Z, r24
   
   /* return success message. */
   return E_DIO_SUCCESS;
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 368:	83 e0       	ldi	r24, 0x03	; 3
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
   
   /* return success message. */
   return E_DIO_SUCCESS;
 36a:	08 95       	ret

0000036c <GetFreqPrescaleRatio>:
      gEnu_State = DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;            
}
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	08 f0       	brcs	.+2      	; 0x372 <GetFreqPrescaleRatio+0x6>
 370:	4e c0       	rjmp	.+156    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	fc 01       	movw	r30, r24
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	8e 0f       	add	r24, r30
 37c:	9f 1f       	adc	r25, r31
 37e:	fc 01       	movw	r30, r24
 380:	ed 59       	subi	r30, 0x9D	; 157
 382:	ff 4f       	sbci	r31, 0xFF	; 255
 384:	82 81       	ldd	r24, Z+2	; 0x02
 386:	83 30       	cpi	r24, 0x03	; 3
 388:	09 f1       	breq	.+66     	; 0x3cc <GetFreqPrescaleRatio+0x60>
 38a:	28 f4       	brcc	.+10     	; 0x396 <GetFreqPrescaleRatio+0x2a>
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	41 f0       	breq	.+16     	; 0x3a0 <GetFreqPrescaleRatio+0x34>
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	89 f0       	breq	.+34     	; 0x3b6 <GetFreqPrescaleRatio+0x4a>
 394:	a2 c0       	rjmp	.+324    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 396:	84 30       	cpi	r24, 0x04	; 4
 398:	21 f1       	breq	.+72     	; 0x3e2 <GetFreqPrescaleRatio+0x76>
 39a:	85 30       	cpi	r24, 0x05	; 5
 39c:	69 f1       	breq	.+90     	; 0x3f8 <GetFreqPrescaleRatio+0x8c>
 39e:	9d c0       	rjmp	.+314    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	a0 e8       	ldi	r26, 0x80	; 128
 3a6:	bd e3       	ldi	r27, 0x3D	; 61
 3a8:	fb 01       	movw	r30, r22
 3aa:	80 83       	st	Z, r24
 3ac:	91 83       	std	Z+1, r25	; 0x01
 3ae:	a2 83       	std	Z+2, r26	; 0x02
 3b0:	b3 83       	std	Z+3, r27	; 0x03
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	a0 e0       	ldi	r26, 0x00	; 0
 3bc:	bf e3       	ldi	r27, 0x3F	; 63
 3be:	fb 01       	movw	r30, r22
 3c0:	80 83       	st	Z, r24
 3c2:	91 83       	std	Z+1, r25	; 0x01
 3c4:	a2 83       	std	Z+2, r26	; 0x02
 3c6:	b3 83       	std	Z+3, r27	; 0x03
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	08 95       	ret
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	a0 e8       	ldi	r26, 0x80	; 128
 3d2:	b0 e4       	ldi	r27, 0x40	; 64
 3d4:	fb 01       	movw	r30, r22
 3d6:	80 83       	st	Z, r24
 3d8:	91 83       	std	Z+1, r25	; 0x01
 3da:	a2 83       	std	Z+2, r26	; 0x02
 3dc:	b3 83       	std	Z+3, r27	; 0x03
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	08 95       	ret
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	a0 e8       	ldi	r26, 0x80	; 128
 3e8:	b1 e4       	ldi	r27, 0x41	; 65
 3ea:	fb 01       	movw	r30, r22
 3ec:	80 83       	st	Z, r24
 3ee:	91 83       	std	Z+1, r25	; 0x01
 3f0:	a2 83       	std	Z+2, r26	; 0x02
 3f2:	b3 83       	std	Z+3, r27	; 0x03
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	08 95       	ret
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	a0 e8       	ldi	r26, 0x80	; 128
 3fe:	b2 e4       	ldi	r27, 0x42	; 66
 400:	fb 01       	movw	r30, r22
 402:	80 83       	st	Z, r24
 404:	91 83       	std	Z+1, r25	; 0x01
 406:	a2 83       	std	Z+2, r26	; 0x02
 408:	b3 83       	std	Z+3, r27	; 0x03
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	08 95       	ret
 40e:	82 30       	cpi	r24, 0x02	; 2
 410:	09 f0       	breq	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	65 c0       	rjmp	.+202    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	fc 01       	movw	r30, r24
 418:	ee 0f       	add	r30, r30
 41a:	ff 1f       	adc	r31, r31
 41c:	8e 0f       	add	r24, r30
 41e:	9f 1f       	adc	r25, r31
 420:	fc 01       	movw	r30, r24
 422:	ed 59       	subi	r30, 0x9D	; 157
 424:	ff 4f       	sbci	r31, 0xFF	; 255
 426:	e2 81       	ldd	r30, Z+2	; 0x02
 428:	8e 2f       	mov	r24, r30
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	fc 01       	movw	r30, r24
 42e:	31 97       	sbiw	r30, 0x01	; 1
 430:	e7 30       	cpi	r30, 0x07	; 7
 432:	f1 05       	cpc	r31, r1
 434:	08 f0       	brcs	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 436:	55 c0       	rjmp	.+170    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 438:	e6 5d       	subi	r30, 0xD6	; 214
 43a:	ff 4f       	sbci	r31, 0xFF	; 255
 43c:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__tablejump2__>
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	a0 e8       	ldi	r26, 0x80	; 128
 446:	bd e3       	ldi	r27, 0x3D	; 61
 448:	fb 01       	movw	r30, r22
 44a:	80 83       	st	Z, r24
 44c:	91 83       	std	Z+1, r25	; 0x01
 44e:	a2 83       	std	Z+2, r26	; 0x02
 450:	b3 83       	std	Z+3, r27	; 0x03
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	08 95       	ret
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	a0 e0       	ldi	r26, 0x00	; 0
 45c:	bf e3       	ldi	r27, 0x3F	; 63
 45e:	fb 01       	movw	r30, r22
 460:	80 83       	st	Z, r24
 462:	91 83       	std	Z+1, r25	; 0x01
 464:	a2 83       	std	Z+2, r26	; 0x02
 466:	b3 83       	std	Z+3, r27	; 0x03
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	08 95       	ret
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	a0 e0       	ldi	r26, 0x00	; 0
 472:	b0 e4       	ldi	r27, 0x40	; 64
 474:	fb 01       	movw	r30, r22
 476:	80 83       	st	Z, r24
 478:	91 83       	std	Z+1, r25	; 0x01
 47a:	a2 83       	std	Z+2, r26	; 0x02
 47c:	b3 83       	std	Z+3, r27	; 0x03
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	08 95       	ret
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	a0 e8       	ldi	r26, 0x80	; 128
 488:	b0 e4       	ldi	r27, 0x40	; 64
 48a:	fb 01       	movw	r30, r22
 48c:	80 83       	st	Z, r24
 48e:	91 83       	std	Z+1, r25	; 0x01
 490:	a2 83       	std	Z+2, r26	; 0x02
 492:	b3 83       	std	Z+3, r27	; 0x03
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	08 95       	ret
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	a0 e0       	ldi	r26, 0x00	; 0
 49e:	b1 e4       	ldi	r27, 0x41	; 65
 4a0:	fb 01       	movw	r30, r22
 4a2:	80 83       	st	Z, r24
 4a4:	91 83       	std	Z+1, r25	; 0x01
 4a6:	a2 83       	std	Z+2, r26	; 0x02
 4a8:	b3 83       	std	Z+3, r27	; 0x03
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	08 95       	ret
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	a0 e8       	ldi	r26, 0x80	; 128
 4b4:	b1 e4       	ldi	r27, 0x41	; 65
 4b6:	fb 01       	movw	r30, r22
 4b8:	80 83       	st	Z, r24
 4ba:	91 83       	std	Z+1, r25	; 0x01
 4bc:	a2 83       	std	Z+2, r26	; 0x02
 4be:	b3 83       	std	Z+3, r27	; 0x03
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	08 95       	ret
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	a0 e8       	ldi	r26, 0x80	; 128
 4ca:	b2 e4       	ldi	r27, 0x42	; 66
 4cc:	fb 01       	movw	r30, r22
 4ce:	80 83       	st	Z, r24
 4d0:	91 83       	std	Z+1, r25	; 0x01
 4d2:	a2 83       	std	Z+2, r26	; 0x02
 4d4:	b3 83       	std	Z+3, r27	; 0x03
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	08 95       	ret
 4da:	8c ef       	ldi	r24, 0xFC	; 252
 4dc:	08 95       	ret
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	08 95       	ret
 4e2:	8c ef       	ldi	r24, 0xFC	; 252
 4e4:	08 95       	ret

000004e6 <TIM_Start>:
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	71 f0       	breq	.+28     	; 0x506 <TIM_Start+0x20>
 4ea:	18 f0       	brcs	.+6      	; 0x4f2 <TIM_Start+0xc>
 4ec:	82 30       	cpi	r24, 0x02	; 2
 4ee:	31 f0       	breq	.+12     	; 0x4fc <TIM_Start+0x16>
 4f0:	1e c0       	rjmp	.+60     	; 0x52e <TIM_Start+0x48>
 4f2:	e2 e5       	ldi	r30, 0x52	; 82
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	a3 e5       	ldi	r26, 0x53	; 83
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	09 c0       	rjmp	.+18     	; 0x50e <TIM_Start+0x28>
 4fc:	e4 e4       	ldi	r30, 0x44	; 68
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	a5 e4       	ldi	r26, 0x45	; 69
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	04 c0       	rjmp	.+8      	; 0x50e <TIM_Start+0x28>
 506:	ec e4       	ldi	r30, 0x4C	; 76
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	ae e4       	ldi	r26, 0x4E	; 78
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	60 83       	st	Z, r22
 510:	2c 91       	ld	r18, X
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	fc 01       	movw	r30, r24
 516:	ee 0f       	add	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	8e 0f       	add	r24, r30
 51c:	9f 1f       	adc	r25, r31
 51e:	fc 01       	movw	r30, r24
 520:	ed 59       	subi	r30, 0x9D	; 157
 522:	ff 4f       	sbci	r31, 0xFF	; 255
 524:	82 81       	ldd	r24, Z+2	; 0x02
 526:	82 2b       	or	r24, r18
 528:	8c 93       	st	X, r24
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	08 95       	ret
 52e:	8e ef       	ldi	r24, 0xFE	; 254
 530:	08 95       	ret

00000532 <TIM_GetStatus>:
 532:	61 15       	cp	r22, r1
 534:	71 05       	cpc	r23, r1
 536:	09 f4       	brne	.+2      	; 0x53a <TIM_GetStatus+0x8>
 538:	7a c0       	rjmp	.+244    	; 0x62e <TIM_GetStatus+0xfc>
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	41 f1       	breq	.+80     	; 0x58e <TIM_GetStatus+0x5c>
 53e:	20 f0       	brcs	.+8      	; 0x548 <TIM_GetStatus+0x16>
 540:	82 30       	cpi	r24, 0x02	; 2
 542:	09 f4       	brne	.+2      	; 0x546 <TIM_GetStatus+0x14>
 544:	52 c0       	rjmp	.+164    	; 0x5ea <TIM_GetStatus+0xb8>
 546:	75 c0       	rjmp	.+234    	; 0x632 <TIM_GetStatus+0x100>
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	fc 01       	movw	r30, r24
 54c:	ee 0f       	add	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	8e 0f       	add	r24, r30
 552:	9f 1f       	adc	r25, r31
 554:	fc 01       	movw	r30, r24
 556:	ed 59       	subi	r30, 0x9D	; 157
 558:	ff 4f       	sbci	r31, 0xFF	; 255
 55a:	80 81       	ld	r24, Z
 55c:	81 11       	cpse	r24, r1
 55e:	09 c0       	rjmp	.+18     	; 0x572 <TIM_GetStatus+0x40>
 560:	08 b6       	in	r0, 0x38	; 56
 562:	00 fe       	sbrs	r0, 0
 564:	68 c0       	rjmp	.+208    	; 0x636 <TIM_GetStatus+0x104>
 566:	fb 01       	movw	r30, r22
 568:	10 82       	st	Z, r1
 56a:	98 b7       	in	r25, 0x38	; 56
 56c:	91 60       	ori	r25, 0x01	; 1
 56e:	98 bf       	out	0x38, r25	; 56
 570:	08 95       	ret
 572:	88 30       	cpi	r24, 0x08	; 8
 574:	09 f0       	breq	.+2      	; 0x578 <TIM_GetStatus+0x46>
 576:	61 c0       	rjmp	.+194    	; 0x63a <TIM_GetStatus+0x108>
 578:	08 b6       	in	r0, 0x38	; 56
 57a:	01 fe       	sbrs	r0, 1
 57c:	60 c0       	rjmp	.+192    	; 0x63e <TIM_GetStatus+0x10c>
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	fb 01       	movw	r30, r22
 582:	80 83       	st	Z, r24
 584:	88 b7       	in	r24, 0x38	; 56
 586:	82 60       	ori	r24, 0x02	; 2
 588:	88 bf       	out	0x38, r24	; 56
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	08 95       	ret
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	fc 01       	movw	r30, r24
 592:	ee 0f       	add	r30, r30
 594:	ff 1f       	adc	r31, r31
 596:	8e 0f       	add	r24, r30
 598:	9f 1f       	adc	r25, r31
 59a:	fc 01       	movw	r30, r24
 59c:	ed 59       	subi	r30, 0x9D	; 157
 59e:	ff 4f       	sbci	r31, 0xFF	; 255
 5a0:	80 81       	ld	r24, Z
 5a2:	81 11       	cpse	r24, r1
 5a4:	09 c0       	rjmp	.+18     	; 0x5b8 <TIM_GetStatus+0x86>
 5a6:	08 b6       	in	r0, 0x38	; 56
 5a8:	02 fe       	sbrs	r0, 2
 5aa:	4b c0       	rjmp	.+150    	; 0x642 <TIM_GetStatus+0x110>
 5ac:	fb 01       	movw	r30, r22
 5ae:	10 82       	st	Z, r1
 5b0:	98 b7       	in	r25, 0x38	; 56
 5b2:	94 60       	ori	r25, 0x04	; 4
 5b4:	98 bf       	out	0x38, r25	; 56
 5b6:	08 95       	ret
 5b8:	88 30       	cpi	r24, 0x08	; 8
 5ba:	09 f0       	breq	.+2      	; 0x5be <TIM_GetStatus+0x8c>
 5bc:	44 c0       	rjmp	.+136    	; 0x646 <TIM_GetStatus+0x114>
 5be:	98 b7       	in	r25, 0x38	; 56
 5c0:	89 2f       	mov	r24, r25
 5c2:	80 71       	andi	r24, 0x10	; 16
 5c4:	94 ff       	sbrs	r25, 4
 5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <TIM_GetStatus+0xa6>
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	fb 01       	movw	r30, r22
 5cc:	80 83       	st	Z, r24
 5ce:	88 b7       	in	r24, 0x38	; 56
 5d0:	80 61       	ori	r24, 0x10	; 16
 5d2:	88 bf       	out	0x38, r24	; 56
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	08 95       	ret
 5d8:	93 ff       	sbrs	r25, 3
 5da:	37 c0       	rjmp	.+110    	; 0x64a <TIM_GetStatus+0x118>
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	fb 01       	movw	r30, r22
 5e0:	90 83       	st	Z, r25
 5e2:	98 b7       	in	r25, 0x38	; 56
 5e4:	98 60       	ori	r25, 0x08	; 8
 5e6:	98 bf       	out	0x38, r25	; 56
 5e8:	08 95       	ret
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	fc 01       	movw	r30, r24
 5ee:	ee 0f       	add	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	8e 0f       	add	r24, r30
 5f4:	9f 1f       	adc	r25, r31
 5f6:	fc 01       	movw	r30, r24
 5f8:	ed 59       	subi	r30, 0x9D	; 157
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	80 81       	ld	r24, Z
 5fe:	81 11       	cpse	r24, r1
 600:	09 c0       	rjmp	.+18     	; 0x614 <TIM_GetStatus+0xe2>
 602:	08 b6       	in	r0, 0x38	; 56
 604:	06 fe       	sbrs	r0, 6
 606:	23 c0       	rjmp	.+70     	; 0x64e <TIM_GetStatus+0x11c>
 608:	fb 01       	movw	r30, r22
 60a:	10 82       	st	Z, r1
 60c:	98 b7       	in	r25, 0x38	; 56
 60e:	90 64       	ori	r25, 0x40	; 64
 610:	98 bf       	out	0x38, r25	; 56
 612:	08 95       	ret
 614:	88 30       	cpi	r24, 0x08	; 8
 616:	e9 f4       	brne	.+58     	; 0x652 <TIM_GetStatus+0x120>
 618:	08 b6       	in	r0, 0x38	; 56
 61a:	07 fe       	sbrs	r0, 7
 61c:	1c c0       	rjmp	.+56     	; 0x656 <TIM_GetStatus+0x124>
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	fb 01       	movw	r30, r22
 622:	80 83       	st	Z, r24
 624:	88 b7       	in	r24, 0x38	; 56
 626:	80 68       	ori	r24, 0x80	; 128
 628:	88 bf       	out	0x38, r24	; 56
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	08 95       	ret
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	08 95       	ret
 632:	8e ef       	ldi	r24, 0xFE	; 254
 634:	08 95       	ret
 636:	8d ef       	ldi	r24, 0xFD	; 253
 638:	08 95       	ret
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	08 95       	ret
 63e:	8d ef       	ldi	r24, 0xFD	; 253
 640:	08 95       	ret
 642:	8d ef       	ldi	r24, 0xFD	; 253
 644:	08 95       	ret
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	08 95       	ret
 64a:	8d ef       	ldi	r24, 0xFD	; 253
 64c:	08 95       	ret
 64e:	8d ef       	ldi	r24, 0xFD	; 253
 650:	08 95       	ret
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	08 95       	ret
 656:	8d ef       	ldi	r24, 0xFD	; 253
 658:	08 95       	ret

0000065a <TIM_DelayMs>:
* @param [out] TIM_Delay   -  Time to delay in milliseconds.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
 65a:	8f 92       	push	r8
 65c:	9f 92       	push	r9
 65e:	af 92       	push	r10
 660:	bf 92       	push	r11
 662:	df 92       	push	r13
 664:	ef 92       	push	r14
 666:	ff 92       	push	r15
 668:	0f 93       	push	r16
 66a:	1f 93       	push	r17
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	00 d0       	rcall	.+0      	; 0x672 <TIM_DelayMs+0x18>
 672:	00 d0       	rcall	.+0      	; 0x674 <TIM_DelayMs+0x1a>
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	18 2f       	mov	r17, r24
 67a:	04 2f       	mov	r16, r20
 67c:	d5 2e       	mov	r13, r21
 67e:	e6 2e       	mov	r14, r22
 680:	f7 2e       	mov	r15, r23
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
 682:	83 30       	cpi	r24, 0x03	; 3
 684:	08 f0       	brcs	.+2      	; 0x688 <TIM_DelayMs+0x2e>
 686:	65 c0       	rjmp	.+202    	; 0x752 <TIM_DelayMs+0xf8>
   {
      return TIMER_E_INVALID_CH_NUM;
   }
   
   if(NULL_PTR == DelayRequester)
 688:	21 15       	cp	r18, r1
 68a:	31 05       	cpc	r19, r1
 68c:	09 f4       	brne	.+2      	; 0x690 <TIM_DelayMs+0x36>
 68e:	63 c0       	rjmp	.+198    	; 0x756 <TIM_DelayMs+0xfc>
   {
      return ERROR_NOK;
   }
   else
   {
      gptr_CallerFunc = DelayRequester;
 690:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <__data_end+0x1>
 694:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__data_end>
   }
   
   ERROR_STATE_t Timer_state;
   
   /* Ready state */
   if(DelayReady == gEnu_State)
 698:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gEnu_State>
 69c:	81 11       	cpse	r24, r1
 69e:	5d c0       	rjmp	.+186    	; 0x75a <TIM_DelayMs+0x100>
   {
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
 6a0:	be 01       	movw	r22, r28
 6a2:	6f 5f       	subi	r22, 0xFF	; 255
 6a4:	7f 4f       	sbci	r23, 0xFF	; 255
 6a6:	81 2f       	mov	r24, r17
 6a8:	0e 94 b6 01 	call	0x36c	; 0x36c <GetFreqPrescaleRatio>
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
 6ac:	8c 3f       	cpi	r24, 0xFC	; 252
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <TIM_DelayMs+0x58>
 6b0:	4e c0       	rjmp	.+156    	; 0x74e <TIM_DelayMs+0xf4>
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
      }
      
      if(f32_FreqRatio != 0)
 6b2:	89 80       	ldd	r8, Y+1	; 0x01
 6b4:	9a 80       	ldd	r9, Y+2	; 0x02
 6b6:	ab 80       	ldd	r10, Y+3	; 0x03
 6b8:	bc 80       	ldd	r11, Y+4	; 0x04
 6ba:	20 e0       	ldi	r18, 0x00	; 0
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	a9 01       	movw	r20, r18
 6c0:	c5 01       	movw	r24, r10
 6c2:	b4 01       	movw	r22, r8
 6c4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__cmpsf2>
 6c8:	88 23       	and	r24, r24
 6ca:	81 f0       	breq	.+32     	; 0x6ec <TIM_DelayMs+0x92>
      {
         TIM_Delay /= f32_FreqRatio;
 6cc:	60 2f       	mov	r22, r16
 6ce:	7d 2d       	mov	r23, r13
 6d0:	8e 2d       	mov	r24, r14
 6d2:	9f 2d       	mov	r25, r15
 6d4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__floatunsisf>
 6d8:	a5 01       	movw	r20, r10
 6da:	94 01       	movw	r18, r8
 6dc:	0e 94 57 04 	call	0x8ae	; 0x8ae <__divsf3>
 6e0:	0e 94 c9 04 	call	0x992	; 0x992 <__fixunssfsi>
 6e4:	06 2f       	mov	r16, r22
 6e6:	d7 2e       	mov	r13, r23
 6e8:	e8 2e       	mov	r14, r24
 6ea:	f9 2e       	mov	r15, r25
      }
      
      /* Calculate how many overflows needed */
      gu32_Overflows = TIM_Delay*MILLISECOND_TO_MICROSECOND / TIMER_OVERFLOW_FACTOR;
 6ec:	a8 ee       	ldi	r26, 0xE8	; 232
 6ee:	b3 e0       	ldi	r27, 0x03	; 3
 6f0:	20 2f       	mov	r18, r16
 6f2:	3d 2d       	mov	r19, r13
 6f4:	4e 2d       	mov	r20, r14
 6f6:	5f 2d       	mov	r21, r15
 6f8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__muluhisi3>
 6fc:	bb 27       	eor	r27, r27
 6fe:	a9 2f       	mov	r26, r25
 700:	98 2f       	mov	r25, r24
 702:	87 2f       	mov	r24, r23
 704:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <gu32_Overflows>
 708:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <gu32_Overflows+0x1>
 70c:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <gu32_Overflows+0x2>
 710:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <gu32_Overflows+0x3>
      gu8_Remindar = TIM_Delay*MILLISECOND_TO_MICROSECOND % TIMER_OVERFLOW_FACTOR;
 714:	28 ee       	ldi	r18, 0xE8	; 232
 716:	02 9f       	mul	r16, r18
 718:	00 2d       	mov	r16, r0
 71a:	11 24       	eor	r1, r1
 71c:	00 93 6f 00 	sts	0x006F, r16	; 0x80006f <gu8_Remindar>
      
      if(gu32_Overflows == 0)
 720:	89 2b       	or	r24, r25
 722:	8a 2b       	or	r24, r26
 724:	8b 2b       	or	r24, r27
 726:	49 f4       	brne	.+18     	; 0x73a <TIM_DelayMs+0xe0>
      {
         gu8_OverflowsComplete = HIGH;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <gu8_OverflowsComplete>
         TIM_Start(TIM_channel, gu8_Remindar);
 72e:	60 2f       	mov	r22, r16
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	81 2f       	mov	r24, r17
 734:	0e 94 73 02 	call	0x4e6	; 0x4e6 <TIM_Start>
 738:	05 c0       	rjmp	.+10     	; 0x744 <TIM_DelayMs+0xea>
      }
      else
      {
         /* Start timer with full register */
         TIM_Start(TIM_channel, FULL_8_BITS);
 73a:	6f ef       	ldi	r22, 0xFF	; 255
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	81 2f       	mov	r24, r17
 740:	0e 94 73 02 	call	0x4e6	; 0x4e6 <TIM_Start>
      }
      /* Change to timer pending state */
      gEnu_State= DelayPending;
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <gEnu_State>
      return TIMER_E_PENDING;
 74a:	8d ef       	ldi	r24, 0xFD	; 253
 74c:	07 c0       	rjmp	.+14     	; 0x75c <TIM_DelayMs+0x102>
      /* Calculate needer frequency Ratio */
      float32_t f32_FreqRatio;
      Timer_state = GetFreqPrescaleRatio(TIM_channel, &f32_FreqRatio);
      if(TIMER_E_UNSUPPORTED_PRESCALE == Timer_state)
      {
         return TIMER_E_UNSUPPORTED_PRESCALE;
 74e:	8c ef       	ldi	r24, 0xFC	; 252
 750:	05 c0       	rjmp	.+10     	; 0x75c <TIM_DelayMs+0x102>
ERROR_STATE_t TIM_DelayMs(TIM_CH_t TIM_channel, TIM_Delay_t TIM_Delay, Ptr_VoidFuncVoid_t DelayRequester)
{
   /* Make sure not invalid timer channel */
   if(TIM_channel >= INVALID_TIMER_CH)
   {
      return TIMER_E_INVALID_CH_NUM;
 752:	8e ef       	ldi	r24, 0xFE	; 254
 754:	03 c0       	rjmp	.+6      	; 0x75c <TIM_DelayMs+0x102>
   }
   
   if(NULL_PTR == DelayRequester)
   {
      return ERROR_NOK;
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	01 c0       	rjmp	.+2      	; 0x75c <TIM_DelayMs+0x102>
      /* Change to timer pending state */
      gEnu_State= DelayPending;
      return TIMER_E_PENDING;
   }
   
   return ERROR_NOK;
 75a:	81 e0       	ldi	r24, 0x01	; 1
}
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	ff 90       	pop	r15
 76e:	ef 90       	pop	r14
 770:	df 90       	pop	r13
 772:	bf 90       	pop	r11
 774:	af 90       	pop	r10
 776:	9f 90       	pop	r9
 778:	8f 90       	pop	r8
 77a:	08 95       	ret

0000077c <TIM_DelayStatus>:
* @param [out] DelayRequester    -  Function that requested the delay.
*
* @return function error state.
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
 77c:	1f 93       	push	r17
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	1f 92       	push	r1
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
   if(DelayReady == gEnu_State)
 788:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <gEnu_State>
 78c:	99 23       	and	r25, r25
 78e:	09 f4       	brne	.+2      	; 0x792 <TIM_DelayStatus+0x16>
 790:	49 c0       	rjmp	.+146    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
   {
      return TIMER_E_DELAY_EMPTY;
   }
   
   if(DelayRequester != gptr_CallerFunc)
 792:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <__data_end>
 796:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <__data_end+0x1>
 79a:	26 17       	cp	r18, r22
 79c:	37 07       	cpc	r19, r23
 79e:	09 f0       	breq	.+2      	; 0x7a2 <TIM_DelayStatus+0x26>
 7a0:	43 c0       	rjmp	.+134    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
      return ERROR_NOK;
   }
   
   ERROR_STATE_t Timer_state;
   
   if(DelayPending == gEnu_State)
 7a2:	91 30       	cpi	r25, 0x01	; 1
 7a4:	09 f0       	breq	.+2      	; 0x7a8 <TIM_DelayStatus+0x2c>
 7a6:	42 c0       	rjmp	.+132    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7a8:	18 2f       	mov	r17, r24
   {
      uint8_t u8_FlagState;
      /* Check timer state */
      Timer_state= TIM_GetStatus(TIM_channel, &u8_FlagState);
 7aa:	be 01       	movw	r22, r28
 7ac:	6f 5f       	subi	r22, 0xFF	; 255
 7ae:	7f 4f       	sbci	r23, 0xFF	; 255
 7b0:	0e 94 99 02 	call	0x532	; 0x532 <TIM_GetStatus>
      if(Timer_state == TIMER_OVERFLOW_FLAG)
 7b4:	81 11       	cpse	r24, r1
 7b6:	35 c0       	rjmp	.+106    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
      {
         /* If all overflows are finished and reminder. */
         if(gu8_OverflowsComplete == HIGH)
 7b8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gu8_OverflowsComplete>
 7bc:	81 30       	cpi	r24, 0x01	; 1
 7be:	41 f4       	brne	.+16     	; 0x7d0 <TIM_DelayStatus+0x54>
         {
            /* Return to ready state */
            gEnu_State = DelayReady;
 7c0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <gEnu_State>
            gu8_OverflowsComplete = LOW;
 7c4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <gu8_OverflowsComplete>
            gu8_Remindar = 0;
 7c8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <gu8_Remindar>
            /* return success message. */
            return ERROR_OK;
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	2f c0       	rjmp	.+94     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
         }
         
         /* Decrement overflows number */
         gu32_Overflows--;
 7d0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <gu32_Overflows>
 7d4:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gu32_Overflows+0x1>
 7d8:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <gu32_Overflows+0x2>
 7dc:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <gu32_Overflows+0x3>
 7e0:	01 97       	sbiw	r24, 0x01	; 1
 7e2:	a1 09       	sbc	r26, r1
 7e4:	b1 09       	sbc	r27, r1
 7e6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <gu32_Overflows>
 7ea:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <gu32_Overflows+0x1>
 7ee:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <gu32_Overflows+0x2>
 7f2:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <gu32_Overflows+0x3>
         /* If all overflows finished raise a flag so the next overflow will be the remainder's overflow */
         if(gu32_Overflows == 0)
 7f6:	89 2b       	or	r24, r25
 7f8:	8a 2b       	or	r24, r26
 7fa:	8b 2b       	or	r24, r27
 7fc:	59 f4       	brne	.+22     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
         {
            gu8_OverflowsComplete = HIGH;
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <gu8_OverflowsComplete>
            TIM_Start(TIM_channel, gu8_Remindar);
 804:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <gu8_Remindar>
 808:	70 e0       	ldi	r23, 0x00	; 0
 80a:	81 2f       	mov	r24, r17
 80c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <TIM_Start>
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
         }
         
         return TIMER_E_PENDING;
 810:	8d ef       	ldi	r24, 0xFD	; 253
 812:	0d c0       	rjmp	.+26     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
            TIM_Start(TIM_channel, gu8_Remindar);
         }
         else
         {
            /* Start timer with full register */
            TIM_Start(TIM_channel, FULL_8_BITS);
 814:	6f ef       	ldi	r22, 0xFF	; 255
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	81 2f       	mov	r24, r17
 81a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <TIM_Start>
         }
         
         return TIMER_E_PENDING;
 81e:	8d ef       	ldi	r24, 0xFD	; 253
 820:	06 c0       	rjmp	.+12     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
   }
   else
   {
      return ERROR_NOK;
   }      
 822:	05 c0       	rjmp	.+10     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
*/
ERROR_STATE_t TIM_DelayStatus(TIM_CH_t TIM_channel, Ptr_VoidFuncVoid_t DelayRequester)
{
   if(DelayReady == gEnu_State)
   {
      return TIMER_E_DELAY_EMPTY;
 824:	8b ef       	ldi	r24, 0xFB	; 251
 826:	03 c0       	rjmp	.+6      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
   }
   
   if(DelayRequester != gptr_CallerFunc)
   {
      return ERROR_NOK;
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	01 c0       	rjmp	.+2      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
         return TIMER_E_PENDING;
      }
   }
   else
   {
      return ERROR_NOK;
 82c:	81 e0       	ldi	r24, 0x01	; 1
   }      
 82e:	0f 90       	pop	r0
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	1f 91       	pop	r17
 836:	08 95       	ret

00000838 <GreenLedMain>:
/*- LOCAL FUNCTIONS IMPLEMENTATION
------------------------*/
void GreenLedMain(void)
{
   /* If Button is Pressed */
   if(PRESSED == GreenLed_BTNClient.u8_ButtonState && OldButtonState != GreenLed_BTNClient.u8_ButtonState)
 838:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <GreenLed_BTNClient+0x1>
 83c:	81 11       	cpse	r24, r1
 83e:	08 c0       	rjmp	.+16     	; 0x850 <GreenLedMain+0x18>
 840:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <OldButtonState>
 844:	89 17       	cp	r24, r25
 846:	21 f0       	breq	.+8      	; 0x850 <GreenLedMain+0x18>
   {
      /* Toggle Pin */
      DIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);
 848:	64 e0       	ldi	r22, 0x04	; 4
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	0e 94 91 01 	call	0x322	; 0x322 <DIO_TogglePin>
   }
   else{/* Do Nothing */}
   OldButtonState = GreenLed_BTNClient.u8_ButtonState;
 850:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <GreenLed_BTNClient+0x1>
 854:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <OldButtonState>
 858:	08 95       	ret

0000085a <main>:
/*- APIs IMPLEMENTATION
-----------------------------------*/
int main(void)
{
   /* Init Button Pins */
   Button_Init(BTN_0);
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	0e 94 cb 00 	call	0x196	; 0x196 <Button_Init>
   
   /* Init Led Pin */
   DIO_SetPinDirection(GREEN_LED_PORT, GREEN_LED_PIN, OUTPUT);
 860:	41 e0       	ldi	r20, 0x01	; 1
 862:	64 e0       	ldi	r22, 0x04	; 4
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	0e 94 04 01 	call	0x208	; 0x208 <DIO_SetPinDirection>
   
   /* Init Button Client */
   BUTTONClient_Init(&GreenLed_BTNClient);
 86a:	85 e7       	ldi	r24, 0x75	; 117
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 9f 00 	call	0x13e	; 0x13e <BUTTONClient_Init>
   BUTTONClient_SetBtn(&GreenLed_BTNClient, BTN_0);
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	85 e7       	ldi	r24, 0x75	; 117
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 af 00 	call	0x15e	; 0x15e <BUTTONClient_SetBtn>
   BUTTONClient_SetTimer(&GreenLed_BTNClient, TIMER_2, 20);
 87c:	24 e1       	ldi	r18, 0x14	; 20
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	40 e0       	ldi	r20, 0x00	; 0
 882:	50 e0       	ldi	r21, 0x00	; 0
 884:	62 e0       	ldi	r22, 0x02	; 2
 886:	85 e7       	ldi	r24, 0x75	; 117
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 b5 00 	call	0x16a	; 0x16a <BUTTONClient_SetTimer>
   BUTTONClient_SetEventCallback(&GreenLed_BTNClient, GreenLedMain);
 88e:	6c e1       	ldi	r22, 0x1C	; 28
 890:	74 e0       	ldi	r23, 0x04	; 4
 892:	85 e7       	ldi	r24, 0x75	; 117
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 c1 00 	call	0x182	; 0x182 <BUTTONClient_SetEventCallback>
   
   while (1) 
   {
      BUTTONClient_EventReceive(&GreenLed_BTNClient);
 89a:	85 e7       	ldi	r24, 0x75	; 117
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 50 00 	call	0xa0	; 0xa0 <BUTTONClient_EventReceive>
 8a2:	fb cf       	rjmp	.-10     	; 0x89a <__stack+0x3b>

000008a4 <__cmpsf2>:
 8a4:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_cmp>
 8a8:	08 f4       	brcc	.+2      	; 0x8ac <__cmpsf2+0x8>
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	08 95       	ret

000008ae <__divsf3>:
 8ae:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__divsf3x>
 8b2:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_round>
 8b6:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_pscB>
 8ba:	58 f0       	brcs	.+22     	; 0x8d2 <__divsf3+0x24>
 8bc:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_pscA>
 8c0:	40 f0       	brcs	.+16     	; 0x8d2 <__divsf3+0x24>
 8c2:	29 f4       	brne	.+10     	; 0x8ce <__divsf3+0x20>
 8c4:	5f 3f       	cpi	r21, 0xFF	; 255
 8c6:	29 f0       	breq	.+10     	; 0x8d2 <__divsf3+0x24>
 8c8:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_inf>
 8cc:	51 11       	cpse	r21, r1
 8ce:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_szero>
 8d2:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_nan>

000008d6 <__divsf3x>:
 8d6:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_split3>
 8da:	68 f3       	brcs	.-38     	; 0x8b6 <__divsf3+0x8>

000008dc <__divsf3_pse>:
 8dc:	99 23       	and	r25, r25
 8de:	b1 f3       	breq	.-20     	; 0x8cc <__divsf3+0x1e>
 8e0:	55 23       	and	r21, r21
 8e2:	91 f3       	breq	.-28     	; 0x8c8 <__divsf3+0x1a>
 8e4:	95 1b       	sub	r25, r21
 8e6:	55 0b       	sbc	r21, r21
 8e8:	bb 27       	eor	r27, r27
 8ea:	aa 27       	eor	r26, r26
 8ec:	62 17       	cp	r22, r18
 8ee:	73 07       	cpc	r23, r19
 8f0:	84 07       	cpc	r24, r20
 8f2:	38 f0       	brcs	.+14     	; 0x902 <__divsf3_pse+0x26>
 8f4:	9f 5f       	subi	r25, 0xFF	; 255
 8f6:	5f 4f       	sbci	r21, 0xFF	; 255
 8f8:	22 0f       	add	r18, r18
 8fa:	33 1f       	adc	r19, r19
 8fc:	44 1f       	adc	r20, r20
 8fe:	aa 1f       	adc	r26, r26
 900:	a9 f3       	breq	.-22     	; 0x8ec <__divsf3_pse+0x10>
 902:	35 d0       	rcall	.+106    	; 0x96e <__divsf3_pse+0x92>
 904:	0e 2e       	mov	r0, r30
 906:	3a f0       	brmi	.+14     	; 0x916 <__divsf3_pse+0x3a>
 908:	e0 e8       	ldi	r30, 0x80	; 128
 90a:	32 d0       	rcall	.+100    	; 0x970 <__divsf3_pse+0x94>
 90c:	91 50       	subi	r25, 0x01	; 1
 90e:	50 40       	sbci	r21, 0x00	; 0
 910:	e6 95       	lsr	r30
 912:	00 1c       	adc	r0, r0
 914:	ca f7       	brpl	.-14     	; 0x908 <__divsf3_pse+0x2c>
 916:	2b d0       	rcall	.+86     	; 0x96e <__divsf3_pse+0x92>
 918:	fe 2f       	mov	r31, r30
 91a:	29 d0       	rcall	.+82     	; 0x96e <__divsf3_pse+0x92>
 91c:	66 0f       	add	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	88 1f       	adc	r24, r24
 922:	bb 1f       	adc	r27, r27
 924:	26 17       	cp	r18, r22
 926:	37 07       	cpc	r19, r23
 928:	48 07       	cpc	r20, r24
 92a:	ab 07       	cpc	r26, r27
 92c:	b0 e8       	ldi	r27, 0x80	; 128
 92e:	09 f0       	breq	.+2      	; 0x932 <__divsf3_pse+0x56>
 930:	bb 0b       	sbc	r27, r27
 932:	80 2d       	mov	r24, r0
 934:	bf 01       	movw	r22, r30
 936:	ff 27       	eor	r31, r31
 938:	93 58       	subi	r25, 0x83	; 131
 93a:	5f 4f       	sbci	r21, 0xFF	; 255
 93c:	3a f0       	brmi	.+14     	; 0x94c <__divsf3_pse+0x70>
 93e:	9e 3f       	cpi	r25, 0xFE	; 254
 940:	51 05       	cpc	r21, r1
 942:	78 f0       	brcs	.+30     	; 0x962 <__divsf3_pse+0x86>
 944:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_inf>
 948:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_szero>
 94c:	5f 3f       	cpi	r21, 0xFF	; 255
 94e:	e4 f3       	brlt	.-8      	; 0x948 <__divsf3_pse+0x6c>
 950:	98 3e       	cpi	r25, 0xE8	; 232
 952:	d4 f3       	brlt	.-12     	; 0x948 <__divsf3_pse+0x6c>
 954:	86 95       	lsr	r24
 956:	77 95       	ror	r23
 958:	67 95       	ror	r22
 95a:	b7 95       	ror	r27
 95c:	f7 95       	ror	r31
 95e:	9f 5f       	subi	r25, 0xFF	; 255
 960:	c9 f7       	brne	.-14     	; 0x954 <__divsf3_pse+0x78>
 962:	88 0f       	add	r24, r24
 964:	91 1d       	adc	r25, r1
 966:	96 95       	lsr	r25
 968:	87 95       	ror	r24
 96a:	97 f9       	bld	r25, 7
 96c:	08 95       	ret
 96e:	e1 e0       	ldi	r30, 0x01	; 1
 970:	66 0f       	add	r22, r22
 972:	77 1f       	adc	r23, r23
 974:	88 1f       	adc	r24, r24
 976:	bb 1f       	adc	r27, r27
 978:	62 17       	cp	r22, r18
 97a:	73 07       	cpc	r23, r19
 97c:	84 07       	cpc	r24, r20
 97e:	ba 07       	cpc	r27, r26
 980:	20 f0       	brcs	.+8      	; 0x98a <__divsf3_pse+0xae>
 982:	62 1b       	sub	r22, r18
 984:	73 0b       	sbc	r23, r19
 986:	84 0b       	sbc	r24, r20
 988:	ba 0b       	sbc	r27, r26
 98a:	ee 1f       	adc	r30, r30
 98c:	88 f7       	brcc	.-30     	; 0x970 <__divsf3_pse+0x94>
 98e:	e0 95       	com	r30
 990:	08 95       	ret

00000992 <__fixunssfsi>:
 992:	0e 94 89 05 	call	0xb12	; 0xb12 <__fp_splitA>
 996:	88 f0       	brcs	.+34     	; 0x9ba <__fixunssfsi+0x28>
 998:	9f 57       	subi	r25, 0x7F	; 127
 99a:	98 f0       	brcs	.+38     	; 0x9c2 <__fixunssfsi+0x30>
 99c:	b9 2f       	mov	r27, r25
 99e:	99 27       	eor	r25, r25
 9a0:	b7 51       	subi	r27, 0x17	; 23
 9a2:	b0 f0       	brcs	.+44     	; 0x9d0 <__fixunssfsi+0x3e>
 9a4:	e1 f0       	breq	.+56     	; 0x9de <__fixunssfsi+0x4c>
 9a6:	66 0f       	add	r22, r22
 9a8:	77 1f       	adc	r23, r23
 9aa:	88 1f       	adc	r24, r24
 9ac:	99 1f       	adc	r25, r25
 9ae:	1a f0       	brmi	.+6      	; 0x9b6 <__fixunssfsi+0x24>
 9b0:	ba 95       	dec	r27
 9b2:	c9 f7       	brne	.-14     	; 0x9a6 <__fixunssfsi+0x14>
 9b4:	14 c0       	rjmp	.+40     	; 0x9de <__fixunssfsi+0x4c>
 9b6:	b1 30       	cpi	r27, 0x01	; 1
 9b8:	91 f0       	breq	.+36     	; 0x9de <__fixunssfsi+0x4c>
 9ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_zero>
 9be:	b1 e0       	ldi	r27, 0x01	; 1
 9c0:	08 95       	ret
 9c2:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__fp_zero>
 9c6:	67 2f       	mov	r22, r23
 9c8:	78 2f       	mov	r23, r24
 9ca:	88 27       	eor	r24, r24
 9cc:	b8 5f       	subi	r27, 0xF8	; 248
 9ce:	39 f0       	breq	.+14     	; 0x9de <__fixunssfsi+0x4c>
 9d0:	b9 3f       	cpi	r27, 0xF9	; 249
 9d2:	cc f3       	brlt	.-14     	; 0x9c6 <__fixunssfsi+0x34>
 9d4:	86 95       	lsr	r24
 9d6:	77 95       	ror	r23
 9d8:	67 95       	ror	r22
 9da:	b3 95       	inc	r27
 9dc:	d9 f7       	brne	.-10     	; 0x9d4 <__fixunssfsi+0x42>
 9de:	3e f4       	brtc	.+14     	; 0x9ee <__fixunssfsi+0x5c>
 9e0:	90 95       	com	r25
 9e2:	80 95       	com	r24
 9e4:	70 95       	com	r23
 9e6:	61 95       	neg	r22
 9e8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ea:	8f 4f       	sbci	r24, 0xFF	; 255
 9ec:	9f 4f       	sbci	r25, 0xFF	; 255
 9ee:	08 95       	ret

000009f0 <__floatunsisf>:
 9f0:	e8 94       	clt
 9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__floatsisf+0x12>

000009f4 <__floatsisf>:
 9f4:	97 fb       	bst	r25, 7
 9f6:	3e f4       	brtc	.+14     	; 0xa06 <__floatsisf+0x12>
 9f8:	90 95       	com	r25
 9fa:	80 95       	com	r24
 9fc:	70 95       	com	r23
 9fe:	61 95       	neg	r22
 a00:	7f 4f       	sbci	r23, 0xFF	; 255
 a02:	8f 4f       	sbci	r24, 0xFF	; 255
 a04:	9f 4f       	sbci	r25, 0xFF	; 255
 a06:	99 23       	and	r25, r25
 a08:	a9 f0       	breq	.+42     	; 0xa34 <__floatsisf+0x40>
 a0a:	f9 2f       	mov	r31, r25
 a0c:	96 e9       	ldi	r25, 0x96	; 150
 a0e:	bb 27       	eor	r27, r27
 a10:	93 95       	inc	r25
 a12:	f6 95       	lsr	r31
 a14:	87 95       	ror	r24
 a16:	77 95       	ror	r23
 a18:	67 95       	ror	r22
 a1a:	b7 95       	ror	r27
 a1c:	f1 11       	cpse	r31, r1
 a1e:	f8 cf       	rjmp	.-16     	; 0xa10 <__floatsisf+0x1c>
 a20:	fa f4       	brpl	.+62     	; 0xa60 <__floatsisf+0x6c>
 a22:	bb 0f       	add	r27, r27
 a24:	11 f4       	brne	.+4      	; 0xa2a <__floatsisf+0x36>
 a26:	60 ff       	sbrs	r22, 0
 a28:	1b c0       	rjmp	.+54     	; 0xa60 <__floatsisf+0x6c>
 a2a:	6f 5f       	subi	r22, 0xFF	; 255
 a2c:	7f 4f       	sbci	r23, 0xFF	; 255
 a2e:	8f 4f       	sbci	r24, 0xFF	; 255
 a30:	9f 4f       	sbci	r25, 0xFF	; 255
 a32:	16 c0       	rjmp	.+44     	; 0xa60 <__floatsisf+0x6c>
 a34:	88 23       	and	r24, r24
 a36:	11 f0       	breq	.+4      	; 0xa3c <__floatsisf+0x48>
 a38:	96 e9       	ldi	r25, 0x96	; 150
 a3a:	11 c0       	rjmp	.+34     	; 0xa5e <__floatsisf+0x6a>
 a3c:	77 23       	and	r23, r23
 a3e:	21 f0       	breq	.+8      	; 0xa48 <__floatsisf+0x54>
 a40:	9e e8       	ldi	r25, 0x8E	; 142
 a42:	87 2f       	mov	r24, r23
 a44:	76 2f       	mov	r23, r22
 a46:	05 c0       	rjmp	.+10     	; 0xa52 <__floatsisf+0x5e>
 a48:	66 23       	and	r22, r22
 a4a:	71 f0       	breq	.+28     	; 0xa68 <__floatsisf+0x74>
 a4c:	96 e8       	ldi	r25, 0x86	; 134
 a4e:	86 2f       	mov	r24, r22
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	60 e0       	ldi	r22, 0x00	; 0
 a54:	2a f0       	brmi	.+10     	; 0xa60 <__floatsisf+0x6c>
 a56:	9a 95       	dec	r25
 a58:	66 0f       	add	r22, r22
 a5a:	77 1f       	adc	r23, r23
 a5c:	88 1f       	adc	r24, r24
 a5e:	da f7       	brpl	.-10     	; 0xa56 <__floatsisf+0x62>
 a60:	88 0f       	add	r24, r24
 a62:	96 95       	lsr	r25
 a64:	87 95       	ror	r24
 a66:	97 f9       	bld	r25, 7
 a68:	08 95       	ret

00000a6a <__fp_cmp>:
 a6a:	99 0f       	add	r25, r25
 a6c:	00 08       	sbc	r0, r0
 a6e:	55 0f       	add	r21, r21
 a70:	aa 0b       	sbc	r26, r26
 a72:	e0 e8       	ldi	r30, 0x80	; 128
 a74:	fe ef       	ldi	r31, 0xFE	; 254
 a76:	16 16       	cp	r1, r22
 a78:	17 06       	cpc	r1, r23
 a7a:	e8 07       	cpc	r30, r24
 a7c:	f9 07       	cpc	r31, r25
 a7e:	c0 f0       	brcs	.+48     	; 0xab0 <__fp_cmp+0x46>
 a80:	12 16       	cp	r1, r18
 a82:	13 06       	cpc	r1, r19
 a84:	e4 07       	cpc	r30, r20
 a86:	f5 07       	cpc	r31, r21
 a88:	98 f0       	brcs	.+38     	; 0xab0 <__fp_cmp+0x46>
 a8a:	62 1b       	sub	r22, r18
 a8c:	73 0b       	sbc	r23, r19
 a8e:	84 0b       	sbc	r24, r20
 a90:	95 0b       	sbc	r25, r21
 a92:	39 f4       	brne	.+14     	; 0xaa2 <__fp_cmp+0x38>
 a94:	0a 26       	eor	r0, r26
 a96:	61 f0       	breq	.+24     	; 0xab0 <__fp_cmp+0x46>
 a98:	23 2b       	or	r18, r19
 a9a:	24 2b       	or	r18, r20
 a9c:	25 2b       	or	r18, r21
 a9e:	21 f4       	brne	.+8      	; 0xaa8 <__fp_cmp+0x3e>
 aa0:	08 95       	ret
 aa2:	0a 26       	eor	r0, r26
 aa4:	09 f4       	brne	.+2      	; 0xaa8 <__fp_cmp+0x3e>
 aa6:	a1 40       	sbci	r26, 0x01	; 1
 aa8:	a6 95       	lsr	r26
 aaa:	8f ef       	ldi	r24, 0xFF	; 255
 aac:	81 1d       	adc	r24, r1
 aae:	81 1d       	adc	r24, r1
 ab0:	08 95       	ret

00000ab2 <__fp_inf>:
 ab2:	97 f9       	bld	r25, 7
 ab4:	9f 67       	ori	r25, 0x7F	; 127
 ab6:	80 e8       	ldi	r24, 0x80	; 128
 ab8:	70 e0       	ldi	r23, 0x00	; 0
 aba:	60 e0       	ldi	r22, 0x00	; 0
 abc:	08 95       	ret

00000abe <__fp_nan>:
 abe:	9f ef       	ldi	r25, 0xFF	; 255
 ac0:	80 ec       	ldi	r24, 0xC0	; 192
 ac2:	08 95       	ret

00000ac4 <__fp_pscA>:
 ac4:	00 24       	eor	r0, r0
 ac6:	0a 94       	dec	r0
 ac8:	16 16       	cp	r1, r22
 aca:	17 06       	cpc	r1, r23
 acc:	18 06       	cpc	r1, r24
 ace:	09 06       	cpc	r0, r25
 ad0:	08 95       	ret

00000ad2 <__fp_pscB>:
 ad2:	00 24       	eor	r0, r0
 ad4:	0a 94       	dec	r0
 ad6:	12 16       	cp	r1, r18
 ad8:	13 06       	cpc	r1, r19
 ada:	14 06       	cpc	r1, r20
 adc:	05 06       	cpc	r0, r21
 ade:	08 95       	ret

00000ae0 <__fp_round>:
 ae0:	09 2e       	mov	r0, r25
 ae2:	03 94       	inc	r0
 ae4:	00 0c       	add	r0, r0
 ae6:	11 f4       	brne	.+4      	; 0xaec <__fp_round+0xc>
 ae8:	88 23       	and	r24, r24
 aea:	52 f0       	brmi	.+20     	; 0xb00 <__fp_round+0x20>
 aec:	bb 0f       	add	r27, r27
 aee:	40 f4       	brcc	.+16     	; 0xb00 <__fp_round+0x20>
 af0:	bf 2b       	or	r27, r31
 af2:	11 f4       	brne	.+4      	; 0xaf8 <__fp_round+0x18>
 af4:	60 ff       	sbrs	r22, 0
 af6:	04 c0       	rjmp	.+8      	; 0xb00 <__fp_round+0x20>
 af8:	6f 5f       	subi	r22, 0xFF	; 255
 afa:	7f 4f       	sbci	r23, 0xFF	; 255
 afc:	8f 4f       	sbci	r24, 0xFF	; 255
 afe:	9f 4f       	sbci	r25, 0xFF	; 255
 b00:	08 95       	ret

00000b02 <__fp_split3>:
 b02:	57 fd       	sbrc	r21, 7
 b04:	90 58       	subi	r25, 0x80	; 128
 b06:	44 0f       	add	r20, r20
 b08:	55 1f       	adc	r21, r21
 b0a:	59 f0       	breq	.+22     	; 0xb22 <__fp_splitA+0x10>
 b0c:	5f 3f       	cpi	r21, 0xFF	; 255
 b0e:	71 f0       	breq	.+28     	; 0xb2c <__fp_splitA+0x1a>
 b10:	47 95       	ror	r20

00000b12 <__fp_splitA>:
 b12:	88 0f       	add	r24, r24
 b14:	97 fb       	bst	r25, 7
 b16:	99 1f       	adc	r25, r25
 b18:	61 f0       	breq	.+24     	; 0xb32 <__fp_splitA+0x20>
 b1a:	9f 3f       	cpi	r25, 0xFF	; 255
 b1c:	79 f0       	breq	.+30     	; 0xb3c <__fp_splitA+0x2a>
 b1e:	87 95       	ror	r24
 b20:	08 95       	ret
 b22:	12 16       	cp	r1, r18
 b24:	13 06       	cpc	r1, r19
 b26:	14 06       	cpc	r1, r20
 b28:	55 1f       	adc	r21, r21
 b2a:	f2 cf       	rjmp	.-28     	; 0xb10 <__fp_split3+0xe>
 b2c:	46 95       	lsr	r20
 b2e:	f1 df       	rcall	.-30     	; 0xb12 <__fp_splitA>
 b30:	08 c0       	rjmp	.+16     	; 0xb42 <__fp_splitA+0x30>
 b32:	16 16       	cp	r1, r22
 b34:	17 06       	cpc	r1, r23
 b36:	18 06       	cpc	r1, r24
 b38:	99 1f       	adc	r25, r25
 b3a:	f1 cf       	rjmp	.-30     	; 0xb1e <__fp_splitA+0xc>
 b3c:	86 95       	lsr	r24
 b3e:	71 05       	cpc	r23, r1
 b40:	61 05       	cpc	r22, r1
 b42:	08 94       	sec
 b44:	08 95       	ret

00000b46 <__fp_zero>:
 b46:	e8 94       	clt

00000b48 <__fp_szero>:
 b48:	bb 27       	eor	r27, r27
 b4a:	66 27       	eor	r22, r22
 b4c:	77 27       	eor	r23, r23
 b4e:	cb 01       	movw	r24, r22
 b50:	97 f9       	bld	r25, 7
 b52:	08 95       	ret

00000b54 <__tablejump2__>:
 b54:	ee 0f       	add	r30, r30
 b56:	ff 1f       	adc	r31, r31
 b58:	05 90       	lpm	r0, Z+
 b5a:	f4 91       	lpm	r31, Z
 b5c:	e0 2d       	mov	r30, r0
 b5e:	09 94       	ijmp

00000b60 <__muluhisi3>:
 b60:	0e 94 bb 05 	call	0xb76	; 0xb76 <__umulhisi3>
 b64:	a5 9f       	mul	r26, r21
 b66:	90 0d       	add	r25, r0
 b68:	b4 9f       	mul	r27, r20
 b6a:	90 0d       	add	r25, r0
 b6c:	a4 9f       	mul	r26, r20
 b6e:	80 0d       	add	r24, r0
 b70:	91 1d       	adc	r25, r1
 b72:	11 24       	eor	r1, r1
 b74:	08 95       	ret

00000b76 <__umulhisi3>:
 b76:	a2 9f       	mul	r26, r18
 b78:	b0 01       	movw	r22, r0
 b7a:	b3 9f       	mul	r27, r19
 b7c:	c0 01       	movw	r24, r0
 b7e:	a3 9f       	mul	r26, r19
 b80:	70 0d       	add	r23, r0
 b82:	81 1d       	adc	r24, r1
 b84:	11 24       	eor	r1, r1
 b86:	91 1d       	adc	r25, r1
 b88:	b2 9f       	mul	r27, r18
 b8a:	70 0d       	add	r23, r0
 b8c:	81 1d       	adc	r24, r1
 b8e:	11 24       	eor	r1, r1
 b90:	91 1d       	adc	r25, r1
 b92:	08 95       	ret

00000b94 <_exit>:
 b94:	f8 94       	cli

00000b96 <__stop_program>:
 b96:	ff cf       	rjmp	.-2      	; 0xb96 <__stop_program>
