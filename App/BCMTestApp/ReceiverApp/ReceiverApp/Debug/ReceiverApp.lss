
ReceiverApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00001524  000015b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ce  008000b6  008000b6  0000160e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000313e  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c4  00000000  00000000  00004bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022aa  00000000  00000000  00005cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d0c  00000000  00000000  00007f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010ac  00000000  00000000  00008c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003216  00000000  00000000  00009d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0000cf36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__vector_1>
       8:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <__vector_2>
       c:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__vector_3>
      10:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__vector_4>
      14:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__vector_5>
      18:	0c 94 57 07 	jmp	0xeae	; 0xeae <__vector_6>
      1c:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__vector_7>
      20:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__vector_8>
      24:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__vector_9>
      28:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__vector_10>
      2c:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__vector_11>
      30:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_12>
      34:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_13>
      38:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__vector_14>
      3c:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_15>
      40:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_16>
      44:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__vector_17>
      48:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_18>
      4c:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__vector_19>
      50:	0c 94 95 09 	jmp	0x132a	; 0x132a <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 0a 	call	0x14ee	; 0x14ee <main>
      8a:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <_exit>

0000008e <BCM_UART_TXCBF>:
																};//This arr stores the size of every element of the packet
static ptr_STR_BCMTask_t aptr_Task[COMM_NUMBERS]={NULL_PTR,NULL_PTR,NULL_PTR};//This arr stores pointers to tasks structure
/*- LOCAL FUNCTIONS IMPLEMENTATION------------------------*/
static void BCM_UART_TXCBF(void)
{
    aptr_Task[COMM_UART_CH]->u8_BCMState=BCM_TXSTATE_SENDING;
      8e:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <__data_end>
      92:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <__data_end+0x1>
      96:	82 e0       	ldi	r24, 0x02	; 2
      98:	83 83       	std	Z+3, r24	; 0x03
      9a:	08 95       	ret

0000009c <BCM_SPI_TXCBF>:
    //BCM_SetState(COMM_UART_CH,BCM_TXSTATE_SENDING);
}

static void BCM_SPI_TXCBF(void)
{
    aptr_Task[COMM_SPI_CH]->u8_BCMState=BCM_TXSTATE_SENDING;
      9c:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <__data_end+0x2>
      a0:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <__data_end+0x3>
      a4:	82 e0       	ldi	r24, 0x02	; 2
      a6:	83 83       	std	Z+3, r24	; 0x03
      a8:	08 95       	ret

000000aa <BCM_I2C_TXCBF>:
    //BCM_SetState(COMM_SPI_CH,BCM_TXSTATE_SENDING);
}

static void BCM_I2C_TXCBF(void)
{
    aptr_Task[COMM_I2C_CH]->u8_BCMState=BCM_TXSTATE_SENDING;
      aa:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <__data_end+0x4>
      ae:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <__data_end+0x5>
      b2:	82 e0       	ldi	r24, 0x02	; 2
      b4:	83 83       	std	Z+3, r24	; 0x03
      b6:	08 95       	ret

000000b8 <BCM_UART_RXCBF>:
}

static void BCM_UART_RXCBF(uint8_t Data)
{
    uint8_t u8_FrameCounter;
    switch (aptr_Task[COMM_UART_CH]->u8_BCMState)
      b8:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <__data_end>
      bc:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <__data_end+0x1>
      c0:	93 81       	ldd	r25, Z+3	; 0x03
      c2:	91 30       	cpi	r25, 0x01	; 1
      c4:	21 f0       	breq	.+8      	; 0xce <BCM_UART_RXCBF+0x16>
      c6:	93 30       	cpi	r25, 0x03	; 3
      c8:	09 f4       	brne	.+2      	; 0xcc <BCM_UART_RXCBF+0x14>
      ca:	4f c0       	rjmp	.+158    	; 0x16a <BCM_UART_RXCBF+0xb2>
      cc:	08 95       	ret
    {
        case BCM_RXSTATE_RECEIVING:
            (aptr_Packet[COMM_UART_CH][aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter])[aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter]=Data;
      ce:	a4 81       	ldd	r26, Z+4	; 0x04
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	aa 0f       	add	r26, r26
      d4:	bb 1f       	adc	r27, r27
      d6:	a1 54       	subi	r26, 0x41	; 65
      d8:	bf 4f       	sbci	r27, 0xFF	; 255
      da:	4d 91       	ld	r20, X+
      dc:	5c 91       	ld	r21, X
      de:	25 81       	ldd	r18, Z+5	; 0x05
      e0:	36 81       	ldd	r19, Z+6	; 0x06
      e2:	fa 01       	movw	r30, r20
      e4:	e2 0f       	add	r30, r18
      e6:	f3 1f       	adc	r31, r19
      e8:	80 83       	st	Z, r24

            (aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter)++;
      ea:	a0 91 b6 00 	lds	r26, 0x00B6	; 0x8000b6 <__data_end>
      ee:	b0 91 b7 00 	lds	r27, 0x00B7	; 0x8000b7 <__data_end+0x1>
      f2:	15 96       	adiw	r26, 0x05	; 5
      f4:	8d 91       	ld	r24, X+
      f6:	9c 91       	ld	r25, X
      f8:	16 97       	sbiw	r26, 0x06	; 6
      fa:	01 96       	adiw	r24, 0x01	; 1
      fc:	16 96       	adiw	r26, 0x06	; 6
      fe:	9c 93       	st	X, r25
     100:	8e 93       	st	-X, r24
     102:	15 97       	sbiw	r26, 0x05	; 5

            if((au16_Packet_sizes[COMM_UART_CH][aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter])==(aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter))
     104:	14 96       	adiw	r26, 0x04	; 4
     106:	2c 91       	ld	r18, X
     108:	14 97       	sbiw	r26, 0x04	; 4
     10a:	e2 2f       	mov	r30, r18
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	ee 0f       	add	r30, r30
     110:	ff 1f       	adc	r31, r31
     112:	e0 5a       	subi	r30, 0xA0	; 160
     114:	ff 4f       	sbci	r31, 0xFF	; 255
     116:	40 81       	ld	r20, Z
     118:	51 81       	ldd	r21, Z+1	; 0x01
     11a:	84 17       	cp	r24, r20
     11c:	95 07       	cpc	r25, r21
     11e:	09 f0       	breq	.+2      	; 0x122 <BCM_UART_RXCBF+0x6a>
     120:	3f c0       	rjmp	.+126    	; 0x1a0 <BCM_UART_RXCBF+0xe8>
            {
                (aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter)++;
     122:	2f 5f       	subi	r18, 0xFF	; 255
     124:	14 96       	adiw	r26, 0x04	; 4
     126:	2c 93       	st	X, r18
     128:	14 97       	sbiw	r26, 0x04	; 4
                (aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter)=ZERO;
     12a:	16 96       	adiw	r26, 0x06	; 6
     12c:	1c 92       	st	X, r1
     12e:	1e 92       	st	-X, r1
     130:	15 97       	sbiw	r26, 0x05	; 5
                u8_FrameCounter=(aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter);
                if(PACKET_SIZE==u8_FrameCounter)
     132:	24 30       	cpi	r18, 0x04	; 4
     134:	21 f4       	brne	.+8      	; 0x13e <BCM_UART_RXCBF+0x86>
                {
                    aptr_Task[COMM_UART_CH]->u8_BCMState=BCM_RXSTATE_CS;
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	13 96       	adiw	r26, 0x03	; 3
     13a:	8c 93       	st	X, r24
     13c:	08 95       	ret
                }
                else if(DATA_INDEX==u8_FrameCounter)
     13e:	22 30       	cpi	r18, 0x02	; 2
     140:	79 f5       	brne	.+94     	; 0x1a0 <BCM_UART_RXCBF+0xe8>
                {
                    if(au16_Packet_sizes[COMM_UART_CH][DATA_INDEX]>aptr_Task[COMM_UART_CH]->u16_BCMSize)
     142:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     146:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     14a:	17 96       	adiw	r26, 0x07	; 7
     14c:	2d 91       	ld	r18, X+
     14e:	3c 91       	ld	r19, X
     150:	18 97       	sbiw	r26, 0x08	; 8
     152:	28 17       	cp	r18, r24
     154:	39 07       	cpc	r19, r25
     156:	20 f4       	brcc	.+8      	; 0x160 <BCM_UART_RXCBF+0xa8>
                    {
                        aptr_Task[COMM_UART_CH]->u8_BCMState=BCM_RXSTATE_ERROR;
     158:	83 e0       	ldi	r24, 0x03	; 3
     15a:	13 96       	adiw	r26, 0x03	; 3
     15c:	8c 93       	st	X, r24
     15e:	08 95       	ret

                    }
                    else
                    {
                        aptr_Task[COMM_UART_CH]->u16_BCMSize=au16_Packet_sizes[COMM_UART_CH][DATA_INDEX];
     160:	18 96       	adiw	r26, 0x08	; 8
     162:	9c 93       	st	X, r25
     164:	8e 93       	st	-X, r24
     166:	17 97       	sbiw	r26, 0x07	; 7
     168:	08 95       	ret
                //DO NOTHING
            }
            break;
        case BCM_RXSTATE_ERROR:

            (aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter)++;
     16a:	85 81       	ldd	r24, Z+5	; 0x05
     16c:	96 81       	ldd	r25, Z+6	; 0x06
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	96 83       	std	Z+6, r25	; 0x06
     172:	85 83       	std	Z+5, r24	; 0x05

            if((au16_Packet_sizes[COMM_UART_CH][aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter])==(aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter))
     174:	24 81       	ldd	r18, Z+4	; 0x04
     176:	a2 2f       	mov	r26, r18
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	aa 0f       	add	r26, r26
     17c:	bb 1f       	adc	r27, r27
     17e:	a0 5a       	subi	r26, 0xA0	; 160
     180:	bf 4f       	sbci	r27, 0xFF	; 255
     182:	4d 91       	ld	r20, X+
     184:	5c 91       	ld	r21, X
     186:	84 17       	cp	r24, r20
     188:	95 07       	cpc	r25, r21
     18a:	51 f4       	brne	.+20     	; 0x1a0 <BCM_UART_RXCBF+0xe8>
            {
                (aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter)++;
     18c:	2f 5f       	subi	r18, 0xFF	; 255
     18e:	24 83       	std	Z+4, r18	; 0x04
                (aptr_Task[COMM_UART_CH]->u16_BCMByteCoounter)=ZERO;
     190:	16 82       	std	Z+6, r1	; 0x06
     192:	15 82       	std	Z+5, r1	; 0x05
                u8_FrameCounter=(aptr_Task[COMM_UART_CH]->u8_BCMPacketCounter);
                if(PACKET_SIZE==u8_FrameCounter)
     194:	24 30       	cpi	r18, 0x04	; 4
     196:	21 f4       	brne	.+8      	; 0x1a0 <BCM_UART_RXCBF+0xe8>
                {
                    aptr_Task[COMM_UART_CH]->u8_BCMMode=BCM_MODE_IDEAL;
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	81 83       	std	Z+1, r24	; 0x01
                    au8_InitPacketFlag[COMM_UART_CH]=NOT_INIT;
     19c:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <au8_InitPacketFlag>
     1a0:	08 95       	ret

000001a2 <BCM_SPI_RXCBF>:
}

static void BCM_SPI_RXCBF(uint8_t Data)
{
    uint8_t u8_FrameCounter;
    switch (aptr_Task[COMM_SPI_CH]->u8_BCMState)
     1a2:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <__data_end+0x2>
     1a6:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <__data_end+0x3>
     1aa:	93 81       	ldd	r25, Z+3	; 0x03
     1ac:	91 30       	cpi	r25, 0x01	; 1
     1ae:	21 f0       	breq	.+8      	; 0x1b8 <BCM_SPI_RXCBF+0x16>
     1b0:	93 30       	cpi	r25, 0x03	; 3
     1b2:	09 f4       	brne	.+2      	; 0x1b6 <BCM_SPI_RXCBF+0x14>
     1b4:	51 c0       	rjmp	.+162    	; 0x258 <BCM_SPI_RXCBF+0xb6>
     1b6:	08 95       	ret
    {
        case BCM_RXSTATE_RECEIVING:
            (aptr_Packet[COMM_SPI_CH][aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter])[aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter]=Data;
     1b8:	a4 81       	ldd	r26, Z+4	; 0x04
     1ba:	b0 e0       	ldi	r27, 0x00	; 0
     1bc:	14 96       	adiw	r26, 0x04	; 4
     1be:	aa 0f       	add	r26, r26
     1c0:	bb 1f       	adc	r27, r27
     1c2:	a1 54       	subi	r26, 0x41	; 65
     1c4:	bf 4f       	sbci	r27, 0xFF	; 255
     1c6:	4d 91       	ld	r20, X+
     1c8:	5c 91       	ld	r21, X
     1ca:	25 81       	ldd	r18, Z+5	; 0x05
     1cc:	36 81       	ldd	r19, Z+6	; 0x06
     1ce:	fa 01       	movw	r30, r20
     1d0:	e2 0f       	add	r30, r18
     1d2:	f3 1f       	adc	r31, r19
     1d4:	80 83       	st	Z, r24

            (aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter)++;
     1d6:	a0 91 b8 00 	lds	r26, 0x00B8	; 0x8000b8 <__data_end+0x2>
     1da:	b0 91 b9 00 	lds	r27, 0x00B9	; 0x8000b9 <__data_end+0x3>
     1de:	15 96       	adiw	r26, 0x05	; 5
     1e0:	8d 91       	ld	r24, X+
     1e2:	9c 91       	ld	r25, X
     1e4:	16 97       	sbiw	r26, 0x06	; 6
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	16 96       	adiw	r26, 0x06	; 6
     1ea:	9c 93       	st	X, r25
     1ec:	8e 93       	st	-X, r24
     1ee:	15 97       	sbiw	r26, 0x05	; 5

            if((au16_Packet_sizes[COMM_SPI_CH][aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter])==(aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter))
     1f0:	14 96       	adiw	r26, 0x04	; 4
     1f2:	2c 91       	ld	r18, X
     1f4:	14 97       	sbiw	r26, 0x04	; 4
     1f6:	e2 2f       	mov	r30, r18
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	34 96       	adiw	r30, 0x04	; 4
     1fc:	ee 0f       	add	r30, r30
     1fe:	ff 1f       	adc	r31, r31
     200:	e0 5a       	subi	r30, 0xA0	; 160
     202:	ff 4f       	sbci	r31, 0xFF	; 255
     204:	40 81       	ld	r20, Z
     206:	51 81       	ldd	r21, Z+1	; 0x01
     208:	84 17       	cp	r24, r20
     20a:	95 07       	cpc	r25, r21
     20c:	09 f0       	breq	.+2      	; 0x210 <BCM_SPI_RXCBF+0x6e>
     20e:	40 c0       	rjmp	.+128    	; 0x290 <BCM_SPI_RXCBF+0xee>
            {
                (aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter)++;
     210:	2f 5f       	subi	r18, 0xFF	; 255
     212:	14 96       	adiw	r26, 0x04	; 4
     214:	2c 93       	st	X, r18
     216:	14 97       	sbiw	r26, 0x04	; 4
                (aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter)=ZERO;
     218:	16 96       	adiw	r26, 0x06	; 6
     21a:	1c 92       	st	X, r1
     21c:	1e 92       	st	-X, r1
     21e:	15 97       	sbiw	r26, 0x05	; 5
                u8_FrameCounter=(aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter);
                if(PACKET_SIZE==u8_FrameCounter)
     220:	24 30       	cpi	r18, 0x04	; 4
     222:	21 f4       	brne	.+8      	; 0x22c <BCM_SPI_RXCBF+0x8a>
                {
                    aptr_Task[COMM_SPI_CH]->u8_BCMState=BCM_RXSTATE_CS;
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	13 96       	adiw	r26, 0x03	; 3
     228:	8c 93       	st	X, r24
     22a:	08 95       	ret
                }
                else if(DATA_INDEX==u8_FrameCounter)
     22c:	22 30       	cpi	r18, 0x02	; 2
     22e:	81 f5       	brne	.+96     	; 0x290 <BCM_SPI_RXCBF+0xee>
                {
                    if(au16_Packet_sizes[COMM_SPI_CH][DATA_INDEX]>aptr_Task[COMM_SPI_CH]->u16_BCMSize)
     230:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
     234:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
     238:	17 96       	adiw	r26, 0x07	; 7
     23a:	2d 91       	ld	r18, X+
     23c:	3c 91       	ld	r19, X
     23e:	18 97       	sbiw	r26, 0x08	; 8
     240:	28 17       	cp	r18, r24
     242:	39 07       	cpc	r19, r25
     244:	20 f4       	brcc	.+8      	; 0x24e <BCM_SPI_RXCBF+0xac>
                    {
                        aptr_Task[COMM_SPI_CH]->u8_BCMState=BCM_RXSTATE_ERROR;
     246:	83 e0       	ldi	r24, 0x03	; 3
     248:	13 96       	adiw	r26, 0x03	; 3
     24a:	8c 93       	st	X, r24
     24c:	08 95       	ret

                    }
                    else
                    {
                        aptr_Task[COMM_SPI_CH]->u16_BCMSize=au16_Packet_sizes[COMM_SPI_CH][DATA_INDEX];
     24e:	18 96       	adiw	r26, 0x08	; 8
     250:	9c 93       	st	X, r25
     252:	8e 93       	st	-X, r24
     254:	17 97       	sbiw	r26, 0x07	; 7
     256:	08 95       	ret
                //DO NOTHING
            }
            break;
        case BCM_RXSTATE_ERROR:

            (aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter)++;
     258:	85 81       	ldd	r24, Z+5	; 0x05
     25a:	96 81       	ldd	r25, Z+6	; 0x06
     25c:	01 96       	adiw	r24, 0x01	; 1
     25e:	96 83       	std	Z+6, r25	; 0x06
     260:	85 83       	std	Z+5, r24	; 0x05

            if((au16_Packet_sizes[COMM_SPI_CH][aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter])==(aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter))
     262:	24 81       	ldd	r18, Z+4	; 0x04
     264:	a2 2f       	mov	r26, r18
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	14 96       	adiw	r26, 0x04	; 4
     26a:	aa 0f       	add	r26, r26
     26c:	bb 1f       	adc	r27, r27
     26e:	a0 5a       	subi	r26, 0xA0	; 160
     270:	bf 4f       	sbci	r27, 0xFF	; 255
     272:	4d 91       	ld	r20, X+
     274:	5c 91       	ld	r21, X
     276:	84 17       	cp	r24, r20
     278:	95 07       	cpc	r25, r21
     27a:	51 f4       	brne	.+20     	; 0x290 <BCM_SPI_RXCBF+0xee>
            {
                (aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter)++;
     27c:	2f 5f       	subi	r18, 0xFF	; 255
     27e:	24 83       	std	Z+4, r18	; 0x04
                (aptr_Task[COMM_SPI_CH]->u16_BCMByteCoounter)=ZERO;
     280:	16 82       	std	Z+6, r1	; 0x06
     282:	15 82       	std	Z+5, r1	; 0x05
                u8_FrameCounter=(aptr_Task[COMM_SPI_CH]->u8_BCMPacketCounter);
                if(PACKET_SIZE==u8_FrameCounter)
     284:	24 30       	cpi	r18, 0x04	; 4
     286:	21 f4       	brne	.+8      	; 0x290 <BCM_SPI_RXCBF+0xee>
                {
                    aptr_Task[COMM_SPI_CH]->u8_BCMMode=BCM_MODE_IDEAL;
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	81 83       	std	Z+1, r24	; 0x01
                    au8_InitPacketFlag[COMM_SPI_CH]=NOT_INIT;
     28c:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <au8_InitPacketFlag+0x1>
     290:	08 95       	ret

00000292 <BCM_I2C_RXCBF>:
}

static void BCM_I2C_RXCBF(uint8_t Data)
{
    uint8_t u8_FrameCounter;
    switch (aptr_Task[COMM_I2C_CH]->u8_BCMState)
     292:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <__data_end+0x4>
     296:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <__data_end+0x5>
     29a:	93 81       	ldd	r25, Z+3	; 0x03
     29c:	91 30       	cpi	r25, 0x01	; 1
     29e:	21 f0       	breq	.+8      	; 0x2a8 <BCM_I2C_RXCBF+0x16>
     2a0:	93 30       	cpi	r25, 0x03	; 3
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <BCM_I2C_RXCBF+0x14>
     2a4:	59 c0       	rjmp	.+178    	; 0x358 <BCM_I2C_RXCBF+0xc6>
     2a6:	08 95       	ret
    {
        case BCM_RXSTATE_RECEIVING:
            (aptr_Packet[COMM_I2C_CH][aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter])[aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter]=Data;
     2a8:	a4 81       	ldd	r26, Z+4	; 0x04
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	18 96       	adiw	r26, 0x08	; 8
     2ae:	aa 0f       	add	r26, r26
     2b0:	bb 1f       	adc	r27, r27
     2b2:	a1 54       	subi	r26, 0x41	; 65
     2b4:	bf 4f       	sbci	r27, 0xFF	; 255
     2b6:	4d 91       	ld	r20, X+
     2b8:	5c 91       	ld	r21, X
     2ba:	25 81       	ldd	r18, Z+5	; 0x05
     2bc:	36 81       	ldd	r19, Z+6	; 0x06
     2be:	fa 01       	movw	r30, r20
     2c0:	e2 0f       	add	r30, r18
     2c2:	f3 1f       	adc	r31, r19
     2c4:	80 83       	st	Z, r24

            (aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter)++;
     2c6:	e6 eb       	ldi	r30, 0xB6	; 182
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	a4 81       	ldd	r26, Z+4	; 0x04
     2cc:	b5 81       	ldd	r27, Z+5	; 0x05
     2ce:	15 96       	adiw	r26, 0x05	; 5
     2d0:	8d 91       	ld	r24, X+
     2d2:	9c 91       	ld	r25, X
     2d4:	16 97       	sbiw	r26, 0x06	; 6
     2d6:	01 96       	adiw	r24, 0x01	; 1
     2d8:	16 96       	adiw	r26, 0x06	; 6
     2da:	9c 93       	st	X, r25
     2dc:	8e 93       	st	-X, r24
     2de:	15 97       	sbiw	r26, 0x05	; 5

            if((au16_Packet_sizes[COMM_I2C_CH][aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter])==(aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter))
     2e0:	a4 81       	ldd	r26, Z+4	; 0x04
     2e2:	b5 81       	ldd	r27, Z+5	; 0x05
     2e4:	14 96       	adiw	r26, 0x04	; 4
     2e6:	8c 91       	ld	r24, X
     2e8:	14 97       	sbiw	r26, 0x04	; 4
     2ea:	e8 2f       	mov	r30, r24
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	38 96       	adiw	r30, 0x08	; 8
     2f0:	ee 0f       	add	r30, r30
     2f2:	ff 1f       	adc	r31, r31
     2f4:	e0 5a       	subi	r30, 0xA0	; 160
     2f6:	ff 4f       	sbci	r31, 0xFF	; 255
     2f8:	40 81       	ld	r20, Z
     2fa:	51 81       	ldd	r21, Z+1	; 0x01
     2fc:	15 96       	adiw	r26, 0x05	; 5
     2fe:	2d 91       	ld	r18, X+
     300:	3c 91       	ld	r19, X
     302:	16 97       	sbiw	r26, 0x06	; 6
     304:	42 17       	cp	r20, r18
     306:	53 07       	cpc	r21, r19
     308:	09 f0       	breq	.+2      	; 0x30c <BCM_I2C_RXCBF+0x7a>
     30a:	57 c0       	rjmp	.+174    	; 0x3ba <BCM_I2C_RXCBF+0x128>
            {
                (aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter)++;
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	14 96       	adiw	r26, 0x04	; 4
     310:	8c 93       	st	X, r24
                (aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter)=ZERO;
     312:	e6 eb       	ldi	r30, 0xB6	; 182
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	a4 81       	ldd	r26, Z+4	; 0x04
     318:	b5 81       	ldd	r27, Z+5	; 0x05
     31a:	16 96       	adiw	r26, 0x06	; 6
     31c:	1c 92       	st	X, r1
     31e:	1e 92       	st	-X, r1
     320:	15 97       	sbiw	r26, 0x05	; 5
                u8_FrameCounter=(aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter);
     322:	04 80       	ldd	r0, Z+4	; 0x04
     324:	f5 81       	ldd	r31, Z+5	; 0x05
     326:	e0 2d       	mov	r30, r0
     328:	84 81       	ldd	r24, Z+4	; 0x04
                if(PACKET_SIZE==u8_FrameCounter)
     32a:	84 30       	cpi	r24, 0x04	; 4
     32c:	19 f4       	brne	.+6      	; 0x334 <BCM_I2C_RXCBF+0xa2>
                {
                    aptr_Task[COMM_I2C_CH]->u8_BCMState=BCM_RXSTATE_CS;
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	83 83       	std	Z+3, r24	; 0x03
     332:	08 95       	ret
                }
                else if(DATA_INDEX==u8_FrameCounter)
     334:	82 30       	cpi	r24, 0x02	; 2
     336:	09 f0       	breq	.+2      	; 0x33a <BCM_I2C_RXCBF+0xa8>
     338:	40 c0       	rjmp	.+128    	; 0x3ba <BCM_I2C_RXCBF+0x128>
                {
                    if(au16_Packet_sizes[COMM_I2C_CH][DATA_INDEX]>aptr_Task[COMM_I2C_CH]->u16_BCMSize)
     33a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
     33e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
     342:	27 81       	ldd	r18, Z+7	; 0x07
     344:	30 85       	ldd	r19, Z+8	; 0x08
     346:	28 17       	cp	r18, r24
     348:	39 07       	cpc	r19, r25
     34a:	18 f4       	brcc	.+6      	; 0x352 <BCM_I2C_RXCBF+0xc0>
                    {
                        aptr_Task[COMM_I2C_CH]->u8_BCMState=BCM_RXSTATE_ERROR;
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	83 83       	std	Z+3, r24	; 0x03
     350:	08 95       	ret

                    }
                    else
                    {
                        aptr_Task[COMM_I2C_CH]->u16_BCMSize=au16_Packet_sizes[COMM_I2C_CH][DATA_INDEX];
     352:	90 87       	std	Z+8, r25	; 0x08
     354:	87 83       	std	Z+7, r24	; 0x07
     356:	08 95       	ret
                //DO NOTHING
            }
            break;
        case BCM_RXSTATE_ERROR:

            (aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter)++;
     358:	85 81       	ldd	r24, Z+5	; 0x05
     35a:	96 81       	ldd	r25, Z+6	; 0x06
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	96 83       	std	Z+6, r25	; 0x06
     360:	85 83       	std	Z+5, r24	; 0x05

            if((au16_Packet_sizes[COMM_I2C_CH][aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter])==(aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter))
     362:	a0 91 ba 00 	lds	r26, 0x00BA	; 0x8000ba <__data_end+0x4>
     366:	b0 91 bb 00 	lds	r27, 0x00BB	; 0x8000bb <__data_end+0x5>
     36a:	14 96       	adiw	r26, 0x04	; 4
     36c:	8c 91       	ld	r24, X
     36e:	14 97       	sbiw	r26, 0x04	; 4
     370:	e8 2f       	mov	r30, r24
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	38 96       	adiw	r30, 0x08	; 8
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	e0 5a       	subi	r30, 0xA0	; 160
     37c:	ff 4f       	sbci	r31, 0xFF	; 255
     37e:	40 81       	ld	r20, Z
     380:	51 81       	ldd	r21, Z+1	; 0x01
     382:	15 96       	adiw	r26, 0x05	; 5
     384:	2d 91       	ld	r18, X+
     386:	3c 91       	ld	r19, X
     388:	16 97       	sbiw	r26, 0x06	; 6
     38a:	42 17       	cp	r20, r18
     38c:	53 07       	cpc	r21, r19
     38e:	a9 f4       	brne	.+42     	; 0x3ba <BCM_I2C_RXCBF+0x128>
            {
                (aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter)++;
     390:	8f 5f       	subi	r24, 0xFF	; 255
     392:	14 96       	adiw	r26, 0x04	; 4
     394:	8c 93       	st	X, r24
                (aptr_Task[COMM_I2C_CH]->u16_BCMByteCoounter)=ZERO;
     396:	e6 eb       	ldi	r30, 0xB6	; 182
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	a4 81       	ldd	r26, Z+4	; 0x04
     39c:	b5 81       	ldd	r27, Z+5	; 0x05
     39e:	16 96       	adiw	r26, 0x06	; 6
     3a0:	1c 92       	st	X, r1
     3a2:	1e 92       	st	-X, r1
     3a4:	15 97       	sbiw	r26, 0x05	; 5
                u8_FrameCounter=(aptr_Task[COMM_I2C_CH]->u8_BCMPacketCounter);
     3a6:	04 80       	ldd	r0, Z+4	; 0x04
     3a8:	f5 81       	ldd	r31, Z+5	; 0x05
     3aa:	e0 2d       	mov	r30, r0
     3ac:	84 81       	ldd	r24, Z+4	; 0x04
                if(PACKET_SIZE==u8_FrameCounter)
     3ae:	84 30       	cpi	r24, 0x04	; 4
     3b0:	21 f4       	brne	.+8      	; 0x3ba <BCM_I2C_RXCBF+0x128>
                {
                    aptr_Task[COMM_I2C_CH]->u8_BCMMode=BCM_MODE_IDEAL;
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	81 83       	std	Z+1, r24	; 0x01
                    au8_InitPacketFlag[COMM_I2C_CH]=NOT_INIT;
     3b6:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <au8_InitPacketFlag+0x2>
     3ba:	08 95       	ret

000003bc <BCM_InitPacket>:
    return u8_ErrorState;
}
static ERROR_STATE_t BCM_InitPacket(uint8_t COMM_ID,uint8_t COMM_Mode)
{
    ERROR_STATE_t u8_ErrorState = ERROR_OK;
    if(COMM_ID>=COMM_NUMBERS)
     3bc:	83 30       	cpi	r24, 0x03	; 3
     3be:	08 f0       	brcs	.+2      	; 0x3c2 <BCM_InitPacket+0x6>
     3c0:	55 c0       	rjmp	.+170    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
    {
        u8_ErrorState = ERROR_NOK;
    }
    else
    {
        switch(COMM_Mode)
     3c2:	66 23       	and	r22, r22
     3c4:	21 f1       	breq	.+72     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     3c6:	61 30       	cpi	r22, 0x01	; 1
     3c8:	91 f5       	brne	.+100    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
        {
            case BCM_MODE_TX:
                aptr_Packet[COMM_ID][SIZE_INDEX]=(ptr_uint8_t)&(aptr_Task[COMM_ID]->u16_BCMSize);
     3ca:	28 2f       	mov	r18, r24
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	f9 01       	movw	r30, r18
     3d0:	ee 0f       	add	r30, r30
     3d2:	ff 1f       	adc	r31, r31
     3d4:	ea 54       	subi	r30, 0x4A	; 74
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	01 90       	ld	r0, Z+
     3da:	f0 81       	ld	r31, Z
     3dc:	e0 2d       	mov	r30, r0
     3de:	af 01       	movw	r20, r30
     3e0:	49 5f       	subi	r20, 0xF9	; 249
     3e2:	5f 4f       	sbci	r21, 0xFF	; 255
     3e4:	22 0f       	add	r18, r18
     3e6:	33 1f       	adc	r19, r19
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	22 0f       	add	r18, r18
     3ee:	33 1f       	adc	r19, r19
     3f0:	d9 01       	movw	r26, r18
     3f2:	a1 54       	subi	r26, 0x41	; 65
     3f4:	bf 4f       	sbci	r27, 0xFF	; 255
     3f6:	13 96       	adiw	r26, 0x03	; 3
     3f8:	5c 93       	st	X, r21
     3fa:	4e 93       	st	-X, r20
     3fc:	12 97       	sbiw	r26, 0x02	; 2
                au16_Packet_sizes[COMM_ID][DATA_INDEX]=aptr_Task[COMM_ID]->u16_BCMSize;
     3fe:	47 81       	ldd	r20, Z+7	; 0x07
     400:	50 85       	ldd	r21, Z+8	; 0x08
     402:	f9 01       	movw	r30, r18
     404:	e0 5a       	subi	r30, 0xA0	; 160
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	55 83       	std	Z+5, r21	; 0x05
     40a:	44 83       	std	Z+4, r20	; 0x04
                break;
     40c:	10 c0       	rjmp	.+32     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
            case BCM_MODE_RX:
                aptr_Packet[COMM_ID][SIZE_INDEX]=(ptr_uint8_t)&(au16_Packet_sizes[COMM_ID][DATA_INDEX]);
     40e:	28 2f       	mov	r18, r24
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	22 0f       	add	r18, r18
     414:	33 1f       	adc	r19, r19
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	22 0f       	add	r18, r18
     41c:	33 1f       	adc	r19, r19
     41e:	a9 01       	movw	r20, r18
     420:	4c 59       	subi	r20, 0x9C	; 156
     422:	5f 4f       	sbci	r21, 0xFF	; 255
     424:	f9 01       	movw	r30, r18
     426:	e1 54       	subi	r30, 0x41	; 65
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	53 83       	std	Z+3, r21	; 0x03
     42c:	42 83       	std	Z+2, r20	; 0x02
                break;
            default:
                break;

        }
        aptr_Packet[COMM_ID][CMD_INDEX]=&aptr_Task[COMM_ID]->u8_BCMID;
     42e:	e8 2f       	mov	r30, r24
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	df 01       	movw	r26, r30
     434:	aa 0f       	add	r26, r26
     436:	bb 1f       	adc	r27, r27
     438:	aa 54       	subi	r26, 0x4A	; 74
     43a:	bf 4f       	sbci	r27, 0xFF	; 255
     43c:	0d 90       	ld	r0, X+
     43e:	bc 91       	ld	r27, X
     440:	a0 2d       	mov	r26, r0
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	ee 0f       	add	r30, r30
     448:	ff 1f       	adc	r31, r31
     44a:	ee 0f       	add	r30, r30
     44c:	ff 1f       	adc	r31, r31
     44e:	e1 54       	subi	r30, 0x41	; 65
     450:	ff 4f       	sbci	r31, 0xFF	; 255
     452:	b1 83       	std	Z+1, r27	; 0x01
     454:	a0 83       	st	Z, r26
        aptr_Packet[COMM_ID][DATA_INDEX]=aptr_Task[COMM_ID]->ptr_BCMBuffer;
     456:	19 96       	adiw	r26, 0x09	; 9
     458:	8d 91       	ld	r24, X+
     45a:	9c 91       	ld	r25, X
     45c:	1a 97       	sbiw	r26, 0x0a	; 10
     45e:	95 83       	std	Z+5, r25	; 0x05
     460:	84 83       	std	Z+4, r24	; 0x04
        aptr_Packet[COMM_ID][CS_INDEX]=&(aptr_Task[COMM_ID]->u8_BCMCS);
     462:	12 96       	adiw	r26, 0x02	; 2
     464:	b7 83       	std	Z+7, r27	; 0x07
     466:	a6 83       	std	Z+6, r26	; 0x06
    /*Return state */
    return u8_ErrorState;
}
static ERROR_STATE_t BCM_InitPacket(uint8_t COMM_ID,uint8_t COMM_Mode)
{
    ERROR_STATE_t u8_ErrorState = ERROR_OK;
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	08 95       	ret
    if(COMM_ID>=COMM_NUMBERS)
    {
        u8_ErrorState = ERROR_NOK;
     46c:	81 e0       	ldi	r24, 0x01	; 1
        aptr_Packet[COMM_ID][DATA_INDEX]=aptr_Task[COMM_ID]->ptr_BCMBuffer;
        aptr_Packet[COMM_ID][CS_INDEX]=&(aptr_Task[COMM_ID]->u8_BCMCS);

    }
    return u8_ErrorState;
}
     46e:	08 95       	ret

00000470 <BCM_Init>:
            break;
    }
}

static ERROR_STATE_t BCM_Init(void)
{
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
    ERROR_STATE_t u8_ErrorState = ERROR_OK;
    /*Check if the BCM had been init before*/
    if(NOT_INIT==IsInit)
     476:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <IsInit>
     47a:	88 23       	and	r24, r24
     47c:	f1 f0       	breq	.+60     	; 0x4ba <BCM_Init+0x4a>
        /*set the init flag*/
        IsInit=INIT;
    }
    else
    {
        u8_ErrorState=ERROR_NOK;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	41 c0       	rjmp	.+130    	; 0x504 <BCM_Init+0x94>
        uint8_t InitCounter;
        /*This for loop to init all the used comm channel */
        for(InitCounter=ZERO;InitCounter<COMM_NUMBERS;InitCounter++)
        {
            /*Check if the the channel is enabled*/
            if(ENABLE==au8_BCM_UsedCH[InitCounter])
     482:	0c 2f       	mov	r16, r28
     484:	10 e0       	ldi	r17, 0x00	; 0
     486:	f8 01       	movw	r30, r16
     488:	e0 56       	subi	r30, 0x60	; 96
     48a:	ff 4f       	sbci	r31, 0xFF	; 255
     48c:	80 81       	ld	r24, Z
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	91 f4       	brne	.+36     	; 0x4b6 <BCM_Init+0x46>
            {
                /*Init the comm channel */
                while(ERROR_OK!=COMMProxy_Init(InitCounter));
     492:	8c 2f       	mov	r24, r28
     494:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <COMMProxy_Init>
     498:	81 11       	cpse	r24, r1
     49a:	fb cf       	rjmp	.-10     	; 0x492 <BCM_Init+0x22>
                if(NULL_PTR==aptr_Task[InitCounter])
     49c:	f8 01       	movw	r30, r16
     49e:	ee 0f       	add	r30, r30
     4a0:	ff 1f       	adc	r31, r31
     4a2:	ea 54       	subi	r30, 0x4A	; 74
     4a4:	ff 4f       	sbci	r31, 0xFF	; 255
     4a6:	80 81       	ld	r24, Z
     4a8:	91 81       	ldd	r25, Z+1	; 0x01
     4aa:	89 2b       	or	r24, r25
     4ac:	21 f4       	brne	.+8      	; 0x4b6 <BCM_Init+0x46>
                {
                    /*Assign the address of the task structure to the pointer*/
                    /*IF YES MAKE IT POINT TO THE TASK*/
                    BCM_Get(InitCounter,&aptr_Task[InitCounter]);
     4ae:	bf 01       	movw	r22, r30
     4b0:	8c 2f       	mov	r24, r28
     4b2:	0e 94 4b 04 	call	0x896	; 0x896 <BCM_Get>
    /*Check if the BCM had been init before*/
    if(NOT_INIT==IsInit)
    {
        uint8_t InitCounter;
        /*This for loop to init all the used comm channel */
        for(InitCounter=ZERO;InitCounter<COMM_NUMBERS;InitCounter++)
     4b6:	cf 5f       	subi	r28, 0xFF	; 255
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <BCM_Init+0x4c>
     4ba:	c0 e0       	ldi	r28, 0x00	; 0
     4bc:	c3 30       	cpi	r28, 0x03	; 3
     4be:	08 f3       	brcs	.-62     	; 0x482 <BCM_Init+0x12>
            {
                //DO NOTHING
            }
        }
        /*set call back functions*/
        COMMProxy_SetTxCallback(COMM_UART_CH,BCM_UART_TXCBF);
     4c0:	67 e4       	ldi	r22, 0x47	; 71
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 67 05 	call	0xace	; 0xace <COMMProxy_SetTxCallback>
        COMMProxy_SetTxCallback(COMM_SPI_CH,BCM_SPI_TXCBF);
     4ca:	6e e4       	ldi	r22, 0x4E	; 78
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 67 05 	call	0xace	; 0xace <COMMProxy_SetTxCallback>
		COMMProxy_SetTxCallback(COMM_I2C_CH,BCM_I2C_TXCBF);
     4d4:	65 e5       	ldi	r22, 0x55	; 85
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	0e 94 67 05 	call	0xace	; 0xace <COMMProxy_SetTxCallback>

        COMMProxy_SetRxCallback(COMM_UART_CH,BCM_UART_RXCBF);
     4de:	6c e5       	ldi	r22, 0x5C	; 92
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <COMMProxy_SetRxCallback>
        COMMProxy_SetRxCallback(COMM_SPI_CH,BCM_SPI_RXCBF);
     4e8:	61 ed       	ldi	r22, 0xD1	; 209
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <COMMProxy_SetRxCallback>
		COMMProxy_SetRxCallback(COMM_I2C_CH,BCM_I2C_RXCBF);
     4f2:	69 e4       	ldi	r22, 0x49	; 73
     4f4:	71 e0       	ldi	r23, 0x01	; 1
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <COMMProxy_SetRxCallback>
        /*set the init flag*/
        IsInit=INIT;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <IsInit>
    }
}

static ERROR_STATE_t BCM_Init(void)
{
    ERROR_STATE_t u8_ErrorState = ERROR_OK;
     502:	80 e0       	ldi	r24, 0x00	; 0
    {
        u8_ErrorState=ERROR_NOK;
    }
    /*Return state */
    return u8_ErrorState;
}
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	08 95       	ret

0000050c <BCM_TxMainFunction>:
    }
    return u8_ErrorState;
}
/*- APIs IMPLEMENTATION-----------------------------------*/
extern void BCM_TxMainFunction(void)
{
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
    uint8_t u8_ChCounter=ZERO;
    if(NOT_INIT==IsInit)
     51a:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <IsInit>
     51e:	81 11       	cpse	r24, r1
     520:	02 c0       	rjmp	.+4      	; 0x526 <BCM_TxMainFunction+0x1a>
    {
       BCM_Init();
     522:	0e 94 38 02 	call	0x470	; 0x470 <BCM_Init>
    }
    else
    {
        //DO NOTHING
    }
    if(INIT==IsInit)
     526:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <IsInit>
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	09 f0       	breq	.+2      	; 0x530 <BCM_TxMainFunction+0x24>
     52e:	9c c0       	rjmp	.+312    	; 0x668 <BCM_TxMainFunction+0x15c>
     530:	97 c0       	rjmp	.+302    	; 0x660 <BCM_TxMainFunction+0x154>
    {
        for(u8_ChCounter=ZERO;u8_ChCounter<COMM_NUMBERS;u8_ChCounter++)
        {
            if(DISABLE==au8_BCM_UsedCH[u8_ChCounter])
     532:	0c 2f       	mov	r16, r28
     534:	10 e0       	ldi	r17, 0x00	; 0
     536:	f8 01       	movw	r30, r16
     538:	e0 56       	subi	r30, 0x60	; 96
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	80 81       	ld	r24, Z
     53e:	88 23       	and	r24, r24
     540:	09 f4       	brne	.+2      	; 0x544 <BCM_TxMainFunction+0x38>
     542:	8c c0       	rjmp	.+280    	; 0x65c <BCM_TxMainFunction+0x150>
            {
                continue;
            }
            else
            {
                if(BCM_MODE_TX==aptr_Task[u8_ChCounter]->u8_BCMMode)
     544:	f8 01       	movw	r30, r16
     546:	ee 0f       	add	r30, r30
     548:	ff 1f       	adc	r31, r31
     54a:	ea 54       	subi	r30, 0x4A	; 74
     54c:	ff 4f       	sbci	r31, 0xFF	; 255
     54e:	01 90       	ld	r0, Z+
     550:	f0 81       	ld	r31, Z
     552:	e0 2d       	mov	r30, r0
     554:	81 81       	ldd	r24, Z+1	; 0x01
     556:	81 30       	cpi	r24, 0x01	; 1
     558:	09 f0       	breq	.+2      	; 0x55c <BCM_TxMainFunction+0x50>
     55a:	80 c0       	rjmp	.+256    	; 0x65c <BCM_TxMainFunction+0x150>
                {
                    /*CHECK IF THE POINTER TO TASK IS NULL*/
                    if(NOT_INIT==au8_InitPacketFlag[u8_ChCounter])
     55c:	f8 01       	movw	r30, r16
     55e:	e4 54       	subi	r30, 0x44	; 68
     560:	ff 4f       	sbci	r31, 0xFF	; 255
     562:	80 81       	ld	r24, Z
     564:	81 11       	cpse	r24, r1
     566:	09 c0       	rjmp	.+18     	; 0x57a <BCM_TxMainFunction+0x6e>
                    {
                        /*IF YES MAKE IT POINT TO THE TASK*/
                        au8_InitPacketFlag[u8_ChCounter]=INIT;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	f8 01       	movw	r30, r16
     56c:	e4 54       	subi	r30, 0x44	; 68
     56e:	ff 4f       	sbci	r31, 0xFF	; 255
     570:	80 83       	st	Z, r24
                        BCM_InitPacket(u8_ChCounter,BCM_MODE_TX);
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	8c 2f       	mov	r24, r28
     576:	0e 94 de 01 	call	0x3bc	; 0x3bc <BCM_InitPacket>
                    }
                    else
                    {
                        //DO NOTHING
                    }
                    switch (aptr_Task[u8_ChCounter]->u8_BCMState)
     57a:	f8 01       	movw	r30, r16
     57c:	ee 0f       	add	r30, r30
     57e:	ff 1f       	adc	r31, r31
     580:	ea 54       	subi	r30, 0x4A	; 74
     582:	ff 4f       	sbci	r31, 0xFF	; 255
     584:	01 90       	ld	r0, Z+
     586:	f0 81       	ld	r31, Z
     588:	e0 2d       	mov	r30, r0
     58a:	83 81       	ldd	r24, Z+3	; 0x03
     58c:	82 30       	cpi	r24, 0x02	; 2
     58e:	09 f0       	breq	.+2      	; 0x592 <BCM_TxMainFunction+0x86>
     590:	65 c0       	rjmp	.+202    	; 0x65c <BCM_TxMainFunction+0x150>
                    {
                        case BCM_TXSTATE_SENDING:
                            //SEND PACKET(COMMAND,SIZE,DATA,SC)
                            aptr_Task[u8_ChCounter]->u8_BCMState=BCM_TXSTATE_PENDING;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	83 83       	std	Z+3, r24	; 0x03
							COMMProxy_Send(u8_ChCounter,(aptr_Packet[u8_ChCounter][aptr_Task[u8_ChCounter]->u8_BCMPacketCounter])[aptr_Task[u8_ChCounter]->u16_BCMByteCoounter]);
     596:	c8 01       	movw	r24, r16
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	9c 01       	movw	r18, r24
     59e:	2a 54       	subi	r18, 0x4A	; 74
     5a0:	3f 4f       	sbci	r19, 0xFF	; 255
     5a2:	69 01       	movw	r12, r18
     5a4:	f9 01       	movw	r30, r18
     5a6:	a0 81       	ld	r26, Z
     5a8:	b1 81       	ldd	r27, Z+1	; 0x01
     5aa:	14 96       	adiw	r26, 0x04	; 4
     5ac:	8c 91       	ld	r24, X
     5ae:	14 97       	sbiw	r26, 0x04	; 4
     5b0:	78 01       	movw	r14, r16
     5b2:	ee 0c       	add	r14, r14
     5b4:	ff 1c       	adc	r15, r15
     5b6:	ee 0c       	add	r14, r14
     5b8:	ff 1c       	adc	r15, r15
     5ba:	f7 01       	movw	r30, r14
     5bc:	e8 0f       	add	r30, r24
     5be:	f1 1d       	adc	r31, r1
     5c0:	ee 0f       	add	r30, r30
     5c2:	ff 1f       	adc	r31, r31
     5c4:	e1 54       	subi	r30, 0x41	; 65
     5c6:	ff 4f       	sbci	r31, 0xFF	; 255
     5c8:	01 90       	ld	r0, Z+
     5ca:	f0 81       	ld	r31, Z
     5cc:	e0 2d       	mov	r30, r0
     5ce:	15 96       	adiw	r26, 0x05	; 5
     5d0:	8d 91       	ld	r24, X+
     5d2:	9c 91       	ld	r25, X
     5d4:	16 97       	sbiw	r26, 0x06	; 6
     5d6:	e8 0f       	add	r30, r24
     5d8:	f9 1f       	adc	r31, r25
     5da:	60 81       	ld	r22, Z
     5dc:	8c 2f       	mov	r24, r28
     5de:	0e 94 36 05 	call	0xa6c	; 0xa6c <COMMProxy_Send>
                            (aptr_Task[u8_ChCounter]->u16_BCMByteCoounter)++;
     5e2:	d6 01       	movw	r26, r12
     5e4:	ed 91       	ld	r30, X+
     5e6:	fc 91       	ld	r31, X
     5e8:	11 97       	sbiw	r26, 0x01	; 1
     5ea:	85 81       	ldd	r24, Z+5	; 0x05
     5ec:	96 81       	ldd	r25, Z+6	; 0x06
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	96 83       	std	Z+6, r25	; 0x06
     5f2:	85 83       	std	Z+5, r24	; 0x05
                            if((au16_Packet_sizes[u8_ChCounter][aptr_Task[u8_ChCounter]->u8_BCMPacketCounter])==(aptr_Task[u8_ChCounter]->u16_BCMByteCoounter))
     5f4:	0d 90       	ld	r0, X+
     5f6:	bc 91       	ld	r27, X
     5f8:	a0 2d       	mov	r26, r0
     5fa:	14 96       	adiw	r26, 0x04	; 4
     5fc:	8c 91       	ld	r24, X
     5fe:	14 97       	sbiw	r26, 0x04	; 4
     600:	f7 01       	movw	r30, r14
     602:	e8 0f       	add	r30, r24
     604:	f1 1d       	adc	r31, r1
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	e0 5a       	subi	r30, 0xA0	; 160
     60c:	ff 4f       	sbci	r31, 0xFF	; 255
     60e:	40 81       	ld	r20, Z
     610:	51 81       	ldd	r21, Z+1	; 0x01
     612:	15 96       	adiw	r26, 0x05	; 5
     614:	2d 91       	ld	r18, X+
     616:	3c 91       	ld	r19, X
     618:	16 97       	sbiw	r26, 0x06	; 6
     61a:	42 17       	cp	r20, r18
     61c:	53 07       	cpc	r21, r19
     61e:	f1 f4       	brne	.+60     	; 0x65c <BCM_TxMainFunction+0x150>
                            {
                                (aptr_Task[u8_ChCounter]->u8_BCMPacketCounter)++;
     620:	8f 5f       	subi	r24, 0xFF	; 255
     622:	14 96       	adiw	r26, 0x04	; 4
     624:	8c 93       	st	X, r24
                                (aptr_Task[u8_ChCounter]->u16_BCMByteCoounter)=ZERO;
     626:	f6 01       	movw	r30, r12
     628:	a0 81       	ld	r26, Z
     62a:	b1 81       	ldd	r27, Z+1	; 0x01
     62c:	16 96       	adiw	r26, 0x06	; 6
     62e:	1c 92       	st	X, r1
     630:	1e 92       	st	-X, r1
     632:	15 97       	sbiw	r26, 0x05	; 5
                                if(PACKET_SIZE==(aptr_Task[u8_ChCounter]->u8_BCMPacketCounter))
     634:	01 90       	ld	r0, Z+
     636:	f0 81       	ld	r31, Z
     638:	e0 2d       	mov	r30, r0
     63a:	84 81       	ldd	r24, Z+4	; 0x04
     63c:	84 30       	cpi	r24, 0x04	; 4
     63e:	71 f4       	brne	.+28     	; 0x65c <BCM_TxMainFunction+0x150>
                                {
                                    aptr_Task[u8_ChCounter]->u8_BCMMode=BCM_MODE_IDEAL;
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	81 83       	std	Z+1, r24	; 0x01
                                    (aptr_Task[u8_ChCounter]->ptr_BCMCallBackFu)();
     644:	f6 01       	movw	r30, r12
     646:	01 90       	ld	r0, Z+
     648:	f0 81       	ld	r31, Z
     64a:	e0 2d       	mov	r30, r0
     64c:	03 84       	ldd	r0, Z+11	; 0x0b
     64e:	f4 85       	ldd	r31, Z+12	; 0x0c
     650:	e0 2d       	mov	r30, r0
     652:	09 95       	icall
                                    au8_InitPacketFlag[u8_ChCounter]=NOT_INIT;
     654:	f8 01       	movw	r30, r16
     656:	e4 54       	subi	r30, 0x44	; 68
     658:	ff 4f       	sbci	r31, 0xFF	; 255
     65a:	10 82       	st	Z, r1
    {
        //DO NOTHING
    }
    if(INIT==IsInit)
    {
        for(u8_ChCounter=ZERO;u8_ChCounter<COMM_NUMBERS;u8_ChCounter++)
     65c:	cf 5f       	subi	r28, 0xFF	; 255
     65e:	01 c0       	rjmp	.+2      	; 0x662 <BCM_TxMainFunction+0x156>
     660:	c0 e0       	ldi	r28, 0x00	; 0
     662:	c3 30       	cpi	r28, 0x03	; 3
     664:	08 f4       	brcc	.+2      	; 0x668 <BCM_TxMainFunction+0x15c>
     666:	65 cf       	rjmp	.-310    	; 0x532 <BCM_TxMainFunction+0x26>
                    //DO NOTHING
                }
            }
        }
    }
}
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	08 95       	ret

00000678 <BCM_RxMainFunction>:
extern void BCM_RxMainFunction(void)
{
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
    uint8_t u8_ChCounter=ZERO;
    if(NOT_INIT==IsInit)
     67e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <IsInit>
     682:	81 11       	cpse	r24, r1
     684:	02 c0       	rjmp	.+4      	; 0x68a <BCM_RxMainFunction+0x12>
    {
       BCM_Init();
     686:	0e 94 38 02 	call	0x470	; 0x470 <BCM_Init>
    }
    else
    {
        //DO NOTHING
    }
    if(INIT==IsInit)
     68a:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <IsInit>
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	09 f0       	breq	.+2      	; 0x694 <BCM_RxMainFunction+0x1c>
     692:	6b c0       	rjmp	.+214    	; 0x76a <BCM_RxMainFunction+0xf2>
     694:	66 c0       	rjmp	.+204    	; 0x762 <BCM_RxMainFunction+0xea>
    {
        for(u8_ChCounter=ZERO;u8_ChCounter<COMM_NUMBERS;u8_ChCounter++)
        {
            if(DISABLE==au8_BCM_UsedCH[u8_ChCounter])
     696:	c1 2f       	mov	r28, r17
     698:	d0 e0       	ldi	r29, 0x00	; 0
     69a:	fe 01       	movw	r30, r28
     69c:	e0 56       	subi	r30, 0x60	; 96
     69e:	ff 4f       	sbci	r31, 0xFF	; 255
     6a0:	80 81       	ld	r24, Z
     6a2:	88 23       	and	r24, r24
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <BCM_RxMainFunction+0x30>
     6a6:	5b c0       	rjmp	.+182    	; 0x75e <BCM_RxMainFunction+0xe6>
            {
                continue;
            }
            else
            {
                if(BCM_MODE_RX==aptr_Task[u8_ChCounter]->u8_BCMMode)
     6a8:	fe 01       	movw	r30, r28
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	ea 54       	subi	r30, 0x4A	; 74
     6b0:	ff 4f       	sbci	r31, 0xFF	; 255
     6b2:	01 90       	ld	r0, Z+
     6b4:	f0 81       	ld	r31, Z
     6b6:	e0 2d       	mov	r30, r0
     6b8:	81 81       	ldd	r24, Z+1	; 0x01
     6ba:	81 11       	cpse	r24, r1
     6bc:	50 c0       	rjmp	.+160    	; 0x75e <BCM_RxMainFunction+0xe6>
                {
                    /*CHECK IF THE POINTER TO TASK IS NULL*/
                    if(NOT_INIT==au8_InitPacketFlag[u8_ChCounter])
     6be:	fe 01       	movw	r30, r28
     6c0:	e4 54       	subi	r30, 0x44	; 68
     6c2:	ff 4f       	sbci	r31, 0xFF	; 255
     6c4:	80 81       	ld	r24, Z
     6c6:	81 11       	cpse	r24, r1
     6c8:	09 c0       	rjmp	.+18     	; 0x6dc <BCM_RxMainFunction+0x64>
                    {
                        /*IF YES MAKE IT POINT TO THE TASK*/
                        au8_InitPacketFlag[u8_ChCounter]=INIT;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	fe 01       	movw	r30, r28
     6ce:	e4 54       	subi	r30, 0x44	; 68
     6d0:	ff 4f       	sbci	r31, 0xFF	; 255
     6d2:	80 83       	st	Z, r24
                        BCM_InitPacket(u8_ChCounter,BCM_MODE_RX);
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	81 2f       	mov	r24, r17
     6d8:	0e 94 de 01 	call	0x3bc	; 0x3bc <BCM_InitPacket>
                    }
                    else
                    {
                        //DO NOTHING
                    }
                    switch (aptr_Task[u8_ChCounter]->u8_BCMState)
     6dc:	fe 01       	movw	r30, r28
     6de:	ee 0f       	add	r30, r30
     6e0:	ff 1f       	adc	r31, r31
     6e2:	ea 54       	subi	r30, 0x4A	; 74
     6e4:	ff 4f       	sbci	r31, 0xFF	; 255
     6e6:	01 90       	ld	r0, Z+
     6e8:	f0 81       	ld	r31, Z
     6ea:	e0 2d       	mov	r30, r0
     6ec:	83 81       	ldd	r24, Z+3	; 0x03
     6ee:	82 30       	cpi	r24, 0x02	; 2
     6f0:	b1 f5       	brne	.+108    	; 0x75e <BCM_RxMainFunction+0xe6>
                        case BCM_RXSTATE_RECEIVING:
                            /*Waiting*/
                            break;
                        case BCM_RXSTATE_CS:
                            /*Checking Sum*/
                            gu8_CSTemp=ZERO;
     6f2:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <gu8_CSTemp>
                            aptr_Task[u8_ChCounter]->u8_BCMMode=BCM_MODE_IDEAL;
     6f6:	81 83       	std	Z+1, r24	; 0x01
                            au8_InitPacketFlag[u8_ChCounter]=NOT_INIT;
     6f8:	fe 01       	movw	r30, r28
     6fa:	e4 54       	subi	r30, 0x44	; 68
     6fc:	ff 4f       	sbci	r31, 0xFF	; 255
     6fe:	10 82       	st	Z, r1
                            for(gu16_CSCounter=ZERO;gu16_CSCounter<aptr_Task[u8_ChCounter]->u16_BCMSize;gu16_CSCounter++)
     700:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <gu16_CSCounter+0x1>
     704:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <gu16_CSCounter>
     708:	10 c0       	rjmp	.+32     	; 0x72a <BCM_RxMainFunction+0xb2>
                            {
                                gu8_CSTemp += (aptr_Task[u8_ChCounter]->ptr_BCMBuffer)[gu16_CSCounter];
     70a:	01 84       	ldd	r0, Z+9	; 0x09
     70c:	f2 85       	ldd	r31, Z+10	; 0x0a
     70e:	e0 2d       	mov	r30, r0
     710:	e8 0f       	add	r30, r24
     712:	f9 1f       	adc	r31, r25
     714:	20 81       	ld	r18, Z
     716:	30 91 d8 00 	lds	r19, 0x00D8	; 0x8000d8 <gu8_CSTemp>
     71a:	23 0f       	add	r18, r19
     71c:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <gu8_CSTemp>
                        case BCM_RXSTATE_CS:
                            /*Checking Sum*/
                            gu8_CSTemp=ZERO;
                            aptr_Task[u8_ChCounter]->u8_BCMMode=BCM_MODE_IDEAL;
                            au8_InitPacketFlag[u8_ChCounter]=NOT_INIT;
                            for(gu16_CSCounter=ZERO;gu16_CSCounter<aptr_Task[u8_ChCounter]->u16_BCMSize;gu16_CSCounter++)
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <gu16_CSCounter+0x1>
     726:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <gu16_CSCounter>
     72a:	fe 01       	movw	r30, r28
     72c:	ee 0f       	add	r30, r30
     72e:	ff 1f       	adc	r31, r31
     730:	ea 54       	subi	r30, 0x4A	; 74
     732:	ff 4f       	sbci	r31, 0xFF	; 255
     734:	01 90       	ld	r0, Z+
     736:	f0 81       	ld	r31, Z
     738:	e0 2d       	mov	r30, r0
     73a:	27 81       	ldd	r18, Z+7	; 0x07
     73c:	30 85       	ldd	r19, Z+8	; 0x08
     73e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <gu16_CSCounter>
     742:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <gu16_CSCounter+0x1>
     746:	82 17       	cp	r24, r18
     748:	93 07       	cpc	r25, r19
     74a:	f8 f2       	brcs	.-66     	; 0x70a <BCM_RxMainFunction+0x92>
                            {
                                gu8_CSTemp += (aptr_Task[u8_ChCounter]->ptr_BCMBuffer)[gu16_CSCounter];
                            }

                            if((aptr_Task[u8_ChCounter]->u8_BCMCS)==gu8_CSTemp)
     74c:	92 81       	ldd	r25, Z+2	; 0x02
     74e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <gu8_CSTemp>
     752:	98 13       	cpse	r25, r24
     754:	04 c0       	rjmp	.+8      	; 0x75e <BCM_RxMainFunction+0xe6>
                            {
                                (aptr_Task[u8_ChCounter]->ptr_BCMCallBackFu)();
     756:	03 84       	ldd	r0, Z+11	; 0x0b
     758:	f4 85       	ldd	r31, Z+12	; 0x0c
     75a:	e0 2d       	mov	r30, r0
     75c:	09 95       	icall
    {
        //DO NOTHING
    }
    if(INIT==IsInit)
    {
        for(u8_ChCounter=ZERO;u8_ChCounter<COMM_NUMBERS;u8_ChCounter++)
     75e:	1f 5f       	subi	r17, 0xFF	; 255
     760:	01 c0       	rjmp	.+2      	; 0x764 <BCM_RxMainFunction+0xec>
     762:	10 e0       	ldi	r17, 0x00	; 0
     764:	13 30       	cpi	r17, 0x03	; 3
     766:	08 f4       	brcc	.+2      	; 0x76a <BCM_RxMainFunction+0xf2>
     768:	96 cf       	rjmp	.-212    	; 0x696 <BCM_RxMainFunction+0x1e>
                    //DO NOTHING
                }
            }
        }
    }
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	08 95       	ret

00000772 <BCM_Send>:
/*- APIs IMPLEMENTATION-----------------------------------*/
/**
* @brief: This function sets the data to be sent.
*/
extern ERROR_STATE_t BCM_Send(uint8_t CH_ID, uint16_t Size,ptr_uint8_t DataArr,Ptr_VoidFuncVoid_t TX_CBF)
{
     772:	da 01       	movw	r26, r20
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
    uint16_t u16_BCM_CSCounter=ZERO;
	if(CH_ID>=COMM_NUMBERS)
     774:	83 30       	cpi	r24, 0x03	; 3
     776:	08 f0       	brcs	.+2      	; 0x77a <BCM_Send+0x8>
     778:	4a c0       	rjmp	.+148    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
	{
		u8_ErrorState =ERROR_NOK;
	}
    else if(BCM_MODE_IDEAL!=gastr_BCM_Task[CH_ID].u8_BCMMode)
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	4d e0       	ldi	r20, 0x0D	; 13
     77e:	48 9f       	mul	r20, r24
     780:	f0 01       	movw	r30, r0
     782:	49 9f       	mul	r20, r25
     784:	f0 0d       	add	r31, r0
     786:	11 24       	eor	r1, r1
     788:	e8 58       	subi	r30, 0x88	; 136
     78a:	ff 4f       	sbci	r31, 0xFF	; 255
     78c:	41 81       	ldd	r20, Z+1	; 0x01
     78e:	42 30       	cpi	r20, 0x02	; 2
     790:	09 f0       	breq	.+2      	; 0x794 <BCM_Send+0x22>
     792:	3f c0       	rjmp	.+126    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
    {
        u8_ErrorState =ERROR_NOK;
    }
    else if((Size>BCM_MAX_DATA_SIZE)||(Size<BCM_MIN_DATA_SIZE))
     794:	ab 01       	movw	r20, r22
     796:	41 50       	subi	r20, 0x01	; 1
     798:	51 09       	sbc	r21, r1
     79a:	48 3e       	cpi	r20, 0xE8	; 232
     79c:	53 40       	sbci	r21, 0x03	; 3
     79e:	d8 f5       	brcc	.+118    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
	{
		u8_ErrorState =ERROR_NOK;
	}
    else if((NULL_PTR==DataArr)||(NULL_PTR==TX_CBF))
     7a0:	10 97       	sbiw	r26, 0x00	; 0
     7a2:	d9 f1       	breq	.+118    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     7a4:	21 15       	cp	r18, r1
     7a6:	31 05       	cpc	r19, r1
     7a8:	d1 f1       	breq	.+116    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
	{
		u8_ErrorState =ERROR_NOK;
	}
	else
	{
	    gastr_BCM_Task[CH_ID].u8_BCMID=u8_BCM_ID;
     7aa:	4d e0       	ldi	r20, 0x0D	; 13
     7ac:	48 9f       	mul	r20, r24
     7ae:	f0 01       	movw	r30, r0
     7b0:	49 9f       	mul	r20, r25
     7b2:	f0 0d       	add	r31, r0
     7b4:	11 24       	eor	r1, r1
     7b6:	e8 58       	subi	r30, 0x88	; 136
     7b8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ba:	40 91 9f 00 	lds	r20, 0x009F	; 0x80009f <u8_BCM_ID>
     7be:	40 83       	st	Z, r20
		gastr_BCM_Task[CH_ID].u8_BCMMode=BCM_MODE_TX;
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	41 83       	std	Z+1, r20	; 0x01
		gastr_BCM_Task[CH_ID].u8_BCMCS=ZERO;
     7c4:	12 82       	std	Z+2, r1	; 0x02
		gastr_BCM_Task[CH_ID].u8_BCMState=BCM_TXSTATE_SENDING;
     7c6:	42 e0       	ldi	r20, 0x02	; 2
     7c8:	43 83       	std	Z+3, r20	; 0x03
		gastr_BCM_Task[CH_ID].u8_BCMPacketCounter=ZERO;
     7ca:	14 82       	std	Z+4, r1	; 0x04
		gastr_BCM_Task[CH_ID].u16_BCMByteCoounter=ZERO;
     7cc:	16 82       	std	Z+6, r1	; 0x06
     7ce:	15 82       	std	Z+5, r1	; 0x05
		gastr_BCM_Task[CH_ID].u16_BCMSize=Size;
     7d0:	70 87       	std	Z+8, r23	; 0x08
     7d2:	67 83       	std	Z+7, r22	; 0x07
		gastr_BCM_Task[CH_ID].ptr_BCMBuffer=DataArr;
     7d4:	b2 87       	std	Z+10, r27	; 0x0a
     7d6:	a1 87       	std	Z+9, r26	; 0x09
		gastr_BCM_Task[CH_ID].ptr_BCMCallBackFu=TX_CBF;
     7d8:	34 87       	std	Z+12, r19	; 0x0c
     7da:	23 87       	std	Z+11, r18	; 0x0b
		for(u16_BCM_CSCounter=ZERO;u16_BCM_CSCounter<Size;u16_BCM_CSCounter++)
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	11 c0       	rjmp	.+34     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		{
			gastr_BCM_Task[CH_ID].u8_BCMCS+=DataArr[u16_BCM_CSCounter];
     7e2:	fd 01       	movw	r30, r26
     7e4:	e2 0f       	add	r30, r18
     7e6:	f3 1f       	adc	r31, r19
     7e8:	50 81       	ld	r21, Z
     7ea:	4d e0       	ldi	r20, 0x0D	; 13
     7ec:	48 9f       	mul	r20, r24
     7ee:	f0 01       	movw	r30, r0
     7f0:	49 9f       	mul	r20, r25
     7f2:	f0 0d       	add	r31, r0
     7f4:	11 24       	eor	r1, r1
     7f6:	e8 58       	subi	r30, 0x88	; 136
     7f8:	ff 4f       	sbci	r31, 0xFF	; 255
     7fa:	42 81       	ldd	r20, Z+2	; 0x02
     7fc:	54 0f       	add	r21, r20
     7fe:	52 83       	std	Z+2, r21	; 0x02
		gastr_BCM_Task[CH_ID].u8_BCMPacketCounter=ZERO;
		gastr_BCM_Task[CH_ID].u16_BCMByteCoounter=ZERO;
		gastr_BCM_Task[CH_ID].u16_BCMSize=Size;
		gastr_BCM_Task[CH_ID].ptr_BCMBuffer=DataArr;
		gastr_BCM_Task[CH_ID].ptr_BCMCallBackFu=TX_CBF;
		for(u16_BCM_CSCounter=ZERO;u16_BCM_CSCounter<Size;u16_BCM_CSCounter++)
     800:	2f 5f       	subi	r18, 0xFF	; 255
     802:	3f 4f       	sbci	r19, 0xFF	; 255
     804:	26 17       	cp	r18, r22
     806:	37 07       	cpc	r19, r23
     808:	60 f3       	brcs	.-40     	; 0x7e2 <BCM_Send+0x70>
/**
* @brief: This function sets the data to be sent.
*/
extern ERROR_STATE_t BCM_Send(uint8_t CH_ID, uint16_t Size,ptr_uint8_t DataArr,Ptr_VoidFuncVoid_t TX_CBF)
{
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	08 95       	ret
    uint16_t u16_BCM_CSCounter=ZERO;
	if(CH_ID>=COMM_NUMBERS)
	{
		u8_ErrorState =ERROR_NOK;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	08 95       	ret
	}
    else if(BCM_MODE_IDEAL!=gastr_BCM_Task[CH_ID].u8_BCMMode)
    {
        u8_ErrorState =ERROR_NOK;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	08 95       	ret
    }
    else if((Size>BCM_MAX_DATA_SIZE)||(Size<BCM_MIN_DATA_SIZE))
	{
		u8_ErrorState =ERROR_NOK;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	08 95       	ret
	}
    else if((NULL_PTR==DataArr)||(NULL_PTR==TX_CBF))
	{
		u8_ErrorState =ERROR_NOK;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	08 95       	ret
     81e:	81 e0       	ldi	r24, 0x01	; 1
		{
			gastr_BCM_Task[CH_ID].u8_BCMCS+=DataArr[u16_BCM_CSCounter];
		}
	}
    return u8_ErrorState;
}
     820:	08 95       	ret

00000822 <BCM_Receive>:
* @brief: This function sets up the receiving buffer.
*/
extern ERROR_STATE_t BCM_Receive(uint8_t CH_ID,uint16_t Size,ptr_uint8_t DataArr,Ptr_VoidFuncVoid_t RX_CBF)
{
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
	if(CH_ID>=COMM_NUMBERS)
     822:	83 30       	cpi	r24, 0x03	; 3
     824:	70 f5       	brcc	.+92     	; 0x882 <__stack+0x23>
	{
		u8_ErrorState =ERROR_NOK;
	}
	else if(BCM_MODE_IDEAL!=gastr_BCM_Task[CH_ID].u8_BCMMode)
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	ad e0       	ldi	r26, 0x0D	; 13
     82a:	a8 9f       	mul	r26, r24
     82c:	f0 01       	movw	r30, r0
     82e:	a9 9f       	mul	r26, r25
     830:	f0 0d       	add	r31, r0
     832:	11 24       	eor	r1, r1
     834:	e8 58       	subi	r30, 0x88	; 136
     836:	ff 4f       	sbci	r31, 0xFF	; 255
     838:	e1 81       	ldd	r30, Z+1	; 0x01
     83a:	e2 30       	cpi	r30, 0x02	; 2
     83c:	21 f5       	brne	.+72     	; 0x886 <__stack+0x27>
    {
        u8_ErrorState =ERROR_NOK;
    }
	else if((Size>BCM_MAX_DATA_SIZE)||(Size<BCM_MIN_DATA_SIZE))
     83e:	fb 01       	movw	r30, r22
     840:	31 97       	sbiw	r30, 0x01	; 1
     842:	e8 3e       	cpi	r30, 0xE8	; 232
     844:	f3 40       	sbci	r31, 0x03	; 3
     846:	08 f5       	brcc	.+66     	; 0x88a <__stack+0x2b>
	{
		u8_ErrorState =ERROR_NOK;
	}
    else if((NULL_PTR==DataArr)||(NULL_PTR==RX_CBF))
     848:	41 15       	cp	r20, r1
     84a:	51 05       	cpc	r21, r1
     84c:	01 f1       	breq	.+64     	; 0x88e <__stack+0x2f>
     84e:	21 15       	cp	r18, r1
     850:	31 05       	cpc	r19, r1
     852:	f9 f0       	breq	.+62     	; 0x892 <__stack+0x33>
    {
		 u8_ErrorState =ERROR_NOK;
	}
	else
	{
		gastr_BCM_Task[CH_ID].u8_BCMMode=BCM_MODE_RX;
     854:	ad e0       	ldi	r26, 0x0D	; 13
     856:	a8 9f       	mul	r26, r24
     858:	f0 01       	movw	r30, r0
     85a:	a9 9f       	mul	r26, r25
     85c:	f0 0d       	add	r31, r0
     85e:	11 24       	eor	r1, r1
     860:	e8 58       	subi	r30, 0x88	; 136
     862:	ff 4f       	sbci	r31, 0xFF	; 255
     864:	11 82       	std	Z+1, r1	; 0x01
		gastr_BCM_Task[CH_ID].u8_BCMCS=ZERO;
     866:	12 82       	std	Z+2, r1	; 0x02
		gastr_BCM_Task[CH_ID].u8_BCMState=BCM_RXSTATE_RECEIVING;
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	83 83       	std	Z+3, r24	; 0x03
		gastr_BCM_Task[CH_ID].u8_BCMPacketCounter=ZERO;
     86c:	14 82       	std	Z+4, r1	; 0x04
		gastr_BCM_Task[CH_ID].u16_BCMByteCoounter=ZERO;
     86e:	16 82       	std	Z+6, r1	; 0x06
     870:	15 82       	std	Z+5, r1	; 0x05
		gastr_BCM_Task[CH_ID].u16_BCMSize=Size;
     872:	70 87       	std	Z+8, r23	; 0x08
     874:	67 83       	std	Z+7, r22	; 0x07
		gastr_BCM_Task[CH_ID].ptr_BCMBuffer=DataArr;
     876:	52 87       	std	Z+10, r21	; 0x0a
     878:	41 87       	std	Z+9, r20	; 0x09
		gastr_BCM_Task[CH_ID].ptr_BCMCallBackFu=RX_CBF;
     87a:	34 87       	std	Z+12, r19	; 0x0c
     87c:	23 87       	std	Z+11, r18	; 0x0b
/**
* @brief: This function sets up the receiving buffer.
*/
extern ERROR_STATE_t BCM_Receive(uint8_t CH_ID,uint16_t Size,ptr_uint8_t DataArr,Ptr_VoidFuncVoid_t RX_CBF)
{
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	08 95       	ret
	if(CH_ID>=COMM_NUMBERS)
	{
		u8_ErrorState =ERROR_NOK;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	08 95       	ret
	}
	else if(BCM_MODE_IDEAL!=gastr_BCM_Task[CH_ID].u8_BCMMode)
    {
        u8_ErrorState =ERROR_NOK;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	08 95       	ret
    }
	else if((Size>BCM_MAX_DATA_SIZE)||(Size<BCM_MIN_DATA_SIZE))
	{
		u8_ErrorState =ERROR_NOK;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	08 95       	ret
	}
    else if((NULL_PTR==DataArr)||(NULL_PTR==RX_CBF))
    {
		 u8_ErrorState =ERROR_NOK;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	08 95       	ret
     892:	81 e0       	ldi	r24, 0x01	; 1
		gastr_BCM_Task[CH_ID].ptr_BCMBuffer=DataArr;
		gastr_BCM_Task[CH_ID].ptr_BCMCallBackFu=RX_CBF;

	}
    return u8_ErrorState;
}
     894:	08 95       	ret

00000896 <BCM_Get>:
* @brief: This function gets the data.
*/
extern ERROR_STATE_t BCM_Get(uint8_t CH_ID,ptr_STR_BCMTask_t* Task)
{
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
    if(NULL_PTR==Task)
     896:	61 15       	cp	r22, r1
     898:	71 05       	cpc	r23, r1
     89a:	69 f0       	breq	.+26     	; 0x8b6 <BCM_Get+0x20>
    {
        u8_ErrorState =ERROR_NOK;
    }
    else if(CH_ID>=COMM_NUMBERS)
     89c:	83 30       	cpi	r24, 0x03	; 3
     89e:	68 f4       	brcc	.+26     	; 0x8ba <BCM_Get+0x24>
	{
		u8_ErrorState =ERROR_NOK;
	}
	else
	{
	   *Task=&gastr_BCM_Task[CH_ID];
     8a0:	2d e0       	ldi	r18, 0x0D	; 13
     8a2:	82 9f       	mul	r24, r18
     8a4:	c0 01       	movw	r24, r0
     8a6:	11 24       	eor	r1, r1
     8a8:	88 58       	subi	r24, 0x88	; 136
     8aa:	9f 4f       	sbci	r25, 0xFF	; 255
     8ac:	fb 01       	movw	r30, r22
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	80 83       	st	Z, r24
/**
* @brief: This function gets the data.
*/
extern ERROR_STATE_t BCM_Get(uint8_t CH_ID,ptr_STR_BCMTask_t* Task)
{
    ERROR_STATE_t u8_ErrorState =ERROR_OK;
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	08 95       	ret
    if(NULL_PTR==Task)
    {
        u8_ErrorState =ERROR_NOK;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	08 95       	ret
    }
    else if(CH_ID>=COMM_NUMBERS)
	{
		u8_ErrorState =ERROR_NOK;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
	   *Task=&gastr_BCM_Task[CH_ID];
	}
    return u8_ErrorState;
}
     8bc:	08 95       	ret

000008be <UART_TX_ISR>:
* @brief: This function is ISR Function for UART Transmit.
*/
void UART_TX_ISR(void)
{
   /* Call Callback Function if set. */
   if(NULL_PTR != gptr_TxCallback[COMM_UART_CH])
     8be:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <gptr_TxCallback>
     8c2:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <gptr_TxCallback+0x1>
     8c6:	30 97       	sbiw	r30, 0x00	; 0
     8c8:	09 f0       	breq	.+2      	; 0x8cc <UART_TX_ISR+0xe>
   {
      gptr_TxCallback[COMM_UART_CH]();
     8ca:	09 95       	icall
     8cc:	08 95       	ret

000008ce <I2C_ISR>:
* @brief: This function is ISR Function for I2C.
*/
void I2C_ISR(void)
{
   /* Get I2C Status */
   I2C_Status(I2C_CH_0, &gu8_I2CStatus);
     8ce:	6c ed       	ldi	r22, 0xDC	; 220
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	0e 94 65 06 	call	0xcca	; 0xcca <I2C_Status>
   
   switch(gu8_I2CStatus)
     8d8:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <gu8_I2CStatus>
     8dc:	80 36       	cpi	r24, 0x60	; 96
     8de:	49 f1       	breq	.+82     	; 0x932 <I2C_ISR+0x64>
     8e0:	38 f4       	brcc	.+14     	; 0x8f0 <I2C_ISR+0x22>
     8e2:	88 31       	cpi	r24, 0x18	; 24
     8e4:	a9 f0       	breq	.+42     	; 0x910 <I2C_ISR+0x42>
     8e6:	88 32       	cpi	r24, 0x28	; 40
     8e8:	c9 f0       	breq	.+50     	; 0x91c <I2C_ISR+0x4e>
     8ea:	88 30       	cpi	r24, 0x08	; 8
     8ec:	c1 f5       	brne	.+112    	; 0x95e <I2C_ISR+0x90>
     8ee:	0b c0       	rjmp	.+22     	; 0x906 <I2C_ISR+0x38>
     8f0:	80 38       	cpi	r24, 0x80	; 128
     8f2:	19 f1       	breq	.+70     	; 0x93a <I2C_ISR+0x6c>
     8f4:	18 f4       	brcc	.+6      	; 0x8fc <I2C_ISR+0x2e>
     8f6:	80 37       	cpi	r24, 0x70	; 112
     8f8:	e1 f0       	breq	.+56     	; 0x932 <I2C_ISR+0x64>
     8fa:	08 95       	ret
     8fc:	80 39       	cpi	r24, 0x90	; 144
     8fe:	e9 f0       	breq	.+58     	; 0x93a <I2C_ISR+0x6c>
     900:	80 3a       	cpi	r24, 0xA0	; 160
     902:	51 f1       	breq	.+84     	; 0x958 <I2C_ISR+0x8a>
     904:	08 95       	ret
   {
      case I2C_STATUS_START:
         /* Send Slave Address */
         I2C_Write(I2C_CH_0, I2C_SLAVE_ADDR);
     906:	6c ec       	ldi	r22, 0xCC	; 204
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 3b 06 	call	0xc76	; 0xc76 <I2C_Write>
         break;
     90e:	08 95       	ret
      case I2C_STATUS_T_ACK_ADDR:
         /* Write Data */
         I2C_Write(I2C_CH_0, gu8_I2CData);
     910:	60 91 db 00 	lds	r22, 0x00DB	; 0x8000db <gu8_I2CData>
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	0e 94 3b 06 	call	0xc76	; 0xc76 <I2C_Write>
         break;
     91a:	08 95       	ret
      case I2C_STATUS_T_ACK_DATA:
         /* Send Stop Condition */
         I2C_Stop(I2C_CH_0);
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 57 06 	call	0xcae	; 0xcae <I2C_Stop>
         /* Call Callback Function if set. */
         if(NULL_PTR != gptr_TxCallback[COMM_I2C_CH])
     922:	e0 91 e9 00 	lds	r30, 0x00E9	; 0x8000e9 <gptr_TxCallback+0x4>
     926:	f0 91 ea 00 	lds	r31, 0x00EA	; 0x8000ea <gptr_TxCallback+0x5>
     92a:	30 97       	sbiw	r30, 0x00	; 0
     92c:	c1 f0       	breq	.+48     	; 0x95e <I2C_ISR+0x90>
         {
            gptr_TxCallback[COMM_I2C_CH]();
     92e:	09 95       	icall
     930:	08 95       	ret
         }
         break;
      case I2C_STATUS_R_ACK_ADDR:
      case I2C_STATUS_R_GENERAL_ADDR:
         I2C_ClearIntFlag(I2C_CH_0);
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 7d 06 	call	0xcfa	; 0xcfa <I2C_ClearIntFlag>
         break;
     938:	08 95       	ret
      case I2C_STATUS_R_ACK_DATA:
      case I2C_STATUS_R_GACK_DATA:
         /* Get Data From I2C Buffer. */
         
         I2C_ReadAck(I2C_CH_0, &gu8_I2CData);
     93a:	6b ed       	ldi	r22, 0xDB	; 219
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 46 06 	call	0xc8c	; 0xc8c <I2C_ReadAck>
         /* Call Callback Function if set. */
         if(NULL_PTR != gptr_RxCallback[COMM_I2C_CH])
     944:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <gptr_RxCallback+0x4>
     948:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <gptr_RxCallback+0x5>
     94c:	30 97       	sbiw	r30, 0x00	; 0
     94e:	39 f0       	breq	.+14     	; 0x95e <I2C_ISR+0x90>
         {
            gptr_RxCallback[COMM_I2C_CH](gu8_I2CData);
     950:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <gu8_I2CData>
     954:	09 95       	icall
     956:	08 95       	ret
         }
         break;
      case I2C_STATUS_R_STOP:
         I2C_ClearIntFlag(I2C_CH_0);
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <I2C_ClearIntFlag>
     95e:	08 95       	ret

00000960 <SPI_ISR>:
/**
* @brief: This function is ISR Function for SPI.
*/
void SPI_ISR(void)
{
   if( (SPI_CH_0_CONTROL_MASK & MASTER_SELECT) )
     960:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <SPI_CH_0_CONTROL_MASK>
     964:	84 ff       	sbrs	r24, 4
     966:	0f c0       	rjmp	.+30     	; 0x986 <SPI_ISR+0x26>
   {
      /* Unselect slave line */
      DIO_WritePin(SPI_CH_0_SS_CH_0_PORT, SPI_CH_0_SS_CH_0_PIN, PIN_HIGH);
     968:	41 e0       	ldi	r20, 0x01	; 1
     96a:	60 91 a7 00 	lds	r22, 0x00A7	; 0x8000a7 <SPI_CH_0_SS_CH_0_PIN>
     96e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <SPI_CH_0_SS_CH_0_PORT>
     972:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <DIO_WritePin>
      /* Call Callback Function if set. */
      if(NULL_PTR != gptr_TxCallback[COMM_SPI_CH])
     976:	e0 91 e7 00 	lds	r30, 0x00E7	; 0x8000e7 <gptr_TxCallback+0x2>
     97a:	f0 91 e8 00 	lds	r31, 0x00E8	; 0x8000e8 <gptr_TxCallback+0x3>
     97e:	30 97       	sbiw	r30, 0x00	; 0
     980:	81 f0       	breq	.+32     	; 0x9a2 <SPI_ISR+0x42>
      {
         gptr_TxCallback[COMM_SPI_CH]();
     982:	09 95       	icall
     984:	08 95       	ret
      }
   }
   else
   {
      /* Get Data From SPI Buffer. */
      SPI_GetData(SPI_CH_0, &gu8_SPIData);
     986:	6d ed       	ldi	r22, 0xDD	; 221
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <SPI_GetData>
      /* Call Callback Function if set. */
      if(NULL_PTR != gptr_RxCallback[COMM_SPI_CH])
     990:	e0 91 e1 00 	lds	r30, 0x00E1	; 0x8000e1 <gptr_RxCallback+0x2>
     994:	f0 91 e2 00 	lds	r31, 0x00E2	; 0x8000e2 <gptr_RxCallback+0x3>
     998:	30 97       	sbiw	r30, 0x00	; 0
     99a:	19 f0       	breq	.+6      	; 0x9a2 <SPI_ISR+0x42>
      {
         gptr_RxCallback[COMM_SPI_CH](gu8_SPIData);
     99c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <gu8_SPIData>
     9a0:	09 95       	icall
     9a2:	08 95       	ret

000009a4 <UART_RX_ISR>:
* @brief: This function is ISR Function for UART Receive.
*/
void UART_RX_ISR(void)
{
   /* Get Data From Uart Receive Buffer. */
   UART_GetData(UART_CH_0, &gu8_UARTData);
     9a4:	6e ed       	ldi	r22, 0xDE	; 222
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <UART_GetData>
   /* Call Callback Function if set. */
   if(NULL_PTR != gptr_RxCallback[COMM_UART_CH])
     9ae:	e0 91 df 00 	lds	r30, 0x00DF	; 0x8000df <gptr_RxCallback>
     9b2:	f0 91 e0 00 	lds	r31, 0x00E0	; 0x8000e0 <gptr_RxCallback+0x1>
     9b6:	30 97       	sbiw	r30, 0x00	; 0
     9b8:	19 f0       	breq	.+6      	; 0x9c0 <UART_RX_ISR+0x1c>
   {
      gptr_RxCallback[COMM_UART_CH](gu8_UARTData);
     9ba:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <gu8_UARTData>
     9be:	09 95       	icall
     9c0:	08 95       	ret

000009c2 <COMMProxy_Init>:
{
   /* Variable to store function error state. */
   ERROR_STATE_t Proxy_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
     9c2:	83 30       	cpi	r24, 0x03	; 3
     9c4:	08 f0       	brcs	.+2      	; 0x9c8 <COMMProxy_Init+0x6>
     9c6:	4c c0       	rjmp	.+152    	; 0xa60 <COMMProxy_Init+0x9e>
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
   }
   /* Validate that Channel is not initialized before. */
   else if(NOT_INIT != gu8_COMMInitCh[COMM_CH])
     9c8:	e8 2f       	mov	r30, r24
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	e5 51       	subi	r30, 0x15	; 21
     9ce:	ff 4f       	sbci	r31, 0xFF	; 255
     9d0:	90 81       	ld	r25, Z
     9d2:	91 11       	cpse	r25, r1
     9d4:	47 c0       	rjmp	.+142    	; 0xa64 <COMMProxy_Init+0xa2>
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
   }
   else
   {
      switch(COMM_CH)
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	f1 f0       	breq	.+60     	; 0xa16 <COMMProxy_Init+0x54>
     9da:	18 f0       	brcs	.+6      	; 0x9e2 <COMMProxy_Init+0x20>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	59 f1       	breq	.+86     	; 0xa36 <COMMProxy_Init+0x74>
     9e0:	43 c0       	rjmp	.+134    	; 0xa68 <COMMProxy_Init+0xa6>
      {
         case COMM_UART_CH:
            UART_Init(UART_CH_0);
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <UART_Init>
            Interrupt_Install(USART_TXC_VECTOR_NUMBER, UART_TX_ISR);
     9e8:	6f e5       	ldi	r22, 0x5F	; 95
     9ea:	74 e0       	ldi	r23, 0x04	; 4
     9ec:	8e e0       	ldi	r24, 0x0E	; 14
     9ee:	0e 94 8d 05 	call	0xb1a	; 0xb1a <Interrupt_Install>
            Interrupt_Install(USART_RXC_VECTOR_NUMBER, UART_RX_ISR);
     9f2:	62 ed       	ldi	r22, 0xD2	; 210
     9f4:	74 e0       	ldi	r23, 0x04	; 4
     9f6:	8c e0       	ldi	r24, 0x0C	; 12
     9f8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <Interrupt_Install>
            UART_EnableInterrupt(UART_CH_0, TX_INT);
     9fc:	60 e4       	ldi	r22, 0x40	; 64
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0e 94 3e 0a 	call	0x147c	; 0x147c <UART_EnableInterrupt>
            UART_EnableInterrupt(UART_CH_0, RX_INT);
     a04:	60 e8       	ldi	r22, 0x80	; 128
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 3e 0a 	call	0x147c	; 0x147c <UART_EnableInterrupt>
            gu8_COMMInitCh[COMM_UART_CH] = INIT;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <gu8_COMMInitCh>
            I2C_EnableInterrupt(I2C_CH_0);
            gu8_COMMInitCh[COMM_I2C_CH] = INIT;
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     a12:	80 e0       	ldi	r24, 0x00	; 0
            Interrupt_Install(USART_TXC_VECTOR_NUMBER, UART_TX_ISR);
            Interrupt_Install(USART_RXC_VECTOR_NUMBER, UART_RX_ISR);
            UART_EnableInterrupt(UART_CH_0, TX_INT);
            UART_EnableInterrupt(UART_CH_0, RX_INT);
            gu8_COMMInitCh[COMM_UART_CH] = INIT;
            break;
     a14:	08 95       	ret
         case COMM_SPI_CH:
            SPI_Init(SPI_CH_0);
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	0e 94 be 09 	call	0x137c	; 0x137c <SPI_Init>
            Interrupt_Install(SPI_STC_VECTOR_NUMBER, SPI_ISR);
     a1c:	60 eb       	ldi	r22, 0xB0	; 176
     a1e:	74 e0       	ldi	r23, 0x04	; 4
     a20:	8b e0       	ldi	r24, 0x0B	; 11
     a22:	0e 94 8d 05 	call	0xb1a	; 0xb1a <Interrupt_Install>
            SPI_EnableInterrupt(SPI_CH_0);
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	0e 94 fd 09 	call	0x13fa	; 0x13fa <SPI_EnableInterrupt>
            gu8_COMMInitCh[COMM_SPI_CH] = INIT;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <gu8_COMMInitCh+0x1>
            I2C_EnableInterrupt(I2C_CH_0);
            gu8_COMMInitCh[COMM_I2C_CH] = INIT;
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     a32:	80 e0       	ldi	r24, 0x00	; 0
         case COMM_SPI_CH:
            SPI_Init(SPI_CH_0);
            Interrupt_Install(SPI_STC_VECTOR_NUMBER, SPI_ISR);
            SPI_EnableInterrupt(SPI_CH_0);
            gu8_COMMInitCh[COMM_SPI_CH] = INIT;
            break;
     a34:	08 95       	ret
         case COMM_I2C_CH:
            I2C_Init(I2C_CH_0);
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 1c 06 	call	0xc38	; 0xc38 <I2C_Init>
            I2C_SetSlaveAddress(I2C_CH_0, I2C_CH_0_SLAVE_ADDR);
     a3c:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <I2C_CH_0_SLAVE_ADDR>
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 2b 06 	call	0xc56	; 0xc56 <I2C_SetSlaveAddress>
            Interrupt_Install(TWI_VECTOR_NUMBER, I2C_ISR);
     a46:	67 e6       	ldi	r22, 0x67	; 103
     a48:	74 e0       	ldi	r23, 0x04	; 4
     a4a:	82 e1       	ldi	r24, 0x12	; 18
     a4c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <Interrupt_Install>
            I2C_EnableInterrupt(I2C_CH_0);
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	0e 94 74 06 	call	0xce8	; 0xce8 <I2C_EnableInterrupt>
            gu8_COMMInitCh[COMM_I2C_CH] = INIT;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <gu8_COMMInitCh+0x2>
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     a5c:	80 e0       	ldi	r24, 0x00	; 0
            I2C_Init(I2C_CH_0);
            I2C_SetSlaveAddress(I2C_CH_0, I2C_CH_0_SLAVE_ADDR);
            Interrupt_Install(TWI_VECTOR_NUMBER, I2C_ISR);
            I2C_EnableInterrupt(I2C_CH_0);
            gu8_COMMInitCh[COMM_I2C_CH] = INIT;
            break;
     a5e:	08 95       	ret
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	08 95       	ret
   }
   /* Validate that Channel is not initialized before. */
   else if(NOT_INIT != gu8_COMMInitCh[COMM_CH])
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	08 95       	ret
            I2C_EnableInterrupt(I2C_CH_0);
            gu8_COMMInitCh[COMM_I2C_CH] = INIT;
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     a68:	80 e0       	ldi	r24, 0x00	; 0
   }
   
   /* Return function error state. */
   return Proxy_ErrorState;
}
     a6a:	08 95       	ret

00000a6c <COMMProxy_Send>:
* @param [in]  Data     -  Byte to send.
*
* @return function error state.
*/
ERROR_STATE_t COMMProxy_Send(uint8_t COMM_CH, uint8_t Data)
{
     a6c:	cf 93       	push	r28
   /* Variable to store function error state. */
   ERROR_STATE_t Proxy_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
     a6e:	83 30       	cpi	r24, 0x03	; 3
     a70:	38 f5       	brcc	.+78     	; 0xac0 <COMMProxy_Send+0x54>
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
   }
   /* Validate that Channel is Initialized. */
   else if(INIT != gu8_COMMInitCh[COMM_CH])
     a72:	e8 2f       	mov	r30, r24
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	e5 51       	subi	r30, 0x15	; 21
     a78:	ff 4f       	sbci	r31, 0xFF	; 255
     a7a:	90 81       	ld	r25, Z
     a7c:	91 30       	cpi	r25, 0x01	; 1
     a7e:	11 f5       	brne	.+68     	; 0xac4 <COMMProxy_Send+0x58>
     a80:	c6 2f       	mov	r28, r22
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
   }
   else
   {
      switch(COMM_CH)
     a82:	81 30       	cpi	r24, 0x01	; 1
     a84:	49 f0       	breq	.+18     	; 0xa98 <COMMProxy_Send+0x2c>
     a86:	18 f0       	brcs	.+6      	; 0xa8e <COMMProxy_Send+0x22>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	99 f0       	breq	.+38     	; 0xab2 <COMMProxy_Send+0x46>
     a8c:	1d c0       	rjmp	.+58     	; 0xac8 <COMMProxy_Send+0x5c>
      {
         /* Set Data On Bus */
         case COMM_UART_CH:
            UART_SetData(UART_CH_0, Data);
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 4d 0a 	call	0x149a	; 0x149a <UART_SetData>
            gu8_I2CData = Data;
            I2C_Start(I2C_CH_0);
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     a94:	80 e0       	ldi	r24, 0x00	; 0
      switch(COMM_CH)
      {
         /* Set Data On Bus */
         case COMM_UART_CH:
            UART_SetData(UART_CH_0, Data);
            break;
     a96:	19 c0       	rjmp	.+50     	; 0xaca <COMMProxy_Send+0x5e>
         case COMM_SPI_CH:
            /* select slave line */
            DIO_WritePin(SPI_CH_0_SS_CH_0_PORT, SPI_CH_0_SS_CH_0_PIN, PIN_LOW);
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	60 91 a7 00 	lds	r22, 0x00A7	; 0x8000a7 <SPI_CH_0_SS_CH_0_PIN>
     a9e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <SPI_CH_0_SS_CH_0_PORT>
     aa2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <DIO_WritePin>
            SPI_SetData(SPI_CH_0, Data);
     aa6:	6c 2f       	mov	r22, r28
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	0e 94 06 0a 	call	0x140c	; 0x140c <SPI_SetData>
            gu8_I2CData = Data;
            I2C_Start(I2C_CH_0);
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     aae:	80 e0       	ldi	r24, 0x00	; 0
            break;
         case COMM_SPI_CH:
            /* select slave line */
            DIO_WritePin(SPI_CH_0_SS_CH_0_PORT, SPI_CH_0_SS_CH_0_PIN, PIN_LOW);
            SPI_SetData(SPI_CH_0, Data);
            break;
     ab0:	0c c0       	rjmp	.+24     	; 0xaca <COMMProxy_Send+0x5e>
         case COMM_I2C_CH:
            gu8_I2CData = Data;
     ab2:	60 93 db 00 	sts	0x00DB, r22	; 0x8000db <gu8_I2CData>
            I2C_Start(I2C_CH_0);
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 31 06 	call	0xc62	; 0xc62 <I2C_Start>
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     abc:	80 e0       	ldi	r24, 0x00	; 0
            SPI_SetData(SPI_CH_0, Data);
            break;
         case COMM_I2C_CH:
            gu8_I2CData = Data;
            I2C_Start(I2C_CH_0);
            break;
     abe:	05 c0       	rjmp	.+10     	; 0xaca <COMMProxy_Send+0x5e>
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	03 c0       	rjmp	.+6      	; 0xaca <COMMProxy_Send+0x5e>
   }
   /* Validate that Channel is Initialized. */
   else if(INIT != gu8_COMMInitCh[COMM_CH])
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	01 c0       	rjmp	.+2      	; 0xaca <COMMProxy_Send+0x5e>
            gu8_I2CData = Data;
            I2C_Start(I2C_CH_0);
            break;
      }
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     ac8:	80 e0       	ldi	r24, 0x00	; 0
   }
   
   /* Return function error state. */
   return Proxy_ErrorState;
}
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <COMMProxy_SetTxCallback>:
{
   /* Variable to store function error state. */
   ERROR_STATE_t Proxy_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
     ace:	83 30       	cpi	r24, 0x03	; 3
     ad0:	68 f4       	brcc	.+26     	; 0xaec <COMMProxy_SetTxCallback+0x1e>
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
   }
   else if(NULL_PTR == Callback)
     ad2:	61 15       	cp	r22, r1
     ad4:	71 05       	cpc	r23, r1
     ad6:	61 f0       	breq	.+24     	; 0xaf0 <COMMProxy_SetTxCallback+0x22>
      Proxy_ErrorState = ERROR_NOK;
   }
   else
   {  
      /* Set Callback Function */
      gptr_TxCallback[COMM_CH] = Callback;
     ad8:	e8 2f       	mov	r30, r24
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	ee 0f       	add	r30, r30
     ade:	ff 1f       	adc	r31, r31
     ae0:	eb 51       	subi	r30, 0x1B	; 27
     ae2:	ff 4f       	sbci	r31, 0xFF	; 255
     ae4:	71 83       	std	Z+1, r23	; 0x01
     ae6:	60 83       	st	Z, r22
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 95       	ret
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	08 95       	ret
   }
   else if(NULL_PTR == Callback)
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     af0:	81 e0       	ldi	r24, 0x01	; 1
      Proxy_ErrorState = ERROR_OK;
   }
   
   /* Return function error state. */
   return Proxy_ErrorState;
}
     af2:	08 95       	ret

00000af4 <COMMProxy_SetRxCallback>:
{
   /* Variable to store function error state. */
   ERROR_STATE_t Proxy_ErrorState;
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
     af4:	83 30       	cpi	r24, 0x03	; 3
     af6:	68 f4       	brcc	.+26     	; 0xb12 <COMMProxy_SetRxCallback+0x1e>
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
   }
   else if(NULL_PTR == Callback)
     af8:	61 15       	cp	r22, r1
     afa:	71 05       	cpc	r23, r1
     afc:	61 f0       	breq	.+24     	; 0xb16 <COMMProxy_SetRxCallback+0x22>
      Proxy_ErrorState = ERROR_NOK;
   }
   else
   {
      /* Set Callback Function */
      gptr_RxCallback[COMM_CH] = Callback;
     afe:	e8 2f       	mov	r30, r24
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	ee 0f       	add	r30, r30
     b04:	ff 1f       	adc	r31, r31
     b06:	e1 52       	subi	r30, 0x21	; 33
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	71 83       	std	Z+1, r23	; 0x01
     b0c:	60 83       	st	Z, r22
      /* Set Function Error State to OK */
      Proxy_ErrorState = ERROR_OK;
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	08 95       	ret
   
   /* Validate that Valid Parameters are passed. */
   if(COMM_CH >= COMM_INVALID_CH)
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	08 95       	ret
   }
   else if(NULL_PTR == Callback)
   {
      /* Set Function Error State to Not OK */
      Proxy_ErrorState = ERROR_NOK;
     b16:	81 e0       	ldi	r24, 0x01	; 1
      Proxy_ErrorState = ERROR_OK;
   }
   
   /* Return function error state. */
   return Proxy_ErrorState;
     b18:	08 95       	ret

00000b1a <Interrupt_Install>:
*/
void Interrupt_Install(uint8_t Vector_No, Ptr_VoidFuncVoid_t Callback)
{
   /* Validate Before Changing ISR Vector Table */
	if( 
      (NULL_PTR == aptr_OldVectors[Vector_No]) && (NULL_PTR != Callback) && 
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	f9 01       	movw	r30, r18
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	e2 51       	subi	r30, 0x12	; 18
     b26:	ff 4f       	sbci	r31, 0xFF	; 255
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
* @param [in]  Callback    -  New Callback Function of ISR.
*/
void Interrupt_Install(uint8_t Vector_No, Ptr_VoidFuncVoid_t Callback)
{
   /* Validate Before Changing ISR Vector Table */
	if( 
     b2c:	45 2b       	or	r20, r21
     b2e:	99 f4       	brne	.+38     	; 0xb56 <Interrupt_Install+0x3c>
      (NULL_PTR == aptr_OldVectors[Vector_No]) && (NULL_PTR != Callback) && 
     b30:	61 15       	cp	r22, r1
     b32:	71 05       	cpc	r23, r1
     b34:	81 f0       	breq	.+32     	; 0xb56 <Interrupt_Install+0x3c>
      (Vector_No >= IRQ_MIN_VECTOR_NUMBER) &&  (Vector_No <= IRQ_MAX_VECTOR_NUMBER)
     b36:	84 31       	cpi	r24, 0x14	; 20
     b38:	70 f4       	brcc	.+28     	; 0xb56 <Interrupt_Install+0x3c>
     )
	{
      /* Store The Current ISR in a History Table. */
		aptr_OldVectors[Vector_No] = aptr_ISRAddress[Vector_No];
     b3a:	22 0f       	add	r18, r18
     b3c:	33 1f       	adc	r19, r19
     b3e:	f9 01       	movw	r30, r18
     b40:	ea 5e       	subi	r30, 0xEA	; 234
     b42:	fe 4f       	sbci	r31, 0xFE	; 254
     b44:	80 81       	ld	r24, Z
     b46:	91 81       	ldd	r25, Z+1	; 0x01
     b48:	d9 01       	movw	r26, r18
     b4a:	a2 51       	subi	r26, 0x12	; 18
     b4c:	bf 4f       	sbci	r27, 0xFF	; 255
     b4e:	8d 93       	st	X+, r24
     b50:	9c 93       	st	X, r25
      /* Set the new Callback in the ISR. */
      aptr_ISRAddress[Vector_No] = Callback;
     b52:	71 83       	std	Z+1, r23	; 0x01
     b54:	60 83       	st	Z, r22
     b56:	08 95       	ret

00000b58 <DIO_SetPinDirection>:
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
}
     b58:	68 30       	cpi	r22, 0x08	; 8
     b5a:	80 f5       	brcc	.+96     	; 0xbbc <DIO_SetPinDirection+0x64>
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	79 f0       	breq	.+30     	; 0xb7e <DIO_SetPinDirection+0x26>
     b60:	28 f0       	brcs	.+10     	; 0xb6c <DIO_SetPinDirection+0x14>
     b62:	82 30       	cpi	r24, 0x02	; 2
     b64:	31 f0       	breq	.+12     	; 0xb72 <DIO_SetPinDirection+0x1a>
     b66:	83 30       	cpi	r24, 0x03	; 3
     b68:	39 f0       	breq	.+14     	; 0xb78 <DIO_SetPinDirection+0x20>
     b6a:	2a c0       	rjmp	.+84     	; 0xbc0 <DIO_SetPinDirection+0x68>
     b6c:	ea e3       	ldi	r30, 0x3A	; 58
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	08 c0       	rjmp	.+16     	; 0xb82 <DIO_SetPinDirection+0x2a>
     b72:	e4 e3       	ldi	r30, 0x34	; 52
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	05 c0       	rjmp	.+10     	; 0xb82 <DIO_SetPinDirection+0x2a>
     b78:	e1 e3       	ldi	r30, 0x31	; 49
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <DIO_SetPinDirection+0x2a>
     b7e:	e7 e3       	ldi	r30, 0x37	; 55
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	41 30       	cpi	r20, 0x01	; 1
     b84:	61 f4       	brne	.+24     	; 0xb9e <DIO_SetPinDirection+0x46>
     b86:	20 81       	ld	r18, Z
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <DIO_SetPinDirection+0x3a>
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	6a 95       	dec	r22
     b94:	e2 f7       	brpl	.-8      	; 0xb8e <DIO_SetPinDirection+0x36>
     b96:	82 2b       	or	r24, r18
     b98:	80 83       	st	Z, r24
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	08 95       	ret
     b9e:	41 11       	cpse	r20, r1
     ba0:	11 c0       	rjmp	.+34     	; 0xbc4 <DIO_SetPinDirection+0x6c>
     ba2:	20 81       	ld	r18, Z
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <DIO_SetPinDirection+0x56>
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	6a 95       	dec	r22
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <DIO_SetPinDirection+0x52>
     bb2:	80 95       	com	r24
     bb4:	82 23       	and	r24, r18
     bb6:	80 83       	st	Z, r24
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	08 95       	ret
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	08 95       	ret
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	08 95       	ret
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	08 95       	ret

00000bc8 <DIO_WritePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
     bc8:	68 30       	cpi	r22, 0x08	; 8
     bca:	80 f5       	brcc	.+96     	; 0xc2c <DIO_WritePin+0x64>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data pointer according to the required port. */
   switch(port)
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	79 f0       	breq	.+30     	; 0xbee <DIO_WritePin+0x26>
     bd0:	28 f0       	brcs	.+10     	; 0xbdc <DIO_WritePin+0x14>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	31 f0       	breq	.+12     	; 0xbe2 <DIO_WritePin+0x1a>
     bd6:	83 30       	cpi	r24, 0x03	; 3
     bd8:	39 f0       	breq	.+14     	; 0xbe8 <DIO_WritePin+0x20>
     bda:	2a c0       	rjmp	.+84     	; 0xc30 <DIO_WritePin+0x68>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
     bdc:	eb e3       	ldi	r30, 0x3B	; 59
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	08 c0       	rjmp	.+16     	; 0xbf2 <DIO_WritePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
     be2:	e5 e3       	ldi	r30, 0x35	; 53
     be4:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     be6:	05 c0       	rjmp	.+10     	; 0xbf2 <DIO_WritePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
     be8:	e2 e3       	ldi	r30, 0x32	; 50
     bea:	f0 e0       	ldi	r31, 0x00	; 0
         break;
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <DIO_WritePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
     bee:	e8 e3       	ldi	r30, 0x38	; 56
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   /* set or clear value in the pin. */
   if(HIGH == data)
     bf2:	41 30       	cpi	r20, 0x01	; 1
     bf4:	61 f4       	brne	.+24     	; 0xc0e <DIO_WritePin+0x46>
   {
      SET_BIT(*prt_port_data,pin);
     bf6:	20 81       	ld	r18, Z
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <DIO_WritePin+0x3a>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	6a 95       	dec	r22
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <DIO_WritePin+0x36>
     c06:	82 2b       	or	r24, r18
     c08:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	08 95       	ret
   /* set or clear value in the pin. */
   if(HIGH == data)
   {
      SET_BIT(*prt_port_data,pin);
   }
   else if(LOW == data)
     c0e:	41 11       	cpse	r20, r1
     c10:	11 c0       	rjmp	.+34     	; 0xc34 <DIO_WritePin+0x6c>
   {
      CLEAR_BIT(*prt_port_data,pin);
     c12:	20 81       	ld	r18, Z
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <DIO_WritePin+0x56>
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	6a 95       	dec	r22
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <DIO_WritePin+0x52>
     c22:	80 95       	com	r24
     c24:	82 23       	and	r24, r18
     c26:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	08 95       	ret
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
     c30:	83 e0       	ldi	r24, 0x03	; 3
     c32:	08 95       	ret
      CLEAR_BIT(*prt_port_data,pin);
   }
   /* if data is invalid. */
   else
   {
      return E_DIO_INVALID_WRITE_DATA;
     c34:	84 e0       	ldi	r24, 0x04	; 4
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
     c36:	08 95       	ret

00000c38 <I2C_Init>:
   /* set callback function to the required channel */
   g_Callback[u8_I2CIndex] = Callback;
   
   /* return success status */
   return E_I2C_SUCCESS;
}
     c38:	81 11       	cpse	r24, r1
     c3a:	0b c0       	rjmp	.+22     	; 0xc52 <I2C_Init+0x1a>
     c3c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <I2C_CH_0_PRESCALER>
     c40:	81 b9       	out	0x01, r24	; 1
     c42:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <I2C_CH_0_BIT_RATE>
     c46:	80 b9       	out	0x00, r24	; 0
     c48:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <I2C_CH_0_CONTROL_MASK>
     c4c:	86 bf       	out	0x36, r24	; 54
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	08 95       	ret
     c52:	82 e0       	ldi	r24, 0x02	; 2
     c54:	08 95       	ret

00000c56 <I2C_SetSlaveAddress>:
     c56:	81 11       	cpse	r24, r1
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <I2C_SetSlaveAddress+0x8>
     c5a:	62 b9       	out	0x02, r22	; 2
     c5c:	08 95       	ret
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	08 95       	ret

00000c62 <I2C_Start>:
     c62:	81 11       	cpse	r24, r1
     c64:	06 c0       	rjmp	.+12     	; 0xc72 <I2C_Start+0x10>
     c66:	86 b7       	in	r24, 0x36	; 54
     c68:	83 70       	andi	r24, 0x03	; 3
     c6a:	84 6a       	ori	r24, 0xA4	; 164
     c6c:	86 bf       	out	0x36, r24	; 54
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	08 95       	ret
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	08 95       	ret

00000c76 <I2C_Write>:
     c76:	81 11       	cpse	r24, r1
     c78:	07 c0       	rjmp	.+14     	; 0xc88 <I2C_Write+0x12>
     c7a:	63 b9       	out	0x03, r22	; 3
     c7c:	86 b7       	in	r24, 0x36	; 54
     c7e:	83 70       	andi	r24, 0x03	; 3
     c80:	84 68       	ori	r24, 0x84	; 132
     c82:	86 bf       	out	0x36, r24	; 54
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	08 95       	ret
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	08 95       	ret

00000c8c <I2C_ReadAck>:
     c8c:	61 15       	cp	r22, r1
     c8e:	71 05       	cpc	r23, r1
     c90:	51 f0       	breq	.+20     	; 0xca6 <I2C_ReadAck+0x1a>
     c92:	81 11       	cpse	r24, r1
     c94:	0a c0       	rjmp	.+20     	; 0xcaa <I2C_ReadAck+0x1e>
     c96:	86 b7       	in	r24, 0x36	; 54
     c98:	80 6c       	ori	r24, 0xC0	; 192
     c9a:	86 bf       	out	0x36, r24	; 54
     c9c:	83 b1       	in	r24, 0x03	; 3
     c9e:	fb 01       	movw	r30, r22
     ca0:	80 83       	st	Z, r24
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	08 95       	ret
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	08 95       	ret
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	08 95       	ret

00000cae <I2C_Stop>:
     cae:	81 11       	cpse	r24, r1
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <I2C_Stop+0x18>
     cb2:	86 b7       	in	r24, 0x36	; 54
     cb4:	83 70       	andi	r24, 0x03	; 3
     cb6:	84 69       	ori	r24, 0x94	; 148
     cb8:	86 bf       	out	0x36, r24	; 54
     cba:	96 b7       	in	r25, 0x36	; 54
     cbc:	89 2f       	mov	r24, r25
     cbe:	80 71       	andi	r24, 0x10	; 16
     cc0:	94 fd       	sbrc	r25, 4
     cc2:	fb cf       	rjmp	.-10     	; 0xcba <I2C_Stop+0xc>
     cc4:	08 95       	ret
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	08 95       	ret

00000cca <I2C_Status>:
     cca:	61 15       	cp	r22, r1
     ccc:	71 05       	cpc	r23, r1
     cce:	41 f0       	breq	.+16     	; 0xce0 <I2C_Status+0x16>
     cd0:	81 11       	cpse	r24, r1
     cd2:	08 c0       	rjmp	.+16     	; 0xce4 <I2C_Status+0x1a>
     cd4:	81 b1       	in	r24, 0x01	; 1
     cd6:	88 7f       	andi	r24, 0xF8	; 248
     cd8:	fb 01       	movw	r30, r22
     cda:	80 83       	st	Z, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	08 95       	ret
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	08 95       	ret
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	08 95       	ret

00000ce8 <I2C_EnableInterrupt>:
     ce8:	81 11       	cpse	r24, r1
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <I2C_EnableInterrupt+0xe>
     cec:	86 b7       	in	r24, 0x36	; 54
     cee:	81 60       	ori	r24, 0x01	; 1
     cf0:	86 bf       	out	0x36, r24	; 54
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	08 95       	ret
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	08 95       	ret

00000cfa <I2C_ClearIntFlag>:
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   /* get the required I2C data */
   switch(I2C_CH)
     cfa:	81 11       	cpse	r24, r1
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <I2C_ClearIntFlag+0xe>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* clear interrupt flag */
   *ptr_I2CControlR |= I2C_INTERRUPT_FLAG;
     cfe:	86 b7       	in	r24, 0x36	; 54
     d00:	80 68       	ori	r24, 0x80	; 128
     d02:	86 bf       	out	0x36, r24	; 54
   
   /* return success message */
   return E_I2C_SUCCESS;
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     d08:	82 e0       	ldi	r24, 0x02	; 2
   /* clear interrupt flag */
   *ptr_I2CControlR |= I2C_INTERRUPT_FLAG;
   
   /* return success message */
   return E_I2C_SUCCESS;
     d0a:	08 95       	ret

00000d0c <INTERRUPTS_Enable>:
/**
* @brief: This function disables global interrupts.
*/
void INTERRUPTS_Disable(void)
{
   CLEAR_BIT(SREG, BIT7);
     d0c:	8f b7       	in	r24, 0x3f	; 63
     d0e:	80 68       	ori	r24, 0x80	; 128
     d10:	8f bf       	out	0x3f, r24	; 63
     d12:	08 95       	ret

00000d14 <__vector_1>:

/**
* @brief: INT0 ISR.
*/
ISR(INT0_IRQ)
{
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
   if(aptr_ISRAddress[INT0_VECTOR_NUMBER] != NULL_PTR)
     d36:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <aptr_ISRAddress>
     d3a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <aptr_ISRAddress+0x1>
     d3e:	30 97       	sbiw	r30, 0x00	; 0
     d40:	09 f0       	breq	.+2      	; 0xd44 <__vector_1+0x30>
   {
      aptr_ISRAddress[INT0_VECTOR_NUMBER]();
     d42:	09 95       	icall
   }
}
     d44:	ff 91       	pop	r31
     d46:	ef 91       	pop	r30
     d48:	bf 91       	pop	r27
     d4a:	af 91       	pop	r26
     d4c:	9f 91       	pop	r25
     d4e:	8f 91       	pop	r24
     d50:	7f 91       	pop	r23
     d52:	6f 91       	pop	r22
     d54:	5f 91       	pop	r21
     d56:	4f 91       	pop	r20
     d58:	3f 91       	pop	r19
     d5a:	2f 91       	pop	r18
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f 90       	pop	r0
     d62:	1f 90       	pop	r1
     d64:	18 95       	reti

00000d66 <__vector_2>:

/**
* @brief: INT1 ISR.
*/
ISR(INT1_IRQ)
{
     d66:	1f 92       	push	r1
     d68:	0f 92       	push	r0
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	0f 92       	push	r0
     d6e:	11 24       	eor	r1, r1
     d70:	2f 93       	push	r18
     d72:	3f 93       	push	r19
     d74:	4f 93       	push	r20
     d76:	5f 93       	push	r21
     d78:	6f 93       	push	r22
     d7a:	7f 93       	push	r23
     d7c:	8f 93       	push	r24
     d7e:	9f 93       	push	r25
     d80:	af 93       	push	r26
     d82:	bf 93       	push	r27
     d84:	ef 93       	push	r30
     d86:	ff 93       	push	r31
   if(aptr_ISRAddress[INT1_VECTOR_NUMBER] != NULL_PTR)
     d88:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <aptr_ISRAddress+0x2>
     d8c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <aptr_ISRAddress+0x3>
     d90:	30 97       	sbiw	r30, 0x00	; 0
     d92:	09 f0       	breq	.+2      	; 0xd96 <__vector_2+0x30>
   {
      aptr_ISRAddress[INT1_VECTOR_NUMBER]();
     d94:	09 95       	icall
   }
}
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	bf 91       	pop	r27
     d9c:	af 91       	pop	r26
     d9e:	9f 91       	pop	r25
     da0:	8f 91       	pop	r24
     da2:	7f 91       	pop	r23
     da4:	6f 91       	pop	r22
     da6:	5f 91       	pop	r21
     da8:	4f 91       	pop	r20
     daa:	3f 91       	pop	r19
     dac:	2f 91       	pop	r18
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <__vector_3>:

/**
* @brief: INT2 ISR.
*/
ISR(INT2_IRQ)
{
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	2f 93       	push	r18
     dc4:	3f 93       	push	r19
     dc6:	4f 93       	push	r20
     dc8:	5f 93       	push	r21
     dca:	6f 93       	push	r22
     dcc:	7f 93       	push	r23
     dce:	8f 93       	push	r24
     dd0:	9f 93       	push	r25
     dd2:	af 93       	push	r26
     dd4:	bf 93       	push	r27
     dd6:	ef 93       	push	r30
     dd8:	ff 93       	push	r31
   if(aptr_ISRAddress[INT2_VECTOR_NUMBER] != NULL_PTR)
     dda:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <aptr_ISRAddress+0x4>
     dde:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <aptr_ISRAddress+0x5>
     de2:	30 97       	sbiw	r30, 0x00	; 0
     de4:	09 f0       	breq	.+2      	; 0xde8 <__vector_3+0x30>
   {
      aptr_ISRAddress[INT2_VECTOR_NUMBER]();
     de6:	09 95       	icall
   }
}
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <__vector_4>:

/**
* @brief: TIMER2_COMP ISR.
*/
ISR(TIMER2_COMP_IRQ)
{
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER2_COMP_VECTOR_NUMBER] != NULL_PTR)
     e2c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <aptr_ISRAddress+0x6>
     e30:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <aptr_ISRAddress+0x7>
     e34:	30 97       	sbiw	r30, 0x00	; 0
     e36:	09 f0       	breq	.+2      	; 0xe3a <__vector_4+0x30>
   {
      aptr_ISRAddress[TIMER2_COMP_VECTOR_NUMBER]();
     e38:	09 95       	icall
   }
}
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <__vector_5>:

/**
* @brief: TIMER2_OVF ISR.
*/
ISR(TIMER2_OVF_IRQ)
{
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	2f 93       	push	r18
     e68:	3f 93       	push	r19
     e6a:	4f 93       	push	r20
     e6c:	5f 93       	push	r21
     e6e:	6f 93       	push	r22
     e70:	7f 93       	push	r23
     e72:	8f 93       	push	r24
     e74:	9f 93       	push	r25
     e76:	af 93       	push	r26
     e78:	bf 93       	push	r27
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER2_OVF_VECTOR_NUMBER] != NULL_PTR)
     e7e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <aptr_ISRAddress+0x8>
     e82:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <aptr_ISRAddress+0x9>
     e86:	30 97       	sbiw	r30, 0x00	; 0
     e88:	09 f0       	breq	.+2      	; 0xe8c <__vector_5+0x30>
   {
      aptr_ISRAddress[TIMER2_OVF_VECTOR_NUMBER]();
     e8a:	09 95       	icall
   }
}
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_6>:

/**
* @brief: TIMER1_CAPT ISR.
*/
ISR(TIMER1_CAPT_IRQ)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	2f 93       	push	r18
     eba:	3f 93       	push	r19
     ebc:	4f 93       	push	r20
     ebe:	5f 93       	push	r21
     ec0:	6f 93       	push	r22
     ec2:	7f 93       	push	r23
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	af 93       	push	r26
     eca:	bf 93       	push	r27
     ecc:	ef 93       	push	r30
     ece:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_CAPT_VECTOR_NUMBER] != NULL_PTR)
     ed0:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <aptr_ISRAddress+0xa>
     ed4:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <aptr_ISRAddress+0xb>
     ed8:	30 97       	sbiw	r30, 0x00	; 0
     eda:	09 f0       	breq	.+2      	; 0xede <__vector_6+0x30>
   {
      aptr_ISRAddress[TIMER1_CAPT_VECTOR_NUMBER]();
     edc:	09 95       	icall
   }
}
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	bf 91       	pop	r27
     ee4:	af 91       	pop	r26
     ee6:	9f 91       	pop	r25
     ee8:	8f 91       	pop	r24
     eea:	7f 91       	pop	r23
     eec:	6f 91       	pop	r22
     eee:	5f 91       	pop	r21
     ef0:	4f 91       	pop	r20
     ef2:	3f 91       	pop	r19
     ef4:	2f 91       	pop	r18
     ef6:	0f 90       	pop	r0
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	0f 90       	pop	r0
     efc:	1f 90       	pop	r1
     efe:	18 95       	reti

00000f00 <__vector_7>:

/**
* @brief: TIMER1_COMPA ISR.
*/
ISR(TIMER1_COMPA_IRQ)
{
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	0f 92       	push	r0
     f08:	11 24       	eor	r1, r1
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_COMPA_VECTOR_NUMBER] != NULL_PTR)
     f22:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <aptr_ISRAddress+0xc>
     f26:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <aptr_ISRAddress+0xd>
     f2a:	30 97       	sbiw	r30, 0x00	; 0
     f2c:	09 f0       	breq	.+2      	; 0xf30 <__vector_7+0x30>
   {
      aptr_ISRAddress[TIMER1_COMPA_VECTOR_NUMBER]();
     f2e:	09 95       	icall
   }
}
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	7f 91       	pop	r23
     f3e:	6f 91       	pop	r22
     f40:	5f 91       	pop	r21
     f42:	4f 91       	pop	r20
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <__vector_8>:

/**
* @brief: TIMER1_COMPB ISR.
*/
ISR(TIMER1_COMPB_IRQ)
{
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	11 24       	eor	r1, r1
     f5c:	2f 93       	push	r18
     f5e:	3f 93       	push	r19
     f60:	4f 93       	push	r20
     f62:	5f 93       	push	r21
     f64:	6f 93       	push	r22
     f66:	7f 93       	push	r23
     f68:	8f 93       	push	r24
     f6a:	9f 93       	push	r25
     f6c:	af 93       	push	r26
     f6e:	bf 93       	push	r27
     f70:	ef 93       	push	r30
     f72:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_COMPB_VECTOR_NUMBER] != NULL_PTR)
     f74:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <aptr_ISRAddress+0xe>
     f78:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <aptr_ISRAddress+0xf>
     f7c:	30 97       	sbiw	r30, 0x00	; 0
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__vector_8+0x30>
   {
      aptr_ISRAddress[TIMER1_COMPB_VECTOR_NUMBER]();
     f80:	09 95       	icall
   }
}
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	0f 90       	pop	r0
     fa0:	1f 90       	pop	r1
     fa2:	18 95       	reti

00000fa4 <__vector_9>:

/**
* @brief: TIMER1_OVF ISR.
*/
ISR(TIMER1_OVF_IRQ)
{
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	2f 93       	push	r18
     fb0:	3f 93       	push	r19
     fb2:	4f 93       	push	r20
     fb4:	5f 93       	push	r21
     fb6:	6f 93       	push	r22
     fb8:	7f 93       	push	r23
     fba:	8f 93       	push	r24
     fbc:	9f 93       	push	r25
     fbe:	af 93       	push	r26
     fc0:	bf 93       	push	r27
     fc2:	ef 93       	push	r30
     fc4:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_OVF_VECTOR_NUMBER] != NULL_PTR)
     fc6:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <aptr_ISRAddress+0x10>
     fca:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <aptr_ISRAddress+0x11>
     fce:	30 97       	sbiw	r30, 0x00	; 0
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <__vector_9+0x30>
   {
      aptr_ISRAddress[TIMER1_OVF_VECTOR_NUMBER]();
     fd2:	09 95       	icall
   }
}
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <__vector_10>:

/**
* @brief: TIMER0_COMP ISR.
*/
ISR(TIMER0_COMP_IRQ)
{
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER0_COMP_VECTOR_NUMBER] != NULL_PTR)
    1018:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <aptr_ISRAddress+0x12>
    101c:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <aptr_ISRAddress+0x13>
    1020:	30 97       	sbiw	r30, 0x00	; 0
    1022:	09 f0       	breq	.+2      	; 0x1026 <__vector_10+0x30>
   {
      aptr_ISRAddress[TIMER0_COMP_VECTOR_NUMBER]();
    1024:	09 95       	icall
   }
}
    1026:	ff 91       	pop	r31
    1028:	ef 91       	pop	r30
    102a:	bf 91       	pop	r27
    102c:	af 91       	pop	r26
    102e:	9f 91       	pop	r25
    1030:	8f 91       	pop	r24
    1032:	7f 91       	pop	r23
    1034:	6f 91       	pop	r22
    1036:	5f 91       	pop	r21
    1038:	4f 91       	pop	r20
    103a:	3f 91       	pop	r19
    103c:	2f 91       	pop	r18
    103e:	0f 90       	pop	r0
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	0f 90       	pop	r0
    1044:	1f 90       	pop	r1
    1046:	18 95       	reti

00001048 <__vector_11>:

/**
* @brief: TIMER0_OVF ISR.
*/
ISR(TIMER0_OVF_IRQ)
{
    1048:	1f 92       	push	r1
    104a:	0f 92       	push	r0
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	0f 92       	push	r0
    1050:	11 24       	eor	r1, r1
    1052:	2f 93       	push	r18
    1054:	3f 93       	push	r19
    1056:	4f 93       	push	r20
    1058:	5f 93       	push	r21
    105a:	6f 93       	push	r22
    105c:	7f 93       	push	r23
    105e:	8f 93       	push	r24
    1060:	9f 93       	push	r25
    1062:	af 93       	push	r26
    1064:	bf 93       	push	r27
    1066:	ef 93       	push	r30
    1068:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER0_OVF_VECTOR_NUMBER] != NULL_PTR)
    106a:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <aptr_ISRAddress+0x14>
    106e:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <aptr_ISRAddress+0x15>
    1072:	30 97       	sbiw	r30, 0x00	; 0
    1074:	09 f0       	breq	.+2      	; 0x1078 <__vector_11+0x30>
   {
      aptr_ISRAddress[TIMER0_OVF_VECTOR_NUMBER]();
    1076:	09 95       	icall
   }
}
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	4f 91       	pop	r20
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	0f 90       	pop	r0
    1096:	1f 90       	pop	r1
    1098:	18 95       	reti

0000109a <__vector_12>:

/**
* @brief: SPI_STC ISR.
*/
ISR(SPI_STC_IRQ)
{
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	2f 93       	push	r18
    10a6:	3f 93       	push	r19
    10a8:	4f 93       	push	r20
    10aa:	5f 93       	push	r21
    10ac:	6f 93       	push	r22
    10ae:	7f 93       	push	r23
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31
   if(aptr_ISRAddress[SPI_STC_VECTOR_NUMBER] != NULL_PTR)
    10bc:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <aptr_ISRAddress+0x16>
    10c0:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <aptr_ISRAddress+0x17>
    10c4:	30 97       	sbiw	r30, 0x00	; 0
    10c6:	09 f0       	breq	.+2      	; 0x10ca <__vector_12+0x30>
   {
      aptr_ISRAddress[SPI_STC_VECTOR_NUMBER]();
    10c8:	09 95       	icall
   }
}
    10ca:	ff 91       	pop	r31
    10cc:	ef 91       	pop	r30
    10ce:	bf 91       	pop	r27
    10d0:	af 91       	pop	r26
    10d2:	9f 91       	pop	r25
    10d4:	8f 91       	pop	r24
    10d6:	7f 91       	pop	r23
    10d8:	6f 91       	pop	r22
    10da:	5f 91       	pop	r21
    10dc:	4f 91       	pop	r20
    10de:	3f 91       	pop	r19
    10e0:	2f 91       	pop	r18
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <__vector_13>:

/**
* @brief: USART_RXC ISR.
*/
ISR(USART_RXC_IRQ)
{
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	2f 93       	push	r18
    10f8:	3f 93       	push	r19
    10fa:	4f 93       	push	r20
    10fc:	5f 93       	push	r21
    10fe:	6f 93       	push	r22
    1100:	7f 93       	push	r23
    1102:	8f 93       	push	r24
    1104:	9f 93       	push	r25
    1106:	af 93       	push	r26
    1108:	bf 93       	push	r27
    110a:	ef 93       	push	r30
    110c:	ff 93       	push	r31
   if(aptr_ISRAddress[USART_RXC_VECTOR_NUMBER] != NULL_PTR)
    110e:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <aptr_ISRAddress+0x18>
    1112:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <aptr_ISRAddress+0x19>
    1116:	30 97       	sbiw	r30, 0x00	; 0
    1118:	09 f0       	breq	.+2      	; 0x111c <__vector_13+0x30>
   {
      aptr_ISRAddress[USART_RXC_VECTOR_NUMBER]();
    111a:	09 95       	icall
   }
}
    111c:	ff 91       	pop	r31
    111e:	ef 91       	pop	r30
    1120:	bf 91       	pop	r27
    1122:	af 91       	pop	r26
    1124:	9f 91       	pop	r25
    1126:	8f 91       	pop	r24
    1128:	7f 91       	pop	r23
    112a:	6f 91       	pop	r22
    112c:	5f 91       	pop	r21
    112e:	4f 91       	pop	r20
    1130:	3f 91       	pop	r19
    1132:	2f 91       	pop	r18
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <__vector_14>:

/**
* @brief: USART_UDRE ISR.
*/
ISR(USART_UDRE_IRQ)
{
    113e:	1f 92       	push	r1
    1140:	0f 92       	push	r0
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	0f 92       	push	r0
    1146:	11 24       	eor	r1, r1
    1148:	2f 93       	push	r18
    114a:	3f 93       	push	r19
    114c:	4f 93       	push	r20
    114e:	5f 93       	push	r21
    1150:	6f 93       	push	r22
    1152:	7f 93       	push	r23
    1154:	8f 93       	push	r24
    1156:	9f 93       	push	r25
    1158:	af 93       	push	r26
    115a:	bf 93       	push	r27
    115c:	ef 93       	push	r30
    115e:	ff 93       	push	r31
   if(aptr_ISRAddress[USART_UDRE_VECTOR_NUMBER] != NULL_PTR)
    1160:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <aptr_ISRAddress+0x1a>
    1164:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <aptr_ISRAddress+0x1b>
    1168:	30 97       	sbiw	r30, 0x00	; 0
    116a:	09 f0       	breq	.+2      	; 0x116e <__vector_14+0x30>
   {
      aptr_ISRAddress[USART_UDRE_VECTOR_NUMBER]();
    116c:	09 95       	icall
   }
}
    116e:	ff 91       	pop	r31
    1170:	ef 91       	pop	r30
    1172:	bf 91       	pop	r27
    1174:	af 91       	pop	r26
    1176:	9f 91       	pop	r25
    1178:	8f 91       	pop	r24
    117a:	7f 91       	pop	r23
    117c:	6f 91       	pop	r22
    117e:	5f 91       	pop	r21
    1180:	4f 91       	pop	r20
    1182:	3f 91       	pop	r19
    1184:	2f 91       	pop	r18
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	0f 90       	pop	r0
    118c:	1f 90       	pop	r1
    118e:	18 95       	reti

00001190 <__vector_15>:

/**
* @brief: USART_TXC ISR.
*/
ISR(USART_TXC_IRQ)
{
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	2f 93       	push	r18
    119c:	3f 93       	push	r19
    119e:	4f 93       	push	r20
    11a0:	5f 93       	push	r21
    11a2:	6f 93       	push	r22
    11a4:	7f 93       	push	r23
    11a6:	8f 93       	push	r24
    11a8:	9f 93       	push	r25
    11aa:	af 93       	push	r26
    11ac:	bf 93       	push	r27
    11ae:	ef 93       	push	r30
    11b0:	ff 93       	push	r31
   if(aptr_ISRAddress[USART_TXC_VECTOR_NUMBER] != NULL_PTR)
    11b2:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <aptr_ISRAddress+0x1c>
    11b6:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <aptr_ISRAddress+0x1d>
    11ba:	30 97       	sbiw	r30, 0x00	; 0
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <__vector_15+0x30>
   {
      aptr_ISRAddress[USART_TXC_VECTOR_NUMBER]();
    11be:	09 95       	icall
   }
}
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <__vector_16>:

/**
* @brief: ADC ISR.
*/
ISR(ADC_IRQ)
{
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31
   if(aptr_ISRAddress[ADC_VECTOR_NUMBER] != NULL_PTR)
    1204:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <aptr_ISRAddress+0x1e>
    1208:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <aptr_ISRAddress+0x1f>
    120c:	30 97       	sbiw	r30, 0x00	; 0
    120e:	09 f0       	breq	.+2      	; 0x1212 <__vector_16+0x30>
   {
      aptr_ISRAddress[ADC_VECTOR_NUMBER]();
    1210:	09 95       	icall
   }
}
    1212:	ff 91       	pop	r31
    1214:	ef 91       	pop	r30
    1216:	bf 91       	pop	r27
    1218:	af 91       	pop	r26
    121a:	9f 91       	pop	r25
    121c:	8f 91       	pop	r24
    121e:	7f 91       	pop	r23
    1220:	6f 91       	pop	r22
    1222:	5f 91       	pop	r21
    1224:	4f 91       	pop	r20
    1226:	3f 91       	pop	r19
    1228:	2f 91       	pop	r18
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	1f 90       	pop	r1
    1232:	18 95       	reti

00001234 <__vector_17>:

/**
* @brief: EE_RDY ISR.
*/
ISR(EE_RDY_IRQ)
{
    1234:	1f 92       	push	r1
    1236:	0f 92       	push	r0
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	0f 92       	push	r0
    123c:	11 24       	eor	r1, r1
    123e:	2f 93       	push	r18
    1240:	3f 93       	push	r19
    1242:	4f 93       	push	r20
    1244:	5f 93       	push	r21
    1246:	6f 93       	push	r22
    1248:	7f 93       	push	r23
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    124e:	af 93       	push	r26
    1250:	bf 93       	push	r27
    1252:	ef 93       	push	r30
    1254:	ff 93       	push	r31
   if(aptr_ISRAddress[EE_RDY_VECTOR_NUMBER] != NULL_PTR)
    1256:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <aptr_ISRAddress+0x20>
    125a:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <aptr_ISRAddress+0x21>
    125e:	30 97       	sbiw	r30, 0x00	; 0
    1260:	09 f0       	breq	.+2      	; 0x1264 <__vector_17+0x30>
   {
      aptr_ISRAddress[EE_RDY_VECTOR_NUMBER]();
    1262:	09 95       	icall
   }
}
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_18>:

/**
* @brief: ANA_COMP ISR.
*/
ISR(ANA_COMP_IRQ)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
   if(aptr_ISRAddress[ANA_COMP_VECTOR_NUMBER] != NULL_PTR)
    12a8:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <aptr_ISRAddress+0x22>
    12ac:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <aptr_ISRAddress+0x23>
    12b0:	30 97       	sbiw	r30, 0x00	; 0
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <__vector_18+0x30>
   {
      aptr_ISRAddress[ANA_COMP_VECTOR_NUMBER]();
    12b4:	09 95       	icall
   }
}
    12b6:	ff 91       	pop	r31
    12b8:	ef 91       	pop	r30
    12ba:	bf 91       	pop	r27
    12bc:	af 91       	pop	r26
    12be:	9f 91       	pop	r25
    12c0:	8f 91       	pop	r24
    12c2:	7f 91       	pop	r23
    12c4:	6f 91       	pop	r22
    12c6:	5f 91       	pop	r21
    12c8:	4f 91       	pop	r20
    12ca:	3f 91       	pop	r19
    12cc:	2f 91       	pop	r18
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <__vector_19>:

/**
* @brief: TWI ISR.
*/
ISR(TWI_IRQ)
{
    12d8:	1f 92       	push	r1
    12da:	0f 92       	push	r0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	0f 92       	push	r0
    12e0:	11 24       	eor	r1, r1
    12e2:	2f 93       	push	r18
    12e4:	3f 93       	push	r19
    12e6:	4f 93       	push	r20
    12e8:	5f 93       	push	r21
    12ea:	6f 93       	push	r22
    12ec:	7f 93       	push	r23
    12ee:	8f 93       	push	r24
    12f0:	9f 93       	push	r25
    12f2:	af 93       	push	r26
    12f4:	bf 93       	push	r27
    12f6:	ef 93       	push	r30
    12f8:	ff 93       	push	r31
   if(aptr_ISRAddress[TWI_VECTOR_NUMBER] != NULL_PTR)
    12fa:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <aptr_ISRAddress+0x24>
    12fe:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <aptr_ISRAddress+0x25>
    1302:	30 97       	sbiw	r30, 0x00	; 0
    1304:	09 f0       	breq	.+2      	; 0x1308 <__vector_19+0x30>
   {
      aptr_ISRAddress[TWI_VECTOR_NUMBER]();
    1306:	09 95       	icall
   }
}
    1308:	ff 91       	pop	r31
    130a:	ef 91       	pop	r30
    130c:	bf 91       	pop	r27
    130e:	af 91       	pop	r26
    1310:	9f 91       	pop	r25
    1312:	8f 91       	pop	r24
    1314:	7f 91       	pop	r23
    1316:	6f 91       	pop	r22
    1318:	5f 91       	pop	r21
    131a:	4f 91       	pop	r20
    131c:	3f 91       	pop	r19
    131e:	2f 91       	pop	r18
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <__vector_20>:

/**
* @brief: SPM_RDY ISR.
*/
ISR(SPM_RDY_IRQ)
{
    132a:	1f 92       	push	r1
    132c:	0f 92       	push	r0
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	0f 92       	push	r0
    1332:	11 24       	eor	r1, r1
    1334:	2f 93       	push	r18
    1336:	3f 93       	push	r19
    1338:	4f 93       	push	r20
    133a:	5f 93       	push	r21
    133c:	6f 93       	push	r22
    133e:	7f 93       	push	r23
    1340:	8f 93       	push	r24
    1342:	9f 93       	push	r25
    1344:	af 93       	push	r26
    1346:	bf 93       	push	r27
    1348:	ef 93       	push	r30
    134a:	ff 93       	push	r31
   if(aptr_ISRAddress[SPM_RDY_VECTOR_NUMBER] != NULL_PTR)
    134c:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <aptr_ISRAddress+0x26>
    1350:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <aptr_ISRAddress+0x27>
    1354:	30 97       	sbiw	r30, 0x00	; 0
    1356:	09 f0       	breq	.+2      	; 0x135a <__vector_20+0x30>
   {
      aptr_ISRAddress[SPM_RDY_VECTOR_NUMBER]();
    1358:	09 95       	icall
   }
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	bf 91       	pop	r27
    1360:	af 91       	pop	r26
    1362:	9f 91       	pop	r25
    1364:	8f 91       	pop	r24
    1366:	7f 91       	pop	r23
    1368:	6f 91       	pop	r22
    136a:	5f 91       	pop	r21
    136c:	4f 91       	pop	r20
    136e:	3f 91       	pop	r19
    1370:	2f 91       	pop	r18
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <SPI_Init>:
   
   g_Callback[u8_SPIIndex] = Callback;
      
   /* return success status */
   return E_SPI_SUCCESS;
}
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	81 11       	cpse	r24, r1
    1382:	36 c0       	rjmp	.+108    	; 0x13f0 <SPI_Init+0x74>
    1384:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <SPI_CH_0_CONTROL_MASK>
    1388:	c8 2f       	mov	r28, r24
    138a:	c0 71       	andi	r28, 0x10	; 16
    138c:	84 ff       	sbrs	r24, 4
    138e:	26 c0       	rjmp	.+76     	; 0x13dc <SPI_Init+0x60>
    1390:	d0 91 a7 00 	lds	r29, 0x00A7	; 0x8000a7 <SPI_CH_0_SS_CH_0_PIN>
    1394:	c0 91 a8 00 	lds	r28, 0x00A8	; 0x8000a8 <SPI_CH_0_SS_CH_0_PORT>
    1398:	41 e0       	ldi	r20, 0x01	; 1
    139a:	6d 2f       	mov	r22, r29
    139c:	8c 2f       	mov	r24, r28
    139e:	0e 94 ac 05 	call	0xb58	; 0xb58 <DIO_SetPinDirection>
    13a2:	41 e0       	ldi	r20, 0x01	; 1
    13a4:	6d 2f       	mov	r22, r29
    13a6:	8c 2f       	mov	r24, r28
    13a8:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <DIO_WritePin>
    13ac:	41 e0       	ldi	r20, 0x01	; 1
    13ae:	60 91 ad 00 	lds	r22, 0x00AD	; 0x8000ad <SPI_CH_0_MOSI_PIN>
    13b2:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <SPI_CH_0_MOSI_PORT>
    13b6:	0e 94 ac 05 	call	0xb58	; 0xb58 <DIO_SetPinDirection>
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	60 91 a9 00 	lds	r22, 0x00A9	; 0x8000a9 <SPI_CH_0_SCK_PIN>
    13c0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <SPI_CH_0_SCK_PORT>
    13c4:	0e 94 ac 05 	call	0xb58	; 0xb58 <DIO_SetPinDirection>
    13c8:	9e b1       	in	r25, 0x0e	; 14
    13ca:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <SPI_CH_0_DOUBLE_SPEED>
    13ce:	89 2b       	or	r24, r25
    13d0:	8e b9       	out	0x0e, r24	; 14
    13d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <SPI_CH_0_CONTROL_MASK>
    13d6:	8d b9       	out	0x0d, r24	; 13
    13d8:	c0 e0       	ldi	r28, 0x00	; 0
    13da:	0b c0       	rjmp	.+22     	; 0x13f2 <SPI_Init+0x76>
    13dc:	41 e0       	ldi	r20, 0x01	; 1
    13de:	60 91 ab 00 	lds	r22, 0x00AB	; 0x8000ab <SPI_CH_0_MISO_PIN>
    13e2:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <SPI_CH_0_MISO_PORT>
    13e6:	0e 94 ac 05 	call	0xb58	; 0xb58 <DIO_SetPinDirection>
    13ea:	80 e4       	ldi	r24, 0x40	; 64
    13ec:	8d b9       	out	0x0d, r24	; 13
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <SPI_Init+0x76>
    13f0:	c6 e0       	ldi	r28, 0x06	; 6
    13f2:	8c 2f       	mov	r24, r28
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

000013fa <SPI_EnableInterrupt>:
    13fa:	81 11       	cpse	r24, r1
    13fc:	05 c0       	rjmp	.+10     	; 0x1408 <SPI_EnableInterrupt+0xe>
    13fe:	8d b1       	in	r24, 0x0d	; 13
    1400:	80 68       	ori	r24, 0x80	; 128
    1402:	8d b9       	out	0x0d, r24	; 13
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	08 95       	ret
    1408:	86 e0       	ldi	r24, 0x06	; 6
    140a:	08 95       	ret

0000140c <SPI_SetData>:
SPI_ERROR_state_t SPI_SetData(uint8_t SpiNumber, uint8_t TxChar)
{
   volatile uint8_t * ptr_SPIDataR;
   
   /* get the required spi data */
   switch(SpiNumber)
    140c:	81 11       	cpse	r24, r1
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <SPI_SetData+0x8>
      default:
         return E_SPI_INVALID_CH;
   }
         
   /* sets character in the SPI register */
   *ptr_SPIDataR = TxChar;
    1410:	6f b9       	out	0x0f, r22	; 15
   
   /* return success message */
   return E_SPI_SUCCESS;
    1412:	08 95       	ret
      case SPI_CH_0:
         ptr_SPIDataR = &SPI_DATA_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
    1414:	86 e0       	ldi	r24, 0x06	; 6
   /* sets character in the SPI register */
   *ptr_SPIDataR = TxChar;
   
   /* return success message */
   return E_SPI_SUCCESS;
}
    1416:	08 95       	ret

00001418 <SPI_GetData>:
* @return function error state.
*/
SPI_ERROR_state_t SPI_GetData(uint8_t SpiNumber,uint8_t * RxData)
{
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == RxData)
    1418:	61 15       	cp	r22, r1
    141a:	71 05       	cpc	r23, r1
    141c:	39 f0       	breq	.+14     	; 0x142c <SPI_GetData+0x14>
   }
   
   volatile uint8_t * ptr_SPIDataR;
   
   /* get the required spi data */
   switch(SpiNumber)
    141e:	81 11       	cpse	r24, r1
    1420:	07 c0       	rjmp	.+14     	; 0x1430 <SPI_GetData+0x18>
      default:
         return E_SPI_INVALID_CH;
   }
   
   /* get data */
   *RxData = *ptr_SPIDataR;
    1422:	8f b1       	in	r24, 0x0f	; 15
    1424:	fb 01       	movw	r30, r22
    1426:	80 83       	st	Z, r24
   
   /* return success message */
   return E_SPI_SUCCESS;
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	08 95       	ret
SPI_ERROR_state_t SPI_GetData(uint8_t SpiNumber,uint8_t * RxData)
{
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == RxData)
   {
      return E_SPI_NULL_PTR;
    142c:	84 e0       	ldi	r24, 0x04	; 4
    142e:	08 95       	ret
      case SPI_CH_0:
         ptr_SPIDataR = &SPI_DATA_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
    1430:	86 e0       	ldi	r24, 0x06	; 6
   /* get data */
   *RxData = *ptr_SPIDataR;
   
   /* return success message */
   return E_SPI_SUCCESS;
    1432:	08 95       	ret

00001434 <UART_Init>:
      u8_dummy = *ptru8_UARTDataR;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
    1434:	81 11       	cpse	r24, r1
    1436:	1c c0       	rjmp	.+56     	; 0x1470 <UART_Init+0x3c>
    1438:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <UART_CH_0_BaudRate>
    143c:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <UART_CH_0_BaudRate+0x1>
    1440:	8f 3f       	cpi	r24, 0xFF	; 255
    1442:	91 05       	cpc	r25, r1
    1444:	09 f0       	breq	.+2      	; 0x1448 <UART_Init+0x14>
    1446:	b0 f4       	brcc	.+44     	; 0x1474 <UART_Init+0x40>
    1448:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <UART_CH_0_CONTROL>
    144c:	8a b9       	out	0x0a, r24	; 10
    144e:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <UART_CH_0_CONTROL_2>
    1452:	80 bd       	out	0x20, r24	; 32
    1454:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <UART_CH_0_BaudRate>
    1458:	89 b9       	out	0x09, r24	; 9
    145a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <UART_CH_0_BaudRate>
    145e:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <UART_CH_0_BaudRate+0x1>
    1462:	8f 3f       	cpi	r24, 0xFF	; 255
    1464:	91 05       	cpc	r25, r1
    1466:	41 f0       	breq	.+16     	; 0x1478 <UART_Init+0x44>
    1468:	38 f0       	brcs	.+14     	; 0x1478 <UART_Init+0x44>
    146a:	90 bd       	out	0x20, r25	; 32
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	08 95       	ret
    1470:	86 e0       	ldi	r24, 0x06	; 6
    1472:	08 95       	ret
    1474:	85 e0       	ldi	r24, 0x05	; 5
    1476:	08 95       	ret
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	08 95       	ret

0000147c <UART_EnableInterrupt>:
    147c:	60 38       	cpi	r22, 0x80	; 128
    147e:	11 f0       	breq	.+4      	; 0x1484 <UART_EnableInterrupt+0x8>
    1480:	60 34       	cpi	r22, 0x40	; 64
    1482:	39 f4       	brne	.+14     	; 0x1492 <UART_EnableInterrupt+0x16>
    1484:	81 11       	cpse	r24, r1
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <UART_EnableInterrupt+0x1a>
    1488:	8a b1       	in	r24, 0x0a	; 10
    148a:	68 2b       	or	r22, r24
    148c:	6a b9       	out	0x0a, r22	; 10
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	08 95       	ret
    1492:	87 e0       	ldi	r24, 0x07	; 7
    1494:	08 95       	ret
    1496:	86 e0       	ldi	r24, 0x06	; 6
    1498:	08 95       	ret

0000149a <UART_SetData>:
*/
UART_ERROR_state_t UART_SetData(uint8_t UartNumber,uint8_t TxChar)
{
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
    149a:	81 11       	cpse	r24, r1
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <UART_SetData+0x8>
      default:
         return E_UART_INVALID_CH;
   }

   /* Put data into buffer, sends the data */
   *ptru8_UARTDataR = TxChar;
    149e:	6c b9       	out	0x0c, r22	; 12
   
   /* return success status */
   return E_UART_SUCCESS;
    14a0:	08 95       	ret
   {
      case UART_CH_0:
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
    14a2:	86 e0       	ldi	r24, 0x06	; 6
   /* Put data into buffer, sends the data */
   *ptru8_UARTDataR = TxChar;
   
   /* return success status */
   return E_UART_SUCCESS;
}
    14a4:	08 95       	ret

000014a6 <UART_GetData>:
* @return function error state.
*/
UART_ERROR_state_t UART_GetData(uint8_t UartNumber,uint8_t * RxChar)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxChar)
    14a6:	61 15       	cp	r22, r1
    14a8:	71 05       	cpc	r23, r1
    14aa:	39 f0       	breq	.+14     	; 0x14ba <UART_GetData+0x14>
      /* do nothing */
   }
   
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
    14ac:	81 11       	cpse	r24, r1
    14ae:	07 c0       	rjmp	.+14     	; 0x14be <UART_GetData+0x18>
      default:
         return E_UART_INVALID_CH;
   }
   
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
    14b0:	8c b1       	in	r24, 0x0c	; 12
    14b2:	fb 01       	movw	r30, r22
    14b4:	80 83       	st	Z, r24
   
   /* return success status */
   return E_UART_SUCCESS;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	08 95       	ret
UART_ERROR_state_t UART_GetData(uint8_t UartNumber,uint8_t * RxChar)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxChar)
   {
      return E_UART_NULL_PTR;
    14ba:	84 e0       	ldi	r24, 0x04	; 4
    14bc:	08 95       	ret
   {
      case UART_CH_0:
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
    14be:	86 e0       	ldi	r24, 0x06	; 6
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
   
   /* return success status */
   return E_UART_SUCCESS;
    14c0:	08 95       	ret

000014c2 <VoidFunc>:
   BCM_Send(COMM_SPI_CH, 10, test, send_SPI);
}

void GetRxSPI(void)
{
   u8_FlagSPI = 1;
    14c2:	08 95       	ret

000014c4 <send_SPI>:
    14c4:	08 95       	ret

000014c6 <text_CBF>:
    14c6:	22 e6       	ldi	r18, 0x62	; 98
    14c8:	3a e0       	ldi	r19, 0x0A	; 10
    14ca:	4c e5       	ldi	r20, 0x5C	; 92
    14cc:	51 e0       	ldi	r21, 0x01	; 1
    14ce:	6a e0       	ldi	r22, 0x0A	; 10
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	0e 94 b9 03 	call	0x772	; 0x772 <BCM_Send>
    14d8:	08 95       	ret

000014da <GetRxI2C>:
    14da:	21 e6       	ldi	r18, 0x61	; 97
    14dc:	3a e0       	ldi	r19, 0x0A	; 10
    14de:	4e e3       	ldi	r20, 0x3E	; 62
    14e0:	51 e0       	ldi	r21, 0x01	; 1
    14e2:	6a e0       	ldi	r22, 0x0A	; 10
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	0e 94 b9 03 	call	0x772	; 0x772 <BCM_Send>
    14ec:	08 95       	ret

000014ee <main>:

int main(void)
{
   /* Enable Globale Interrupt */
 
   INTERRUPTS_Enable();
    14ee:	0e 94 86 06 	call	0xd0c	; 0xd0c <INTERRUPTS_Enable>
   
   //BCM_Receive(COMM_SPI_CH, 30, DataSPI, GetRxSPI);
   BCM_Receive(COMM_I2C_CH, 10, DataI2C, GetRxI2C);
    14f2:	2d e6       	ldi	r18, 0x6D	; 109
    14f4:	3a e0       	ldi	r19, 0x0A	; 10
    14f6:	4e e3       	ldi	r20, 0x3E	; 62
    14f8:	51 e0       	ldi	r21, 0x01	; 1
    14fa:	6a e0       	ldi	r22, 0x0A	; 10
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	0e 94 11 04 	call	0x822	; 0x822 <BCM_Receive>
   BCM_Receive(COMM_UART_CH, 10, test, text_CBF);
    1504:	23 e6       	ldi	r18, 0x63	; 99
    1506:	3a e0       	ldi	r19, 0x0A	; 10
    1508:	4c e5       	ldi	r20, 0x5C	; 92
    150a:	51 e0       	ldi	r21, 0x01	; 1
    150c:	6a e0       	ldi	r22, 0x0A	; 10
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	0e 94 11 04 	call	0x822	; 0x822 <BCM_Receive>
         if(ERROR_OK == BCM_Send(COMM_UART_CH, 30, DataI2C, text_CBF))
         {
            u8_FlagI2C = 0;
         }
      }*/
      BCM_RxMainFunction();
    1516:	0e 94 3c 03 	call	0x678	; 0x678 <BCM_RxMainFunction>
      BCM_TxMainFunction();
    151a:	0e 94 86 02 	call	0x50c	; 0x50c <BCM_TxMainFunction>
    151e:	fb cf       	rjmp	.-10     	; 0x1516 <main+0x28>

00001520 <_exit>:
    1520:	f8 94       	cli

00001522 <__stop_program>:
    1522:	ff cf       	rjmp	.-2      	; 0x1522 <__stop_program>
