
EchoTerminalStringSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000031c  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000149c  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000978  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cbf  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  0000303c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007f9  00000000  00000000  000032cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011b5  00000000  00000000  00003ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00004c7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8a 01 	call	0x314	; 0x314 <main>
  7a:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDirection>:
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
}
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	80 f5       	brcc	.+96     	; 0xe6 <DIO_SetPinDirection+0x64>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	79 f0       	breq	.+30     	; 0xa8 <DIO_SetPinDirection+0x26>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPinDirection+0x14>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	31 f0       	breq	.+12     	; 0x9c <DIO_SetPinDirection+0x1a>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	39 f0       	breq	.+14     	; 0xa2 <DIO_SetPinDirection+0x20>
  94:	2a c0       	rjmp	.+84     	; 0xea <DIO_SetPinDirection+0x68>
  96:	ea e3       	ldi	r30, 0x3A	; 58
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	08 c0       	rjmp	.+16     	; 0xac <DIO_SetPinDirection+0x2a>
  9c:	e4 e3       	ldi	r30, 0x34	; 52
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	05 c0       	rjmp	.+10     	; 0xac <DIO_SetPinDirection+0x2a>
  a2:	e1 e3       	ldi	r30, 0x31	; 49
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <DIO_SetPinDirection+0x2a>
  a8:	e7 e3       	ldi	r30, 0x37	; 55
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	61 f4       	brne	.+24     	; 0xc8 <DIO_SetPinDirection+0x46>
  b0:	20 81       	ld	r18, Z
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <DIO_SetPinDirection+0x3a>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <DIO_SetPinDirection+0x36>
  c0:	82 2b       	or	r24, r18
  c2:	80 83       	st	Z, r24
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	08 95       	ret
  c8:	41 11       	cpse	r20, r1
  ca:	11 c0       	rjmp	.+34     	; 0xee <DIO_SetPinDirection+0x6c>
  cc:	20 81       	ld	r18, Z
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_SetPinDirection+0x56>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_SetPinDirection+0x52>
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	80 83       	st	Z, r24
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	08 95       	ret
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	08 95       	ret
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	08 95       	ret

000000f2 <DIO_WritePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
  f2:	68 30       	cpi	r22, 0x08	; 8
  f4:	80 f5       	brcc	.+96     	; 0x156 <DIO_WritePin+0x64>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data pointer according to the required port. */
   switch(port)
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	79 f0       	breq	.+30     	; 0x118 <DIO_WritePin+0x26>
  fa:	28 f0       	brcs	.+10     	; 0x106 <DIO_WritePin+0x14>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	31 f0       	breq	.+12     	; 0x10c <DIO_WritePin+0x1a>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	39 f0       	breq	.+14     	; 0x112 <DIO_WritePin+0x20>
 104:	2a c0       	rjmp	.+84     	; 0x15a <DIO_WritePin+0x68>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 106:	eb e3       	ldi	r30, 0x3B	; 59
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	08 c0       	rjmp	.+16     	; 0x11c <DIO_WritePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 10c:	e5 e3       	ldi	r30, 0x35	; 53
 10e:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 110:	05 c0       	rjmp	.+10     	; 0x11c <DIO_WritePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 112:	e2 e3       	ldi	r30, 0x32	; 50
 114:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_WritePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 118:	e8 e3       	ldi	r30, 0x38	; 56
 11a:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   /* set or clear value in the pin. */
   if(HIGH == data)
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	61 f4       	brne	.+24     	; 0x138 <DIO_WritePin+0x46>
   {
      SET_BIT(*prt_port_data,pin);
 120:	20 81       	ld	r18, Z
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_WritePin+0x3a>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_WritePin+0x36>
 130:	82 2b       	or	r24, r18
 132:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret
   /* set or clear value in the pin. */
   if(HIGH == data)
   {
      SET_BIT(*prt_port_data,pin);
   }
   else if(LOW == data)
 138:	41 11       	cpse	r20, r1
 13a:	11 c0       	rjmp	.+34     	; 0x15e <DIO_WritePin+0x6c>
   {
      CLEAR_BIT(*prt_port_data,pin);
 13c:	20 81       	ld	r18, Z
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_WritePin+0x56>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_WritePin+0x52>
 14c:	80 95       	com	r24
 14e:	82 23       	and	r24, r18
 150:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	08 95       	ret
      CLEAR_BIT(*prt_port_data,pin);
   }
   /* if data is invalid. */
   else
   {
      return E_DIO_INVALID_WRITE_DATA;
 15e:	84 e0       	ldi	r24, 0x04	; 4
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 160:	08 95       	ret

00000162 <SPI_Init>:
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
}
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	81 11       	cpse	r24, r1
 16a:	2f c0       	rjmp	.+94     	; 0x1ca <SPI_Init+0x68>
 16c:	d0 91 68 00 	lds	r29, 0x0068	; 0x800068 <SPI_CH_0_CONTROL_MASK>
 170:	cd 2f       	mov	r28, r29
 172:	c0 71       	andi	r28, 0x10	; 16
 174:	d4 ff       	sbrs	r29, 4
 176:	1f c0       	rjmp	.+62     	; 0x1b6 <SPI_Init+0x54>
 178:	10 91 60 00 	lds	r17, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 17c:	c0 91 61 00 	lds	r28, 0x0061	; 0x800061 <SPI_CH_0_SS_CH_0_PORT>
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	61 2f       	mov	r22, r17
 184:	8c 2f       	mov	r24, r28
 186:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	61 2f       	mov	r22, r17
 18e:	8c 2f       	mov	r24, r28
 190:	0e 94 79 00 	call	0xf2	; 0xf2 <DIO_WritePin>
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <SPI_CH_0_MOSI_PIN>
 19a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <SPI_CH_0_MOSI_PORT>
 19e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <SPI_CH_0_SCK_PIN>
 1a8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <SPI_CH_0_SCK_PORT>
 1ac:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 1b0:	dd b9       	out	0x0d, r29	; 13
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
 1b4:	0b c0       	rjmp	.+22     	; 0x1cc <SPI_Init+0x6a>
 1b6:	41 e0       	ldi	r20, 0x01	; 1
 1b8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <SPI_CH_0_MISO_PIN>
 1bc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <SPI_CH_0_MISO_PORT>
 1c0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
 1c4:	80 e4       	ldi	r24, 0x40	; 64
 1c6:	8d b9       	out	0x0d, r24	; 13
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <SPI_Init+0x6a>
 1ca:	c6 e0       	ldi	r28, 0x06	; 6
 1cc:	8c 2f       	mov	r24, r28
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	08 95       	ret

000001d6 <SPI_ReceiveString>:
* @param [out] RxString    -  array of characters to receive.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_ReceiveString(uint8_t SpiNumber,uint8_t * RxString,uint8_t slave_CH)
{
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
   uint8_t counter = DATA_COUNTER_START;
   
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == RxString)
 1e0:	61 15       	cp	r22, r1
 1e2:	71 05       	cpc	r23, r1
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <SPI_ReceiveString+0x12>
 1e6:	44 c0       	rjmp	.+136    	; 0x270 <SPI_ReceiveString+0x9a>
   volatile uint8_t * ptr_SPIStatusR;
   uint8_t u8_SSPort;
   uint8_t u8_SSPin;
   
   /* get the required spi data */
   switch(SpiNumber)
 1e8:	81 11       	cpse	r24, r1
 1ea:	44 c0       	rjmp	.+136    	; 0x274 <SPI_ReceiveString+0x9e>
      default:
         return E_SPI_INVALID_CH;
   }
   
   /* get the required slave select port and pin */
   switch(slave_CH)
 1ec:	44 23       	and	r20, r20
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <SPI_ReceiveString+0x20>
 1f0:	4f 3f       	cpi	r20, 0xFF	; 255
 1f2:	29 f0       	breq	.+10     	; 0x1fe <SPI_ReceiveString+0x28>
 1f4:	41 c0       	rjmp	.+130    	; 0x278 <SPI_ReceiveString+0xa2>
   {
      #ifdef SPI_CH_0_SS_CH_0
      case SPI_CH_0_SS_CH_0:
         u8_SSPort = SPI_CH_0_SS_CH_0_PORT;
 1f6:	00 91 61 00 	lds	r16, 0x0061	; 0x800061 <SPI_CH_0_SS_CH_0_PORT>
         u8_SSPin = SPI_CH_0_SS_CH_0_PIN;
 1fa:	f0 90 60 00 	lds	r15, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fe:	14 2f       	mov	r17, r20
 200:	eb 01       	movw	r28, r22
         break;
      default:
         return E_SPI_INVALID_SS_CH;
   }
   
   if(SLAVE_SS_CH != slave_CH)
 202:	4f 3f       	cpi	r20, 0xFF	; 255
 204:	29 f0       	breq	.+10     	; 0x210 <SPI_ReceiveString+0x3a>
   {
      /* select slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, LOW);
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	6f 2d       	mov	r22, r15
 20a:	80 2f       	mov	r24, r16
 20c:	0e 94 79 00 	call	0xf2	; 0xf2 <DIO_WritePin>
      {
         /* put an end of string character in the array and breaks from the loop */
         RxString[counter + DATA_SIZE] = END_OF_STRING;
         break;
      }
      counter++;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	06 c0       	rjmp	.+12     	; 0x220 <SPI_ReceiveString+0x4a>
   {
      /* loops until transmitting is complete */
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
      {
         /* check if there is a write collision error flag */
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
 214:	76 9b       	sbis	0x0e, 6	; 14
 216:	04 c0       	rjmp	.+8      	; 0x220 <SPI_ReceiveString+0x4a>
 218:	31 c0       	rjmp	.+98     	; 0x27c <SPI_ReceiveString+0xa6>
      {
         /* put an end of string character in the array and breaks from the loop */
         RxString[counter + DATA_SIZE] = END_OF_STRING;
         break;
      }
      counter++;
 21a:	89 2f       	mov	r24, r25
 21c:	01 c0       	rjmp	.+2      	; 0x220 <SPI_ReceiveString+0x4a>
         {
            counter -= DATA_RETURN_TO_PREV_INDEX;
         }
         else
         {
            counter = DATA_COUNTER_START;
 21e:	80 e0       	ldi	r24, 0x00	; 0
   
   /* receives all characters until it gets a new line character */
   while(1)
   {
      /* loops until transmitting is complete */
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
 220:	77 9b       	sbis	0x0e, 7	; 14
 222:	f8 cf       	rjmp	.-16     	; 0x214 <SPI_ReceiveString+0x3e>
         {
            return E_SPI_WRITE_COLLISION;
         }
      }
      /* get data */
      RxString[counter] = *ptr_SPIDataR;
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	fe 01       	movw	r30, r28
 22a:	e2 0f       	add	r30, r18
 22c:	f3 1f       	adc	r31, r19
 22e:	9f b1       	in	r25, 0x0f	; 15
 230:	90 83       	st	Z, r25
      
      /* check if new line is received */
      if(RxString[counter] == NEW_LINE)
 232:	9d 30       	cpi	r25, 0x0D	; 13
 234:	49 f4       	brne	.+18     	; 0x248 <SPI_ReceiveString+0x72>
      {
         /* put an end of string character in the array and breaks from the loop */
         RxString[counter + DATA_SIZE] = END_OF_STRING;
 236:	2f 5f       	subi	r18, 0xFF	; 255
 238:	3f 4f       	sbci	r19, 0xFF	; 255
 23a:	c2 0f       	add	r28, r18
 23c:	d3 1f       	adc	r29, r19
 23e:	18 82       	st	Y, r1
            counter = DATA_COUNTER_START;
         }
      }
   }
   
   if(SLAVE_SS_CH != slave_CH)
 240:	1f 3f       	cpi	r17, 0xFF	; 255
 242:	79 f4       	brne	.+30     	; 0x262 <SPI_ReceiveString+0x8c>
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	1b c0       	rjmp	.+54     	; 0x27e <SPI_ReceiveString+0xa8>
      {
         /* put an end of string character in the array and breaks from the loop */
         RxString[counter + DATA_SIZE] = END_OF_STRING;
         break;
      }
      counter++;
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	98 0f       	add	r25, r24
      
      /* check if it got a back space character */
      if(RxString[counter - DATA_SIZE] == BACKSPACE)
 24c:	fe 01       	movw	r30, r28
 24e:	e9 0f       	add	r30, r25
 250:	f1 1d       	adc	r31, r1
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	20 81       	ld	r18, Z
 256:	28 30       	cpi	r18, 0x08	; 8
 258:	01 f7       	brne	.-64     	; 0x21a <SPI_ReceiveString+0x44>
      {
         /* return to the previous character to overwrite it */
         if (counter - DATA_SIZE != DATA_COUNTER_START)
 25a:	91 30       	cpi	r25, 0x01	; 1
 25c:	01 f3       	breq	.-64     	; 0x21e <SPI_ReceiveString+0x48>
         {
            counter -= DATA_RETURN_TO_PREV_INDEX;
 25e:	81 50       	subi	r24, 0x01	; 1
 260:	df cf       	rjmp	.-66     	; 0x220 <SPI_ReceiveString+0x4a>
   }
   
   if(SLAVE_SS_CH != slave_CH)
   {
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	6f 2d       	mov	r22, r15
 266:	80 2f       	mov	r24, r16
 268:	0e 94 79 00 	call	0xf2	; 0xf2 <DIO_WritePin>
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	07 c0       	rjmp	.+14     	; 0x27e <SPI_ReceiveString+0xa8>
   uint8_t counter = DATA_COUNTER_START;
   
   /* make sure a null pointer isn't passed to the function */
   if(NULL_PTR == RxString)
   {
      return E_SPI_NULL_PTR;
 270:	84 e0       	ldi	r24, 0x04	; 4
 272:	05 c0       	rjmp	.+10     	; 0x27e <SPI_ReceiveString+0xa8>
         ptr_SPIDataR = &SPI_DATA_R;
         ptr_SPIStatusR = &SPI_STATUS_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	03 c0       	rjmp	.+6      	; 0x27e <SPI_ReceiveString+0xa8>
         break;
      #endif
      case SLAVE_SS_CH:
         break;
      default:
         return E_SPI_INVALID_SS_CH;
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	01 c0       	rjmp	.+2      	; 0x27e <SPI_ReceiveString+0xa8>
      while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ))
      {
         /* check if there is a write collision error flag */
         if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
         {
            return E_SPI_WRITE_COLLISION;
 27c:	81 e0       	ldi	r24, 0x01	; 1
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	08 95       	ret

0000028a <UART_Init>:
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
   
   /* return success status */
   return E_UART_SUCCESS;
}
 28a:	81 11       	cpse	r24, r1
 28c:	0b c0       	rjmp	.+22     	; 0x2a4 <UART_Init+0x1a>
 28e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <UART_CH_0_CONTROL>
 292:	8a b9       	out	0x0a, r24	; 10
 294:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <UART_CH_0_CONTROL_2>
 298:	80 bd       	out	0x20, r24	; 32
 29a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <UART_CH_0_BaudRate>
 29e:	89 b9       	out	0x09, r24	; 9
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	08 95       	ret
 2a4:	86 e0       	ldi	r24, 0x06	; 6
 2a6:	08 95       	ret

000002a8 <UART_TransmitString>:
UART_ERROR_state_t UART_TransmitString(uint8_t UartNumber,uint8_t * TxString)
{
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
 2a8:	61 15       	cp	r22, r1
 2aa:	71 05       	cpc	r23, r1
 2ac:	81 f0       	breq	.+32     	; 0x2ce <UART_TransmitString+0x26>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 2ae:	81 11       	cpse	r24, r1
 2b0:	10 c0       	rjmp	.+32     	; 0x2d2 <UART_TransmitString+0x2a>
 2b2:	05 c0       	rjmp	.+10     	; 0x2be <UART_TransmitString+0x16>
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
   {
      /* Wait for empty transmit buffer */
      while ( !( *ptru8_UARTStatusR & EMPTY_BUFFER_BIT) );
 2b4:	5d 9b       	sbis	0x0b, 5	; 11
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <UART_TransmitString+0xc>
      
      /* Put data into buffer, sends the data */
      *ptru8_UARTDataR = TxString[counter];
 2b8:	8c b9       	out	0x0c, r24	; 12
      counter++;
 2ba:	9f 5f       	subi	r25, 0xFF	; 255
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <UART_TransmitString+0x18>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 2be:	90 e0       	ldi	r25, 0x00	; 0
      default:
         return E_UART_INVALID_CH;
   }
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
 2c0:	fb 01       	movw	r30, r22
 2c2:	e9 0f       	add	r30, r25
 2c4:	f1 1d       	adc	r31, r1
 2c6:	80 81       	ld	r24, Z
 2c8:	81 11       	cpse	r24, r1
 2ca:	f4 cf       	rjmp	.-24     	; 0x2b4 <UART_TransmitString+0xc>
 2cc:	08 95       	ret
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
   {
      return E_UART_NULL_PTR;
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
 2d2:	86 e0       	ldi	r24, 0x06	; 6
      counter++;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 2d4:	08 95       	ret

000002d6 <ECU_2_SlaveMain>:

/**
* @brief: This function is the slave node main function.
*/
static void ECU_2_SlaveMain(void)
{
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	ce 5f       	subi	r28, 0xFE	; 254
 2e0:	d1 09       	sbc	r29, r1
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
   uint8_t string[MAX_STRING_SIZE];
   
   UART_Init(UART_CH_0);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 45 01 	call	0x28a	; 0x28a <UART_Init>
   SPI_Init(SPI_CH_0);
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 b1 00 	call	0x162	; 0x162 <SPI_Init>
   
   while (1)
   {
      SPI_ReceiveString(SPI_CH_0, string, SLAVE_SS_CH);
 2f8:	4f ef       	ldi	r20, 0xFF	; 255
 2fa:	be 01       	movw	r22, r28
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <SPI_ReceiveString>
      UART_TransmitString(UART_CH_0, string);
 306:	be 01       	movw	r22, r28
 308:	6f 5f       	subi	r22, 0xFF	; 255
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <UART_TransmitString>
 312:	f2 cf       	rjmp	.-28     	; 0x2f8 <ECU_2_SlaveMain+0x22>

00000314 <main>:
   }
}

int main(void)
{
   ECU_2_SlaveMain();
 314:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <ECU_2_SlaveMain>

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
