
InterruptDesingPatternTestApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000962  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000962  000009f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  0080006a  0080006a  00000a00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001489  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c2  00000000  00000000  000020dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e6  00000000  00000000  00002a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000091c  00000000  00000000  00003b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000898  00000000  00000000  000044a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001afb  00000000  00000000  00004d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006837  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_1>
   8:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_2>
   c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_3>
  10:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_4>
  14:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_5>
  18:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_6>
  1c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_7>
  20:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_8>
  24:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_9>
  28:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_10>
  2c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_11>
  30:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_12>
  34:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_13>
  38:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__vector_14>
  3c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_15>
  40:	0c 94 40 03 	jmp	0x680	; 0x680 <__vector_16>
  44:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__vector_17>
  48:	0c 94 92 03 	jmp	0x724	; 0x724 <__vector_18>
  4c:	0c 94 bb 03 	jmp	0x776	; 0x776 <__vector_19>
  50:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_20>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 95 04 	call	0x92a	; 0x92a <main>
  8a:	0c 94 af 04 	jmp	0x95e	; 0x95e <_exit>

0000008e <Interrupt_Install>:
*/
void Interrupt_Install(uint8_t Vector_No, Ptr_VoidFuncVoid_t Callback)
{
   /* Validate Before Changing ISR Vector Table */
	if( 
      (NULL_PTR == aptr_OldVectors[Vector_No]) && (NULL_PTR != Callback) && 
  8e:	28 2f       	mov	r18, r24
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	f9 01       	movw	r30, r18
  94:	ee 0f       	add	r30, r30
  96:	ff 1f       	adc	r31, r31
  98:	e6 59       	subi	r30, 0x96	; 150
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	40 81       	ld	r20, Z
  9e:	51 81       	ldd	r21, Z+1	; 0x01
* @param [in]  Callback    -  New Callback Function of ISR.
*/
void Interrupt_Install(uint8_t Vector_No, Ptr_VoidFuncVoid_t Callback)
{
   /* Validate Before Changing ISR Vector Table */
	if( 
  a0:	45 2b       	or	r20, r21
  a2:	99 f4       	brne	.+38     	; 0xca <Interrupt_Install+0x3c>
      (NULL_PTR == aptr_OldVectors[Vector_No]) && (NULL_PTR != Callback) && 
  a4:	61 15       	cp	r22, r1
  a6:	71 05       	cpc	r23, r1
  a8:	81 f0       	breq	.+32     	; 0xca <Interrupt_Install+0x3c>
      (Vector_No >= IRQ_MIN_VECTOR_NUMBER) &&  (Vector_No <= IRQ_MAX_VECTOR_NUMBER)
  aa:	84 31       	cpi	r24, 0x14	; 20
  ac:	70 f4       	brcc	.+28     	; 0xca <Interrupt_Install+0x3c>
     )
	{
      /* Store The Current ISR in a History Table. */
		aptr_OldVectors[Vector_No] = aptr_ISRAddress[Vector_No];
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	f9 01       	movw	r30, r18
  b4:	ee 56       	subi	r30, 0x6E	; 110
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	80 81       	ld	r24, Z
  ba:	91 81       	ldd	r25, Z+1	; 0x01
  bc:	d9 01       	movw	r26, r18
  be:	a6 59       	subi	r26, 0x96	; 150
  c0:	bf 4f       	sbci	r27, 0xFF	; 255
  c2:	8d 93       	st	X+, r24
  c4:	9c 93       	st	X, r25
      /* Set the new Callback in the ISR. */
      aptr_ISRAddress[Vector_No] = Callback;
  c6:	71 83       	std	Z+1, r23	; 0x01
  c8:	60 83       	st	Z, r22
  ca:	08 95       	ret

000000cc <Interrupt_Deinstall>:
* @param [in]  Vector_No   -  ISR Vector Number.
*/
void Interrupt_Deinstall(uint8_t Vector_No)
{
   /* Validate Before Changing ISR Vector Table */
	if( (Vector_No >= IRQ_MIN_VECTOR_NUMBER) &&  (Vector_No <= IRQ_MAX_VECTOR_NUMBER))
  cc:	84 31       	cpi	r24, 0x14	; 20
  ce:	78 f4       	brcc	.+30     	; 0xee <Interrupt_Deinstall+0x22>
	{
      /* Revert Old ISR Callback to the ISR Vector Table. */
		aptr_ISRAddress[Vector_No] = aptr_OldVectors[Vector_No];
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	fc 01       	movw	r30, r24
  d8:	e6 59       	subi	r30, 0x96	; 150
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	20 81       	ld	r18, Z
  de:	31 81       	ldd	r19, Z+1	; 0x01
  e0:	dc 01       	movw	r26, r24
  e2:	ae 56       	subi	r26, 0x6E	; 110
  e4:	bf 4f       	sbci	r27, 0xFF	; 255
  e6:	2d 93       	st	X+, r18
  e8:	3c 93       	st	X, r19
      /* Clear The Old ISR Callback from the History Table */
      aptr_OldVectors[Vector_No] = NULL_PTR;
  ea:	11 82       	std	Z+1, r1	; 0x01
  ec:	10 82       	st	Z, r1
  ee:	08 95       	ret

000000f0 <DIO_SetPinDirection>:
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
  f0:	68 30       	cpi	r22, 0x08	; 8
  f2:	80 f5       	brcc	.+96     	; 0x154 <DIO_SetPinDirection+0x64>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	79 f0       	breq	.+30     	; 0x116 <DIO_SetPinDirection+0x26>
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_SetPinDirection+0x14>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	31 f0       	breq	.+12     	; 0x10a <DIO_SetPinDirection+0x1a>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	39 f0       	breq	.+14     	; 0x110 <DIO_SetPinDirection+0x20>
 102:	2a c0       	rjmp	.+84     	; 0x158 <DIO_SetPinDirection+0x68>
 104:	ea e3       	ldi	r30, 0x3A	; 58
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	08 c0       	rjmp	.+16     	; 0x11a <DIO_SetPinDirection+0x2a>
 10a:	e4 e3       	ldi	r30, 0x34	; 52
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	05 c0       	rjmp	.+10     	; 0x11a <DIO_SetPinDirection+0x2a>
 110:	e1 e3       	ldi	r30, 0x31	; 49
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_SetPinDirection+0x2a>
 116:	e7 e3       	ldi	r30, 0x37	; 55
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	61 f4       	brne	.+24     	; 0x136 <DIO_SetPinDirection+0x46>
 11e:	20 81       	ld	r18, Z
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDirection+0x3a>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDirection+0x36>
 12e:	82 2b       	or	r24, r18
 130:	80 83       	st	Z, r24
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret
 136:	41 11       	cpse	r20, r1
 138:	11 c0       	rjmp	.+34     	; 0x15c <DIO_SetPinDirection+0x6c>
 13a:	20 81       	ld	r18, Z
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_SetPinDirection+0x56>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_SetPinDirection+0x52>
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	80 83       	st	Z, r24
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	08 95       	ret
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	08 95       	ret
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	08 95       	ret

00000160 <DIO_TogglePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 160:	68 30       	cpi	r22, 0x08	; 8
 162:	f8 f4       	brcc	.+62     	; 0x1a2 <DIO_TogglePin+0x42>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	79 f0       	breq	.+30     	; 0x186 <DIO_TogglePin+0x26>
 168:	28 f0       	brcs	.+10     	; 0x174 <DIO_TogglePin+0x14>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	31 f0       	breq	.+12     	; 0x17a <DIO_TogglePin+0x1a>
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	39 f0       	breq	.+14     	; 0x180 <DIO_TogglePin+0x20>
 172:	19 c0       	rjmp	.+50     	; 0x1a6 <DIO_TogglePin+0x46>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 174:	eb e3       	ldi	r30, 0x3B	; 59
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	08 c0       	rjmp	.+16     	; 0x18a <DIO_TogglePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 17a:	e5 e3       	ldi	r30, 0x35	; 53
 17c:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 17e:	05 c0       	rjmp	.+10     	; 0x18a <DIO_TogglePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 180:	e2 e3       	ldi	r30, 0x32	; 50
 182:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_TogglePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 186:	e8 e3       	ldi	r30, 0x38	; 56
 188:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
 18a:	20 81       	ld	r18, Z
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_TogglePin+0x36>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_TogglePin+0x32>
 19a:	82 27       	eor	r24, r18
 19c:	80 83       	st	Z, r24
   
   /* return success message. */
   return E_DIO_SUCCESS;
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 1a6:	83 e0       	ldi	r24, 0x03	; 3
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
   
   /* return success message. */
   return E_DIO_SUCCESS;
 1a8:	08 95       	ret

000001aa <INTERRUPTS_Enable>:
/**
* @brief: This function disables global interrupts.
*/
void INTERRUPTS_Disable(void)
{
   CLEAR_BIT(SREG, BIT7);
 1aa:	8f b7       	in	r24, 0x3f	; 63
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	8f bf       	out	0x3f, r24	; 63
 1b0:	08 95       	ret

000001b2 <__vector_1>:

/**
* @brief: INT0 ISR.
*/
ISR(INT0_IRQ)
{
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
   if(aptr_ISRAddress[INT0_VECTOR_NUMBER] != NULL_PTR)
 1d4:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <aptr_ISRAddress>
 1d8:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <aptr_ISRAddress+0x1>
 1dc:	30 97       	sbiw	r30, 0x00	; 0
 1de:	09 f0       	breq	.+2      	; 0x1e2 <__vector_1+0x30>
   {
      aptr_ISRAddress[INT0_VECTOR_NUMBER]();
 1e0:	09 95       	icall
   }
}
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_2>:

/**
* @brief: INT1 ISR.
*/
ISR(INT1_IRQ)
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
   if(aptr_ISRAddress[INT1_VECTOR_NUMBER] != NULL_PTR)
 226:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <aptr_ISRAddress+0x2>
 22a:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <aptr_ISRAddress+0x3>
 22e:	30 97       	sbiw	r30, 0x00	; 0
 230:	09 f0       	breq	.+2      	; 0x234 <__vector_2+0x30>
   {
      aptr_ISRAddress[INT1_VECTOR_NUMBER]();
 232:	09 95       	icall
   }
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <__vector_3>:

/**
* @brief: INT2 ISR.
*/
ISR(INT2_IRQ)
{
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	2f 93       	push	r18
 262:	3f 93       	push	r19
 264:	4f 93       	push	r20
 266:	5f 93       	push	r21
 268:	6f 93       	push	r22
 26a:	7f 93       	push	r23
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	af 93       	push	r26
 272:	bf 93       	push	r27
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
   if(aptr_ISRAddress[INT2_VECTOR_NUMBER] != NULL_PTR)
 278:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <aptr_ISRAddress+0x4>
 27c:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <aptr_ISRAddress+0x5>
 280:	30 97       	sbiw	r30, 0x00	; 0
 282:	09 f0       	breq	.+2      	; 0x286 <__vector_3+0x30>
   {
      aptr_ISRAddress[INT2_VECTOR_NUMBER]();
 284:	09 95       	icall
   }
}
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	7f 91       	pop	r23
 294:	6f 91       	pop	r22
 296:	5f 91       	pop	r21
 298:	4f 91       	pop	r20
 29a:	3f 91       	pop	r19
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_4>:

/**
* @brief: TIMER2_COMP ISR.
*/
ISR(TIMER2_COMP_IRQ)
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER2_COMP_VECTOR_NUMBER] != NULL_PTR)
 2ca:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <aptr_ISRAddress+0x6>
 2ce:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <aptr_ISRAddress+0x7>
 2d2:	30 97       	sbiw	r30, 0x00	; 0
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <__vector_4+0x30>
   {
      aptr_ISRAddress[TIMER2_COMP_VECTOR_NUMBER]();
 2d6:	09 95       	icall
   }
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_5>:

/**
* @brief: TIMER2_OVF ISR.
*/
ISR(TIMER2_OVF_IRQ)
{
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER2_OVF_VECTOR_NUMBER] != NULL_PTR)
 31c:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <aptr_ISRAddress+0x8>
 320:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <aptr_ISRAddress+0x9>
 324:	30 97       	sbiw	r30, 0x00	; 0
 326:	09 f0       	breq	.+2      	; 0x32a <__vector_5+0x30>
   {
      aptr_ISRAddress[TIMER2_OVF_VECTOR_NUMBER]();
 328:	09 95       	icall
   }
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <__vector_6>:

/**
* @brief: TIMER1_CAPT ISR.
*/
ISR(TIMER1_CAPT_IRQ)
{
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_CAPT_VECTOR_NUMBER] != NULL_PTR)
 36e:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <aptr_ISRAddress+0xa>
 372:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <aptr_ISRAddress+0xb>
 376:	30 97       	sbiw	r30, 0x00	; 0
 378:	09 f0       	breq	.+2      	; 0x37c <__vector_6+0x30>
   {
      aptr_ISRAddress[TIMER1_CAPT_VECTOR_NUMBER]();
 37a:	09 95       	icall
   }
}
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	bf 91       	pop	r27
 382:	af 91       	pop	r26
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	7f 91       	pop	r23
 38a:	6f 91       	pop	r22
 38c:	5f 91       	pop	r21
 38e:	4f 91       	pop	r20
 390:	3f 91       	pop	r19
 392:	2f 91       	pop	r18
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <__vector_7>:

/**
* @brief: TIMER1_COMPA ISR.
*/
ISR(TIMER1_COMPA_IRQ)
{
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	2f 93       	push	r18
 3aa:	3f 93       	push	r19
 3ac:	4f 93       	push	r20
 3ae:	5f 93       	push	r21
 3b0:	6f 93       	push	r22
 3b2:	7f 93       	push	r23
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
 3b8:	af 93       	push	r26
 3ba:	bf 93       	push	r27
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_COMPA_VECTOR_NUMBER] != NULL_PTR)
 3c0:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <aptr_ISRAddress+0xc>
 3c4:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <aptr_ISRAddress+0xd>
 3c8:	30 97       	sbiw	r30, 0x00	; 0
 3ca:	09 f0       	breq	.+2      	; 0x3ce <__vector_7+0x30>
   {
      aptr_ISRAddress[TIMER1_COMPA_VECTOR_NUMBER]();
 3cc:	09 95       	icall
   }
}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	7f 91       	pop	r23
 3dc:	6f 91       	pop	r22
 3de:	5f 91       	pop	r21
 3e0:	4f 91       	pop	r20
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <__vector_8>:

/**
* @brief: TIMER1_COMPB ISR.
*/
ISR(TIMER1_COMPB_IRQ)
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_COMPB_VECTOR_NUMBER] != NULL_PTR)
 412:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <aptr_ISRAddress+0xe>
 416:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <aptr_ISRAddress+0xf>
 41a:	30 97       	sbiw	r30, 0x00	; 0
 41c:	09 f0       	breq	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
   {
      aptr_ISRAddress[TIMER1_COMPB_VECTOR_NUMBER]();
 41e:	09 95       	icall
   }
}
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	9f 91       	pop	r25
 42a:	8f 91       	pop	r24
 42c:	7f 91       	pop	r23
 42e:	6f 91       	pop	r22
 430:	5f 91       	pop	r21
 432:	4f 91       	pop	r20
 434:	3f 91       	pop	r19
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__vector_9>:

/**
* @brief: TIMER1_OVF ISR.
*/
ISR(TIMER1_OVF_IRQ)
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER1_OVF_VECTOR_NUMBER] != NULL_PTR)
 464:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <aptr_ISRAddress+0x10>
 468:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <aptr_ISRAddress+0x11>
 46c:	30 97       	sbiw	r30, 0x00	; 0
 46e:	09 f0       	breq	.+2      	; 0x472 <__vector_9+0x30>
   {
      aptr_ISRAddress[TIMER1_OVF_VECTOR_NUMBER]();
 470:	09 95       	icall
   }
}
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <__vector_10>:

/**
* @brief: TIMER0_COMP ISR.
*/
ISR(TIMER0_COMP_IRQ)
{
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
 49e:	2f 93       	push	r18
 4a0:	3f 93       	push	r19
 4a2:	4f 93       	push	r20
 4a4:	5f 93       	push	r21
 4a6:	6f 93       	push	r22
 4a8:	7f 93       	push	r23
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	af 93       	push	r26
 4b0:	bf 93       	push	r27
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER0_COMP_VECTOR_NUMBER] != NULL_PTR)
 4b6:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <aptr_ISRAddress+0x12>
 4ba:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <aptr_ISRAddress+0x13>
 4be:	30 97       	sbiw	r30, 0x00	; 0
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__vector_10+0x30>
   {
      aptr_ISRAddress[TIMER0_COMP_VECTOR_NUMBER]();
 4c2:	09 95       	icall
   }
}
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	bf 91       	pop	r27
 4ca:	af 91       	pop	r26
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	7f 91       	pop	r23
 4d2:	6f 91       	pop	r22
 4d4:	5f 91       	pop	r21
 4d6:	4f 91       	pop	r20
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <__vector_11>:

/**
* @brief: TIMER0_OVF ISR.
*/
ISR(TIMER0_OVF_IRQ)
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	2f 93       	push	r18
 4f2:	3f 93       	push	r19
 4f4:	4f 93       	push	r20
 4f6:	5f 93       	push	r21
 4f8:	6f 93       	push	r22
 4fa:	7f 93       	push	r23
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
   if(aptr_ISRAddress[TIMER0_OVF_VECTOR_NUMBER] != NULL_PTR)
 508:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <aptr_ISRAddress+0x14>
 50c:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <aptr_ISRAddress+0x15>
 510:	30 97       	sbiw	r30, 0x00	; 0
 512:	09 f0       	breq	.+2      	; 0x516 <__vector_11+0x30>
   {
      aptr_ISRAddress[TIMER0_OVF_VECTOR_NUMBER]();
 514:	09 95       	icall
   }
}
 516:	ff 91       	pop	r31
 518:	ef 91       	pop	r30
 51a:	bf 91       	pop	r27
 51c:	af 91       	pop	r26
 51e:	9f 91       	pop	r25
 520:	8f 91       	pop	r24
 522:	7f 91       	pop	r23
 524:	6f 91       	pop	r22
 526:	5f 91       	pop	r21
 528:	4f 91       	pop	r20
 52a:	3f 91       	pop	r19
 52c:	2f 91       	pop	r18
 52e:	0f 90       	pop	r0
 530:	0f be       	out	0x3f, r0	; 63
 532:	0f 90       	pop	r0
 534:	1f 90       	pop	r1
 536:	18 95       	reti

00000538 <__vector_12>:

/**
* @brief: SPI_STC ISR.
*/
ISR(SPI_STC_IRQ)
{
 538:	1f 92       	push	r1
 53a:	0f 92       	push	r0
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	0f 92       	push	r0
 540:	11 24       	eor	r1, r1
 542:	2f 93       	push	r18
 544:	3f 93       	push	r19
 546:	4f 93       	push	r20
 548:	5f 93       	push	r21
 54a:	6f 93       	push	r22
 54c:	7f 93       	push	r23
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
 552:	af 93       	push	r26
 554:	bf 93       	push	r27
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
   if(aptr_ISRAddress[SPI_STC_VECTOR_NUMBER] != NULL_PTR)
 55a:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <aptr_ISRAddress+0x16>
 55e:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <aptr_ISRAddress+0x17>
 562:	30 97       	sbiw	r30, 0x00	; 0
 564:	09 f0       	breq	.+2      	; 0x568 <__vector_12+0x30>
   {
      aptr_ISRAddress[SPI_STC_VECTOR_NUMBER]();
 566:	09 95       	icall
   }
}
 568:	ff 91       	pop	r31
 56a:	ef 91       	pop	r30
 56c:	bf 91       	pop	r27
 56e:	af 91       	pop	r26
 570:	9f 91       	pop	r25
 572:	8f 91       	pop	r24
 574:	7f 91       	pop	r23
 576:	6f 91       	pop	r22
 578:	5f 91       	pop	r21
 57a:	4f 91       	pop	r20
 57c:	3f 91       	pop	r19
 57e:	2f 91       	pop	r18
 580:	0f 90       	pop	r0
 582:	0f be       	out	0x3f, r0	; 63
 584:	0f 90       	pop	r0
 586:	1f 90       	pop	r1
 588:	18 95       	reti

0000058a <__vector_13>:

/**
* @brief: USART_RXC ISR.
*/
ISR(USART_RXC_IRQ)
{
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	2f 93       	push	r18
 596:	3f 93       	push	r19
 598:	4f 93       	push	r20
 59a:	5f 93       	push	r21
 59c:	6f 93       	push	r22
 59e:	7f 93       	push	r23
 5a0:	8f 93       	push	r24
 5a2:	9f 93       	push	r25
 5a4:	af 93       	push	r26
 5a6:	bf 93       	push	r27
 5a8:	ef 93       	push	r30
 5aa:	ff 93       	push	r31
   if(aptr_ISRAddress[USART_RXC_VECTOR_NUMBER] != NULL_PTR)
 5ac:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <aptr_ISRAddress+0x18>
 5b0:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <aptr_ISRAddress+0x19>
 5b4:	30 97       	sbiw	r30, 0x00	; 0
 5b6:	09 f0       	breq	.+2      	; 0x5ba <__vector_13+0x30>
   {
      aptr_ISRAddress[USART_RXC_VECTOR_NUMBER]();
 5b8:	09 95       	icall
   }
}
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	bf 91       	pop	r27
 5c0:	af 91       	pop	r26
 5c2:	9f 91       	pop	r25
 5c4:	8f 91       	pop	r24
 5c6:	7f 91       	pop	r23
 5c8:	6f 91       	pop	r22
 5ca:	5f 91       	pop	r21
 5cc:	4f 91       	pop	r20
 5ce:	3f 91       	pop	r19
 5d0:	2f 91       	pop	r18
 5d2:	0f 90       	pop	r0
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	0f 90       	pop	r0
 5d8:	1f 90       	pop	r1
 5da:	18 95       	reti

000005dc <__vector_14>:

/**
* @brief: USART_UDRE ISR.
*/
ISR(USART_UDRE_IRQ)
{
 5dc:	1f 92       	push	r1
 5de:	0f 92       	push	r0
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	0f 92       	push	r0
 5e4:	11 24       	eor	r1, r1
 5e6:	2f 93       	push	r18
 5e8:	3f 93       	push	r19
 5ea:	4f 93       	push	r20
 5ec:	5f 93       	push	r21
 5ee:	6f 93       	push	r22
 5f0:	7f 93       	push	r23
 5f2:	8f 93       	push	r24
 5f4:	9f 93       	push	r25
 5f6:	af 93       	push	r26
 5f8:	bf 93       	push	r27
 5fa:	ef 93       	push	r30
 5fc:	ff 93       	push	r31
   if(aptr_ISRAddress[USART_UDRE_VECTOR_NUMBER] != NULL_PTR)
 5fe:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <aptr_ISRAddress+0x1a>
 602:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <aptr_ISRAddress+0x1b>
 606:	30 97       	sbiw	r30, 0x00	; 0
 608:	09 f0       	breq	.+2      	; 0x60c <__vector_14+0x30>
   {
      aptr_ISRAddress[USART_UDRE_VECTOR_NUMBER]();
 60a:	09 95       	icall
   }
}
 60c:	ff 91       	pop	r31
 60e:	ef 91       	pop	r30
 610:	bf 91       	pop	r27
 612:	af 91       	pop	r26
 614:	9f 91       	pop	r25
 616:	8f 91       	pop	r24
 618:	7f 91       	pop	r23
 61a:	6f 91       	pop	r22
 61c:	5f 91       	pop	r21
 61e:	4f 91       	pop	r20
 620:	3f 91       	pop	r19
 622:	2f 91       	pop	r18
 624:	0f 90       	pop	r0
 626:	0f be       	out	0x3f, r0	; 63
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <__vector_15>:

/**
* @brief: USART_TXC ISR.
*/
ISR(USART_TXC_IRQ)
{
 62e:	1f 92       	push	r1
 630:	0f 92       	push	r0
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	0f 92       	push	r0
 636:	11 24       	eor	r1, r1
 638:	2f 93       	push	r18
 63a:	3f 93       	push	r19
 63c:	4f 93       	push	r20
 63e:	5f 93       	push	r21
 640:	6f 93       	push	r22
 642:	7f 93       	push	r23
 644:	8f 93       	push	r24
 646:	9f 93       	push	r25
 648:	af 93       	push	r26
 64a:	bf 93       	push	r27
 64c:	ef 93       	push	r30
 64e:	ff 93       	push	r31
   if(aptr_ISRAddress[USART_TXC_VECTOR_NUMBER] != NULL_PTR)
 650:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <aptr_ISRAddress+0x1c>
 654:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <aptr_ISRAddress+0x1d>
 658:	30 97       	sbiw	r30, 0x00	; 0
 65a:	09 f0       	breq	.+2      	; 0x65e <__vector_15+0x30>
   {
      aptr_ISRAddress[USART_TXC_VECTOR_NUMBER]();
 65c:	09 95       	icall
   }
}
 65e:	ff 91       	pop	r31
 660:	ef 91       	pop	r30
 662:	bf 91       	pop	r27
 664:	af 91       	pop	r26
 666:	9f 91       	pop	r25
 668:	8f 91       	pop	r24
 66a:	7f 91       	pop	r23
 66c:	6f 91       	pop	r22
 66e:	5f 91       	pop	r21
 670:	4f 91       	pop	r20
 672:	3f 91       	pop	r19
 674:	2f 91       	pop	r18
 676:	0f 90       	pop	r0
 678:	0f be       	out	0x3f, r0	; 63
 67a:	0f 90       	pop	r0
 67c:	1f 90       	pop	r1
 67e:	18 95       	reti

00000680 <__vector_16>:

/**
* @brief: ADC ISR.
*/
ISR(ADC_IRQ)
{
 680:	1f 92       	push	r1
 682:	0f 92       	push	r0
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	0f 92       	push	r0
 688:	11 24       	eor	r1, r1
 68a:	2f 93       	push	r18
 68c:	3f 93       	push	r19
 68e:	4f 93       	push	r20
 690:	5f 93       	push	r21
 692:	6f 93       	push	r22
 694:	7f 93       	push	r23
 696:	8f 93       	push	r24
 698:	9f 93       	push	r25
 69a:	af 93       	push	r26
 69c:	bf 93       	push	r27
 69e:	ef 93       	push	r30
 6a0:	ff 93       	push	r31
   if(aptr_ISRAddress[ADC_VECTOR_NUMBER] != NULL_PTR)
 6a2:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <aptr_ISRAddress+0x1e>
 6a6:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <aptr_ISRAddress+0x1f>
 6aa:	30 97       	sbiw	r30, 0x00	; 0
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <__vector_16+0x30>
   {
      aptr_ISRAddress[ADC_VECTOR_NUMBER]();
 6ae:	09 95       	icall
   }
}
 6b0:	ff 91       	pop	r31
 6b2:	ef 91       	pop	r30
 6b4:	bf 91       	pop	r27
 6b6:	af 91       	pop	r26
 6b8:	9f 91       	pop	r25
 6ba:	8f 91       	pop	r24
 6bc:	7f 91       	pop	r23
 6be:	6f 91       	pop	r22
 6c0:	5f 91       	pop	r21
 6c2:	4f 91       	pop	r20
 6c4:	3f 91       	pop	r19
 6c6:	2f 91       	pop	r18
 6c8:	0f 90       	pop	r0
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	0f 90       	pop	r0
 6ce:	1f 90       	pop	r1
 6d0:	18 95       	reti

000006d2 <__vector_17>:

/**
* @brief: EE_RDY ISR.
*/
ISR(EE_RDY_IRQ)
{
 6d2:	1f 92       	push	r1
 6d4:	0f 92       	push	r0
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	0f 92       	push	r0
 6da:	11 24       	eor	r1, r1
 6dc:	2f 93       	push	r18
 6de:	3f 93       	push	r19
 6e0:	4f 93       	push	r20
 6e2:	5f 93       	push	r21
 6e4:	6f 93       	push	r22
 6e6:	7f 93       	push	r23
 6e8:	8f 93       	push	r24
 6ea:	9f 93       	push	r25
 6ec:	af 93       	push	r26
 6ee:	bf 93       	push	r27
 6f0:	ef 93       	push	r30
 6f2:	ff 93       	push	r31
   if(aptr_ISRAddress[EE_RDY_VECTOR_NUMBER] != NULL_PTR)
 6f4:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <aptr_ISRAddress+0x20>
 6f8:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <aptr_ISRAddress+0x21>
 6fc:	30 97       	sbiw	r30, 0x00	; 0
 6fe:	09 f0       	breq	.+2      	; 0x702 <__vector_17+0x30>
   {
      aptr_ISRAddress[EE_RDY_VECTOR_NUMBER]();
 700:	09 95       	icall
   }
}
 702:	ff 91       	pop	r31
 704:	ef 91       	pop	r30
 706:	bf 91       	pop	r27
 708:	af 91       	pop	r26
 70a:	9f 91       	pop	r25
 70c:	8f 91       	pop	r24
 70e:	7f 91       	pop	r23
 710:	6f 91       	pop	r22
 712:	5f 91       	pop	r21
 714:	4f 91       	pop	r20
 716:	3f 91       	pop	r19
 718:	2f 91       	pop	r18
 71a:	0f 90       	pop	r0
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	0f 90       	pop	r0
 720:	1f 90       	pop	r1
 722:	18 95       	reti

00000724 <__vector_18>:

/**
* @brief: ANA_COMP ISR.
*/
ISR(ANA_COMP_IRQ)
{
 724:	1f 92       	push	r1
 726:	0f 92       	push	r0
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	0f 92       	push	r0
 72c:	11 24       	eor	r1, r1
 72e:	2f 93       	push	r18
 730:	3f 93       	push	r19
 732:	4f 93       	push	r20
 734:	5f 93       	push	r21
 736:	6f 93       	push	r22
 738:	7f 93       	push	r23
 73a:	8f 93       	push	r24
 73c:	9f 93       	push	r25
 73e:	af 93       	push	r26
 740:	bf 93       	push	r27
 742:	ef 93       	push	r30
 744:	ff 93       	push	r31
   if(aptr_ISRAddress[ANA_COMP_VECTOR_NUMBER] != NULL_PTR)
 746:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <aptr_ISRAddress+0x22>
 74a:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <aptr_ISRAddress+0x23>
 74e:	30 97       	sbiw	r30, 0x00	; 0
 750:	09 f0       	breq	.+2      	; 0x754 <__vector_18+0x30>
   {
      aptr_ISRAddress[ANA_COMP_VECTOR_NUMBER]();
 752:	09 95       	icall
   }
}
 754:	ff 91       	pop	r31
 756:	ef 91       	pop	r30
 758:	bf 91       	pop	r27
 75a:	af 91       	pop	r26
 75c:	9f 91       	pop	r25
 75e:	8f 91       	pop	r24
 760:	7f 91       	pop	r23
 762:	6f 91       	pop	r22
 764:	5f 91       	pop	r21
 766:	4f 91       	pop	r20
 768:	3f 91       	pop	r19
 76a:	2f 91       	pop	r18
 76c:	0f 90       	pop	r0
 76e:	0f be       	out	0x3f, r0	; 63
 770:	0f 90       	pop	r0
 772:	1f 90       	pop	r1
 774:	18 95       	reti

00000776 <__vector_19>:

/**
* @brief: TWI ISR.
*/
ISR(TWI_IRQ)
{
 776:	1f 92       	push	r1
 778:	0f 92       	push	r0
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	0f 92       	push	r0
 77e:	11 24       	eor	r1, r1
 780:	2f 93       	push	r18
 782:	3f 93       	push	r19
 784:	4f 93       	push	r20
 786:	5f 93       	push	r21
 788:	6f 93       	push	r22
 78a:	7f 93       	push	r23
 78c:	8f 93       	push	r24
 78e:	9f 93       	push	r25
 790:	af 93       	push	r26
 792:	bf 93       	push	r27
 794:	ef 93       	push	r30
 796:	ff 93       	push	r31
   if(aptr_ISRAddress[TWI_VECTOR_NUMBER] != NULL_PTR)
 798:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <aptr_ISRAddress+0x24>
 79c:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <aptr_ISRAddress+0x25>
 7a0:	30 97       	sbiw	r30, 0x00	; 0
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <__vector_19+0x30>
   {
      aptr_ISRAddress[TWI_VECTOR_NUMBER]();
 7a4:	09 95       	icall
   }
}
 7a6:	ff 91       	pop	r31
 7a8:	ef 91       	pop	r30
 7aa:	bf 91       	pop	r27
 7ac:	af 91       	pop	r26
 7ae:	9f 91       	pop	r25
 7b0:	8f 91       	pop	r24
 7b2:	7f 91       	pop	r23
 7b4:	6f 91       	pop	r22
 7b6:	5f 91       	pop	r21
 7b8:	4f 91       	pop	r20
 7ba:	3f 91       	pop	r19
 7bc:	2f 91       	pop	r18
 7be:	0f 90       	pop	r0
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	0f 90       	pop	r0
 7c4:	1f 90       	pop	r1
 7c6:	18 95       	reti

000007c8 <__vector_20>:

/**
* @brief: SPM_RDY ISR.
*/
ISR(SPM_RDY_IRQ)
{
 7c8:	1f 92       	push	r1
 7ca:	0f 92       	push	r0
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	0f 92       	push	r0
 7d0:	11 24       	eor	r1, r1
 7d2:	2f 93       	push	r18
 7d4:	3f 93       	push	r19
 7d6:	4f 93       	push	r20
 7d8:	5f 93       	push	r21
 7da:	6f 93       	push	r22
 7dc:	7f 93       	push	r23
 7de:	8f 93       	push	r24
 7e0:	9f 93       	push	r25
 7e2:	af 93       	push	r26
 7e4:	bf 93       	push	r27
 7e6:	ef 93       	push	r30
 7e8:	ff 93       	push	r31
   if(aptr_ISRAddress[SPM_RDY_VECTOR_NUMBER] != NULL_PTR)
 7ea:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <aptr_ISRAddress+0x26>
 7ee:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <aptr_ISRAddress+0x27>
 7f2:	30 97       	sbiw	r30, 0x00	; 0
 7f4:	09 f0       	breq	.+2      	; 0x7f8 <__vector_20+0x30>
   {
      aptr_ISRAddress[SPM_RDY_VECTOR_NUMBER]();
 7f6:	09 95       	icall
   }
 7f8:	ff 91       	pop	r31
 7fa:	ef 91       	pop	r30
 7fc:	bf 91       	pop	r27
 7fe:	af 91       	pop	r26
 800:	9f 91       	pop	r25
 802:	8f 91       	pop	r24
 804:	7f 91       	pop	r23
 806:	6f 91       	pop	r22
 808:	5f 91       	pop	r21
 80a:	4f 91       	pop	r20
 80c:	3f 91       	pop	r19
 80e:	2f 91       	pop	r18
 810:	0f 90       	pop	r0
 812:	0f be       	out	0x3f, r0	; 63
 814:	0f 90       	pop	r0
 816:	1f 90       	pop	r1
 818:	18 95       	reti

0000081a <TIM_Init>:
*
* @return function error state.
*/
ERROR_STATE_t TIM_Init(TIM_CH_t TIM_channel)
{
   switch(TIM_channel)
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	b1 f0       	breq	.+44     	; 0x84a <TIM_Init+0x30>
 81e:	18 f0       	brcs	.+6      	; 0x826 <TIM_Init+0xc>
 820:	82 30       	cpi	r24, 0x02	; 2
 822:	29 f1       	breq	.+74     	; 0x86e <__stack+0xf>
 824:	36 c0       	rjmp	.+108    	; 0x892 <__stack+0x33>
   {
      case TIMER_0:
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	fc 01       	movw	r30, r24
 82a:	ee 0f       	add	r30, r30
 82c:	ff 1f       	adc	r31, r31
 82e:	8e 0f       	add	r24, r30
 830:	9f 1f       	adc	r25, r31
 832:	fc 01       	movw	r30, r24
 834:	e0 5a       	subi	r30, 0xA0	; 160
 836:	ff 4f       	sbci	r31, 0xFF	; 255
 838:	80 81       	ld	r24, Z
 83a:	83 bf       	out	0x33, r24	; 51
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
 83c:	89 b7       	in	r24, 0x39	; 57
 83e:	8c 7f       	andi	r24, 0xFC	; 252
         TIMSK |= gastr_Timer_Config[TIM_channel].u8_interrupt_mode;
 840:	91 81       	ldd	r25, Z+1	; 0x01
 842:	89 2b       	or	r24, r25
 844:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
 846:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR0 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_0_INT_BITS);
         TIMSK |= gastr_Timer_Config[TIM_channel].u8_interrupt_mode;
         break;
 848:	08 95       	ret
      case TIMER_1:
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	fc 01       	movw	r30, r24
 84e:	ee 0f       	add	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	8e 0f       	add	r24, r30
 854:	9f 1f       	adc	r25, r31
 856:	fc 01       	movw	r30, r24
 858:	e0 5a       	subi	r30, 0xA0	; 160
 85a:	ff 4f       	sbci	r31, 0xFF	; 255
 85c:	80 81       	ld	r24, Z
 85e:	8e bd       	out	0x2e, r24	; 46
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
 860:	89 b7       	in	r24, 0x39	; 57
 862:	87 7e       	andi	r24, 0xE7	; 231
         TIMSK |= gastr_Timer_Config[TIM_channel].u8_interrupt_mode;
 864:	91 81       	ldd	r25, Z+1	; 0x01
 866:	89 2b       	or	r24, r25
 868:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
 86a:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR1B = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_1_INT_BITS);
         TIMSK |= gastr_Timer_Config[TIM_channel].u8_interrupt_mode;
         break;
 86c:	08 95       	ret
      case TIMER_2:
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	fc 01       	movw	r30, r24
 872:	ee 0f       	add	r30, r30
 874:	ff 1f       	adc	r31, r31
 876:	8e 0f       	add	r24, r30
 878:	9f 1f       	adc	r25, r31
 87a:	fc 01       	movw	r30, r24
 87c:	e0 5a       	subi	r30, 0xA0	; 160
 87e:	ff 4f       	sbci	r31, 0xFF	; 255
 880:	80 81       	ld	r24, Z
 882:	85 bd       	out	0x25, r24	; 37
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
 884:	89 b7       	in	r24, 0x39	; 57
 886:	8f 73       	andi	r24, 0x3F	; 63
         TIMSK |= gastr_Timer_Config[TIM_channel].u8_interrupt_mode;
 888:	91 81       	ldd	r25, Z+1	; 0x01
 88a:	89 2b       	or	r24, r25
 88c:	89 bf       	out	0x39, r24	; 57
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   
   /* return success message. */
   return ERROR_OK;
 88e:	80 e0       	ldi	r24, 0x00	; 0
         /* Initialize Mode */
         TCCR2 = gastr_Timer_Config[TIM_channel].u8_mode;
         /* Initialize Interrupt Mode */
         TIMSK &= ~(INTERRUPT_BITS << TIMER_2_INT_BITS);
         TIMSK |= gastr_Timer_Config[TIM_channel].u8_interrupt_mode;
         break;
 890:	08 95       	ret
      default:
         return TIMER_E_INVALID_CH_NUM;
 892:	8e ef       	ldi	r24, 0xFE	; 254
   }
   
   /* return success message. */
   return ERROR_OK;
}
 894:	08 95       	ret

00000896 <TIM_Start>:
   /* pointers to carry the required timer registers address. */
   volatile uint8_t * ptr_TimerControl = NULL_PTR;
   volatile uint8_t * ptr_TimerData = NULL_PTR;
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
 896:	81 30       	cpi	r24, 0x01	; 1
 898:	71 f0       	breq	.+28     	; 0x8b6 <TIM_Start+0x20>
 89a:	18 f0       	brcs	.+6      	; 0x8a2 <TIM_Start+0xc>
 89c:	82 30       	cpi	r24, 0x02	; 2
 89e:	31 f0       	breq	.+12     	; 0x8ac <TIM_Start+0x16>
 8a0:	1e c0       	rjmp	.+60     	; 0x8de <TIM_Start+0x48>
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
 8a2:	e2 e5       	ldi	r30, 0x52	; 82
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
   
   /* sets the registers pointers according to the required timer. */
   switch(TIM_channel)
   {
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
 8a6:	a3 e5       	ldi	r26, 0x53	; 83
 8a8:	b0 e0       	ldi	r27, 0x00	; 0
 8aa:	09 c0       	rjmp	.+18     	; 0x8be <TIM_Start+0x28>
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
 8ac:	e4 e4       	ldi	r30, 0x44	; 68
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
         break;
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
 8b0:	a5 e4       	ldi	r26, 0x45	; 69
 8b2:	b0 e0       	ldi	r27, 0x00	; 0
         ptr_TimerData = &TCNT2;
         break;
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <TIM_Start+0x28>
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
         ptr_TimerData = &TCNT1;
 8b6:	ec e4       	ldi	r30, 0x4C	; 76
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
      case TIMER_0:
         ptr_TimerControl = &TCCR0;
         ptr_TimerData = &TCNT0;
         break;
      case TIMER_1:
         ptr_TimerControl = &TCCR1B;
 8ba:	ae e4       	ldi	r26, 0x4E	; 78
 8bc:	b0 e0       	ldi	r27, 0x00	; 0
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
   }
   /* set timer ticks */
   *ptr_TimerData = PreloadVal;
 8be:	60 83       	st	Z, r22
   
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
 8c0:	2c 91       	ld	r18, X
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	fc 01       	movw	r30, r24
 8c6:	ee 0f       	add	r30, r30
 8c8:	ff 1f       	adc	r31, r31
 8ca:	8e 0f       	add	r24, r30
 8cc:	9f 1f       	adc	r25, r31
 8ce:	fc 01       	movw	r30, r24
 8d0:	e0 5a       	subi	r30, 0xA0	; 160
 8d2:	ff 4f       	sbci	r31, 0xFF	; 255
 8d4:	82 81       	ldd	r24, Z+2	; 0x02
 8d6:	82 2b       	or	r24, r18
 8d8:	8c 93       	st	X, r24
   
   /* return success message. */
   return ERROR_OK;
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	08 95       	ret
      case TIMER_2:
         ptr_TimerControl = &TCCR2;
         ptr_TimerData = &TCNT2;
         break;
      default:
         return TIMER_E_INVALID_CH_NUM;
 8de:	8e ef       	ldi	r24, 0xFE	; 254
   /* starts clock */
   *ptr_TimerControl |= gastr_Timer_Config[TIM_channel].u8_prescale;
   
   /* return success message. */
   return ERROR_OK;
}
 8e0:	08 95       	ret

000008e2 <ToggleGreenLED>:
/*- LOCAL FUNCTIONS IMPLEMENTATION
------------------------*/
void ToggleGreenLED(void)
{
   /* Toggle Green Led */
   DIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);
 8e2:	60 e0       	ldi	r22, 0x00	; 0
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_TogglePin>
   /* Deinstall this Callback from ISR Vector Table. */
   Interrupt_Deinstall(TIMER2_OVF_VECTOR_NUMBER);
 8ea:	84 e0       	ldi	r24, 0x04	; 4
 8ec:	0e 94 66 00 	call	0xcc	; 0xcc <Interrupt_Deinstall>
   /* Install the other Callback to ISR Vector Table. */
   Interrupt_Install(TIMER2_OVF_VECTOR_NUMBER, ToggleRedLED);
 8f0:	63 e8       	ldi	r22, 0x83	; 131
 8f2:	74 e0       	ldi	r23, 0x04	; 4
 8f4:	84 e0       	ldi	r24, 0x04	; 4
 8f6:	0e 94 47 00 	call	0x8e	; 0x8e <Interrupt_Install>
   /* Start a new Timer */
   TIM_Start(TIMER_2, 0);
 8fa:	60 e0       	ldi	r22, 0x00	; 0
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	82 e0       	ldi	r24, 0x02	; 2
 900:	0e 94 4b 04 	call	0x896	; 0x896 <TIM_Start>
 904:	08 95       	ret

00000906 <ToggleRedLED>:
}

void ToggleRedLED(void)
{
   /* Toggle Red Led */
   DIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 906:	61 e0       	ldi	r22, 0x01	; 1
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_TogglePin>
   /* Deinstall this Callback from ISR Vector Table. */
   Interrupt_Deinstall(TIMER2_OVF_VECTOR_NUMBER);
 90e:	84 e0       	ldi	r24, 0x04	; 4
 910:	0e 94 66 00 	call	0xcc	; 0xcc <Interrupt_Deinstall>
   /* Install the other Callback to ISR Vector Table. */
   Interrupt_Install(TIMER2_OVF_VECTOR_NUMBER, ToggleGreenLED);
 914:	61 e7       	ldi	r22, 0x71	; 113
 916:	74 e0       	ldi	r23, 0x04	; 4
 918:	84 e0       	ldi	r24, 0x04	; 4
 91a:	0e 94 47 00 	call	0x8e	; 0x8e <Interrupt_Install>
   /* Start a new Timer */
   TIM_Start(TIMER_2, 255);
 91e:	6f ef       	ldi	r22, 0xFF	; 255
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	82 e0       	ldi	r24, 0x02	; 2
 924:	0e 94 4b 04 	call	0x896	; 0x896 <TIM_Start>
 928:	08 95       	ret

0000092a <main>:
}

int main(void)
{
   /* Initialize Led Pins */
   DIO_SetPinDirection(GREEN_LED_PORT, GREEN_LED_PIN, OUTPUT);
 92a:	41 e0       	ldi	r20, 0x01	; 1
 92c:	60 e0       	ldi	r22, 0x00	; 0
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_SetPinDirection>
   DIO_SetPinDirection(RED_LED_PORT, RED_LED_PIN, OUTPUT);
 934:	41 e0       	ldi	r20, 0x01	; 1
 936:	61 e0       	ldi	r22, 0x01	; 1
 938:	80 e0       	ldi	r24, 0x00	; 0
 93a:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_SetPinDirection>
   
   /* Initialize Timer */
   TIM_Init(TIMER_2);
 93e:	82 e0       	ldi	r24, 0x02	; 2
 940:	0e 94 0d 04 	call	0x81a	; 0x81a <TIM_Init>

   /* Install Green Led Toggle API in ISR Vector Table */
   Interrupt_Install(TIMER2_OVF_VECTOR_NUMBER, ToggleGreenLED);
 944:	61 e7       	ldi	r22, 0x71	; 113
 946:	74 e0       	ldi	r23, 0x04	; 4
 948:	84 e0       	ldi	r24, 0x04	; 4
 94a:	0e 94 47 00 	call	0x8e	; 0x8e <Interrupt_Install>
   /* Enable Globale Interrupt */
   INTERRUPTS_Enable();
 94e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <INTERRUPTS_Enable>
   
   /* Start a Timer */
   TIM_Start(TIMER_2, 0);
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	82 e0       	ldi	r24, 0x02	; 2
 958:	0e 94 4b 04 	call	0x896	; 0x896 <TIM_Start>
 95c:	ff cf       	rjmp	.-2      	; 0x95c <main+0x32>

0000095e <_exit>:
 95e:	f8 94       	cli

00000960 <__stop_program>:
 960:	ff cf       	rjmp	.-2      	; 0x960 <__stop_program>
