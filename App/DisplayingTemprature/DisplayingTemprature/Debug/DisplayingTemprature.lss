
DisplayingTemprature.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000009b8  00000a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800092  00800092  00000a7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ab0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e59  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c13  00000000  00000000  00002b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001167  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00004880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009eb  00000000  00000000  00004ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001122  00000000  00000000  0000558b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000066ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 39       	cpi	r26, 0x93	; 147
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <main>
  8a:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KP_Init>:
* @param [in]  KP_CH   -  Keypad channel number.
*
* @return function error state.
*/
KEYPAD_ERROR_state_t KP_Init(uint8_t KP_CH)
{
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
   uint8_t u8_KPColsNum;
   uint8_t u8_KPRowPort;
   uint8_t u8_KPRowPin;
   uint8_t u8_KPRowsNum;
   
   switch(KP_CH)
  9e:	81 11       	cpse	r24, r1
  a0:	2c c0       	rjmp	.+88     	; 0xfa <KP_Init+0x68>
   {
      #ifdef KP_CH_0
      case KP_CH_0:
         u8_KPColPort = KP_CH_0_COL_PORT;
  a2:	00 91 6f 00 	lds	r16, 0x006F	; 0x80006f <KP_CH_0_COL_PORT>
         u8_KPColPin = KP_CH_0_COL_START_PIN;
  a6:	e0 90 6e 00 	lds	r14, 0x006E	; 0x80006e <KP_CH_0_COL_START_PIN>
         u8_KPColsNum = KP_CH_0_COLS;
         u8_KPRowPort = KP_CH_0_ROW_PORT;
  aa:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <KP_CH_0_ROW_PORT>
         u8_KPRowPin = KP_CH_0_ROW_START_PIN;
  ae:	f0 90 6c 00 	lds	r15, 0x006C	; 0x80006c <KP_CH_0_ROW_START_PIN>
      default:
         return E_KEYPAD_INVALID_CH;
   }
   
   /* Set columns pins to output initially High */
   for(uint8_t u8_Counter = 0; u8_Counter < u8_KPColsNum; u8_Counter++)
  b2:	c0 e0       	ldi	r28, 0x00	; 0
  b4:	0d c0       	rjmp	.+26     	; 0xd0 <KP_Init+0x3e>
   {
      DIO_SetPinDirection(u8_KPColPort, (u8_KPColPin + u8_Counter) , OUTPUT);
  b6:	dc 2f       	mov	r29, r28
  b8:	de 0d       	add	r29, r14
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	6d 2f       	mov	r22, r29
  be:	80 2f       	mov	r24, r16
  c0:	0e 94 49 03 	call	0x692	; 0x692 <DIO_SetPinDirection>
      DIO_WritePin(u8_KPColPort, (u8_KPColPin + u8_Counter) , HIGH);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	6d 2f       	mov	r22, r29
  c8:	80 2f       	mov	r24, r16
  ca:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
      default:
         return E_KEYPAD_INVALID_CH;
   }
   
   /* Set columns pins to output initially High */
   for(uint8_t u8_Counter = 0; u8_Counter < u8_KPColsNum; u8_Counter++)
  ce:	cf 5f       	subi	r28, 0xFF	; 255
  d0:	c3 30       	cpi	r28, 0x03	; 3
  d2:	88 f3       	brcs	.-30     	; 0xb6 <KP_Init+0x24>
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	0d c0       	rjmp	.+26     	; 0xf2 <KP_Init+0x60>
   }
   
   /* Set rows pins to input and set pull up resistors */
   for(uint8_t u8_Counter = 0; u8_Counter < u8_KPRowsNum; u8_Counter++)
   {
      DIO_SetPinDirection(u8_KPRowPort, (u8_KPRowPin + u8_Counter) , INPUT);
  d8:	dc 2f       	mov	r29, r28
  da:	df 0d       	add	r29, r15
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	6d 2f       	mov	r22, r29
  e0:	81 2f       	mov	r24, r17
  e2:	0e 94 49 03 	call	0x692	; 0x692 <DIO_SetPinDirection>
      DIO_WritePin(u8_KPRowPort, (u8_KPRowPin + u8_Counter) , HIGH);
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	6d 2f       	mov	r22, r29
  ea:	81 2f       	mov	r24, r17
  ec:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
      DIO_SetPinDirection(u8_KPColPort, (u8_KPColPin + u8_Counter) , OUTPUT);
      DIO_WritePin(u8_KPColPort, (u8_KPColPin + u8_Counter) , HIGH);
   }
   
   /* Set rows pins to input and set pull up resistors */
   for(uint8_t u8_Counter = 0; u8_Counter < u8_KPRowsNum; u8_Counter++)
  f0:	cf 5f       	subi	r28, 0xFF	; 255
  f2:	c4 30       	cpi	r28, 0x04	; 4
  f4:	88 f3       	brcs	.-30     	; 0xd8 <KP_Init+0x46>
      DIO_SetPinDirection(u8_KPRowPort, (u8_KPRowPin + u8_Counter) , INPUT);
      DIO_WritePin(u8_KPRowPort, (u8_KPRowPin + u8_Counter) , HIGH);
   }
   
   /* return success status */
   return E_KEYPAD_SUCCESS;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	01 c0       	rjmp	.+2      	; 0xfc <KP_Init+0x6a>
         u8_KPRowPin = KP_CH_0_ROW_START_PIN;
         u8_KPRowsNum = KP_CH_0_ROWS;
         break;
      #endif
      default:
         return E_KEYPAD_INVALID_CH;
  fa:	82 e0       	ldi	r24, 0x02	; 2
      DIO_WritePin(u8_KPRowPort, (u8_KPRowPin + u8_Counter) , HIGH);
   }
   
   /* return success status */
   return E_KEYPAD_SUCCESS;
}
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	0f 91       	pop	r16
 104:	ff 90       	pop	r15
 106:	ef 90       	pop	r14
 108:	08 95       	ret

0000010a <KP_GetPressedValue>:
* @param [out] Data     -  Pressed Key Value.
*
* @return function error state.
*/
KEYPAD_ERROR_state_t KP_GetPressedValue(uint8_t KP_CH, uint8_t * Data)
{
 10a:	7f 92       	push	r7
 10c:	8f 92       	push	r8
 10e:	9f 92       	push	r9
 110:	af 92       	push	r10
 112:	bf 92       	push	r11
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	1f 92       	push	r1
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
   /* Make sure the function didn't get an uninitialized pointer */
   if(NULL_PTR == Data)
 12a:	61 15       	cp	r22, r1
 12c:	71 05       	cpc	r23, r1
 12e:	09 f4       	brne	.+2      	; 0x132 <KP_GetPressedValue+0x28>
 130:	54 c0       	rjmp	.+168    	; 0x1da <KP_GetPressedValue+0xd0>
   uint8_t u8_KPColsNum;
   uint8_t u8_KPRowPort;
   uint8_t u8_KPRowPin;
   uint8_t u8_KPRowsNum;
   
   switch(KP_CH)
 132:	81 11       	cpse	r24, r1
 134:	54 c0       	rjmp	.+168    	; 0x1de <KP_GetPressedValue+0xd4>
 136:	7b 01       	movw	r14, r22
   {
      #ifdef KP_CH_0
      case KP_CH_0:
         u8_KPColPort = KP_CH_0_COL_PORT;
 138:	a0 90 6f 00 	lds	r10, 0x006F	; 0x80006f <KP_CH_0_COL_PORT>
         u8_KPColPin = KP_CH_0_COL_START_PIN;
 13c:	90 90 6e 00 	lds	r9, 0x006E	; 0x80006e <KP_CH_0_COL_START_PIN>
         u8_KPColsNum = KP_CH_0_COLS;
         u8_KPRowPort = KP_CH_0_ROW_PORT;
 140:	80 90 6d 00 	lds	r8, 0x006D	; 0x80006d <KP_CH_0_ROW_PORT>
         u8_KPRowPin = KP_CH_0_ROW_START_PIN;
 144:	c0 90 6c 00 	lds	r12, 0x006C	; 0x80006c <KP_CH_0_ROW_START_PIN>
   
   uint8_t u8_KeyState;
   uint8_t u8_Flag = NOT_PRESSED;
   
   /* loops on every column */
   for(uint8_t u8_ColCounter = 0; u8_ColCounter < u8_KPColsNum; u8_ColCounter++)
 148:	d1 2c       	mov	r13, r1
      default:
         return E_KEYPAD_INVALID_CH;
   }
   
   uint8_t u8_KeyState;
   uint8_t u8_Flag = NOT_PRESSED;
 14a:	77 24       	eor	r7, r7
 14c:	73 94       	inc	r7
   
   /* loops on every column */
   for(uint8_t u8_ColCounter = 0; u8_ColCounter < u8_KPColsNum; u8_ColCounter++)
 14e:	3b c0       	rjmp	.+118    	; 0x1c6 <KP_GetPressedValue+0xbc>
   {
      /* set column value to low */
      DIO_WritePin(u8_KPColPort, (u8_KPColPin + u8_ColCounter) , LOW);
 150:	bd 2c       	mov	r11, r13
 152:	b9 0c       	add	r11, r9
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	6b 2d       	mov	r22, r11
 158:	8a 2d       	mov	r24, r10
 15a:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
      
      /* loops on every row */
      for(uint8_t u8_RowCounter = 0; u8_RowCounter < u8_KPRowsNum; u8_RowCounter++)
 15e:	00 e0       	ldi	r16, 0x00	; 0
 160:	28 c0       	rjmp	.+80     	; 0x1b2 <KP_GetPressedValue+0xa8>
      {
         /* read row value */
         DIO_ReadPin(u8_KPRowPort, (u8_KPRowPin + u8_RowCounter), &u8_KeyState);
 162:	10 2f       	mov	r17, r16
 164:	1c 0d       	add	r17, r12
 166:	ae 01       	movw	r20, r28
 168:	4f 5f       	subi	r20, 0xFF	; 255
 16a:	5f 4f       	sbci	r21, 0xFF	; 255
 16c:	61 2f       	mov	r22, r17
 16e:	88 2d       	mov	r24, r8
 170:	0e 94 b9 03 	call	0x772	; 0x772 <DIO_ReadPin>
         /* check if row is pressed */
         if(u8_KeyState == PRESSED)
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	81 11       	cpse	r24, r1
 178:	1b c0       	rjmp	.+54     	; 0x1b0 <KP_GetPressedValue+0xa6>
         {
            u8_Flag = PRESSED;
            *Data = KP_CH_0_MAP[u8_RowCounter][u8_ColCounter];
 17a:	80 2f       	mov	r24, r16
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e8 0f       	add	r30, r24
 186:	f9 1f       	adc	r31, r25
 188:	e0 5a       	subi	r30, 0xA0	; 160
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	ed 0d       	add	r30, r13
 18e:	f1 1d       	adc	r31, r1
 190:	80 81       	ld	r24, Z
 192:	f7 01       	movw	r30, r14
 194:	80 83       	st	Z, r24
            while(u8_KeyState == PRESSED)
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <KP_GetPressedValue+0x9c>
            {
               DIO_ReadPin(u8_KPRowPort, (u8_KPRowPin + u8_RowCounter), &u8_KeyState);
 198:	ae 01       	movw	r20, r28
 19a:	4f 5f       	subi	r20, 0xFF	; 255
 19c:	5f 4f       	sbci	r21, 0xFF	; 255
 19e:	61 2f       	mov	r22, r17
 1a0:	88 2d       	mov	r24, r8
 1a2:	0e 94 b9 03 	call	0x772	; 0x772 <DIO_ReadPin>
         /* check if row is pressed */
         if(u8_KeyState == PRESSED)
         {
            u8_Flag = PRESSED;
            *Data = KP_CH_0_MAP[u8_RowCounter][u8_ColCounter];
            while(u8_KeyState == PRESSED)
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	88 23       	and	r24, r24
 1aa:	b1 f3       	breq	.-20     	; 0x198 <KP_GetPressedValue+0x8e>
         /* read row value */
         DIO_ReadPin(u8_KPRowPort, (u8_KPRowPin + u8_RowCounter), &u8_KeyState);
         /* check if row is pressed */
         if(u8_KeyState == PRESSED)
         {
            u8_Flag = PRESSED;
 1ac:	71 2c       	mov	r7, r1
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <KP_GetPressedValue+0xac>
   {
      /* set column value to low */
      DIO_WritePin(u8_KPColPort, (u8_KPColPin + u8_ColCounter) , LOW);
      
      /* loops on every row */
      for(uint8_t u8_RowCounter = 0; u8_RowCounter < u8_KPRowsNum; u8_RowCounter++)
 1b0:	0f 5f       	subi	r16, 0xFF	; 255
 1b2:	04 30       	cpi	r16, 0x04	; 4
 1b4:	b0 f2       	brcs	.-84     	; 0x162 <KP_GetPressedValue+0x58>
            break;
         }
      }
      
      /* return column value to HIGH */
      DIO_WritePin(u8_KPColPort, (u8_KPColPin + u8_ColCounter) , HIGH);
 1b6:	41 e0       	ldi	r20, 0x01	; 1
 1b8:	6b 2d       	mov	r22, r11
 1ba:	8a 2d       	mov	r24, r10
 1bc:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
      
      if(PRESSED == u8_Flag)
 1c0:	77 20       	and	r7, r7
 1c2:	21 f0       	breq	.+8      	; 0x1cc <KP_GetPressedValue+0xc2>
   
   uint8_t u8_KeyState;
   uint8_t u8_Flag = NOT_PRESSED;
   
   /* loops on every column */
   for(uint8_t u8_ColCounter = 0; u8_ColCounter < u8_KPColsNum; u8_ColCounter++)
 1c4:	d3 94       	inc	r13
 1c6:	f2 e0       	ldi	r31, 0x02	; 2
 1c8:	fd 15       	cp	r31, r13
 1ca:	10 f6       	brcc	.-124    	; 0x150 <KP_GetPressedValue+0x46>
         break;
      }
   }
   
   /* return value 0 if it didn't find any pressed button */
   if(NOT_PRESSED == u8_Flag)
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	78 12       	cpse	r7, r24
 1d0:	08 c0       	rjmp	.+16     	; 0x1e2 <KP_GetPressedValue+0xd8>
   {
      *Data = 0;
 1d2:	f7 01       	movw	r30, r14
 1d4:	10 82       	st	Z, r1
   }
   
   /* return success status */
   return E_KEYPAD_SUCCESS;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <KP_GetPressedValue+0xda>
KEYPAD_ERROR_state_t KP_GetPressedValue(uint8_t KP_CH, uint8_t * Data)
{
   /* Make sure the function didn't get an uninitialized pointer */
   if(NULL_PTR == Data)
   {
      return E_KEYPAD_NULL_PTR;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <KP_GetPressedValue+0xda>
         u8_KPRowPin = KP_CH_0_ROW_START_PIN;
         u8_KPRowsNum = KP_CH_0_ROWS;
         break;
      #endif
      default:
         return E_KEYPAD_INVALID_CH;
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <KP_GetPressedValue+0xda>
   {
      *Data = 0;
   }
   
   /* return success status */
   return E_KEYPAD_SUCCESS;
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0f 90       	pop	r0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	df 90       	pop	r13
 1f4:	cf 90       	pop	r12
 1f6:	bf 90       	pop	r11
 1f8:	af 90       	pop	r10
 1fa:	9f 90       	pop	r9
 1fc:	8f 90       	pop	r8
 1fe:	7f 90       	pop	r7
 200:	08 95       	ret

00000202 <LCD_SendCommand>:
* @param [in]  Command  -  Command to send to LCD.
*
* @return function error state.
*/
LCD_ERROR_state_t LCD_SendCommand(uint8_t LCD_CH, uint8_t Command)
{
 202:	df 92       	push	r13
 204:	ef 92       	push	r14
 206:	ff 92       	push	r15
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
   uint8_t u8_LCDEPort;
   uint8_t u8_LCDEPin;
   uint8_t u8_LCDDataPort;
   uint8_t u8_LCDDataPin;
   
   switch(LCD_CH)
 210:	81 11       	cpse	r24, r1
 212:	5b c0       	rjmp	.+182    	; 0x2ca <LCD_SendCommand+0xc8>
 214:	d6 2f       	mov	r29, r22
   {
      #ifdef LCD_CH_0
      case LCD_CH_0:
         u8_LCDRSPort = LCD_CH_0_RS_PORT;
         u8_LCDRSPin = LCD_CH_0_RS_PIN;
 216:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <LCD_CH_0_RS_PIN>
         u8_LCDRWPort = LCD_CH_0_RW_PORT;
 21a:	c0 91 75 00 	lds	r28, 0x0075	; 0x800075 <LCD_CH_0_RW_PORT>
         u8_LCDRWPin = LCD_CH_0_RW_PIN;
 21e:	d0 90 74 00 	lds	r13, 0x0074	; 0x800074 <LCD_CH_0_RW_PIN>
         u8_LCDEPort = LCD_CH_0_E_PORT;
 222:	f0 90 73 00 	lds	r15, 0x0073	; 0x800073 <LCD_CH_0_E_PORT>
         u8_LCDEPin = LCD_CH_0_E_PIN;
 226:	e0 90 72 00 	lds	r14, 0x0072	; 0x800072 <LCD_CH_0_E_PIN>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
 22a:	10 91 71 00 	lds	r17, 0x0071	; 0x800071 <LCD_CH_0_DATA_PORT>
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
 22e:	00 91 70 00 	lds	r16, 0x0070	; 0x800070 <LCD_CH_0_DATA_START_PIN>
      default:
         return E_LCD_INVALID_CH;
   }
   
   /* select control register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, LOW);
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <LCD_CH_0_RS_PORT>
 238:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	6d 2d       	mov	r22, r13
 240:	8c 2f       	mov	r24, r28
 242:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   
   /* Send HIGH bits of the Command */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 246:	c0 e0       	ldi	r28, 0x00	; 0
 248:	11 c0       	rjmp	.+34     	; 0x26c <LCD_SendCommand+0x6a>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Command >> (4 + u8_DataCounter)) & HIGH) );
 24a:	8c 2f       	mov	r24, r28
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	04 96       	adiw	r24, 0x04	; 4
 250:	4d 2f       	mov	r20, r29
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <LCD_SendCommand+0x58>
 256:	55 95       	asr	r21
 258:	47 95       	ror	r20
 25a:	8a 95       	dec	r24
 25c:	e2 f7       	brpl	.-8      	; 0x256 <LCD_SendCommand+0x54>
 25e:	41 70       	andi	r20, 0x01	; 1
 260:	6c 2f       	mov	r22, r28
 262:	60 0f       	add	r22, r16
 264:	81 2f       	mov	r24, r17
 266:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   /* select control register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, LOW);
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
   
   /* Send HIGH bits of the Command */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 26a:	cf 5f       	subi	r28, 0xFF	; 255
 26c:	c4 30       	cpi	r28, 0x04	; 4
 26e:	68 f3       	brcs	.-38     	; 0x24a <LCD_SendCommand+0x48>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Command >> (4 + u8_DataCounter)) & HIGH) );
   }
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	6e 2d       	mov	r22, r14
 274:	8f 2d       	mov	r24, r15
 276:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   dummy_delay();
 27a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <dummy_delay>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	6e 2d       	mov	r22, r14
 282:	8f 2d       	mov	r24, r15
 284:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   
   /* Send LOW bits of the Command  */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 288:	c0 e0       	ldi	r28, 0x00	; 0
 28a:	0f c0       	rjmp	.+30     	; 0x2aa <LCD_SendCommand+0xa8>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Command >> (u8_DataCounter)) & HIGH) );
 28c:	4d 2f       	mov	r20, r29
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	0c 2e       	mov	r0, r28
 292:	02 c0       	rjmp	.+4      	; 0x298 <LCD_SendCommand+0x96>
 294:	55 95       	asr	r21
 296:	47 95       	ror	r20
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <LCD_SendCommand+0x92>
 29c:	41 70       	andi	r20, 0x01	; 1
 29e:	6c 2f       	mov	r22, r28
 2a0:	60 0f       	add	r22, r16
 2a2:	81 2f       	mov	r24, r17
 2a4:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
   dummy_delay();
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
   
   /* Send LOW bits of the Command  */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 2a8:	cf 5f       	subi	r28, 0xFF	; 255
 2aa:	c4 30       	cpi	r28, 0x04	; 4
 2ac:	78 f3       	brcs	.-34     	; 0x28c <LCD_SendCommand+0x8a>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Command >> (u8_DataCounter)) & HIGH) );
   }
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	6e 2d       	mov	r22, r14
 2b2:	8f 2d       	mov	r24, r15
 2b4:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   dummy_delay();
 2b8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <dummy_delay>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	6e 2d       	mov	r22, r14
 2c0:	8f 2d       	mov	r24, r15
 2c2:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   
   
   /* return success status */
   return E_LCD_SUCCESS;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <LCD_SendCommand+0xca>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 2ca:	82 e0       	ldi	r24, 0x02	; 2
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
   
   
   /* return success status */
   return E_LCD_SUCCESS;
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	08 95       	ret

000002dc <LCD_Init>:
* @param [in]  LCD_CH   -  LCD channel number.
*
* @return function error state.
*/
LCD_ERROR_state_t LCD_Init(uint8_t LCD_CH)
{
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
   uint8_t u8_LCDEPort;
   uint8_t u8_LCDEPin;
   uint8_t u8_LCDDataPort;
   uint8_t u8_LCDDataPin;
   
   switch(LCD_CH)
 2e8:	81 11       	cpse	r24, r1
 2ea:	3a c0       	rjmp	.+116    	; 0x360 <LCD_Init+0x84>
   {
      #ifdef LCD_CH_0
      case LCD_CH_0:
         u8_LCDRSPort = LCD_CH_0_RS_PORT;
         u8_LCDRSPin = LCD_CH_0_RS_PIN;
 2ec:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <LCD_CH_0_RS_PIN>
         u8_LCDRWPort = LCD_CH_0_RW_PORT;
 2f0:	f0 90 75 00 	lds	r15, 0x0075	; 0x800075 <LCD_CH_0_RW_PORT>
         u8_LCDRWPin = LCD_CH_0_RW_PIN;
 2f4:	e0 90 74 00 	lds	r14, 0x0074	; 0x800074 <LCD_CH_0_RW_PIN>
         u8_LCDEPort = LCD_CH_0_E_PORT;
 2f8:	c0 91 73 00 	lds	r28, 0x0073	; 0x800073 <LCD_CH_0_E_PORT>
         u8_LCDEPin = LCD_CH_0_E_PIN;
 2fc:	00 91 72 00 	lds	r16, 0x0072	; 0x800072 <LCD_CH_0_E_PIN>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
 300:	10 91 71 00 	lds	r17, 0x0071	; 0x800071 <LCD_CH_0_DATA_PORT>
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
 304:	d0 91 70 00 	lds	r29, 0x0070	; 0x800070 <LCD_CH_0_DATA_START_PIN>
      default:
         return E_LCD_INVALID_CH;
   }
   
   /* Set control pins to output */
   DIO_SetPinDirection(u8_LCDRSPort, u8_LCDRSPin, OUTPUT);
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <LCD_CH_0_RS_PORT>
 30e:	0e 94 49 03 	call	0x692	; 0x692 <DIO_SetPinDirection>
   DIO_SetPinDirection(u8_LCDRWPort, u8_LCDRWPin, OUTPUT);
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	6e 2d       	mov	r22, r14
 316:	8f 2d       	mov	r24, r15
 318:	0e 94 49 03 	call	0x692	; 0x692 <DIO_SetPinDirection>
   DIO_SetPinDirection(u8_LCDEPort, u8_LCDEPin, OUTPUT);
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	60 2f       	mov	r22, r16
 320:	8c 2f       	mov	r24, r28
 322:	0e 94 49 03 	call	0x692	; 0x692 <DIO_SetPinDirection>
   
   /* Set data pins to output */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 326:	c0 e0       	ldi	r28, 0x00	; 0
 328:	07 c0       	rjmp	.+14     	; 0x338 <LCD_Init+0x5c>
   {
      DIO_SetPinDirection(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , OUTPUT);
 32a:	6c 2f       	mov	r22, r28
 32c:	6d 0f       	add	r22, r29
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	81 2f       	mov	r24, r17
 332:	0e 94 49 03 	call	0x692	; 0x692 <DIO_SetPinDirection>
   DIO_SetPinDirection(u8_LCDRSPort, u8_LCDRSPin, OUTPUT);
   DIO_SetPinDirection(u8_LCDRWPort, u8_LCDRWPin, OUTPUT);
   DIO_SetPinDirection(u8_LCDEPort, u8_LCDEPin, OUTPUT);
   
   /* Set data pins to output */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 336:	cf 5f       	subi	r28, 0xFF	; 255
 338:	c4 30       	cpi	r28, 0x04	; 4
 33a:	b8 f3       	brcs	.-18     	; 0x32a <LCD_Init+0x4e>
   {
      DIO_SetPinDirection(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , OUTPUT);
   }
   
   /* Initialize LCD Commands */
   LCD_SendCommand(LCD_CH_0, LCD_4_BIT_MODE);
 33c:	62 e0       	ldi	r22, 0x02	; 2
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendCommand>
   LCD_SendCommand(LCD_CH_0, LCD_ENABLE_2_ROWS);
 344:	68 e2       	ldi	r22, 0x28	; 40
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendCommand>
   LCD_SendCommand(LCD_CH_0, LCD_CURSOR_OFF);
 34c:	6c e0       	ldi	r22, 0x0C	; 12
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendCommand>
   LCD_SendCommand(LCD_CH_0, LCD_CLEAR);
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendCommand>
   
   /* return success status */
   return E_LCD_SUCCESS;
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	01 c0       	rjmp	.+2      	; 0x362 <LCD_Init+0x86>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 360:	82 e0       	ldi	r24, 0x02	; 2
   LCD_SendCommand(LCD_CH_0, LCD_CURSOR_OFF);
   LCD_SendCommand(LCD_CH_0, LCD_CLEAR);
   
   /* return success status */
   return E_LCD_SUCCESS;
}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	ff 90       	pop	r15
 36c:	ef 90       	pop	r14
 36e:	08 95       	ret

00000370 <LCD_SendCharacter>:
* @param [in]  Data     -  Character to send to LCD.
*
* @return function error state.
*/
LCD_ERROR_state_t LCD_SendCharacter(uint8_t LCD_CH, uint8_t Data)
{
 370:	df 92       	push	r13
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
   uint8_t u8_LCDEPort;
   uint8_t u8_LCDEPin;
   uint8_t u8_LCDDataPort;
   uint8_t u8_LCDDataPin;
   
   switch(LCD_CH)
 37e:	81 11       	cpse	r24, r1
 380:	5b c0       	rjmp	.+182    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 382:	d6 2f       	mov	r29, r22
   {
      #ifdef LCD_CH_0
      case LCD_CH_0:
         u8_LCDRSPort = LCD_CH_0_RS_PORT;
         u8_LCDRSPin = LCD_CH_0_RS_PIN;
 384:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <LCD_CH_0_RS_PIN>
         u8_LCDRWPort = LCD_CH_0_RW_PORT;
 388:	c0 91 75 00 	lds	r28, 0x0075	; 0x800075 <LCD_CH_0_RW_PORT>
         u8_LCDRWPin = LCD_CH_0_RW_PIN;
 38c:	d0 90 74 00 	lds	r13, 0x0074	; 0x800074 <LCD_CH_0_RW_PIN>
         u8_LCDEPort = LCD_CH_0_E_PORT;
 390:	f0 90 73 00 	lds	r15, 0x0073	; 0x800073 <LCD_CH_0_E_PORT>
         u8_LCDEPin = LCD_CH_0_E_PIN;
 394:	e0 90 72 00 	lds	r14, 0x0072	; 0x800072 <LCD_CH_0_E_PIN>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
 398:	10 91 71 00 	lds	r17, 0x0071	; 0x800071 <LCD_CH_0_DATA_PORT>
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
 39c:	00 91 70 00 	lds	r16, 0x0070	; 0x800070 <LCD_CH_0_DATA_START_PIN>
      default:
         return E_LCD_INVALID_CH;
   }
   
   /* select data register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, HIGH);
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <LCD_CH_0_RS_PORT>
 3a6:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	6d 2d       	mov	r22, r13
 3ae:	8c 2f       	mov	r24, r28
 3b0:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   
   /* Send HIGH bits of the Data */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 3b4:	c0 e0       	ldi	r28, 0x00	; 0
 3b6:	11 c0       	rjmp	.+34     	; 0x3da <LCD_SendCharacter+0x6a>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data >> (4 + u8_DataCounter)) & HIGH) );
 3b8:	8c 2f       	mov	r24, r28
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	04 96       	adiw	r24, 0x04	; 4
 3be:	4d 2f       	mov	r20, r29
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <LCD_SendCharacter+0x58>
 3c4:	55 95       	asr	r21
 3c6:	47 95       	ror	r20
 3c8:	8a 95       	dec	r24
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <LCD_SendCharacter+0x54>
 3cc:	41 70       	andi	r20, 0x01	; 1
 3ce:	6c 2f       	mov	r22, r28
 3d0:	60 0f       	add	r22, r16
 3d2:	81 2f       	mov	r24, r17
 3d4:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   /* select data register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, HIGH);
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
   
   /* Send HIGH bits of the Data */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 3d8:	cf 5f       	subi	r28, 0xFF	; 255
 3da:	c4 30       	cpi	r28, 0x04	; 4
 3dc:	68 f3       	brcs	.-38     	; 0x3b8 <LCD_SendCharacter+0x48>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data >> (4 + u8_DataCounter)) & HIGH) );
   }
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	6e 2d       	mov	r22, r14
 3e2:	8f 2d       	mov	r24, r15
 3e4:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   dummy_delay();
 3e8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <dummy_delay>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	6e 2d       	mov	r22, r14
 3f0:	8f 2d       	mov	r24, r15
 3f2:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   
   /* Send LOW bits of the Data */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 3f6:	c0 e0       	ldi	r28, 0x00	; 0
 3f8:	0f c0       	rjmp	.+30     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data >> (u8_DataCounter)) & HIGH) );
 3fa:	4d 2f       	mov	r20, r29
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	0c 2e       	mov	r0, r28
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	55 95       	asr	r21
 404:	47 95       	ror	r20
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	41 70       	andi	r20, 0x01	; 1
 40c:	6c 2f       	mov	r22, r28
 40e:	60 0f       	add	r22, r16
 410:	81 2f       	mov	r24, r17
 412:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
   dummy_delay();
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
   
   /* Send LOW bits of the Data */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 416:	cf 5f       	subi	r28, 0xFF	; 255
 418:	c4 30       	cpi	r28, 0x04	; 4
 41a:	78 f3       	brcs	.-34     	; 0x3fa <LCD_SendCharacter+0x8a>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data >> (u8_DataCounter)) & HIGH) );
   }
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	6e 2d       	mov	r22, r14
 420:	8f 2d       	mov	r24, r15
 422:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   dummy_delay();
 426:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <dummy_delay>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	6e 2d       	mov	r22, r14
 42e:	8f 2d       	mov	r24, r15
 430:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   
   /* return success status */
   return E_LCD_SUCCESS;
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	01 c0       	rjmp	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 438:	82 e0       	ldi	r24, 0x02	; 2
   dummy_delay();
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
   
   /* return success status */
   return E_LCD_SUCCESS;
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	ff 90       	pop	r15
 444:	ef 90       	pop	r14
 446:	df 90       	pop	r13
 448:	08 95       	ret

0000044a <LCD_SendString>:
* @param [in]  Data     -  String to send to LCD.
*
* @return function error state.
*/
LCD_ERROR_state_t LCD_SendString(uint8_t LCD_CH, uint8_t * Data)
{
 44a:	8f 92       	push	r8
 44c:	9f 92       	push	r9
 44e:	bf 92       	push	r11
 450:	cf 92       	push	r12
 452:	df 92       	push	r13
 454:	ef 92       	push	r14
 456:	ff 92       	push	r15
 458:	1f 93       	push	r17
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
   if(NULL_PTR == Data)
 45e:	61 15       	cp	r22, r1
 460:	71 05       	cpc	r23, r1
 462:	09 f4       	brne	.+2      	; 0x466 <LCD_SendString+0x1c>
 464:	65 c0       	rjmp	.+202    	; 0x530 <LCD_SendString+0xe6>
   uint8_t u8_LCDEPort;
   uint8_t u8_LCDEPin;
   uint8_t u8_LCDDataPort;
   uint8_t u8_LCDDataPin;
   
   switch(LCD_CH)
 466:	81 11       	cpse	r24, r1
 468:	65 c0       	rjmp	.+202    	; 0x534 <LCD_SendString+0xea>
 46a:	4b 01       	movw	r8, r22
   {
      #ifdef LCD_CH_0
      case LCD_CH_0:
         u8_LCDRSPort = LCD_CH_0_RS_PORT;
         u8_LCDRSPin = LCD_CH_0_RS_PIN;
 46c:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <LCD_CH_0_RS_PIN>
         u8_LCDRWPort = LCD_CH_0_RW_PORT;
 470:	c0 91 75 00 	lds	r28, 0x0075	; 0x800075 <LCD_CH_0_RW_PORT>
         u8_LCDRWPin = LCD_CH_0_RW_PIN;
 474:	d0 91 74 00 	lds	r29, 0x0074	; 0x800074 <LCD_CH_0_RW_PIN>
         u8_LCDEPort = LCD_CH_0_E_PORT;
 478:	c0 90 73 00 	lds	r12, 0x0073	; 0x800073 <LCD_CH_0_E_PORT>
         u8_LCDEPin = LCD_CH_0_E_PIN;
 47c:	d0 90 72 00 	lds	r13, 0x0072	; 0x800072 <LCD_CH_0_E_PIN>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
 480:	e0 90 71 00 	lds	r14, 0x0071	; 0x800071 <LCD_CH_0_DATA_PORT>
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
 484:	f0 90 70 00 	lds	r15, 0x0070	; 0x800070 <LCD_CH_0_DATA_START_PIN>
      default:
         return E_LCD_INVALID_CH;
   }
   
   /* select data register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, HIGH);
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <LCD_CH_0_RS_PORT>
 48e:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	6d 2f       	mov	r22, r29
 496:	8c 2f       	mov	r24, r28
 498:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   
   uint8_t u8_StringCounter = 0;
 49c:	b1 2c       	mov	r11, r1
   
   while (Data[u8_StringCounter] != END_OF_STRING)
 49e:	41 c0       	rjmp	.+130    	; 0x522 <LCD_SendString+0xd8>
   {
      /* Send HIGH bits of the Data */
      for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
      {
         DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data[u8_StringCounter] >> (4 + u8_DataCounter)) & HIGH) );
 4a0:	48 81       	ld	r20, Y
 4a2:	81 2f       	mov	r24, r17
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	04 96       	adiw	r24, 0x04	; 4
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <LCD_SendString+0x66>
 4ac:	55 95       	asr	r21
 4ae:	47 95       	ror	r20
 4b0:	8a 95       	dec	r24
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <LCD_SendString+0x62>
 4b4:	41 70       	andi	r20, 0x01	; 1
 4b6:	61 2f       	mov	r22, r17
 4b8:	6f 0d       	add	r22, r15
 4ba:	8e 2d       	mov	r24, r14
 4bc:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   uint8_t u8_StringCounter = 0;
   
   while (Data[u8_StringCounter] != END_OF_STRING)
   {
      /* Send HIGH bits of the Data */
      for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 4c0:	1f 5f       	subi	r17, 0xFF	; 255
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <LCD_SendString+0x7c>
 4c4:	10 e0       	ldi	r17, 0x00	; 0
 4c6:	14 30       	cpi	r17, 0x04	; 4
 4c8:	58 f3       	brcs	.-42     	; 0x4a0 <LCD_SendString+0x56>
      {
         DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data[u8_StringCounter] >> (4 + u8_DataCounter)) & HIGH) );
      }
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 4ca:	41 e0       	ldi	r20, 0x01	; 1
 4cc:	6d 2d       	mov	r22, r13
 4ce:	8c 2d       	mov	r24, r12
 4d0:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
      dummy_delay();
 4d4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <dummy_delay>
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	6d 2d       	mov	r22, r13
 4dc:	8c 2d       	mov	r24, r12
 4de:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
      
      /* Send LOW bits of the Data */
      for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 4e2:	10 e0       	ldi	r17, 0x00	; 0
 4e4:	0f c0       	rjmp	.+30     	; 0x504 <LCD_SendString+0xba>
      {
         DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data[u8_StringCounter] >> (u8_DataCounter)) & HIGH) );
 4e6:	48 81       	ld	r20, Y
 4e8:	50 e0       	ldi	r21, 0x00	; 0
 4ea:	01 2e       	mov	r0, r17
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <LCD_SendString+0xa8>
 4ee:	55 95       	asr	r21
 4f0:	47 95       	ror	r20
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <LCD_SendString+0xa4>
 4f6:	41 70       	andi	r20, 0x01	; 1
 4f8:	61 2f       	mov	r22, r17
 4fa:	6f 0d       	add	r22, r15
 4fc:	8e 2d       	mov	r24, r14
 4fe:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
      dummy_delay();
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
      
      /* Send LOW bits of the Data */
      for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 502:	1f 5f       	subi	r17, 0xFF	; 255
 504:	14 30       	cpi	r17, 0x04	; 4
 506:	78 f3       	brcs	.-34     	; 0x4e6 <LCD_SendString+0x9c>
      {
         DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data[u8_StringCounter] >> (u8_DataCounter)) & HIGH) );
      }
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 508:	41 e0       	ldi	r20, 0x01	; 1
 50a:	6d 2d       	mov	r22, r13
 50c:	8c 2d       	mov	r24, r12
 50e:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
      dummy_delay();
 512:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <dummy_delay>
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 516:	40 e0       	ldi	r20, 0x00	; 0
 518:	6d 2d       	mov	r22, r13
 51a:	8c 2d       	mov	r24, r12
 51c:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
      
      u8_StringCounter++;
 520:	b3 94       	inc	r11
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, HIGH);
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
   
   uint8_t u8_StringCounter = 0;
   
   while (Data[u8_StringCounter] != END_OF_STRING)
 522:	e4 01       	movw	r28, r8
 524:	cb 0d       	add	r28, r11
 526:	d1 1d       	adc	r29, r1
 528:	88 81       	ld	r24, Y
 52a:	81 11       	cpse	r24, r1
 52c:	cb cf       	rjmp	.-106    	; 0x4c4 <LCD_SendString+0x7a>
 52e:	03 c0       	rjmp	.+6      	; 0x536 <LCD_SendString+0xec>
*/
LCD_ERROR_state_t LCD_SendString(uint8_t LCD_CH, uint8_t * Data)
{
   if(NULL_PTR == Data)
   {
      return E_LCD_NULL_PTR;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	01 c0       	rjmp	.+2      	; 0x536 <LCD_SendString+0xec>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 534:	82 e0       	ldi	r24, 0x02	; 2
   }
   
   
   /* return success status */
   return E_LCD_SUCCESS;
}
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	ff 90       	pop	r15
 53e:	ef 90       	pop	r14
 540:	df 90       	pop	r13
 542:	cf 90       	pop	r12
 544:	bf 90       	pop	r11
 546:	9f 90       	pop	r9
 548:	8f 90       	pop	r8
 54a:	08 95       	ret

0000054c <LCD_SetToRowCol>:
*/
LCD_ERROR_state_t LCD_SetToRowCol(uint8_t LCD_CH, uint8_t Row, uint8_t Col)
{
   uint8_t u8_LCDChannel;
   
   switch(LCD_CH)
 54c:	81 11       	cpse	r24, r1
 54e:	0f c0       	rjmp	.+30     	; 0x56e <LCD_SetToRowCol+0x22>
         return E_LCD_INVALID_CH;
   }
   
   uint8_t u8_Address;
   /* set required address */
   switch (Row)
 550:	66 23       	and	r22, r22
 552:	29 f0       	breq	.+10     	; 0x55e <LCD_SetToRowCol+0x12>
 554:	61 30       	cpi	r22, 0x01	; 1
 556:	21 f4       	brne	.+8      	; 0x560 <LCD_SetToRowCol+0x14>
   {
      case 0:
         u8_Address = Col;
         break;
      case 1:
         u8_Address = Col + 0x40;
 558:	90 e4       	ldi	r25, 0x40	; 64
 55a:	94 0f       	add	r25, r20
         break;
 55c:	01 c0       	rjmp	.+2      	; 0x560 <LCD_SetToRowCol+0x14>
   uint8_t u8_Address;
   /* set required address */
   switch (Row)
   {
      case 0:
         u8_Address = Col;
 55e:	94 2f       	mov	r25, r20
         u8_Address = Col + 0x40;
         break;
   }
   
   /* Send command with the required address */
   LCD_SendCommand(u8_LCDChannel , u8_Address | LDC_SET_CURSOR_LOCATION);
 560:	69 2f       	mov	r22, r25
 562:	60 68       	ori	r22, 0x80	; 128
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	0e 94 01 01 	call	0x202	; 0x202 <LCD_SendCommand>
   
   /* return success status */
   return E_LCD_SUCCESS;
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	08 95       	ret
      case LCD_CH_0:
         u8_LCDChannel = LCD_CH_0;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 56e:	82 e0       	ldi	r24, 0x02	; 2
   /* Send command with the required address */
   LCD_SendCommand(u8_LCDChannel , u8_Address | LDC_SET_CURSOR_LOCATION);
   
   /* return success status */
   return E_LCD_SUCCESS;
 570:	08 95       	ret

00000572 <MOTOR_Init>:
MOTOR_ERROR_state_t MOTOR_Init(uint8_t MOTOR_CH)
{
   uint8_t u8_MotorPort;
   uint8_t u8_MotorPin;
   
   switch(MOTOR_CH)
 572:	81 11       	cpse	r24, r1
 574:	09 c0       	rjmp	.+18     	; 0x588 <MOTOR_Init+0x16>
   {
      #ifdef MOTOR_CH_0
      case MOTOR_CH_0:
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
 576:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <MOTOR_CH_0_PIN>
      default:
         return E_MOTOR_INVALID_CH;
   }   
   
   /* Initialize motor pin */
   DIO_SetPinDirection(u8_MotorPort, u8_MotorPin, OUTPUT);
 57a:	41 e0       	ldi	r20, 0x01	; 1
 57c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <MOTOR_CH_0_PORT>
 580:	0e 94 49 03 	call	0x692	; 0x692 <DIO_SetPinDirection>
   
   /* return success status */
   return E_MOTOR_SUCCESS;
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	08 95       	ret
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
         break;
      #endif
      default:
         return E_MOTOR_INVALID_CH;
 588:	81 e0       	ldi	r24, 0x01	; 1
   /* Initialize motor pin */
   DIO_SetPinDirection(u8_MotorPort, u8_MotorPin, OUTPUT);
   
   /* return success status */
   return E_MOTOR_SUCCESS;
}
 58a:	08 95       	ret

0000058c <MOTOR_Start>:
MOTOR_ERROR_state_t MOTOR_Start(uint8_t MOTOR_CH)
{
   uint8_t u8_MotorPort;
   uint8_t u8_MotorPin;
   
   switch(MOTOR_CH)
 58c:	81 11       	cpse	r24, r1
 58e:	09 c0       	rjmp	.+18     	; 0x5a2 <MOTOR_Start+0x16>
   {
      #ifdef MOTOR_CH_0
      case MOTOR_CH_0:
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
 590:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <MOTOR_CH_0_PIN>
      default:
         return E_MOTOR_INVALID_CH;
   }
   
   /* Start motor */
   DIO_WritePin(u8_MotorPort, u8_MotorPin, HIGH);
 594:	41 e0       	ldi	r20, 0x01	; 1
 596:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <MOTOR_CH_0_PORT>
 59a:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   
   /* return success status */
   return E_MOTOR_SUCCESS;
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	08 95       	ret
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
         break;
      #endif
      default:
         return E_MOTOR_INVALID_CH;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
   /* Start motor */
   DIO_WritePin(u8_MotorPort, u8_MotorPin, HIGH);
   
   /* return success status */
   return E_MOTOR_SUCCESS;
}
 5a4:	08 95       	ret

000005a6 <MOTOR_Stop>:
MOTOR_ERROR_state_t MOTOR_Stop(uint8_t MOTOR_CH)
{
   uint8_t u8_MotorPort;
   uint8_t u8_MotorPin;
   
   switch(MOTOR_CH)
 5a6:	81 11       	cpse	r24, r1
 5a8:	09 c0       	rjmp	.+18     	; 0x5bc <MOTOR_Stop+0x16>
   {
      #ifdef MOTOR_CH_0
      case MOTOR_CH_0:
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
 5aa:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <MOTOR_CH_0_PIN>
      default:
         return E_MOTOR_INVALID_CH;
   }
   
   /* stop motor */
   DIO_WritePin(u8_MotorPort, u8_MotorPin, LOW);
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <MOTOR_CH_0_PORT>
 5b4:	0e 94 81 03 	call	0x702	; 0x702 <DIO_WritePin>
   
   /* return success status */
   return E_MOTOR_SUCCESS;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	08 95       	ret
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
         break;
      #endif
      default:
         return E_MOTOR_INVALID_CH;
 5bc:	81 e0       	ldi	r24, 0x01	; 1
   /* stop motor */
   DIO_WritePin(u8_MotorPort, u8_MotorPin, LOW);
   
   /* return success status */
   return E_MOTOR_SUCCESS;
 5be:	08 95       	ret

000005c0 <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	00 d0       	rcall	.+0      	; 0x5c6 <dummy_delay+0x6>
 5c6:	00 d0       	rcall	.+0      	; 0x5c8 <dummy_delay+0x8>
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
 5cc:	1a 82       	std	Y+2, r1	; 0x02
 5ce:	19 82       	std	Y+1, r1	; 0x01
 5d0:	15 c0       	rjmp	.+42     	; 0x5fc <dummy_delay+0x3c>
   {
      for(volatile uint8_t j=0; j<32; j++)
 5d2:	1c 82       	std	Y+4, r1	; 0x04
 5d4:	0b c0       	rjmp	.+22     	; 0x5ec <dummy_delay+0x2c>
      {
         for(volatile uint8_t k=0; k<2; k++)
 5d6:	1b 82       	std	Y+3, r1	; 0x03
 5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <dummy_delay+0x20>
 5da:	8b 81       	ldd	r24, Y+3	; 0x03
 5dc:	8f 5f       	subi	r24, 0xFF	; 255
 5de:	8b 83       	std	Y+3, r24	; 0x03
 5e0:	8b 81       	ldd	r24, Y+3	; 0x03
 5e2:	82 30       	cpi	r24, 0x02	; 2
 5e4:	d0 f3       	brcs	.-12     	; 0x5da <dummy_delay+0x1a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
 5e6:	8c 81       	ldd	r24, Y+4	; 0x04
 5e8:	8f 5f       	subi	r24, 0xFF	; 255
 5ea:	8c 83       	std	Y+4, r24	; 0x04
 5ec:	8c 81       	ldd	r24, Y+4	; 0x04
 5ee:	80 32       	cpi	r24, 0x20	; 32
 5f0:	90 f3       	brcs	.-28     	; 0x5d6 <dummy_delay+0x16>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	9a 81       	ldd	r25, Y+2	; 0x02
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	9a 83       	std	Y+2, r25	; 0x02
 5fa:	89 83       	std	Y+1, r24	; 0x01
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	9a 81       	ldd	r25, Y+2	; 0x02
 600:	84 36       	cpi	r24, 0x64	; 100
 602:	91 05       	cpc	r25, r1
 604:	30 f3       	brcs	.-52     	; 0x5d2 <dummy_delay+0x12>
         {
            
         }
      }
   }
}
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <ADC_Init>:
* @return function error state.
*/
ADC_ERROR_state_t ADC_Init(void)
{
   /* making sure ADC was initialized before calling this function */
   if(INIT == gu8_IsInit)
 614:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 618:	81 30       	cpi	r24, 0x01	; 1
 61a:	79 f0       	breq	.+30     	; 0x63a <ADC_Init+0x26>
   {
      return E_ADC_INIT_BEFORE;
   }
   
   /* Set VRef Selection */
   ADC_MUX_R |= ADC_REFERENCE_SELECTION;
 61c:	97 b1       	in	r25, 0x07	; 7
 61e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <ADC_REFERENCE_SELECTION>
 622:	89 2b       	or	r24, r25
 624:	87 b9       	out	0x07, r24	; 7
   
   /* Configure ADC */
   ADC_CONTROL_AND_STATUS_R |= ADC_CONTROL_MASK;
 626:	96 b1       	in	r25, 0x06	; 6
 628:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <ADC_CONTROL_MASK>
 62c:	89 2b       	or	r24, r25
 62e:	86 b9       	out	0x06, r24	; 6
   
   /* Set Driver State to Initialized */
   gu8_IsInit = INIT;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
   
   /* return success status */
   return E_ADC_SUCCESS;
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	08 95       	ret
ADC_ERROR_state_t ADC_Init(void)
{
   /* making sure ADC was initialized before calling this function */
   if(INIT == gu8_IsInit)
   {
      return E_ADC_INIT_BEFORE;
 63a:	83 e0       	ldi	r24, 0x03	; 3
   /* Set Driver State to Initialized */
   gu8_IsInit = INIT;
   
   /* return success status */
   return E_ADC_SUCCESS;
}
 63c:	08 95       	ret

0000063e <ADC_Read>:
* @return function error state.
*/
ADC_ERROR_state_t ADC_Read(uint8_t ADC_CH, uint16_t * Data)
{
   /* making sure ADC was initialized before calling this function */
   if(NOT_INIT == gu8_IsInit)
 63e:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <__data_end>
 642:	99 23       	and	r25, r25
 644:	01 f1       	breq	.+64     	; 0x686 <ADC_Read+0x48>
   {
      return E_ADC_NOT_INIT;
   }
   /* making sure an initialized pointer is sent to the function */
   else if(NULL_PTR == Data)
 646:	61 15       	cp	r22, r1
 648:	71 05       	cpc	r23, r1
 64a:	f9 f0       	breq	.+62     	; 0x68a <ADC_Read+0x4c>
   {
      return E_ADC_NULL_PTR;
   }
   else if(ADC_CH_7 < ADC_CH)
 64c:	88 30       	cpi	r24, 0x08	; 8
 64e:	f8 f4       	brcc	.+62     	; 0x68e <ADC_Read+0x50>
   {
      return E_ADC_INVALID_CH;
   }
   
   /* Select the required ADC channel */
   ADC_MUX_R |= (ADC_CH & 0x1F);
 650:	97 b1       	in	r25, 0x07	; 7
 652:	8f 71       	andi	r24, 0x1F	; 31
 654:	89 2b       	or	r24, r25
 656:	87 b9       	out	0x07, r24	; 7
   
   /* Start Conversion */
   ADC_CONTROL_AND_STATUS_R |= ADC_START_CONVERSION;
 658:	86 b1       	in	r24, 0x06	; 6
 65a:	80 64       	ori	r24, 0x40	; 64
 65c:	86 b9       	out	0x06, r24	; 6
   
   /* Wait for Interrupt Flag */
   while(!(ADC_CONTROL_AND_STATUS_R & ADC_INTERRUPT_FLAG));
 65e:	34 9b       	sbis	0x06, 4	; 6
 660:	fe cf       	rjmp	.-4      	; 0x65e <ADC_Read+0x20>
   
   /* clear interrupt flag */
   ADC_CONTROL_AND_STATUS_R |= ADC_INTERRUPT_FLAG;
 662:	86 b1       	in	r24, 0x06	; 6
 664:	80 61       	ori	r24, 0x10	; 16
 666:	86 b9       	out	0x06, r24	; 6
   
   /* return ADC conversion data */
   *Data = (ADC_DATA_LOW_R);
 668:	84 b1       	in	r24, 0x04	; 4
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	fb 01       	movw	r30, r22
 66e:	91 83       	std	Z+1, r25	; 0x01
 670:	80 83       	st	Z, r24
   *Data += (ADC_DATA_HIGH_R << 8);
 672:	25 b1       	in	r18, 0x05	; 5
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	32 2f       	mov	r19, r18
 678:	22 27       	eor	r18, r18
 67a:	82 0f       	add	r24, r18
 67c:	93 1f       	adc	r25, r19
 67e:	91 83       	std	Z+1, r25	; 0x01
 680:	80 83       	st	Z, r24
   
   /* return success status */
   return E_ADC_SUCCESS;
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	08 95       	ret
ADC_ERROR_state_t ADC_Read(uint8_t ADC_CH, uint16_t * Data)
{
   /* making sure ADC was initialized before calling this function */
   if(NOT_INIT == gu8_IsInit)
   {
      return E_ADC_NOT_INIT;
 686:	84 e0       	ldi	r24, 0x04	; 4
 688:	08 95       	ret
   }
   /* making sure an initialized pointer is sent to the function */
   else if(NULL_PTR == Data)
   {
      return E_ADC_NULL_PTR;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	08 95       	ret
   }
   else if(ADC_CH_7 < ADC_CH)
   {
      return E_ADC_INVALID_CH;
 68e:	82 e0       	ldi	r24, 0x02	; 2
   *Data = (ADC_DATA_LOW_R);
   *Data += (ADC_DATA_HIGH_R << 8);
   
   /* return success status */
   return E_ADC_SUCCESS;
}
 690:	08 95       	ret

00000692 <DIO_SetPinDirection>:
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
}
 692:	68 30       	cpi	r22, 0x08	; 8
 694:	80 f5       	brcc	.+96     	; 0x6f6 <DIO_SetPinDirection+0x64>
 696:	81 30       	cpi	r24, 0x01	; 1
 698:	79 f0       	breq	.+30     	; 0x6b8 <DIO_SetPinDirection+0x26>
 69a:	28 f0       	brcs	.+10     	; 0x6a6 <DIO_SetPinDirection+0x14>
 69c:	82 30       	cpi	r24, 0x02	; 2
 69e:	31 f0       	breq	.+12     	; 0x6ac <DIO_SetPinDirection+0x1a>
 6a0:	83 30       	cpi	r24, 0x03	; 3
 6a2:	39 f0       	breq	.+14     	; 0x6b2 <DIO_SetPinDirection+0x20>
 6a4:	2a c0       	rjmp	.+84     	; 0x6fa <DIO_SetPinDirection+0x68>
 6a6:	ea e3       	ldi	r30, 0x3A	; 58
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	08 c0       	rjmp	.+16     	; 0x6bc <DIO_SetPinDirection+0x2a>
 6ac:	e4 e3       	ldi	r30, 0x34	; 52
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	05 c0       	rjmp	.+10     	; 0x6bc <DIO_SetPinDirection+0x2a>
 6b2:	e1 e3       	ldi	r30, 0x31	; 49
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_SetPinDirection+0x2a>
 6b8:	e7 e3       	ldi	r30, 0x37	; 55
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	41 30       	cpi	r20, 0x01	; 1
 6be:	61 f4       	brne	.+24     	; 0x6d8 <DIO_SetPinDirection+0x46>
 6c0:	20 81       	ld	r18, Z
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_SetPinDirection+0x3a>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_SetPinDirection+0x36>
 6d0:	82 2b       	or	r24, r18
 6d2:	80 83       	st	Z, r24
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	08 95       	ret
 6d8:	41 11       	cpse	r20, r1
 6da:	11 c0       	rjmp	.+34     	; 0x6fe <DIO_SetPinDirection+0x6c>
 6dc:	20 81       	ld	r18, Z
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_SetPinDirection+0x56>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	6a 95       	dec	r22
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_SetPinDirection+0x52>
 6ec:	80 95       	com	r24
 6ee:	82 23       	and	r24, r18
 6f0:	80 83       	st	Z, r24
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	08 95       	ret
 6f6:	82 e0       	ldi	r24, 0x02	; 2
 6f8:	08 95       	ret
 6fa:	83 e0       	ldi	r24, 0x03	; 3
 6fc:	08 95       	ret
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	08 95       	ret

00000702 <DIO_WritePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 702:	68 30       	cpi	r22, 0x08	; 8
 704:	80 f5       	brcc	.+96     	; 0x766 <DIO_WritePin+0x64>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data pointer according to the required port. */
   switch(port)
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	79 f0       	breq	.+30     	; 0x728 <DIO_WritePin+0x26>
 70a:	28 f0       	brcs	.+10     	; 0x716 <DIO_WritePin+0x14>
 70c:	82 30       	cpi	r24, 0x02	; 2
 70e:	31 f0       	breq	.+12     	; 0x71c <DIO_WritePin+0x1a>
 710:	83 30       	cpi	r24, 0x03	; 3
 712:	39 f0       	breq	.+14     	; 0x722 <DIO_WritePin+0x20>
 714:	2a c0       	rjmp	.+84     	; 0x76a <DIO_WritePin+0x68>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 716:	eb e3       	ldi	r30, 0x3B	; 59
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	08 c0       	rjmp	.+16     	; 0x72c <DIO_WritePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 71c:	e5 e3       	ldi	r30, 0x35	; 53
 71e:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 720:	05 c0       	rjmp	.+10     	; 0x72c <DIO_WritePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 722:	e2 e3       	ldi	r30, 0x32	; 50
 724:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 726:	02 c0       	rjmp	.+4      	; 0x72c <DIO_WritePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 728:	e8 e3       	ldi	r30, 0x38	; 56
 72a:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   /* set or clear value in the pin. */
   if(HIGH == data)
 72c:	41 30       	cpi	r20, 0x01	; 1
 72e:	61 f4       	brne	.+24     	; 0x748 <DIO_WritePin+0x46>
   {
      SET_BIT(*prt_port_data,pin);
 730:	20 81       	ld	r18, Z
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_WritePin+0x3a>
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	6a 95       	dec	r22
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_WritePin+0x36>
 740:	82 2b       	or	r24, r18
 742:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	08 95       	ret
   /* set or clear value in the pin. */
   if(HIGH == data)
   {
      SET_BIT(*prt_port_data,pin);
   }
   else if(LOW == data)
 748:	41 11       	cpse	r20, r1
 74a:	11 c0       	rjmp	.+34     	; 0x76e <DIO_WritePin+0x6c>
   {
      CLEAR_BIT(*prt_port_data,pin);
 74c:	20 81       	ld	r18, Z
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_WritePin+0x56>
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	6a 95       	dec	r22
 75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_WritePin+0x52>
 75c:	80 95       	com	r24
 75e:	82 23       	and	r24, r18
 760:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	08 95       	ret
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 766:	82 e0       	ldi	r24, 0x02	; 2
 768:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 76a:	83 e0       	ldi	r24, 0x03	; 3
 76c:	08 95       	ret
      CLEAR_BIT(*prt_port_data,pin);
   }
   /* if data is invalid. */
   else
   {
      return E_DIO_INVALID_WRITE_DATA;
 76e:	84 e0       	ldi	r24, 0x04	; 4
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 770:	08 95       	ret

00000772 <DIO_ReadPin>:
{
   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
 772:	41 15       	cp	r20, r1
 774:	51 05       	cpc	r21, r1
 776:	39 f1       	breq	.+78     	; 0x7c6 <DIO_ReadPin+0x54>
   {
      return E_DIO_NULL_PTR;
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
 778:	68 30       	cpi	r22, 0x08	; 8
 77a:	38 f5       	brcc	.+78     	; 0x7ca <DIO_ReadPin+0x58>
   {
      /* do nothing */
   }
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 77c:	81 30       	cpi	r24, 0x01	; 1
 77e:	79 f0       	breq	.+30     	; 0x79e <DIO_ReadPin+0x2c>
 780:	28 f0       	brcs	.+10     	; 0x78c <DIO_ReadPin+0x1a>
 782:	82 30       	cpi	r24, 0x02	; 2
 784:	31 f0       	breq	.+12     	; 0x792 <DIO_ReadPin+0x20>
 786:	83 30       	cpi	r24, 0x03	; 3
 788:	39 f0       	breq	.+14     	; 0x798 <DIO_ReadPin+0x26>
 78a:	21 c0       	rjmp	.+66     	; 0x7ce <DIO_ReadPin+0x5c>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
 78c:	e9 e3       	ldi	r30, 0x39	; 57
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	08 c0       	rjmp	.+16     	; 0x7a2 <DIO_ReadPin+0x30>
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
         break;
      case PORTC:
         prt_port_stat = &PORTC_STAT;
 792:	e3 e3       	ldi	r30, 0x33	; 51
 794:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 796:	05 c0       	rjmp	.+10     	; 0x7a2 <DIO_ReadPin+0x30>
      case PORTD:
         prt_port_stat = &PORTD_STAT;
 798:	e0 e3       	ldi	r30, 0x30	; 48
 79a:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_ReadPin+0x30>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
 79e:	e6 e3       	ldi	r30, 0x36	; 54
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* read the pin value and put it in the data. */
   if(BIT_IS_SET(*prt_port_stat,pin))
 7a2:	80 81       	ld	r24, Z
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_ReadPin+0x3a>
 7a8:	95 95       	asr	r25
 7aa:	87 95       	ror	r24
 7ac:	6a 95       	dec	r22
 7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_ReadPin+0x36>
 7b0:	80 ff       	sbrs	r24, 0
 7b2:	05 c0       	rjmp	.+10     	; 0x7be <DIO_ReadPin+0x4c>
   {
      *data = HIGH;
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	fa 01       	movw	r30, r20
 7b8:	80 83       	st	Z, r24
   {
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	08 95       	ret
   {
      *data = HIGH;
   }
   else
   {
      *data = LOW;
 7be:	fa 01       	movw	r30, r20
 7c0:	10 82       	st	Z, r1
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	08 95       	ret
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
   {
      return E_DIO_NULL_PTR;
 7c6:	85 e0       	ldi	r24, 0x05	; 5
 7c8:	08 95       	ret
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 7ca:	82 e0       	ldi	r24, 0x02	; 2
 7cc:	08 95       	ret
         break;
      case PORTD:
         prt_port_stat = &PORTD_STAT;
         break;
      default:
         return E_DIO_INVALID_PORT;
 7ce:	83 e0       	ldi	r24, 0x03	; 3
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 7d0:	08 95       	ret

000007d2 <main>:
-------------------------------*/
static uint8_t * gau8_CurrentTempMessage = "Current: ";
static uint8_t * gau8_RequiredTempMessage = "Required: ";

int main(void)
{
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	00 d0       	rcall	.+0      	; 0x7d8 <main+0x6>
 7d8:	1f 92       	push	r1
 7da:	cd b7       	in	r28, 0x3d	; 61
 7dc:	de b7       	in	r29, 0x3e	; 62
   uint8_t u8_RequiredTempDigit1;
   uint8_t u8_RequiredTempDigit2;
   uint8_t u8_RequiredTempDigit3;
      
   /* initialize drivers */
   ADC_Init();
 7de:	0e 94 0a 03 	call	0x614	; 0x614 <ADC_Init>
   MOTOR_Init(MOTOR_CH_0);
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	0e 94 b9 02 	call	0x572	; 0x572 <MOTOR_Init>
   KP_Init(KP_CH_0);
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	0e 94 49 00 	call	0x92	; 0x92 <KP_Init>
   LCD_Init(LCD_CH_0);
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LCD_Init>
   
   /* Print static strings */
   LCD_SendString(LCD_CH_0, gau8_CurrentTempMessage);
 7f4:	6a e7       	ldi	r22, 0x7A	; 122
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_SendString>
   LCD_SetToRowCol(LCD_CH_0, ROW_1, COL_0);
 7fe:	40 e0       	ldi	r20, 0x00	; 0
 800:	61 e0       	ldi	r22, 0x01	; 1
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_SetToRowCol>
   LCD_SendString(LCD_CH_0, gau8_RequiredTempMessage);
 808:	64 e8       	ldi	r22, 0x84	; 132
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_SendString>
   uint16_t u8_CurrentTemp;
   uint8_t u8_CurrentTempDigit1;
   uint8_t u8_CurrentTempDigit2;
   uint8_t u8_CurrentTempDigit3;

   uint16_t u8_RequiredTemp = 0;
 812:	00 e0       	ldi	r16, 0x00	; 0
 814:	10 e0       	ldi	r17, 0x00	; 0
   LCD_SendString(LCD_CH_0, gau8_RequiredTempMessage);
   
   while (1)
   {
      /* get pressed button on keypad */
      KP_GetPressedValue(KP_CH_0, &u8_KPValue);
 816:	be 01       	movw	r22, r28
 818:	6f 5f       	subi	r22, 0xFF	; 255
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	0e 94 85 00 	call	0x10a	; 0x10a <KP_GetPressedValue>
      
      /* if a button is pressed */
      if(u8_KPValue != 0)
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	88 23       	and	r24, r24
 826:	a1 f0       	breq	.+40     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
      {
         /* add it to the current required temprature */
         u8_RequiredTemp = (u8_RequiredTemp*10)+ (u8_KPValue - ZERO_ASCII);
 828:	98 01       	movw	r18, r16
 82a:	22 0f       	add	r18, r18
 82c:	33 1f       	adc	r19, r19
 82e:	00 0f       	add	r16, r16
 830:	11 1f       	adc	r17, r17
 832:	00 0f       	add	r16, r16
 834:	11 1f       	adc	r17, r17
 836:	00 0f       	add	r16, r16
 838:	11 1f       	adc	r17, r17
 83a:	02 0f       	add	r16, r18
 83c:	13 1f       	adc	r17, r19
 83e:	08 0f       	add	r16, r24
 840:	11 1d       	adc	r17, r1
 842:	00 53       	subi	r16, 0x30	; 48
 844:	11 09       	sbc	r17, r1
         
         /* set required temp to zero if it exceeds 150 */
         if(u8_RequiredTemp > 150)
 846:	07 39       	cpi	r16, 0x97	; 151
 848:	11 05       	cpc	r17, r1
 84a:	10 f0       	brcs	.+4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
         {
            u8_RequiredTemp = 0;
 84c:	00 e0       	ldi	r16, 0x00	; 0
 84e:	10 e0       	ldi	r17, 0x00	; 0
         }   
      }
      
      /* get ADC readings */
      ADC_Read(ADC_CH_0, &u8_CurrentTemp);
 850:	be 01       	movw	r22, r28
 852:	6e 5f       	subi	r22, 0xFE	; 254
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	0e 94 1f 03 	call	0x63e	; 0x63e <ADC_Read>
      
      /* map ADC resolution to the current temprature */
      u8_CurrentTemp = (u8_CurrentTemp * 150 / 308);
 85c:	8a 81       	ldd	r24, Y+2	; 0x02
 85e:	9b 81       	ldd	r25, Y+3	; 0x03
 860:	46 e9       	ldi	r20, 0x96	; 150
 862:	48 9f       	mul	r20, r24
 864:	90 01       	movw	r18, r0
 866:	49 9f       	mul	r20, r25
 868:	30 0d       	add	r19, r0
 86a:	11 24       	eor	r1, r1
 86c:	a9 e9       	ldi	r26, 0x99	; 153
 86e:	ba e1       	ldi	r27, 0x1A	; 26
 870:	0e 94 cb 04 	call	0x996	; 0x996 <__umulhisi3>
 874:	96 95       	lsr	r25
 876:	87 95       	ror	r24
 878:	92 95       	swap	r25
 87a:	82 95       	swap	r24
 87c:	8f 70       	andi	r24, 0x0F	; 15
 87e:	89 27       	eor	r24, r25
 880:	9f 70       	andi	r25, 0x0F	; 15
 882:	89 27       	eor	r24, r25
 884:	9b 83       	std	Y+3, r25	; 0x03
 886:	8a 83       	std	Y+2, r24	; 0x02
      
      /* check if current is higher or equal required temp for motor to start */
      if(u8_CurrentTemp >= u8_RequiredTemp)
 888:	80 17       	cp	r24, r16
 88a:	91 07       	cpc	r25, r17
 88c:	20 f0       	brcs	.+8      	; 0x896 <__stack+0x37>
      {
         MOTOR_Start(MOTOR_CH_0);
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	0e 94 c6 02 	call	0x58c	; 0x58c <MOTOR_Start>
 894:	03 c0       	rjmp	.+6      	; 0x89c <__stack+0x3d>
      }
      else
      {
         MOTOR_Stop(MOTOR_CH_0);
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <MOTOR_Stop>
      }
      
      /* get each number of current temp in single character */
      u8_CurrentTempDigit1 = (u8_CurrentTemp/100);
 89c:	ea 81       	ldd	r30, Y+2	; 0x02
 89e:	fb 81       	ldd	r31, Y+3	; 0x03
 8a0:	9f 01       	movw	r18, r30
 8a2:	36 95       	lsr	r19
 8a4:	27 95       	ror	r18
 8a6:	36 95       	lsr	r19
 8a8:	27 95       	ror	r18
 8aa:	ab e7       	ldi	r26, 0x7B	; 123
 8ac:	b4 e1       	ldi	r27, 0x14	; 20
 8ae:	0e 94 cb 04 	call	0x996	; 0x996 <__umulhisi3>
 8b2:	7c 01       	movw	r14, r24
 8b4:	f6 94       	lsr	r15
 8b6:	e7 94       	ror	r14
      u8_CurrentTempDigit2 = ((u8_CurrentTemp - (u8_CurrentTempDigit1*100)) / 10);
 8b8:	4c e9       	ldi	r20, 0x9C	; 156
 8ba:	5e 2d       	mov	r21, r14
 8bc:	45 03       	mulsu	r20, r21
 8be:	90 01       	movw	r18, r0
 8c0:	11 24       	eor	r1, r1
 8c2:	2e 0f       	add	r18, r30
 8c4:	3f 1f       	adc	r19, r31
 8c6:	ad ec       	ldi	r26, 0xCD	; 205
 8c8:	bc ec       	ldi	r27, 0xCC	; 204
 8ca:	0e 94 cb 04 	call	0x996	; 0x996 <__umulhisi3>
 8ce:	5c 01       	movw	r10, r24
 8d0:	b6 94       	lsr	r11
 8d2:	a7 94       	ror	r10
 8d4:	b6 94       	lsr	r11
 8d6:	a7 94       	ror	r10
 8d8:	b6 94       	lsr	r11
 8da:	a7 94       	ror	r10
      u8_CurrentTempDigit3 = (u8_CurrentTemp - (u8_CurrentTempDigit1*100+u8_CurrentTempDigit2*10));
 8dc:	54 e6       	ldi	r21, 0x64	; 100
 8de:	9a 2d       	mov	r25, r10
 8e0:	99 0f       	add	r25, r25
 8e2:	89 2f       	mov	r24, r25
 8e4:	88 0f       	add	r24, r24
 8e6:	88 0f       	add	r24, r24
 8e8:	89 0f       	add	r24, r25
 8ea:	5e 9d       	mul	r21, r14
 8ec:	80 0d       	add	r24, r0
 8ee:	11 24       	eor	r1, r1
 8f0:	fe 2e       	mov	r15, r30
 8f2:	f8 1a       	sub	r15, r24
      
      /* get each number of required temp in single character */
      u8_RequiredTempDigit1 = (u8_RequiredTemp/100);
 8f4:	98 01       	movw	r18, r16
 8f6:	36 95       	lsr	r19
 8f8:	27 95       	ror	r18
 8fa:	36 95       	lsr	r19
 8fc:	27 95       	ror	r18
 8fe:	ab e7       	ldi	r26, 0x7B	; 123
 900:	b4 e1       	ldi	r27, 0x14	; 20
 902:	0e 94 cb 04 	call	0x996	; 0x996 <__umulhisi3>
 906:	6c 01       	movw	r12, r24
 908:	d6 94       	lsr	r13
 90a:	c7 94       	ror	r12
      u8_RequiredTempDigit2 = ((u8_RequiredTemp - (u8_RequiredTempDigit1*100)) / 10);
 90c:	6c 2d       	mov	r22, r12
 90e:	46 03       	mulsu	r20, r22
 910:	90 01       	movw	r18, r0
 912:	11 24       	eor	r1, r1
 914:	20 0f       	add	r18, r16
 916:	31 1f       	adc	r19, r17
 918:	ad ec       	ldi	r26, 0xCD	; 205
 91a:	bc ec       	ldi	r27, 0xCC	; 204
 91c:	0e 94 cb 04 	call	0x996	; 0x996 <__umulhisi3>
 920:	4c 01       	movw	r8, r24
 922:	96 94       	lsr	r9
 924:	87 94       	ror	r8
 926:	96 94       	lsr	r9
 928:	87 94       	ror	r8
 92a:	96 94       	lsr	r9
 92c:	87 94       	ror	r8
      u8_RequiredTempDigit3 = (u8_RequiredTemp - (u8_RequiredTempDigit1*100+u8_RequiredTempDigit2*10));
 92e:	98 2d       	mov	r25, r8
 930:	99 0f       	add	r25, r25
 932:	89 2f       	mov	r24, r25
 934:	88 0f       	add	r24, r24
 936:	88 0f       	add	r24, r24
 938:	89 0f       	add	r24, r25
 93a:	5c 9d       	mul	r21, r12
 93c:	80 0d       	add	r24, r0
 93e:	11 24       	eor	r1, r1
 940:	d0 2e       	mov	r13, r16
 942:	d8 1a       	sub	r13, r24
      
      /* print current temp on LCD */
      LCD_SetToRowCol(LCD_CH_0, ROW_0, NUMBER_START_COL);
 944:	4a e0       	ldi	r20, 0x0A	; 10
 946:	60 e0       	ldi	r22, 0x00	; 0
 948:	80 e0       	ldi	r24, 0x00	; 0
 94a:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_SetToRowCol>
      LCD_SendCharacter(LCD_CH_0, u8_CurrentTempDigit1 + ZERO_ASCII);
 94e:	60 e3       	ldi	r22, 0x30	; 48
 950:	6e 0d       	add	r22, r14
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_SendCharacter>
      LCD_SendCharacter(LCD_CH_0, u8_CurrentTempDigit2 + ZERO_ASCII);
 958:	60 e3       	ldi	r22, 0x30	; 48
 95a:	6a 0d       	add	r22, r10
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_SendCharacter>
      LCD_SendCharacter(LCD_CH_0, u8_CurrentTempDigit3 + ZERO_ASCII);
 962:	60 e3       	ldi	r22, 0x30	; 48
 964:	6f 0d       	add	r22, r15
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_SendCharacter>
      
      /* print required temp on LCD */
      LCD_SetToRowCol(LCD_CH_0, ROW_1, NUMBER_START_COL);
 96c:	4a e0       	ldi	r20, 0x0A	; 10
 96e:	61 e0       	ldi	r22, 0x01	; 1
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_SetToRowCol>
      LCD_SendCharacter(LCD_CH_0, u8_RequiredTempDigit1 + ZERO_ASCII);
 976:	60 e3       	ldi	r22, 0x30	; 48
 978:	6c 0d       	add	r22, r12
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_SendCharacter>
      LCD_SendCharacter(LCD_CH_0, u8_RequiredTempDigit2 + ZERO_ASCII);
 980:	60 e3       	ldi	r22, 0x30	; 48
 982:	68 0d       	add	r22, r8
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_SendCharacter>
      LCD_SendCharacter(LCD_CH_0, u8_RequiredTempDigit3 + ZERO_ASCII);
 98a:	60 e3       	ldi	r22, 0x30	; 48
 98c:	6d 0d       	add	r22, r13
 98e:	80 e0       	ldi	r24, 0x00	; 0
 990:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_SendCharacter>
   }
 994:	40 cf       	rjmp	.-384    	; 0x816 <__DATA_REGION_LENGTH__+0x16>

00000996 <__umulhisi3>:
 996:	a2 9f       	mul	r26, r18
 998:	b0 01       	movw	r22, r0
 99a:	b3 9f       	mul	r27, r19
 99c:	c0 01       	movw	r24, r0
 99e:	a3 9f       	mul	r26, r19
 9a0:	70 0d       	add	r23, r0
 9a2:	81 1d       	adc	r24, r1
 9a4:	11 24       	eor	r1, r1
 9a6:	91 1d       	adc	r25, r1
 9a8:	b2 9f       	mul	r27, r18
 9aa:	70 0d       	add	r23, r0
 9ac:	81 1d       	adc	r24, r1
 9ae:	11 24       	eor	r1, r1
 9b0:	91 1d       	adc	r25, r1
 9b2:	08 95       	ret

000009b4 <_exit>:
 9b4:	f8 94       	cli

000009b6 <__stop_program>:
 9b6:	ff cf       	rjmp	.-2      	; 0x9b6 <__stop_program>
