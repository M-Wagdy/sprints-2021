
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000228  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000029c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac7  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dc  00000000  00000000  00000e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000724  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000447  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000660  00000000  00000000  000021eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000284b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  74:	0c 94 12 01 	jmp	0x224	; 0x224 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ECU_1_Function>:

/*- LOCAL FUNCTIONS IMPLEMENTATION
------------------------*/
static void ECU_1_Function(void)
{
   SPI_Init();
  7c:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_Init>
   
   SPI_SelectSlave(SS_CH_0);
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_SelectSlave>
   SPI_SendChar(0x1F);
  86:	8f e1       	ldi	r24, 0x1F	; 31
  88:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SPI_SendChar>
   SPI_UnselectSlave(SS_CH_0);
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	0e 94 01 01 	call	0x202	; 0x202 <SPI_UnselectSlave>
  92:	08 95       	ret

00000094 <main>:
-----------------------------------*/


int main(void)
{
   ECU_1_Function();
  94:	0e 94 3e 00 	call	0x7c	; 0x7c <ECU_1_Function>
   //ECU_2_Function();
}
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	08 95       	ret

0000009e <DIO_SetPinDirection>:
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
}
  9e:	68 30       	cpi	r22, 0x08	; 8
  a0:	80 f5       	brcc	.+96     	; 0x102 <DIO_SetPinDirection+0x64>
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	79 f0       	breq	.+30     	; 0xc4 <DIO_SetPinDirection+0x26>
  a6:	28 f0       	brcs	.+10     	; 0xb2 <DIO_SetPinDirection+0x14>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	31 f0       	breq	.+12     	; 0xb8 <DIO_SetPinDirection+0x1a>
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	39 f0       	breq	.+14     	; 0xbe <DIO_SetPinDirection+0x20>
  b0:	2a c0       	rjmp	.+84     	; 0x106 <DIO_SetPinDirection+0x68>
  b2:	ea e3       	ldi	r30, 0x3A	; 58
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <DIO_SetPinDirection+0x2a>
  b8:	e4 e3       	ldi	r30, 0x34	; 52
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <DIO_SetPinDirection+0x2a>
  be:	e1 e3       	ldi	r30, 0x31	; 49
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_SetPinDirection+0x2a>
  c4:	e7 e3       	ldi	r30, 0x37	; 55
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	41 30       	cpi	r20, 0x01	; 1
  ca:	61 f4       	brne	.+24     	; 0xe4 <DIO_SetPinDirection+0x46>
  cc:	20 81       	ld	r18, Z
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_SetPinDirection+0x3a>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_SetPinDirection+0x36>
  dc:	82 2b       	or	r24, r18
  de:	80 83       	st	Z, r24
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 95       	ret
  e4:	41 11       	cpse	r20, r1
  e6:	11 c0       	rjmp	.+34     	; 0x10a <DIO_SetPinDirection+0x6c>
  e8:	20 81       	ld	r18, Z
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_SetPinDirection+0x56>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_SetPinDirection+0x52>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	80 83       	st	Z, r24
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	08 95       	ret
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	08 95       	ret
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	08 95       	ret
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret

0000010e <DIO_WritePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 10e:	68 30       	cpi	r22, 0x08	; 8
 110:	80 f5       	brcc	.+96     	; 0x172 <DIO_WritePin+0x64>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data pointer according to the required port. */
   switch(port)
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	79 f0       	breq	.+30     	; 0x134 <DIO_WritePin+0x26>
 116:	28 f0       	brcs	.+10     	; 0x122 <DIO_WritePin+0x14>
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	31 f0       	breq	.+12     	; 0x128 <DIO_WritePin+0x1a>
 11c:	83 30       	cpi	r24, 0x03	; 3
 11e:	39 f0       	breq	.+14     	; 0x12e <DIO_WritePin+0x20>
 120:	2a c0       	rjmp	.+84     	; 0x176 <DIO_WritePin+0x68>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 122:	eb e3       	ldi	r30, 0x3B	; 59
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	08 c0       	rjmp	.+16     	; 0x138 <DIO_WritePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 128:	e5 e3       	ldi	r30, 0x35	; 53
 12a:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 12c:	05 c0       	rjmp	.+10     	; 0x138 <DIO_WritePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 12e:	e2 e3       	ldi	r30, 0x32	; 50
 130:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_WritePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 134:	e8 e3       	ldi	r30, 0x38	; 56
 136:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   /* set or clear value in the pin. */
   if(HIGH == data)
 138:	41 30       	cpi	r20, 0x01	; 1
 13a:	61 f4       	brne	.+24     	; 0x154 <DIO_WritePin+0x46>
   {
      SET_BIT(*prt_port_data,pin);
 13c:	20 81       	ld	r18, Z
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_WritePin+0x3a>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_WritePin+0x36>
 14c:	82 2b       	or	r24, r18
 14e:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
   /* set or clear value in the pin. */
   if(HIGH == data)
   {
      SET_BIT(*prt_port_data,pin);
   }
   else if(LOW == data)
 154:	41 11       	cpse	r20, r1
 156:	11 c0       	rjmp	.+34     	; 0x17a <DIO_WritePin+0x6c>
   {
      CLEAR_BIT(*prt_port_data,pin);
 158:	20 81       	ld	r18, Z
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_WritePin+0x56>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_WritePin+0x52>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	08 95       	ret
      CLEAR_BIT(*prt_port_data,pin);
   }
   /* if data is invalid. */
   else
   {
      return E_DIO_INVALID_WRITE_DATA;
 17a:	84 e0       	ldi	r24, 0x04	; 4
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 17c:	08 95       	ret

0000017e <SPI_Init>:
         }
      }
   }
   
   return E_SPI_SUCCESS;
}
 17e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	d9 f0       	breq	.+54     	; 0x1bc <SPI_Init+0x3e>
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	64 e0       	ldi	r22, 0x04	; 4
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 4f 00 	call	0x9e	; 0x9e <DIO_SetPinDirection>
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	64 e0       	ldi	r22, 0x04	; 4
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_WritePin>
 19a:	41 e0       	ldi	r20, 0x01	; 1
 19c:	65 e0       	ldi	r22, 0x05	; 5
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 4f 00 	call	0x9e	; 0x9e <DIO_SetPinDirection>
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	67 e0       	ldi	r22, 0x07	; 7
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 4f 00 	call	0x9e	; 0x9e <DIO_SetPinDirection>
 1ae:	80 e5       	ldi	r24, 0x50	; 80
 1b0:	8d b9       	out	0x0d, r24	; 13
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	08 95       	ret
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	08 95       	ret

000001c0 <SPI_SendChar>:
 1c0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c4:	99 23       	and	r25, r25
 1c6:	51 f0       	breq	.+20     	; 0x1dc <SPI_SendChar+0x1c>
 1c8:	8f b9       	out	0x0f, r24	; 15
 1ca:	77 9b       	sbis	0x0e, 7	; 14
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <SPI_SendChar+0xa>
 1ce:	9e b1       	in	r25, 0x0e	; 14
 1d0:	89 2f       	mov	r24, r25
 1d2:	80 74       	andi	r24, 0x40	; 64
 1d4:	96 ff       	sbrs	r25, 6
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <SPI_SendChar+0x1e>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	08 95       	ret
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	08 95       	ret

000001e0 <SPI_SelectSlave>:

SPI_ERROR_state_t SPI_SelectSlave(uint8_t slave_CH)
{
   if(NOT_INIT == gu8_IsDriverInit)
 1e0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e4:	99 23       	and	r25, r25
 1e6:	49 f0       	breq	.+18     	; 0x1fa <SPI_SelectSlave+0x1a>
   {
      return E_SPI_NOT_INIT;
   }
   
   switch(slave_CH)
 1e8:	81 11       	cpse	r24, r1
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <SPI_SelectSlave+0x1e>
   {
      #ifdef SS_CH_0
      case SS_CH_0:
         DIO_WritePin(SS_CH_0_PORT, SS_CH_0_PIN, LOW);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	64 e0       	ldi	r22, 0x04	; 4
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_WritePin>
      default:
         return E_SPI_INVALID_SS_CH;
   
   }
   
   return E_SPI_SUCCESS;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 95       	ret

SPI_ERROR_state_t SPI_SelectSlave(uint8_t slave_CH)
{
   if(NOT_INIT == gu8_IsDriverInit)
   {
      return E_SPI_NOT_INIT;
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	08 95       	ret
      case SS_CH_0:
         DIO_WritePin(SS_CH_0_PORT, SS_CH_0_PIN, LOW);
         break;
      #endif
      default:
         return E_SPI_INVALID_SS_CH;
 1fe:	85 e0       	ldi	r24, 0x05	; 5
   
   }
   
   return E_SPI_SUCCESS;
   
}
 200:	08 95       	ret

00000202 <SPI_UnselectSlave>:

SPI_ERROR_state_t SPI_UnselectSlave(uint8_t slave_CH)
{
   if(NOT_INIT == gu8_IsDriverInit)
 202:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 206:	99 23       	and	r25, r25
 208:	49 f0       	breq	.+18     	; 0x21c <SPI_UnselectSlave+0x1a>
   {
      return E_SPI_NOT_INIT;
   }
   
   switch(slave_CH)
 20a:	81 11       	cpse	r24, r1
 20c:	09 c0       	rjmp	.+18     	; 0x220 <SPI_UnselectSlave+0x1e>
   {
      #ifdef SS_CH_0
      case SS_CH_0:
         DIO_WritePin(SS_CH_0_PORT, SS_CH_0_PIN, LOW);
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	64 e0       	ldi	r22, 0x04	; 4
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_WritePin>
      default:
      return E_SPI_INVALID_SS_CH;
      
   }
   
   return E_SPI_SUCCESS;
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret

SPI_ERROR_state_t SPI_UnselectSlave(uint8_t slave_CH)
{
   if(NOT_INIT == gu8_IsDriverInit)
   {
      return E_SPI_NOT_INIT;
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	08 95       	ret
      case SS_CH_0:
         DIO_WritePin(SS_CH_0_PORT, SS_CH_0_PIN, LOW);
         break;
      #endif
      default:
      return E_SPI_INVALID_SS_CH;
 220:	85 e0       	ldi	r24, 0x05	; 5
      
   }
   
   return E_SPI_SUCCESS;
 222:	08 95       	ret

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
