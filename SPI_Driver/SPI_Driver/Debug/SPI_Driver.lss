
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a46  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fc  00000000  00000000  00000d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000712  00000000  00000000  0000144a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000447  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069b  00000000  00000000  000020cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000276a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ECU_2_Function>:
   SPI_SendChar(0x1F);
   SPI_UnselectSlave(SS_CH_0);
}

static void ECU_2_Function(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
   PORTA_DIR = 0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8a bb       	out	0x1a, r24	; 26

   SPI_Init();
  8a:	0e 94 8e 00 	call	0x11c	; 0x11c <SPI_Init>

   uint8_t character;
   SPI_ReadChar(&character);
  8e:	ce 01       	movw	r24, r28
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	0e 94 a0 00 	call	0x140	; 0x140 <SPI_ReadChar>
   PORTA_DATA = character;   
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	8b bb       	out	0x1b, r24	; 27
}
  9a:	0f 90       	pop	r0
  9c:	df 91       	pop	r29
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <main>:


int main(void)
{
   //ECU_1_Function();
   ECU_2_Function();
  a2:	0e 94 3e 00 	call	0x7c	; 0x7c <ECU_2_Function>
}
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret

000000ac <DIO_SetPinDirection>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_SetPinDirection(uint8_t port, uint8_t pin, uint8_t direction)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
  ac:	68 30       	cpi	r22, 0x08	; 8
  ae:	80 f5       	brcc	.+96     	; 0x110 <DIO_SetPinDirection+0x64>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_dir = NULL_PTR;
   
   /* sets the data and direction pointers according to the required port. */
   switch(port)
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	79 f0       	breq	.+30     	; 0xd2 <DIO_SetPinDirection+0x26>
  b4:	28 f0       	brcs	.+10     	; 0xc0 <DIO_SetPinDirection+0x14>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	31 f0       	breq	.+12     	; 0xc6 <DIO_SetPinDirection+0x1a>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	39 f0       	breq	.+14     	; 0xcc <DIO_SetPinDirection+0x20>
  be:	2a c0       	rjmp	.+84     	; 0x114 <DIO_SetPinDirection+0x68>
   {
      case PORTA:
         prt_port_dir = &PORTA_DIR;
  c0:	ea e3       	ldi	r30, 0x3A	; 58
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	08 c0       	rjmp	.+16     	; 0xd6 <DIO_SetPinDirection+0x2a>
         break;
      case PORTB:
         prt_port_dir = &PORTB_DIR;
         break;
      case PORTC:
         prt_port_dir = &PORTC_DIR;
  c6:	e4 e3       	ldi	r30, 0x34	; 52
  c8:	f0 e0       	ldi	r31, 0x00	; 0
         break;
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <DIO_SetPinDirection+0x2a>
      case PORTD:
         prt_port_dir = &PORTD_DIR;
  cc:	e1 e3       	ldi	r30, 0x31	; 49
  ce:	f0 e0       	ldi	r31, 0x00	; 0
         break;
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_SetPinDirection+0x2a>
   {
      case PORTA:
         prt_port_dir = &PORTA_DIR;
         break;
      case PORTB:
         prt_port_dir = &PORTB_DIR;
  d2:	e7 e3       	ldi	r30, 0x37	; 55
  d4:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* initialize output pin. */
   if(OUTPUT == direction)
  d6:	41 30       	cpi	r20, 0x01	; 1
  d8:	61 f4       	brne	.+24     	; 0xf2 <DIO_SetPinDirection+0x46>
   {
      /* set pin direction */
      SET_BIT(*prt_port_dir, pin);
  da:	20 81       	ld	r18, Z
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_SetPinDirection+0x3a>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_SetPinDirection+0x36>
  ea:	82 2b       	or	r24, r18
  ec:	80 83       	st	Z, r24
   else
   {
      return E_DIO_INVALID_DIRECTION;
   }

   return E_DIO_SUCCESS;
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 95       	ret
   {
      /* set pin direction */
      SET_BIT(*prt_port_dir, pin);
   }
   /* initialize input pin. */
   else if(INPUT == direction)
  f2:	41 11       	cpse	r20, r1
  f4:	11 c0       	rjmp	.+34     	; 0x118 <DIO_SetPinDirection+0x6c>
   {
      /* set pin direction */
      CLEAR_BIT(*prt_port_dir, pin);
  f6:	20 81       	ld	r18, Z
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SetPinDirection+0x56>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SetPinDirection+0x52>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	80 83       	st	Z, r24
   else
   {
      return E_DIO_INVALID_DIRECTION;
   }

   return E_DIO_SUCCESS;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret
DIO_ERROR_state_t DIO_SetPinDirection(uint8_t port, uint8_t pin, uint8_t direction)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	08 95       	ret
         break;
      case PORTD:
         prt_port_dir = &PORTD_DIR;
         break;
      default:
         return E_DIO_INVALID_PORT;
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	08 95       	ret
      /* set pin direction */
      CLEAR_BIT(*prt_port_dir, pin);
   }
   else
   {
      return E_DIO_INVALID_DIRECTION;
 118:	81 e0       	ldi	r24, 0x01	; 1
   }

   return E_DIO_SUCCESS;
}
 11a:	08 95       	ret

0000011c <SPI_Init>:
      return E_SPI_WRITE_COLLISION;
   }

   /* return success message */
   return E_SPI_SUCCESS;
}
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	61 f0       	breq	.+24     	; 0x13c <SPI_Init+0x20>
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	66 e0       	ldi	r22, 0x06	; 6
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 56 00 	call	0xac	; 0xac <DIO_SetPinDirection>
 12e:	80 e4       	ldi	r24, 0x40	; 64
 130:	8d b9       	out	0x0d, r24	; 13
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	08 95       	ret

00000140 <SPI_ReadChar>:
* @param [out]  character   -  address to where save the received character.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_ReadChar(uint8_t * character)
{
 140:	fc 01       	movw	r30, r24
   /* make sure driver was initialized before */
   if(NOT_INIT == gu8_IsDriverInit)
 142:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 146:	99 23       	and	r25, r25
 148:	59 f0       	breq	.+22     	; 0x160 <SPI_ReadChar+0x20>
   {
      return E_SPI_NOT_INIT;
   }
   /* make sure a null pointer isn't passed to the function */
   else if(NULL_PTR == character)
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	19 f4       	brne	.+6      	; 0x154 <SPI_ReadChar+0x14>
 14e:	0a c0       	rjmp	.+20     	; 0x164 <SPI_ReadChar+0x24>
   
   /* loops until transmitting is complete */
   while(!(SPI_STATUS_R & SPI_TRANSMIT_COMPLETE_BIT ))
   {
      /* check if there is a write collision error flag */
      if( (SPI_STATUS_R & SPI_WRITE_COLLISION_BIT ) )
 150:	76 99       	sbic	0x0e, 6	; 14
 152:	0a c0       	rjmp	.+20     	; 0x168 <SPI_ReadChar+0x28>
   {
      return E_SPI_NULL_PTR;
   }
   
   /* loops until transmitting is complete */
   while(!(SPI_STATUS_R & SPI_TRANSMIT_COMPLETE_BIT ))
 154:	77 9b       	sbis	0x0e, 7	; 14
 156:	fc cf       	rjmp	.-8      	; 0x150 <SPI_ReadChar+0x10>
         return E_SPI_WRITE_COLLISION;
      }
   }
   
   /* get data */
   *character = SPI_DATA_R;
 158:	8f b1       	in	r24, 0x0f	; 15
 15a:	80 83       	st	Z, r24
   
   /* return success message */
   return E_SPI_SUCCESS;
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	08 95       	ret
SPI_ERROR_state_t SPI_ReadChar(uint8_t * character)
{
   /* make sure driver was initialized before */
   if(NOT_INIT == gu8_IsDriverInit)
   {
      return E_SPI_NOT_INIT;
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	08 95       	ret
   }
   /* make sure a null pointer isn't passed to the function */
   else if(NULL_PTR == character)
   {
      return E_SPI_NULL_PTR;
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	08 95       	ret
   while(!(SPI_STATUS_R & SPI_TRANSMIT_COMPLETE_BIT ))
   {
      /* check if there is a write collision error flag */
      if( (SPI_STATUS_R & SPI_WRITE_COLLISION_BIT ) )
      {
         return E_SPI_WRITE_COLLISION;
 168:	81 e0       	ldi	r24, 0x01	; 1
   /* get data */
   *character = SPI_DATA_R;
   
   /* return success message */
   return E_SPI_SUCCESS;
}
 16a:	08 95       	ret

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
