
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d66  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078a  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007de  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00002048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e9  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cef  00000000  00000000  000026ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000339c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ECU_1_Function>:
/**
* @brief: This function is the master node main function.
*/
static void ECU_1_Function(void)
{
   SPI_Init(SPI_CH_0);
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	0e 94 b4 00 	call	0x168	; 0x168 <SPI_Init>
   
//   SPI_SelectSlave(SPI_CH_0_SS_CH_0);
   SPI_TransmitChar(SPI_CH_0, 0x1F, SPI_CH_0_SS_CH_0);
  72:	40 e0       	ldi	r20, 0x00	; 0
  74:	6f e1       	ldi	r22, 0x1F	; 31
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <SPI_TransmitChar>
  7c:	08 95       	ret

0000007e <main>:
-----------------------------------*/


int main(void)
{
   ECU_1_Function();
  7e:	0e 94 36 00 	call	0x6c	; 0x6c <ECU_1_Function>
   //ECU_2_Function();
}
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	08 95       	ret

00000088 <DIO_SetPinDirection>:
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
}
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	80 f5       	brcc	.+96     	; 0xec <DIO_SetPinDirection+0x64>
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	79 f0       	breq	.+30     	; 0xae <DIO_SetPinDirection+0x26>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_SetPinDirection+0x14>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	31 f0       	breq	.+12     	; 0xa2 <DIO_SetPinDirection+0x1a>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	39 f0       	breq	.+14     	; 0xa8 <DIO_SetPinDirection+0x20>
  9a:	2a c0       	rjmp	.+84     	; 0xf0 <DIO_SetPinDirection+0x68>
  9c:	ea e3       	ldi	r30, 0x3A	; 58
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	08 c0       	rjmp	.+16     	; 0xb2 <DIO_SetPinDirection+0x2a>
  a2:	e4 e3       	ldi	r30, 0x34	; 52
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	05 c0       	rjmp	.+10     	; 0xb2 <DIO_SetPinDirection+0x2a>
  a8:	e1 e3       	ldi	r30, 0x31	; 49
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_SetPinDirection+0x2a>
  ae:	e7 e3       	ldi	r30, 0x37	; 55
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	41 30       	cpi	r20, 0x01	; 1
  b4:	61 f4       	brne	.+24     	; 0xce <DIO_SetPinDirection+0x46>
  b6:	20 81       	ld	r18, Z
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_SetPinDirection+0x3a>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_SetPinDirection+0x36>
  c6:	82 2b       	or	r24, r18
  c8:	80 83       	st	Z, r24
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	08 95       	ret
  ce:	41 11       	cpse	r20, r1
  d0:	11 c0       	rjmp	.+34     	; 0xf4 <DIO_SetPinDirection+0x6c>
  d2:	20 81       	ld	r18, Z
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SetPinDirection+0x56>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SetPinDirection+0x52>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	80 83       	st	Z, r24
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	08 95       	ret
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	08 95       	ret
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	08 95       	ret
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	08 95       	ret

000000f8 <DIO_WritePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
  f8:	68 30       	cpi	r22, 0x08	; 8
  fa:	80 f5       	brcc	.+96     	; 0x15c <DIO_WritePin+0x64>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data pointer according to the required port. */
   switch(port)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	79 f0       	breq	.+30     	; 0x11e <DIO_WritePin+0x26>
 100:	28 f0       	brcs	.+10     	; 0x10c <DIO_WritePin+0x14>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	31 f0       	breq	.+12     	; 0x112 <DIO_WritePin+0x1a>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	39 f0       	breq	.+14     	; 0x118 <DIO_WritePin+0x20>
 10a:	2a c0       	rjmp	.+84     	; 0x160 <DIO_WritePin+0x68>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 10c:	eb e3       	ldi	r30, 0x3B	; 59
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	08 c0       	rjmp	.+16     	; 0x122 <DIO_WritePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 112:	e5 e3       	ldi	r30, 0x35	; 53
 114:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 116:	05 c0       	rjmp	.+10     	; 0x122 <DIO_WritePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 118:	e2 e3       	ldi	r30, 0x32	; 50
 11a:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_WritePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 11e:	e8 e3       	ldi	r30, 0x38	; 56
 120:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   /* set or clear value in the pin. */
   if(HIGH == data)
 122:	41 30       	cpi	r20, 0x01	; 1
 124:	61 f4       	brne	.+24     	; 0x13e <DIO_WritePin+0x46>
   {
      SET_BIT(*prt_port_data,pin);
 126:	20 81       	ld	r18, Z
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_WritePin+0x3a>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_WritePin+0x36>
 136:	82 2b       	or	r24, r18
 138:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret
   /* set or clear value in the pin. */
   if(HIGH == data)
   {
      SET_BIT(*prt_port_data,pin);
   }
   else if(LOW == data)
 13e:	41 11       	cpse	r20, r1
 140:	11 c0       	rjmp	.+34     	; 0x164 <DIO_WritePin+0x6c>
   {
      CLEAR_BIT(*prt_port_data,pin);
 142:	20 81       	ld	r18, Z
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_WritePin+0x56>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_WritePin+0x52>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	08 95       	ret
      CLEAR_BIT(*prt_port_data,pin);
   }
   /* if data is invalid. */
   else
   {
      return E_DIO_INVALID_WRITE_DATA;
 164:	84 e0       	ldi	r24, 0x04	; 4
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 166:	08 95       	ret

00000168 <SPI_Init>:
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_Init(uint8_t SpiNumber)
{
   switch(SpiNumber)
 168:	81 11       	cpse	r24, r1
 16a:	18 c0       	rjmp	.+48     	; 0x19c <SPI_Init+0x34>
         /* initialize master node */
         if( (SPI_CH_0_CONTROL_MASK & MASTER_SELECT) )
         {
            /* initialize slave select pins */
            #ifdef SPI_CH_0_SS_CH_0
               DIO_SetPinDirection(SPI_CH_0_SS_CH_0_PORT, SPI_CH_0_SS_CH_0_PIN, OUTPUT);
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	64 e0       	ldi	r22, 0x04	; 4
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 44 00 	call	0x88	; 0x88 <DIO_SetPinDirection>
               DIO_WritePin(SPI_CH_0_SS_CH_0_PORT, SPI_CH_0_SS_CH_0_PIN, HIGH);
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	64 e0       	ldi	r22, 0x04	; 4
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 7c 00 	call	0xf8	; 0xf8 <DIO_WritePin>
            #endif
            /* initialize MOSI and clock source pins */
            DIO_SetPinDirection(SPI_CH_0_MOSI_PORT, SPI_CH_0_MOSI_PIN, OUTPUT);
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	65 e0       	ldi	r22, 0x05	; 5
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 44 00 	call	0x88	; 0x88 <DIO_SetPinDirection>
            DIO_SetPinDirection(SPI_CH_0_SCK_PORT, SPI_CH_0_SCK_PIN, OUTPUT);
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	67 e0       	ldi	r22, 0x07	; 7
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 44 00 	call	0x88	; 0x88 <DIO_SetPinDirection>
            /* sets SPI control register */
            SPI_CONTROL_R = SPI_CH_0_CONTROL_MASK;
 194:	80 e5       	ldi	r24, 0x50	; 80
 196:	8d b9       	out	0x0d, r24	; 13
         return E_SPI_INVALID_CH;
      
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	08 95       	ret
            SPI_CONTROL_R = SPI_EN;
         }
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
 19c:	86 e0       	ldi	r24, 0x06	; 6
      
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
}
 19e:	08 95       	ret

000001a0 <SPI_TransmitChar>:
* @param [in]  slave_CH    -  slave select line.
*
* @return function error state.
*/
SPI_ERROR_state_t SPI_TransmitChar(uint8_t SpiNumber, uint8_t TxChar, uint8_t slave_CH)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
   volatile uint8_t * ptr_SPIStatusR;
   uint8_t u8_SSPort;
   uint8_t u8_SSPin;
   
   /* get the required spi data */
   switch(SpiNumber)
 1a4:	81 11       	cpse	r24, r1
 1a6:	1d c0       	rjmp	.+58     	; 0x1e2 <SPI_TransmitChar+0x42>
      default:
         return E_SPI_INVALID_CH;
   }
   
   /* get the required slave select port and pin */
   switch(slave_CH)
 1a8:	44 23       	and	r20, r20
 1aa:	11 f0       	breq	.+4      	; 0x1b0 <SPI_TransmitChar+0x10>
 1ac:	4f 3f       	cpi	r20, 0xFF	; 255
 1ae:	d9 f4       	brne	.+54     	; 0x1e6 <SPI_TransmitChar+0x46>
 1b0:	d4 2f       	mov	r29, r20
 1b2:	c6 2f       	mov	r28, r22
         break;
      default:
         return E_SPI_INVALID_SS_CH;
   }
   
   if(SLAVE_SS_CH != slave_CH)
 1b4:	4f 3f       	cpi	r20, 0xFF	; 255
 1b6:	29 f0       	breq	.+10     	; 0x1c2 <SPI_TransmitChar+0x22>
   {
      /* select slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, LOW);
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	64 e0       	ldi	r22, 0x04	; 4
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 7c 00 	call	0xf8	; 0xf8 <DIO_WritePin>
   }
   
   /* sets character in the SPI register */
   *ptr_SPIDataR = TxChar;
 1c2:	cf b9       	out	0x0f, r28	; 15
   
   /* loops until transmitting is complete */
   while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ));
 1c4:	77 9b       	sbis	0x0e, 7	; 14
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <SPI_TransmitChar+0x24>
   /* check if there is a write collision error flag */
   if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
 1c8:	8e b1       	in	r24, 0x0e	; 14
 1ca:	c8 2f       	mov	r28, r24
 1cc:	c0 74       	andi	r28, 0x40	; 64
 1ce:	86 fd       	sbrc	r24, 6
 1d0:	0c c0       	rjmp	.+24     	; 0x1ea <SPI_TransmitChar+0x4a>
   {
      return E_SPI_WRITE_COLLISION;
   }
   
   if(SLAVE_SS_CH != slave_CH)
 1d2:	df 3f       	cpi	r29, 0xFF	; 255
 1d4:	59 f0       	breq	.+22     	; 0x1ec <SPI_TransmitChar+0x4c>
   {
      /* unselect slave line */
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	64 e0       	ldi	r22, 0x04	; 4
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 7c 00 	call	0xf8	; 0xf8 <DIO_WritePin>
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <SPI_TransmitChar+0x4c>
         ptr_SPIDataR = &SPI_DATA_R;
         ptr_SPIStatusR = &SPI_STATUS_R;
         break;
      #endif
      default:
         return E_SPI_INVALID_CH;
 1e2:	c6 e0       	ldi	r28, 0x06	; 6
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <SPI_TransmitChar+0x4c>
         break;
      #endif
      case SLAVE_SS_CH:
         break;
      default:
         return E_SPI_INVALID_SS_CH;
 1e6:	c5 e0       	ldi	r28, 0x05	; 5
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <SPI_TransmitChar+0x4c>
   /* loops until transmitting is complete */
   while(!(*ptr_SPIStatusR & SPI_TRANSMIT_COMPLETE_BIT ));
   /* check if there is a write collision error flag */
   if( (*ptr_SPIStatusR & SPI_WRITE_COLLISION_BIT ) )
   {
      return E_SPI_WRITE_COLLISION;
 1ea:	c1 e0       	ldi	r28, 0x01	; 1
      DIO_WritePin(u8_SSPort, u8_SSPin, HIGH);
   }
   
   /* return success message */
   return E_SPI_SUCCESS;
}
 1ec:	8c 2f       	mov	r24, r28
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
