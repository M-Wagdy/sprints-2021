
Card_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000006a2  00000736  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000021b  008000a6  008000a6  0000077c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b52  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c32  00000000  00000000  00002532  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011e0  00000000  00000000  00003164  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00004344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a8  00000000  00000000  00004710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012d9  00000000  00000000  00004fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00006291  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3c       	cpi	r26, 0xC1	; 193
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 31 02 	call	0x462	; 0x462 <main>
  8a:	0c 94 4f 03 	jmp	0x69e	; 0x69e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CARD_Init>:
*
* @return function error state.
*/
void CARD_Init()
{
   EEPROM_Init(EEPROM_CH_0);
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <EEPROM_Init>
   TERMINAL_Init(TERMINAL_CH_0);
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 9b 01 	call	0x336	; 0x336 <TERMINAL_Init>
   GLOBALINTTERUPTS_Enable();
  9e:	0e 94 4c 02 	call	0x498	; 0x498 <GLOBALINTTERUPTS_Enable>
  a2:	08 95       	ret

000000a4 <CARD_GetUserData>:
* @param [in]  EEPROM_CH   -  EEPROM channel number.
*
* @return function error state.
*/
void CARD_GetUserData(STR_cardData_t * CardData)
{
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	8c 01       	movw	r16, r24
   for(uint8_t i = 0; i<CARD_HOLDER_NAME_STRING_SIZE; i++)
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	08 c0       	rjmp	.+16     	; 0xc0 <CARD_GetUserData+0x1c>
   {
      /* get data from the given address */
      EEPROM_Read(EEPROM_CH_0, (CARD_HOLDER_NAME_START_ADDRESS + i), &CardData->au8_CardHolderName[i]);
  b0:	a8 01       	movw	r20, r16
  b2:	4c 0f       	add	r20, r28
  b4:	51 1d       	adc	r21, r1
  b6:	6c 2f       	mov	r22, r28
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 05 01 	call	0x20a	; 0x20a <EEPROM_Read>
*
* @return function error state.
*/
void CARD_GetUserData(STR_cardData_t * CardData)
{
   for(uint8_t i = 0; i<CARD_HOLDER_NAME_STRING_SIZE; i++)
  be:	cf 5f       	subi	r28, 0xFF	; 255
  c0:	ca 30       	cpi	r28, 0x0A	; 10
  c2:	b0 f3       	brcs	.-20     	; 0xb0 <CARD_GetUserData+0xc>
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	0c c0       	rjmp	.+24     	; 0xe0 <CARD_GetUserData+0x3c>
   }
   
   for(uint8_t i = 0; i<PAN_STRING_SIZE; i++)
   {
      /* get data from the given address */
      EEPROM_Read(EEPROM_CH_0, (PAN_START_ADDRESS + i), &CardData->au8_PAN[i]);
  c8:	4c 2f       	mov	r20, r28
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	46 5f       	subi	r20, 0xF6	; 246
  ce:	5f 4f       	sbci	r21, 0xFF	; 255
  d0:	40 0f       	add	r20, r16
  d2:	51 1f       	adc	r21, r17
  d4:	6a e0       	ldi	r22, 0x0A	; 10
  d6:	6c 0f       	add	r22, r28
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 05 01 	call	0x20a	; 0x20a <EEPROM_Read>
   {
      /* get data from the given address */
      EEPROM_Read(EEPROM_CH_0, (CARD_HOLDER_NAME_START_ADDRESS + i), &CardData->au8_CardHolderName[i]);
   }
   
   for(uint8_t i = 0; i<PAN_STRING_SIZE; i++)
  de:	cf 5f       	subi	r28, 0xFF	; 255
  e0:	ca 30       	cpi	r28, 0x0A	; 10
  e2:	90 f3       	brcs	.-28     	; 0xc8 <CARD_GetUserData+0x24>
  e4:	c0 e0       	ldi	r28, 0x00	; 0
  e6:	0c c0       	rjmp	.+24     	; 0x100 <CARD_GetUserData+0x5c>
   }
   
   for(uint8_t i = 0; i<PIN_STRING_SIZE; i++)
   {
      /* get data from the given address */
      EEPROM_Read(EEPROM_CH_0, (PIN_START_ADDRESS + i), &CardData->au8_PIN[i]);
  e8:	4c 2f       	mov	r20, r28
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	4c 5e       	subi	r20, 0xEC	; 236
  ee:	5f 4f       	sbci	r21, 0xFF	; 255
  f0:	40 0f       	add	r20, r16
  f2:	51 1f       	adc	r21, r17
  f4:	64 e1       	ldi	r22, 0x14	; 20
  f6:	6c 0f       	add	r22, r28
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 05 01 	call	0x20a	; 0x20a <EEPROM_Read>
   {
      /* get data from the given address */
      EEPROM_Read(EEPROM_CH_0, (PAN_START_ADDRESS + i), &CardData->au8_PAN[i]);
   }
   
   for(uint8_t i = 0; i<PIN_STRING_SIZE; i++)
  fe:	cf 5f       	subi	r28, 0xFF	; 255
 100:	c5 30       	cpi	r28, 0x05	; 5
 102:	90 f3       	brcs	.-28     	; 0xe8 <CARD_GetUserData+0x44>
   {
      /* get data from the given address */
      EEPROM_Read(EEPROM_CH_0, (PIN_START_ADDRESS + i), &CardData->au8_PIN[i]);
   }
}
 104:	cf 91       	pop	r28
 106:	1f 91       	pop	r17
 108:	0f 91       	pop	r16
 10a:	08 95       	ret

0000010c <CARD_SetUserData>:
* @param [in]  EEPROM_CH   -  EEPROM channel number.
*
* @return function error state.
*/
void CARD_SetUserData(void)
{
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	2a 97       	sbiw	r28, 0x0a	; 10
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
   uint8_t TerminalData[10];
   GLOBALINTTERUPTS_Disable();
 122:	0e 94 50 02 	call	0x4a0	; 0x4a0 <GLOBALINTTERUPTS_Disable>
   
   Terminal_Write(TERMINAL_CH_0_UART_CH, gu8_CardHolderNameMessage);
 126:	60 e6       	ldi	r22, 0x60	; 96
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Terminal_Write>
   
   UART_ReceiveString(UART_CH_0, TerminalData);
 130:	be 01       	movw	r22, r28
 132:	6f 5f       	subi	r22, 0xFF	; 255
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 c6 02 	call	0x58c	; 0x58c <UART_ReceiveString>
   for(uint8_t i = 0; i<CARD_HOLDER_NAME_STRING_SIZE; i++)
 13c:	10 e0       	ldi	r17, 0x00	; 0
 13e:	0e c0       	rjmp	.+28     	; 0x15c <CARD_SetUserData+0x50>
   {
      /* store data to the given address */
      EEPROM_Write(EEPROM_CH_0, (CARD_HOLDER_NAME_START_ADDRESS + i), TerminalData[i]);
 140:	e1 e0       	ldi	r30, 0x01	; 1
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	e1 0f       	add	r30, r17
 14a:	f1 1d       	adc	r31, r1
 14c:	40 81       	ld	r20, Z
 14e:	61 2f       	mov	r22, r17
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 48 01 	call	0x290	; 0x290 <EEPROM_Write>
      dummy_delay();
 156:	0e 94 e6 01 	call	0x3cc	; 0x3cc <dummy_delay>
   GLOBALINTTERUPTS_Disable();
   
   Terminal_Write(TERMINAL_CH_0_UART_CH, gu8_CardHolderNameMessage);
   
   UART_ReceiveString(UART_CH_0, TerminalData);
   for(uint8_t i = 0; i<CARD_HOLDER_NAME_STRING_SIZE; i++)
 15a:	1f 5f       	subi	r17, 0xFF	; 255
 15c:	1a 30       	cpi	r17, 0x0A	; 10
 15e:	80 f3       	brcs	.-32     	; 0x140 <CARD_SetUserData+0x34>
      /* store data to the given address */
      EEPROM_Write(EEPROM_CH_0, (CARD_HOLDER_NAME_START_ADDRESS + i), TerminalData[i]);
      dummy_delay();
   }
   
   Terminal_Write(TERMINAL_CH_0_UART_CH, gu8_PANMessage);
 160:	6e e7       	ldi	r22, 0x7E	; 126
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Terminal_Write>
   
   UART_ReceiveString(UART_CH_0, TerminalData);
 16a:	be 01       	movw	r22, r28
 16c:	6f 5f       	subi	r22, 0xFF	; 255
 16e:	7f 4f       	sbci	r23, 0xFF	; 255
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 c6 02 	call	0x58c	; 0x58c <UART_ReceiveString>
   for(uint8_t i = 0; i<PAN_STRING_SIZE; i++)
 176:	10 e0       	ldi	r17, 0x00	; 0
 178:	0f c0       	rjmp	.+30     	; 0x198 <CARD_SetUserData+0x8c>
   {
      /* store data to the given address */
      EEPROM_Write(EEPROM_CH_0, (PAN_START_ADDRESS + i), TerminalData[i]);
 17a:	e1 e0       	ldi	r30, 0x01	; 1
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	ec 0f       	add	r30, r28
 180:	fd 1f       	adc	r31, r29
 182:	e1 0f       	add	r30, r17
 184:	f1 1d       	adc	r31, r1
 186:	6a e0       	ldi	r22, 0x0A	; 10
 188:	61 0f       	add	r22, r17
 18a:	40 81       	ld	r20, Z
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 48 01 	call	0x290	; 0x290 <EEPROM_Write>
      dummy_delay();
 192:	0e 94 e6 01 	call	0x3cc	; 0x3cc <dummy_delay>
   }
   
   Terminal_Write(TERMINAL_CH_0_UART_CH, gu8_PANMessage);
   
   UART_ReceiveString(UART_CH_0, TerminalData);
   for(uint8_t i = 0; i<PAN_STRING_SIZE; i++)
 196:	1f 5f       	subi	r17, 0xFF	; 255
 198:	1a 30       	cpi	r17, 0x0A	; 10
 19a:	78 f3       	brcs	.-34     	; 0x17a <CARD_SetUserData+0x6e>
      /* store data to the given address */
      EEPROM_Write(EEPROM_CH_0, (PAN_START_ADDRESS + i), TerminalData[i]);
      dummy_delay();
   }
   
   Terminal_Write(TERMINAL_CH_0_UART_CH, gu8_PINMessage);
 19c:	6f e8       	ldi	r22, 0x8F	; 143
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Terminal_Write>
   
   UART_ReceiveString(UART_CH_0, TerminalData);
 1a6:	be 01       	movw	r22, r28
 1a8:	6f 5f       	subi	r22, 0xFF	; 255
 1aa:	7f 4f       	sbci	r23, 0xFF	; 255
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 c6 02 	call	0x58c	; 0x58c <UART_ReceiveString>
   for(uint8_t i = 0; i<PIN_STRING_SIZE; i++)
 1b2:	10 e0       	ldi	r17, 0x00	; 0
 1b4:	0f c0       	rjmp	.+30     	; 0x1d4 <CARD_SetUserData+0xc8>
   {
      /* store data to the given address */
      EEPROM_Write(EEPROM_CH_0, (PIN_START_ADDRESS + i), TerminalData[i]);
 1b6:	e1 e0       	ldi	r30, 0x01	; 1
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ec 0f       	add	r30, r28
 1bc:	fd 1f       	adc	r31, r29
 1be:	e1 0f       	add	r30, r17
 1c0:	f1 1d       	adc	r31, r1
 1c2:	64 e1       	ldi	r22, 0x14	; 20
 1c4:	61 0f       	add	r22, r17
 1c6:	40 81       	ld	r20, Z
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 48 01 	call	0x290	; 0x290 <EEPROM_Write>
      dummy_delay();
 1ce:	0e 94 e6 01 	call	0x3cc	; 0x3cc <dummy_delay>
   }
   
   Terminal_Write(TERMINAL_CH_0_UART_CH, gu8_PINMessage);
   
   UART_ReceiveString(UART_CH_0, TerminalData);
   for(uint8_t i = 0; i<PIN_STRING_SIZE; i++)
 1d2:	1f 5f       	subi	r17, 0xFF	; 255
 1d4:	15 30       	cpi	r17, 0x05	; 5
 1d6:	78 f3       	brcs	.-34     	; 0x1b6 <CARD_SetUserData+0xaa>
      /* store data to the given address */
      EEPROM_Write(EEPROM_CH_0, (PIN_START_ADDRESS + i), TerminalData[i]);
      dummy_delay();
   }
   
   GLOBALINTTERUPTS_Enable();
 1d8:	0e 94 4c 02 	call	0x498	; 0x498 <GLOBALINTTERUPTS_Enable>
 1dc:	2a 96       	adiw	r28, 0x0a	; 10
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	08 95       	ret

000001f0 <EEPROM_Init>:
{
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	39 f4       	brne	.+14     	; 0x202 <EEPROM_Init+0x12>
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* configure i2c pins */
   e_state = I2C_Init(u8_I2C_CH);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <I2C_Init>
   /* make sure pin configuration is successful */
   if(E_I2C_SUCCESS != e_state)
 1fa:	88 23       	and	r24, r24
 1fc:	21 f0       	breq	.+8      	; 0x206 <EEPROM_Init+0x16>
   {
      return E_EEPROM_I2C_ERROR;
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	08 95       	ret
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 206:	80 e0       	ldi	r24, 0x00	; 0
}
 208:	08 95       	ret

0000020a <EEPROM_Read>:
* @param [in]  data        -  Pointer to where to store received data.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_Read(uint8_t EEPROM_CH, uint8_t address, uint8_t * data)
{
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	49 f5       	brne	.+82     	; 0x266 <EEPROM_Read+0x5c>
 214:	8a 01       	movw	r16, r20
 216:	c6 2f       	mov	r28, r22
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* Set start condition */
   e_state =I2C_Start(u8_I2C_CH);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <I2C_Start>
   if(E_I2C_SUCCESS != e_state)
 21e:	81 11       	cpse	r24, r1
 220:	24 c0       	rjmp	.+72     	; 0x26a <EEPROM_Read+0x60>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_WRITE);
 222:	60 ea       	ldi	r22, 0xA0	; 160
 224:	0e 94 76 02 	call	0x4ec	; 0x4ec <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 228:	81 11       	cpse	r24, r1
 22a:	21 c0       	rjmp	.+66     	; 0x26e <EEPROM_Read+0x64>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set address to read from */
   e_state = I2C_Write(u8_I2C_CH, address);
 22c:	6c 2f       	mov	r22, r28
 22e:	0e 94 76 02 	call	0x4ec	; 0x4ec <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 232:	81 11       	cpse	r24, r1
 234:	1e c0       	rjmp	.+60     	; 0x272 <EEPROM_Read+0x68>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* repeated start */
   e_state = I2C_RepeatedStart(u8_I2C_CH);
 236:	0e 94 97 02 	call	0x52e	; 0x52e <I2C_Stop>
   if(E_I2C_SUCCESS != e_state)
 23a:	81 11       	cpse	r24, r1
 23c:	1c c0       	rjmp	.+56     	; 0x276 <EEPROM_Read+0x6c>
   {
      return E_EEPROM_I2C_ERROR;
   }
   /* Set first memory block address + R */
 23e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <I2C_RepeatedStart>
   e_state= I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_READ );
 242:	81 11       	cpse	r24, r1
 244:	1a c0       	rjmp	.+52     	; 0x27a <EEPROM_Read+0x70>
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
   }
   
 246:	61 ea       	ldi	r22, 0xA1	; 161
 248:	0e 94 76 02 	call	0x4ec	; 0x4ec <I2C_Write>
   /* receive data in the address */
 24c:	81 11       	cpse	r24, r1
 24e:	17 c0       	rjmp	.+46     	; 0x27e <EEPROM_Read+0x74>
   e_state = I2C_ReadNoAck(u8_I2C_CH, data);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
   }
   
 250:	b8 01       	movw	r22, r16
 252:	0e 94 83 02 	call	0x506	; 0x506 <I2C_ReadNoAck>
   /* release the bus */
 256:	81 11       	cpse	r24, r1
 258:	14 c0       	rjmp	.+40     	; 0x282 <EEPROM_Read+0x78>
   e_state = I2C_Stop(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
   }
   
 25a:	0e 94 97 02 	call	0x52e	; 0x52e <I2C_Stop>
   /* return success message */
 25e:	88 23       	and	r24, r24
 260:	91 f0       	breq	.+36     	; 0x286 <EEPROM_Read+0x7c>
   return E_EEPROM_SUCCESS;
}
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	11 c0       	rjmp	.+34     	; 0x288 <EEPROM_Read+0x7e>
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0f c0       	rjmp	.+30     	; 0x288 <EEPROM_Read+0x7e>
   
   /* Set start condition */
   e_state =I2C_Start(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	0d c0       	rjmp	.+26     	; 0x288 <EEPROM_Read+0x7e>
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_WRITE);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0b c0       	rjmp	.+22     	; 0x288 <EEPROM_Read+0x7e>
   
   /* Set address to read from */
   e_state = I2C_Write(u8_I2C_CH, address);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	09 c0       	rjmp	.+18     	; 0x288 <EEPROM_Read+0x7e>

   /* repeated start */
   e_state = I2C_RepeatedStart(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	07 c0       	rjmp	.+14     	; 0x288 <EEPROM_Read+0x7e>
   }
   /* Set first memory block address + R */
   e_state= I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_READ );
   if(E_I2C_SUCCESS != e_state)
   {
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	05 c0       	rjmp	.+10     	; 0x288 <EEPROM_Read+0x7e>
      return E_EEPROM_I2C_ERROR;
   }
   
   /* receive data in the address */
   e_state = I2C_ReadNoAck(u8_I2C_CH, data);
   if(E_I2C_SUCCESS != e_state)
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	03 c0       	rjmp	.+6      	; 0x288 <EEPROM_Read+0x7e>
      return E_EEPROM_I2C_ERROR;
   }
   
   /* release the bus */
   e_state = I2C_Stop(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	01 c0       	rjmp	.+2      	; 0x288 <EEPROM_Read+0x7e>
   return E_EEPROM_SUCCESS;
}

/**
* @brief: This function writes an EEPROM memory block.
*
 286:	80 e0       	ldi	r24, 0x00	; 0
* @param [in]  EEPROM_CH   -  EEPROM channel number.
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	08 95       	ret

00000290 <EEPROM_Write>:
{
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
   {
      #ifdef EEPROM_CH_0
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	e1 f4       	brne	.+56     	; 0x2d0 <EEPROM_Write+0x40>
 298:	d4 2f       	mov	r29, r20
 29a:	c6 2f       	mov	r28, r22
   e_state = I2C_Start(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
   }
   
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <I2C_Start>
   /* Set first memory block address + W */
 2a2:	81 11       	cpse	r24, r1
 2a4:	17 c0       	rjmp	.+46     	; 0x2d4 <EEPROM_Write+0x44>
   e_state = I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_WRITE);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
   }
   
 2a6:	60 ea       	ldi	r22, 0xA0	; 160
 2a8:	0e 94 76 02 	call	0x4ec	; 0x4ec <I2C_Write>
   /* set address to write to */
 2ac:	81 11       	cpse	r24, r1
 2ae:	14 c0       	rjmp	.+40     	; 0x2d8 <EEPROM_Write+0x48>
   e_state = I2C_Write(u8_I2C_CH, address);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
   }
   
 2b0:	6c 2f       	mov	r22, r28
 2b2:	0e 94 76 02 	call	0x4ec	; 0x4ec <I2C_Write>
   /* writes data to the address */
 2b6:	81 11       	cpse	r24, r1
 2b8:	11 c0       	rjmp	.+34     	; 0x2dc <EEPROM_Write+0x4c>
   e_state = I2C_Write(u8_I2C_CH, data);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
   }
   
 2ba:	6d 2f       	mov	r22, r29
 2bc:	0e 94 76 02 	call	0x4ec	; 0x4ec <I2C_Write>
   /* release the bus */
 2c0:	81 11       	cpse	r24, r1
 2c2:	0e c0       	rjmp	.+28     	; 0x2e0 <EEPROM_Write+0x50>
   e_state = I2C_Stop(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
   }
   
 2c4:	0e 94 97 02 	call	0x52e	; 0x52e <I2C_Stop>
   /* return success message */
 2c8:	88 23       	and	r24, r24
 2ca:	61 f0       	breq	.+24     	; 0x2e4 <EEPROM_Write+0x54>
   return E_EEPROM_SUCCESS;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0b c0       	rjmp	.+22     	; 0x2e6 <EEPROM_Write+0x56>
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* Set start condition */
   e_state = I2C_Start(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	09 c0       	rjmp	.+18     	; 0x2e6 <EEPROM_Write+0x56>
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_WRITE);
   if(E_I2C_SUCCESS != e_state)
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <EEPROM_Write+0x56>
      return E_EEPROM_I2C_ERROR;
   }
   
   /* set address to write to */
   e_state = I2C_Write(u8_I2C_CH, address);
   if(E_I2C_SUCCESS != e_state)
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	05 c0       	rjmp	.+10     	; 0x2e6 <EEPROM_Write+0x56>
      return E_EEPROM_I2C_ERROR;
   }
   
   /* writes data to the address */
   e_state = I2C_Write(u8_I2C_CH, data);
   if(E_I2C_SUCCESS != e_state)
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	03 c0       	rjmp	.+6      	; 0x2e6 <EEPROM_Write+0x56>
      return E_EEPROM_I2C_ERROR;
   }
   
   /* release the bus */
   e_state = I2C_Stop(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <EEPROM_Write+0x56>
   return E_EEPROM_SUCCESS;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <TERMINAL_ReadCallBack>:
/**
* @brief: This function reads from UART and put it in the global buffer.
*/
void TERMINAL_ReadCallBack(void)
{
   gu8_RxBuffer[gu8_Counter] = UART_DATA_R;
 2ec:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <gu8_Counter>
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	9c b1       	in	r25, 0x0c	; 12
 2f6:	f9 01       	movw	r30, r18
 2f8:	e8 55       	subi	r30, 0x58	; 88
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	90 83       	st	Z, r25
      
   /* enters an end of string character and breaks from the loop on receiving
      a new line character */
   if(gu8_RxBuffer[gu8_Counter] == NEW_LINE)
 2fe:	9d 30       	cpi	r25, 0x0D	; 13
 300:	39 f4       	brne	.+14     	; 0x310 <TERMINAL_ReadCallBack+0x24>
   {
      gu8_RxBuffer[gu8_Counter + STRING_NEXT_CHAR] = END_OF_STRING;
 302:	f9 01       	movw	r30, r18
 304:	e7 55       	subi	r30, 0x57	; 87
 306:	ff 4f       	sbci	r31, 0xFF	; 255
 308:	10 82       	st	Z, r1
      gu8_IsFinished = RECEIVE_FINISHED;
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__data_end>
   }
   gu8_Counter++;
 310:	8f 5f       	subi	r24, 0xFF	; 255
 312:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <gu8_Counter>
      
   /* return to the previous character to overwrite if the entered character 
      is backspace */
   if(gu8_RxBuffer[gu8_Counter - STRING_PREV_CHAR] == BACKSPACE)
 316:	e8 2f       	mov	r30, r24
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	e9 55       	subi	r30, 0x59	; 89
 31c:	ff 4f       	sbci	r31, 0xFF	; 255
 31e:	90 81       	ld	r25, Z
 320:	98 30       	cpi	r25, 0x08	; 8
 322:	41 f4       	brne	.+16     	; 0x334 <TERMINAL_ReadCallBack+0x48>
   {
      if (gu8_Counter - STRING_PREV_CHAR != STRING_COUNTER_START)
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	21 f0       	breq	.+8      	; 0x330 <TERMINAL_ReadCallBack+0x44>
      {
         gu8_Counter -= STRING_RETURN_TO_PREV_CHAR;
 328:	82 50       	subi	r24, 0x02	; 2
 32a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <gu8_Counter>
 32e:	08 95       	ret
      }
      /* return to the string start if the counter is still at first character */
      else
      {
         gu8_Counter = STRING_COUNTER_START;
 330:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <gu8_Counter>
 334:	08 95       	ret

00000336 <TERMINAL_Init>:
{
   UART_ERROR_state_t e_state;
   
   uint8_t u8_UART_CH;
   
   switch(Terminal_CH)
 336:	81 11       	cpse	r24, r1
 338:	12 c0       	rjmp	.+36     	; 0x35e <TERMINAL_Init+0x28>
      default:
         return E_TERMINAL_INVALID_CH_NO;
   }
   
   /* configure uart pins */
   e_state = UART_Init(u8_UART_CH);
 33a:	0e 94 a3 02 	call	0x546	; 0x546 <UART_Init>
   /* make sure pin configuration is successful */
   if(E_UART_SUCCESS != e_state)
 33e:	81 11       	cpse	r24, r1
 340:	10 c0       	rjmp	.+32     	; 0x362 <TERMINAL_Init+0x2c>
   {
      return E_TERMINAL_UART_ERROR;
   }
   
   /* enable Rx interrupt */
   e_state = UART_EnableInterrupt(u8_UART_CH, RX_INT);
 342:	60 e8       	ldi	r22, 0x80	; 128
 344:	0e 94 ee 02 	call	0x5dc	; 0x5dc <UART_EnableInterrupt>
   /* make sure function call is successful */
   if(E_UART_SUCCESS != e_state)
 348:	81 11       	cpse	r24, r1
 34a:	0d c0       	rjmp	.+26     	; 0x366 <TERMINAL_Init+0x30>
   {
      return E_TERMINAL_UART_ERROR;
   }
   
   /* Set callback function */
   e_state = UART_SetCallback(u8_UART_CH, RX_INT, TERMINAL_ReadCallBack);
 34c:	46 e7       	ldi	r20, 0x76	; 118
 34e:	51 e0       	ldi	r21, 0x01	; 1
 350:	60 e8       	ldi	r22, 0x80	; 128
 352:	0e 94 fd 02 	call	0x5fa	; 0x5fa <UART_SetCallback>
   /* make sure function call is successful */
   if(E_UART_SUCCESS != e_state)
 356:	88 23       	and	r24, r24
 358:	41 f0       	breq	.+16     	; 0x36a <TERMINAL_Init+0x34>
   {
      return E_TERMINAL_UART_ERROR;
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	08 95       	ret
      case TERMINAL_CH_0:
         u8_UART_CH = TERMINAL_CH_0_UART_CH;
         break;
      #endif
      default:
         return E_TERMINAL_INVALID_CH_NO;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	08 95       	ret
   /* configure uart pins */
   e_state = UART_Init(u8_UART_CH);
   /* make sure pin configuration is successful */
   if(E_UART_SUCCESS != e_state)
   {
      return E_TERMINAL_UART_ERROR;
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	08 95       	ret
   /* enable Rx interrupt */
   e_state = UART_EnableInterrupt(u8_UART_CH, RX_INT);
   /* make sure function call is successful */
   if(E_UART_SUCCESS != e_state)
   {
      return E_TERMINAL_UART_ERROR;
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	08 95       	ret
   {
      return E_TERMINAL_UART_ERROR;
   }
   
   /* return success message */
   return E_TERMINAL_SUCCESS;
 36a:	80 e0       	ldi	r24, 0x00	; 0
   
}
 36c:	08 95       	ret

0000036e <Terminal_Read>:
* @param [in]  data        -  Data to write.
*
* @return function error state.
*/
TERMINAL_ERROR_state_t Terminal_Read(uint8_t * Data)
{
 36e:	dc 01       	movw	r26, r24
   if(NULL_PTR == Data)
 370:	89 2b       	or	r24, r25
 372:	c9 f0       	breq	.+50     	; 0x3a6 <Terminal_Read+0x38>
   {
      return E_TERMINAL_NULL_PTR;
   }
   else if(RECEIVE_NOT_FINISHED == gu8_IsFinished)
 374:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 378:	81 11       	cpse	r24, r1
 37a:	08 c0       	rjmp	.+16     	; 0x38c <Terminal_Read+0x1e>
   {
      Data[STRING_COUNTER_START] = END_OF_STRING;
 37c:	1c 92       	st	X, r1
      return E_TERMINAL_SUCCESS;
 37e:	08 95       	ret
   
   uint8_t u8_counter = STRING_COUNTER_START;
   
   while(gu8_RxBuffer[u8_counter] != END_OF_STRING )
   {
      Data[u8_counter] = gu8_RxBuffer[u8_counter];
 380:	fd 01       	movw	r30, r26
 382:	e9 0f       	add	r30, r25
 384:	f1 1d       	adc	r31, r1
 386:	80 83       	st	Z, r24
      u8_counter++;
 388:	9f 5f       	subi	r25, 0xFF	; 255
 38a:	01 c0       	rjmp	.+2      	; 0x38e <Terminal_Read+0x20>
 38c:	90 e0       	ldi	r25, 0x00	; 0
      return E_TERMINAL_SUCCESS;
   }
   
   uint8_t u8_counter = STRING_COUNTER_START;
   
   while(gu8_RxBuffer[u8_counter] != END_OF_STRING )
 38e:	e9 2f       	mov	r30, r25
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	e8 55       	subi	r30, 0x58	; 88
 394:	ff 4f       	sbci	r31, 0xFF	; 255
 396:	80 81       	ld	r24, Z
 398:	81 11       	cpse	r24, r1
 39a:	f2 cf       	rjmp	.-28     	; 0x380 <Terminal_Read+0x12>
   {
      Data[u8_counter] = gu8_RxBuffer[u8_counter];
      u8_counter++;
   }
   
   gu8_Counter = STRING_COUNTER_START;
 39c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <gu8_Counter>
   gu8_IsFinished = RECEIVE_NOT_FINISHED;
 3a0:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
   
   /* return success message */
   return E_TERMINAL_SUCCESS;
 3a4:	08 95       	ret
*/
TERMINAL_ERROR_state_t Terminal_Read(uint8_t * Data)
{
   if(NULL_PTR == Data)
   {
      return E_TERMINAL_NULL_PTR;
 3a6:	83 e0       	ldi	r24, 0x03	; 3
   gu8_Counter = STRING_COUNTER_START;
   gu8_IsFinished = RECEIVE_NOT_FINISHED;
   
   /* return success message */
   return E_TERMINAL_SUCCESS;
}
 3a8:	08 95       	ret

000003aa <Terminal_Write>:
*
* @return function error state.
*/
TERMINAL_ERROR_state_t Terminal_Write(uint8_t Terminal_CH, uint8_t * Data)
{
   if(NULL_PTR == Data)
 3aa:	61 15       	cp	r22, r1
 3ac:	71 05       	cpc	r23, r1
 3ae:	41 f0       	breq	.+16     	; 0x3c0 <Terminal_Write+0x16>
   
   UART_ERROR_state_t e_state;
   
   uint8_t u8_UART_CH;
   
   switch(Terminal_CH)
 3b0:	81 11       	cpse	r24, r1
 3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <Terminal_Write+0x1a>
      default:
         return E_TERMINAL_INVALID_CH_NO;
   }
   
   /* transmit string */
   e_state = UART_TransmitString(u8_UART_CH, Data);
 3b4:	0e 94 af 02 	call	0x55e	; 0x55e <UART_TransmitString>
   if(E_UART_SUCCESS != e_state)
 3b8:	88 23       	and	r24, r24
 3ba:	31 f0       	breq	.+12     	; 0x3c8 <Terminal_Write+0x1e>
   {
      return E_TERMINAL_UART_ERROR;
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	08 95       	ret
*/
TERMINAL_ERROR_state_t Terminal_Write(uint8_t Terminal_CH, uint8_t * Data)
{
   if(NULL_PTR == Data)
   {
      return E_TERMINAL_NULL_PTR;
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	08 95       	ret
      case TERMINAL_CH_0:
         u8_UART_CH = TERMINAL_CH_0_UART_CH;
         break;
      #endif
      default:
         return E_TERMINAL_INVALID_CH_NO;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	08 95       	ret
   {
      return E_TERMINAL_UART_ERROR;
   }
   
   /* return success message */
   return E_TERMINAL_SUCCESS;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
}
 3ca:	08 95       	ret

000003cc <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <dummy_delay+0x6>
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <dummy_delay+0x8>
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
 3d8:	1a 82       	std	Y+2, r1	; 0x02
 3da:	19 82       	std	Y+1, r1	; 0x01
 3dc:	15 c0       	rjmp	.+42     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
   {
      for(volatile uint8_t j=0; j<32; j++)
 3de:	1c 82       	std	Y+4, r1	; 0x04
 3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <dummy_delay+0x2c>
      {
         for(volatile uint8_t k=0; k<2; k++)
 3e2:	1b 82       	std	Y+3, r1	; 0x03
 3e4:	03 c0       	rjmp	.+6      	; 0x3ec <dummy_delay+0x20>
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	8f 5f       	subi	r24, 0xFF	; 255
 3ea:	8b 83       	std	Y+3, r24	; 0x03
 3ec:	8b 81       	ldd	r24, Y+3	; 0x03
 3ee:	82 30       	cpi	r24, 0x02	; 2
 3f0:	d0 f3       	brcs	.-12     	; 0x3e6 <dummy_delay+0x1a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
 3f2:	8c 81       	ldd	r24, Y+4	; 0x04
 3f4:	8f 5f       	subi	r24, 0xFF	; 255
 3f6:	8c 83       	std	Y+4, r24	; 0x04
 3f8:	8c 81       	ldd	r24, Y+4	; 0x04
 3fa:	80 32       	cpi	r24, 0x20	; 32
 3fc:	90 f3       	brcs	.-28     	; 0x3e2 <dummy_delay+0x16>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	9a 81       	ldd	r25, Y+2	; 0x02
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	9a 83       	std	Y+2, r25	; 0x02
 406:	89 83       	std	Y+1, r24	; 0x01
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	9a 81       	ldd	r25, Y+2	; 0x02
 40c:	84 36       	cpi	r24, 0x64	; 100
 40e:	91 05       	cpc	r25, r1
 410:	30 f3       	brcs	.-52     	; 0x3de <dummy_delay+0x12>
         {
            
         }
      }
   }
}
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <StringCompare>:
* @param [in]  str2   -  pointer to the second string.
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
 420:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
 422:	40 e0       	ldi	r20, 0x00	; 0
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
 424:	0a c0       	rjmp	.+20     	; 0x43a <StringCompare+0x1a>
   {
      if(str1[u8_counter] != str2[u8_counter])
 426:	fb 01       	movw	r30, r22
 428:	e2 0f       	add	r30, r18
 42a:	f3 1f       	adc	r31, r19
 42c:	20 81       	ld	r18, Z
 42e:	92 17       	cp	r25, r18
 430:	19 f0       	breq	.+6      	; 0x438 <StringCompare+0x18>
      {
         u8_isEqual = FALSE;
         u8_counter++;
 432:	4f 5f       	subi	r20, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
 434:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
 436:	0e c0       	rjmp	.+28     	; 0x454 <StringCompare+0x34>
      }
      u8_counter++;
 438:	4f 5f       	subi	r20, 0xFF	; 255
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
 43a:	24 2f       	mov	r18, r20
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	fd 01       	movw	r30, r26
 440:	e2 0f       	add	r30, r18
 442:	f3 1f       	adc	r31, r19
 444:	90 81       	ld	r25, Z
 446:	99 23       	and	r25, r25
 448:	21 f0       	breq	.+8      	; 0x452 <StringCompare+0x32>
 44a:	9d 30       	cpi	r25, 0x0D	; 13
 44c:	61 f7       	brne	.-40     	; 0x426 <StringCompare+0x6>
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	01 c0       	rjmp	.+2      	; 0x454 <StringCompare+0x34>
 452:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
 454:	fb 01       	movw	r30, r22
 456:	e4 0f       	add	r30, r20
 458:	f1 1d       	adc	r31, r1
 45a:	90 81       	ld	r25, Z
 45c:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
 45e:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
 460:	08 95       	ret

00000462 <main>:

STR_cardData_t CardData;

int main(void)
{
   CARD_Init();
 462:	0e 94 49 00 	call	0x92	; 0x92 <CARD_Init>
   
   CARD_GetUserData(&CardData);
 466:	88 ea       	ldi	r24, 0xA8	; 168
 468:	92 e0       	ldi	r25, 0x02	; 2
 46a:	0e 94 52 00 	call	0xa4	; 0xa4 <CARD_GetUserData>
   
   if(CardData.au8_PIN[0] == 0xFF)
 46e:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <CardData+0x14>
 472:	8f 3f       	cpi	r24, 0xFF	; 255
 474:	11 f4       	brne	.+4      	; 0x47a <main+0x18>
   {
      CARD_SetUserData();
 476:	0e 94 86 00 	call	0x10c	; 0x10c <CARD_SetUserData>
   }

   /* Replace with your application code */
   while (1) 
   {
      Terminal_Read(TerminalData);
 47a:	89 ea       	ldi	r24, 0xA9	; 169
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 b7 01 	call	0x36e	; 0x36e <Terminal_Read>
      if(StringCompare(TerminalData, gu8_AdminCommand) == TRUE)
 482:	60 ea       	ldi	r22, 0xA0	; 160
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	89 ea       	ldi	r24, 0xA9	; 169
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 10 02 	call	0x420	; 0x420 <StringCompare>
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	a1 f7       	brne	.-24     	; 0x47a <main+0x18>
      {
         CARD_SetUserData();
 492:	0e 94 86 00 	call	0x10c	; 0x10c <CARD_SetUserData>
 496:	f1 cf       	rjmp	.-30     	; 0x47a <main+0x18>

00000498 <GLOBALINTTERUPTS_Enable>:
/**
* @brief: This function enables global interrupts.
*/
void GLOBALINTTERUPTS_Enable(void)
{
   GLOBAL_INTERRUPTS_CONTROL_R |= GLOBAL_INTERRUPT_BIT;
 498:	8f b7       	in	r24, 0x3f	; 63
 49a:	80 68       	ori	r24, 0x80	; 128
 49c:	8f bf       	out	0x3f, r24	; 63
 49e:	08 95       	ret

000004a0 <GLOBALINTTERUPTS_Disable>:
/**
* @brief: This function disables global interrupts.
*/
void GLOBALINTTERUPTS_Disable(void)
{
   GLOBAL_INTERRUPTS_CONTROL_R &= ~(GLOBAL_INTERRUPT_BIT);
 4a0:	8f b7       	in	r24, 0x3f	; 63
 4a2:	8f 77       	andi	r24, 0x7F	; 127
 4a4:	8f bf       	out	0x3f, r24	; 63
 4a6:	08 95       	ret

000004a8 <I2C_Init>:
   while (!(*ptr_I2CControlR & I2C_INTERRUPT_FLAG));
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
 4a8:	81 11       	cpse	r24, r1
 4aa:	08 c0       	rjmp	.+16     	; 0x4bc <I2C_Init+0x14>
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	81 b9       	out	0x01, r24	; 1
 4b0:	87 e0       	ldi	r24, 0x07	; 7
 4b2:	80 b9       	out	0x00, r24	; 0
 4b4:	84 e0       	ldi	r24, 0x04	; 4
 4b6:	86 bf       	out	0x36, r24	; 54
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	08 95       	ret
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	08 95       	ret

000004c0 <I2C_Start>:
 4c0:	81 11       	cpse	r24, r1
 4c2:	07 c0       	rjmp	.+14     	; 0x4d2 <I2C_Start+0x12>
 4c4:	84 ea       	ldi	r24, 0xA4	; 164
 4c6:	86 bf       	out	0x36, r24	; 54
 4c8:	06 b6       	in	r0, 0x36	; 54
 4ca:	07 fe       	sbrs	r0, 7
 4cc:	fd cf       	rjmp	.-6      	; 0x4c8 <I2C_Start+0x8>
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	08 95       	ret

000004d6 <I2C_RepeatedStart>:
 4d6:	81 11       	cpse	r24, r1
 4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <I2C_RepeatedStart+0x12>
 4da:	84 ea       	ldi	r24, 0xA4	; 164
 4dc:	86 bf       	out	0x36, r24	; 54
 4de:	06 b6       	in	r0, 0x36	; 54
 4e0:	07 fe       	sbrs	r0, 7
 4e2:	fd cf       	rjmp	.-6      	; 0x4de <I2C_RepeatedStart+0x8>
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	08 95       	ret
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	08 95       	ret

000004ec <I2C_Write>:
 4ec:	81 11       	cpse	r24, r1
 4ee:	09 c0       	rjmp	.+18     	; 0x502 <I2C_Write+0x16>
 4f0:	63 b9       	out	0x03, r22	; 3
 4f2:	86 b7       	in	r24, 0x36	; 54
 4f4:	84 68       	ori	r24, 0x84	; 132
 4f6:	86 bf       	out	0x36, r24	; 54
 4f8:	06 b6       	in	r0, 0x36	; 54
 4fa:	07 fe       	sbrs	r0, 7
 4fc:	fd cf       	rjmp	.-6      	; 0x4f8 <I2C_Write+0xc>
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	08 95       	ret

00000506 <I2C_ReadNoAck>:
*
* @return function error state.
*/
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
 506:	61 15       	cp	r22, r1
 508:	71 05       	cpc	r23, r1
 50a:	69 f0       	breq	.+26     	; 0x526 <I2C_ReadNoAck+0x20>
   }
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CDataR;
   
 50c:	81 11       	cpse	r24, r1
 50e:	0d c0       	rjmp	.+26     	; 0x52a <I2C_ReadNoAck+0x24>
      #endif
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* start receiving and don't send ack at end. */
 510:	86 b7       	in	r24, 0x36	; 54
 512:	84 68       	ori	r24, 0x84	; 132
 514:	86 bf       	out	0x36, r24	; 54
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_EN);
   /* loop until interrupt flag is raised */
 516:	06 b6       	in	r0, 0x36	; 54
 518:	07 fe       	sbrs	r0, 7
 51a:	fd cf       	rjmp	.-6      	; 0x516 <I2C_ReadNoAck+0x10>
   while (!(*ptr_I2CControlR & I2C_INTERRUPT_FLAG));
   /* return data received */
 51c:	83 b1       	in	r24, 0x03	; 3
 51e:	fb 01       	movw	r30, r22
 520:	80 83       	st	Z, r24
   *Data = *ptr_I2CDataR;
   
   /* return success message */
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	08 95       	ret
*/
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
   {
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CDataR = &I2C_DATA_R;
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
 52a:	82 e0       	ldi	r24, 0x02	; 2
   while (!(*ptr_I2CControlR & I2C_INTERRUPT_FLAG));
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
 52c:	08 95       	ret

0000052e <I2C_Stop>:
*/
I2C_ERROR_state_t I2C_Stop(uint8_t I2C_CH)
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
 52e:	81 11       	cpse	r24, r1
 530:	08 c0       	rjmp	.+16     	; 0x542 <I2C_Stop+0x14>
      #endif
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set stop condition */
 532:	84 e9       	ldi	r24, 0x94	; 148
 534:	86 bf       	out	0x36, r24	; 54
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
   
 536:	96 b7       	in	r25, 0x36	; 54
 538:	89 2f       	mov	r24, r25
 53a:	80 71       	andi	r24, 0x10	; 16
 53c:	94 fd       	sbrc	r25, 4
 53e:	fb cf       	rjmp	.-10     	; 0x536 <I2C_Stop+0x8>
 540:	08 95       	ret
      #ifdef I2C_CH_0
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
 542:	82 e0       	ldi	r24, 0x02	; 2
   /* set stop condition */
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
   
   while (*ptr_I2CControlR & I2C_STOP_BIT);
   /* return success message */
   return E_I2C_SUCCESS;
 544:	08 95       	ret

00000546 <UART_Init>:
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
   
   /* return success status */
   return E_UART_SUCCESS;
}
 546:	81 11       	cpse	r24, r1
 548:	08 c0       	rjmp	.+16     	; 0x55a <UART_Init+0x14>
 54a:	88 e1       	ldi	r24, 0x18	; 24
 54c:	8a b9       	out	0x0a, r24	; 10
 54e:	86 e8       	ldi	r24, 0x86	; 134
 550:	80 bd       	out	0x20, r24	; 32
 552:	83 e3       	ldi	r24, 0x33	; 51
 554:	89 b9       	out	0x09, r24	; 9
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	08 95       	ret
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	08 95       	ret

0000055e <UART_TransmitString>:
 55e:	61 15       	cp	r22, r1
 560:	71 05       	cpc	r23, r1
 562:	81 f0       	breq	.+32     	; 0x584 <UART_TransmitString+0x26>
 564:	81 11       	cpse	r24, r1
 566:	10 c0       	rjmp	.+32     	; 0x588 <UART_TransmitString+0x2a>
 568:	05 c0       	rjmp	.+10     	; 0x574 <UART_TransmitString+0x16>
 56a:	5d 9b       	sbis	0x0b, 5	; 11
 56c:	fe cf       	rjmp	.-4      	; 0x56a <UART_TransmitString+0xc>
 56e:	8c b9       	out	0x0c, r24	; 12
 570:	9f 5f       	subi	r25, 0xFF	; 255
 572:	01 c0       	rjmp	.+2      	; 0x576 <UART_TransmitString+0x18>
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	fb 01       	movw	r30, r22
 578:	e9 0f       	add	r30, r25
 57a:	f1 1d       	adc	r31, r1
 57c:	80 81       	ld	r24, Z
 57e:	81 11       	cpse	r24, r1
 580:	f4 cf       	rjmp	.-24     	; 0x56a <UART_TransmitString+0xc>
 582:	08 95       	ret
 584:	84 e0       	ldi	r24, 0x04	; 4
 586:	08 95       	ret
 588:	86 e0       	ldi	r24, 0x06	; 6
 58a:	08 95       	ret

0000058c <UART_ReceiveString>:
 58c:	61 15       	cp	r22, r1
 58e:	71 05       	cpc	r23, r1
 590:	09 f1       	breq	.+66     	; 0x5d4 <UART_ReceiveString+0x48>
 592:	81 11       	cpse	r24, r1
 594:	21 c0       	rjmp	.+66     	; 0x5d8 <UART_ReceiveString+0x4c>
 596:	03 c0       	rjmp	.+6      	; 0x59e <UART_ReceiveString+0x12>
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	98 2f       	mov	r25, r24
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <UART_ReceiveString+0x14>
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	5f 9b       	sbis	0x0b, 7	; 11
 5a2:	fe cf       	rjmp	.-4      	; 0x5a0 <UART_ReceiveString+0x14>
 5a4:	fb 01       	movw	r30, r22
 5a6:	e9 0f       	add	r30, r25
 5a8:	f1 1d       	adc	r31, r1
 5aa:	8c b1       	in	r24, 0x0c	; 12
 5ac:	80 83       	st	Z, r24
 5ae:	8d 30       	cpi	r24, 0x0D	; 13
 5b0:	19 f4       	brne	.+6      	; 0x5b8 <UART_ReceiveString+0x2c>
 5b2:	10 82       	st	Z, r1
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	89 0f       	add	r24, r25
 5bc:	fb 01       	movw	r30, r22
 5be:	e8 0f       	add	r30, r24
 5c0:	f1 1d       	adc	r31, r1
 5c2:	31 97       	sbiw	r30, 0x01	; 1
 5c4:	20 81       	ld	r18, Z
 5c6:	28 30       	cpi	r18, 0x08	; 8
 5c8:	41 f7       	brne	.-48     	; 0x59a <UART_ReceiveString+0xe>
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	29 f3       	breq	.-54     	; 0x598 <UART_ReceiveString+0xc>
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	89 0f       	add	r24, r25
 5d2:	e3 cf       	rjmp	.-58     	; 0x59a <UART_ReceiveString+0xe>
 5d4:	84 e0       	ldi	r24, 0x04	; 4
 5d6:	08 95       	ret
 5d8:	86 e0       	ldi	r24, 0x06	; 6
 5da:	08 95       	ret

000005dc <UART_EnableInterrupt>:
 5dc:	60 38       	cpi	r22, 0x80	; 128
 5de:	11 f0       	breq	.+4      	; 0x5e4 <UART_EnableInterrupt+0x8>
 5e0:	60 34       	cpi	r22, 0x40	; 64
 5e2:	39 f4       	brne	.+14     	; 0x5f2 <UART_EnableInterrupt+0x16>
 5e4:	81 11       	cpse	r24, r1
 5e6:	07 c0       	rjmp	.+14     	; 0x5f6 <UART_EnableInterrupt+0x1a>
 5e8:	8a b1       	in	r24, 0x0a	; 10
 5ea:	68 2b       	or	r22, r24
 5ec:	6a b9       	out	0x0a, r22	; 10
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	08 95       	ret
 5f2:	87 e0       	ldi	r24, 0x07	; 7
 5f4:	08 95       	ret
 5f6:	86 e0       	ldi	r24, 0x06	; 6
 5f8:	08 95       	ret

000005fa <UART_SetCallback>:
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	1f 92       	push	r1
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
 604:	41 15       	cp	r20, r1
 606:	51 05       	cpc	r21, r1
 608:	c1 f0       	breq	.+48     	; 0x63a <UART_SetCallback+0x40>
 60a:	60 38       	cpi	r22, 0x80	; 128
 60c:	11 f0       	breq	.+4      	; 0x612 <UART_SetCallback+0x18>
 60e:	60 34       	cpi	r22, 0x40	; 64
 610:	b1 f4       	brne	.+44     	; 0x63e <UART_SetCallback+0x44>
 612:	81 11       	cpse	r24, r1
 614:	16 c0       	rjmp	.+44     	; 0x642 <UART_SetCallback+0x48>
 616:	19 82       	std	Y+1, r1	; 0x01
 618:	60 34       	cpi	r22, 0x40	; 64
 61a:	19 f4       	brne	.+6      	; 0x622 <UART_SetCallback+0x28>
 61c:	89 81       	ldd	r24, Y+1	; 0x01
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	13 c0       	rjmp	.+38     	; 0x648 <UART_SetCallback+0x4e>
 622:	60 38       	cpi	r22, 0x80	; 128
 624:	81 f4       	brne	.+32     	; 0x646 <UART_SetCallback+0x4c>
 626:	e9 81       	ldd	r30, Y+1	; 0x01
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	ee 0f       	add	r30, r30
 62c:	ff 1f       	adc	r31, r31
 62e:	e9 55       	subi	r30, 0x59	; 89
 630:	fe 4f       	sbci	r31, 0xFE	; 254
 632:	51 83       	std	Z+1, r21	; 0x01
 634:	40 83       	st	Z, r20
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	07 c0       	rjmp	.+14     	; 0x648 <UART_SetCallback+0x4e>
 63a:	84 e0       	ldi	r24, 0x04	; 4
 63c:	05 c0       	rjmp	.+10     	; 0x648 <UART_SetCallback+0x4e>
 63e:	87 e0       	ldi	r24, 0x07	; 7
 640:	03 c0       	rjmp	.+6      	; 0x648 <UART_SetCallback+0x4e>
 642:	86 e0       	ldi	r24, 0x06	; 6
 644:	01 c0       	rjmp	.+2      	; 0x648 <UART_SetCallback+0x4e>
 646:	87 e0       	ldi	r24, 0x07	; 7
 648:	0f 90       	pop	r0
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	08 95       	ret

00000650 <__vector_13>:

void __vector_13(void)
{
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	2f 93       	push	r18
 65c:	3f 93       	push	r19
 65e:	4f 93       	push	r20
 660:	5f 93       	push	r21
 662:	6f 93       	push	r22
 664:	7f 93       	push	r23
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	af 93       	push	r26
 66c:	bf 93       	push	r27
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
   g_RxCallback[UART_CH_0]();
 672:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <g_RxCallback>
 676:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <g_RxCallback+0x1>
 67a:	09 95       	icall
 67c:	ff 91       	pop	r31
 67e:	ef 91       	pop	r30
 680:	bf 91       	pop	r27
 682:	af 91       	pop	r26
 684:	9f 91       	pop	r25
 686:	8f 91       	pop	r24
 688:	7f 91       	pop	r23
 68a:	6f 91       	pop	r22
 68c:	5f 91       	pop	r21
 68e:	4f 91       	pop	r20
 690:	3f 91       	pop	r19
 692:	2f 91       	pop	r18
 694:	0f 90       	pop	r0
 696:	0f be       	out	0x3f, r0	; 63
 698:	0f 90       	pop	r0
 69a:	1f 90       	pop	r1
 69c:	18 95       	reti

0000069e <_exit>:
 69e:	f8 94       	cli

000006a0 <__stop_program>:
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <__stop_program>
