
Card_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  00000a46  00000ada  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012b  0080015a  0080015a  00000bd4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002375  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c29  00000000  00000000  00003245  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013b7  00000000  00000000  00003e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000064c  00000000  00000000  00005228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab5  00000000  00000000  00005874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bb8  00000000  00000000  00006329  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  00007ee1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 09 04 	jmp	0x812	; 0x812 <__vector_12>
  34:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_13>
  38:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__vector_14>
  3c:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 35       	cpi	r26, 0x5A	; 90
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	aa e5       	ldi	r26, 0x5A	; 90
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 38       	cpi	r26, 0x85	; 133
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7d 02 	call	0x4fa	; 0x4fa <main>
  8a:	0c 94 21 05 	jmp	0xa42	; 0xa42 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CARD_Send>:
   GLOBALINTTERUPTS_Enable();
}

void CARD_Send(void)
{
   GLOBALINTTERUPTS_Disable();
  92:	0e 94 10 03 	call	0x620	; 0x620 <GLOBALINTTERUPTS_Disable>
   
   SPI_TransmitString(SPIChannel_1, gSTR_CardData.au8_PAN, SlaveID_1);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	60 e7       	ldi	r22, 0x70	; 112
  9a:	72 e0       	ldi	r23, 0x02	; 2
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_TransmitString>
   SPI_TransmitString(SPIChannel_1, gSTR_CardData.au8_PIN, SlaveID_1);
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	6a e7       	ldi	r22, 0x7A	; 122
  a6:	72 e0       	ldi	r23, 0x02	; 2
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 c5 03 	call	0x78a	; 0x78a <SPI_TransmitString>
   
   dummy_delay();
  ae:	0e 94 25 02 	call	0x44a	; 0x44a <dummy_delay>
   GLOBALINTTERUPTS_Enable();
  b2:	0e 94 0c 03 	call	0x618	; 0x618 <GLOBALINTTERUPTS_Enable>
  b6:	08 95       	ret

000000b8 <CARD_GetData>:
* @param [in]  EEPROM_CH   -  EEPROM channel number.
*
* @return function error state.
*/
void CARD_GetData(void)
{
  b8:	0f 93       	push	r16
   EEPROM_ReadBytes(EEPROM_CH_0, MEMORY_BLOCK_1, CARD_HOLDER_NAME_START_ADDRESS, gSTR_CardData.au8_CardHolderName, CARD_HOLDER_NAME_STRING_SIZE);
  ba:	09 e0       	ldi	r16, 0x09	; 9
  bc:	26 e6       	ldi	r18, 0x66	; 102
  be:	32 e0       	ldi	r19, 0x02	; 2
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	60 ea       	ldi	r22, 0xA0	; 160
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <EEPROM_ReadBytes>
   EEPROM_ReadBytes(EEPROM_CH_0, MEMORY_BLOCK_1, PAN_START_ADDRESS, gSTR_CardData.au8_PAN, PAN_STRING_SIZE);
  ca:	20 e7       	ldi	r18, 0x70	; 112
  cc:	32 e0       	ldi	r19, 0x02	; 2
  ce:	4a e0       	ldi	r20, 0x0A	; 10
  d0:	60 ea       	ldi	r22, 0xA0	; 160
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <EEPROM_ReadBytes>
   EEPROM_ReadBytes(EEPROM_CH_0, MEMORY_BLOCK_1, PIN_START_ADDRESS, gSTR_CardData.au8_PIN, PIN_STRING_SIZE);
  d8:	04 e0       	ldi	r16, 0x04	; 4
  da:	2a e7       	ldi	r18, 0x7A	; 122
  dc:	32 e0       	ldi	r19, 0x02	; 2
  de:	44 e1       	ldi	r20, 0x14	; 20
  e0:	60 ea       	ldi	r22, 0xA0	; 160
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <EEPROM_ReadBytes>
}
  e8:	0f 91       	pop	r16
  ea:	08 95       	ret

000000ec <CARD_SetData>:
* @param [in]  EEPROM_CH   -  EEPROM channel number.
*
* @return function error state.
*/
void CARD_SetData(void)
{
  ec:	0f 93       	push	r16
   GLOBALINTTERUPTS_Disable();
  ee:	0e 94 10 03 	call	0x620	; 0x620 <GLOBALINTTERUPTS_Disable>
   
   /* Set Card Holder Name */
   UART_TransmitString(UART_1, gu8_CardHolderNameMessage);
  f2:	60 e6       	ldi	r22, 0x60	; 96
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 45 04 	call	0x88a	; 0x88a <UART_TransmitString>
   
   UART_ReceiveString(UART_1, gu8_TerminalData);
  fc:	6c e5       	ldi	r22, 0x5C	; 92
  fe:	72 e0       	ldi	r23, 0x02	; 2
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_ReceiveString>
   
   while (StringLength(gu8_TerminalData) > CARD_HOLDER_NAME_STRING_SIZE || StringLength(gu8_TerminalData) == EMPTY_STRING)
 106:	0a c0       	rjmp	.+20     	; 0x11c <CARD_SetData+0x30>
   {
      UART_TransmitString(UART_1, gu8_InvalidCardHolderNameMessage);
 108:	6c e7       	ldi	r22, 0x7C	; 124
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 45 04 	call	0x88a	; 0x88a <UART_TransmitString>
      UART_ReceiveString(UART_1, gu8_TerminalData);
 112:	6c e5       	ldi	r22, 0x5C	; 92
 114:	72 e0       	ldi	r23, 0x02	; 2
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_ReceiveString>
   /* Set Card Holder Name */
   UART_TransmitString(UART_1, gu8_CardHolderNameMessage);
   
   UART_ReceiveString(UART_1, gu8_TerminalData);
   
   while (StringLength(gu8_TerminalData) > CARD_HOLDER_NAME_STRING_SIZE || StringLength(gu8_TerminalData) == EMPTY_STRING)
 11c:	8c e5       	ldi	r24, 0x5C	; 92
 11e:	92 e0       	ldi	r25, 0x02	; 2
 120:	0e 94 70 02 	call	0x4e0	; 0x4e0 <StringLength>
 124:	8a 30       	cpi	r24, 0x0A	; 10
 126:	80 f7       	brcc	.-32     	; 0x108 <CARD_SetData+0x1c>
 128:	8c e5       	ldi	r24, 0x5C	; 92
 12a:	92 e0       	ldi	r25, 0x02	; 2
 12c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <StringLength>
 130:	88 23       	and	r24, r24
 132:	51 f3       	breq	.-44     	; 0x108 <CARD_SetData+0x1c>
   {
      UART_TransmitString(UART_1, gu8_InvalidCardHolderNameMessage);
      UART_ReceiveString(UART_1, gu8_TerminalData);
   }
   
   EEPROM_WriteBytes(EEPROM_CH_0, MEMORY_BLOCK_1, CARD_HOLDER_NAME_START_ADDRESS, gu8_TerminalData, CARD_HOLDER_NAME_STRING_SIZE);
 134:	09 e0       	ldi	r16, 0x09	; 9
 136:	2c e5       	ldi	r18, 0x5C	; 92
 138:	32 e0       	ldi	r19, 0x02	; 2
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	60 ea       	ldi	r22, 0xA0	; 160
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <EEPROM_WriteBytes>
   
   /* Set PAN */
   UART_TransmitString(UART_1, gu8_PANMessage);
 144:	6d eb       	ldi	r22, 0xBD	; 189
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 45 04 	call	0x88a	; 0x88a <UART_TransmitString>
   
   UART_ReceiveString(UART_1, gu8_TerminalData);
 14e:	6c e5       	ldi	r22, 0x5C	; 92
 150:	72 e0       	ldi	r23, 0x02	; 2
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_ReceiveString>
   while (StringLength(gu8_TerminalData) != PAN_STRING_SIZE )
 158:	0a c0       	rjmp	.+20     	; 0x16e <CARD_SetData+0x82>
   {
      UART_TransmitString(UART_1, gu8_InvalidPANMessage);
 15a:	6c ec       	ldi	r22, 0xCC	; 204
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 45 04 	call	0x88a	; 0x88a <UART_TransmitString>
      UART_ReceiveString(UART_1, gu8_TerminalData);
 164:	6c e5       	ldi	r22, 0x5C	; 92
 166:	72 e0       	ldi	r23, 0x02	; 2
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_ReceiveString>
   
   /* Set PAN */
   UART_TransmitString(UART_1, gu8_PANMessage);
   
   UART_ReceiveString(UART_1, gu8_TerminalData);
   while (StringLength(gu8_TerminalData) != PAN_STRING_SIZE )
 16e:	8c e5       	ldi	r24, 0x5C	; 92
 170:	92 e0       	ldi	r25, 0x02	; 2
 172:	0e 94 70 02 	call	0x4e0	; 0x4e0 <StringLength>
 176:	89 30       	cpi	r24, 0x09	; 9
 178:	81 f7       	brne	.-32     	; 0x15a <CARD_SetData+0x6e>
   {
      UART_TransmitString(UART_1, gu8_InvalidPANMessage);
      UART_ReceiveString(UART_1, gu8_TerminalData);
   }
   
   EEPROM_WriteBytes(EEPROM_CH_0, MEMORY_BLOCK_1, PAN_START_ADDRESS, gu8_TerminalData, PAN_STRING_SIZE);
 17a:	09 e0       	ldi	r16, 0x09	; 9
 17c:	2c e5       	ldi	r18, 0x5C	; 92
 17e:	32 e0       	ldi	r19, 0x02	; 2
 180:	4a e0       	ldi	r20, 0x0A	; 10
 182:	60 ea       	ldi	r22, 0xA0	; 160
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <EEPROM_WriteBytes>
   
   /* Set PIN */
   UART_TransmitString(UART_1, gu8_PINMessage);
 18a:	65 ef       	ldi	r22, 0xF5	; 245
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 45 04 	call	0x88a	; 0x88a <UART_TransmitString>
   
   UART_ReceiveString(UART_1, gu8_TerminalData);
 194:	6c e5       	ldi	r22, 0x5C	; 92
 196:	72 e0       	ldi	r23, 0x02	; 2
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_ReceiveString>
   while (StringLength(gu8_TerminalData) != PIN_STRING_SIZE )
 19e:	0a c0       	rjmp	.+20     	; 0x1b4 <CARD_SetData+0xc8>
   {
      UART_TransmitString(UART_1, gu8_InvalidPINMessage);
 1a0:	64 e0       	ldi	r22, 0x04	; 4
 1a2:	71 e0       	ldi	r23, 0x01	; 1
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 45 04 	call	0x88a	; 0x88a <UART_TransmitString>
      UART_ReceiveString(UART_1, gu8_TerminalData);
 1aa:	6c e5       	ldi	r22, 0x5C	; 92
 1ac:	72 e0       	ldi	r23, 0x02	; 2
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_ReceiveString>
   
   /* Set PIN */
   UART_TransmitString(UART_1, gu8_PINMessage);
   
   UART_ReceiveString(UART_1, gu8_TerminalData);
   while (StringLength(gu8_TerminalData) != PIN_STRING_SIZE )
 1b4:	8c e5       	ldi	r24, 0x5C	; 92
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <StringLength>
 1bc:	84 30       	cpi	r24, 0x04	; 4
 1be:	81 f7       	brne	.-32     	; 0x1a0 <CARD_SetData+0xb4>
   {
      UART_TransmitString(UART_1, gu8_InvalidPINMessage);
      UART_ReceiveString(UART_1, gu8_TerminalData);
   }
   
   EEPROM_WriteBytes(EEPROM_CH_0, MEMORY_BLOCK_1, PIN_START_ADDRESS, gu8_TerminalData, PIN_STRING_SIZE);
 1c0:	04 e0       	ldi	r16, 0x04	; 4
 1c2:	2c e5       	ldi	r18, 0x5C	; 92
 1c4:	32 e0       	ldi	r19, 0x02	; 2
 1c6:	44 e1       	ldi	r20, 0x14	; 20
 1c8:	60 ea       	ldi	r22, 0xA0	; 160
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <EEPROM_WriteBytes>
   
   UART_TransmitString(UART_1, gu8_CardDataUpdatedMessage);
 1d0:	6d e2       	ldi	r22, 0x2D	; 45
 1d2:	71 e0       	ldi	r23, 0x01	; 1
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 45 04 	call	0x88a	; 0x88a <UART_TransmitString>
   
   CARD_GetData();
 1da:	0e 94 5c 00 	call	0xb8	; 0xb8 <CARD_GetData>
   
   GLOBALINTTERUPTS_Enable();
 1de:	0e 94 0c 03 	call	0x618	; 0x618 <GLOBALINTTERUPTS_Enable>
}
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <CARD_Init>:
*
* @return function error state.
*/
void CARD_Init()
{
   EEPROM_Init(EEPROM_CH_0);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 57 01 	call	0x2ae	; 0x2ae <EEPROM_Init>
   
   UART_Init(UART_1);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 32 04 	call	0x864	; 0x864 <UART_Init>
   UART_EnableInterrupt(UART_1, RECIVE_INT);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <UART_EnableInterrupt>
   UART_SetCallback(UART_1, RECIVE_INT, CARD_Receive);
 1fa:	49 e1       	ldi	r20, 0x19	; 25
 1fc:	51 e0       	ldi	r21, 0x01	; 1
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 8f 04 	call	0x91e	; 0x91e <UART_SetCallback>
   
   SPI_Init(SPIChannel_1);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 66 03 	call	0x6cc	; 0x6cc <SPI_Init>
   SPI_Set_TX_CompleteCallback(SPIChannel_1, CARD_Send);
 20c:	69 e4       	ldi	r22, 0x49	; 73
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 00 04 	call	0x800	; 0x800 <SPI_Set_TX_CompleteCallback>
   SPI_EnableInterrupt(SPIChannel_1);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <SPI_EnableInterrupt>
   
   GLOBALINTTERUPTS_Enable();
 21c:	0e 94 0c 03 	call	0x618	; 0x618 <GLOBALINTTERUPTS_Enable>
   
   CARD_GetData();
 220:	0e 94 5c 00 	call	0xb8	; 0xb8 <CARD_GetData>
   
   if(gSTR_CardData.au8_PIN[0] == 0xFF)
 224:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <gSTR_CardData+0x14>
 228:	8f 3f       	cpi	r24, 0xFF	; 255
 22a:	11 f4       	brne	.+4      	; 0x230 <CARD_Init+0x4a>
   {
      CARD_SetData();
 22c:	0e 94 76 00 	call	0xec	; 0xec <CARD_SetData>
 230:	08 95       	ret

00000232 <CARD_Receive>:
   GLOBALINTTERUPTS_Enable();
}

void CARD_Receive(void)
{
   UART_GetData(UART_1, &gu8_RxBuffer[gu8_Counter]);
 232:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <__data_end>
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	65 5a       	subi	r22, 0xA5	; 165
 23a:	7e 4f       	sbci	r23, 0xFE	; 254
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 a7 04 	call	0x94e	; 0x94e <UART_GetData>
      
   /* enters an end of string character and breaks from the loop on receiving
      a new line character */
   if(gu8_RxBuffer[gu8_Counter] == NEW_LINE)
 242:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__data_end>
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	e5 5a       	subi	r30, 0xA5	; 165
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	20 81       	ld	r18, Z
 250:	2d 30       	cpi	r18, 0x0D	; 13
 252:	71 f4       	brne	.+28     	; 0x270 <CARD_Receive+0x3e>
   {
      gu8_RxBuffer[gu8_Counter + STRING_NEXT_CHAR] = END_OF_STRING;
 254:	fc 01       	movw	r30, r24
 256:	e4 5a       	subi	r30, 0xA4	; 164
 258:	fe 4f       	sbci	r31, 0xFE	; 254
 25a:	10 82       	st	Z, r1
      if(StringCompare(gu8_RxBuffer, gu8_AdminCommand) == TRUE)
 25c:	64 e5       	ldi	r22, 0x54	; 84
 25e:	71 e0       	ldi	r23, 0x01	; 1
 260:	8b e5       	ldi	r24, 0x5B	; 91
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 4f 02 	call	0x49e	; 0x49e <StringCompare>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	11 f4       	brne	.+4      	; 0x270 <CARD_Receive+0x3e>
      {
         CARD_SetData();
 26c:	0e 94 76 00 	call	0xec	; 0xec <CARD_SetData>
      }
   }
   gu8_Counter++;
 270:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__data_end>
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
      
   /* return to the previous character to overwrite if the entered character 
      is backspace */
   if(gu8_RxBuffer[gu8_Counter - STRING_PREV_CHAR] == BACKSPACE)
 27a:	e8 2f       	mov	r30, r24
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	e6 5a       	subi	r30, 0xA6	; 166
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	90 81       	ld	r25, Z
 284:	98 30       	cpi	r25, 0x08	; 8
 286:	41 f4       	brne	.+16     	; 0x298 <CARD_Receive+0x66>
   {
      if (gu8_Counter - STRING_PREV_CHAR != STRING_COUNTER_START)
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	21 f0       	breq	.+8      	; 0x294 <CARD_Receive+0x62>
      {
         gu8_Counter -= STRING_RETURN_TO_PREV_CHAR;
 28c:	82 50       	subi	r24, 0x02	; 2
 28e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
 292:	02 c0       	rjmp	.+4      	; 0x298 <CARD_Receive+0x66>
      }
      /* return to the string start if the counter is still at first character */
      else
      {
         gu8_Counter = STRING_COUNTER_START;
 294:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end>
      }
   }
   
   if(gu8_RxBuffer[gu8_Counter - STRING_PREV_CHAR] == NEW_LINE)
 298:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <__data_end>
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	e6 5a       	subi	r30, 0xA6	; 166
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	80 81       	ld	r24, Z
 2a4:	8d 30       	cpi	r24, 0x0D	; 13
 2a6:	11 f4       	brne	.+4      	; 0x2ac <CARD_Receive+0x7a>
   {
      gu8_Counter = STRING_COUNTER_START;
 2a8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end>
 2ac:	08 95       	ret

000002ae <EEPROM_Init>:
{
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	39 f4       	brne	.+14     	; 0x2c0 <EEPROM_Init+0x12>
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* configure i2c pins */
   e_state = I2C_Init(u8_I2C_CH);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 14 03 	call	0x628	; 0x628 <I2C_Init>
   /* make sure pin configuration is successful */
   if(E_I2C_SUCCESS != e_state)
 2b8:	88 23       	and	r24, r24
 2ba:	21 f0       	breq	.+8      	; 0x2c4 <EEPROM_Init+0x16>
   {
      return E_EEPROM_I2C_ERROR;
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	08 95       	ret
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	08 95       	ret
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
}
 2c6:	08 95       	ret

000002c8 <EEPROM_Read>:
* @param [out] data        -  Pointer to where to store received data.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_Read(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t address, uint8_t * data)
{
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	39 f5       	brne	.+78     	; 0x322 <EEPROM_Read+0x5a>
 2d4:	89 01       	movw	r16, r18
 2d6:	d4 2f       	mov	r29, r20
 2d8:	c6 2f       	mov	r28, r22
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* Set start condition */
   e_state =I2C_Start(u8_I2C_CH);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 20 03 	call	0x640	; 0x640 <I2C_Start>
   if(E_I2C_SUCCESS != e_state)
 2e0:	81 11       	cpse	r24, r1
 2e2:	21 c0       	rjmp	.+66     	; 0x326 <EEPROM_Read+0x5e>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, memoryBlock);
 2e4:	6c 2f       	mov	r22, r28
 2e6:	0e 94 39 03 	call	0x672	; 0x672 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 2ea:	81 11       	cpse	r24, r1
 2ec:	1e c0       	rjmp	.+60     	; 0x32a <EEPROM_Read+0x62>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set address to read from */
   e_state = I2C_Write(u8_I2C_CH, address);
 2ee:	6d 2f       	mov	r22, r29
 2f0:	0e 94 39 03 	call	0x672	; 0x672 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 2f4:	81 11       	cpse	r24, r1
 2f6:	1b c0       	rjmp	.+54     	; 0x32e <EEPROM_Read+0x66>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* repeated start */
   e_state = I2C_RepeatedStart(u8_I2C_CH);
 2f8:	0e 94 2b 03 	call	0x656	; 0x656 <I2C_RepeatedStart>
   if(E_I2C_SUCCESS != e_state)
 2fc:	81 11       	cpse	r24, r1
 2fe:	19 c0       	rjmp	.+50     	; 0x332 <EEPROM_Read+0x6a>
   {
      return E_EEPROM_I2C_ERROR;
   }
   /* Set first memory block address + R */
   e_state= I2C_Write(u8_I2C_CH, memoryBlock | 1 );
 300:	6c 2f       	mov	r22, r28
 302:	61 60       	ori	r22, 0x01	; 1
 304:	0e 94 39 03 	call	0x672	; 0x672 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 308:	81 11       	cpse	r24, r1
 30a:	15 c0       	rjmp	.+42     	; 0x336 <EEPROM_Read+0x6e>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* receive data in the address */
   e_state = I2C_ReadNoAck(u8_I2C_CH, data);
 30c:	b8 01       	movw	r22, r16
 30e:	0e 94 46 03 	call	0x68c	; 0x68c <I2C_ReadNoAck>
   if(E_I2C_SUCCESS != e_state)
 312:	81 11       	cpse	r24, r1
 314:	12 c0       	rjmp	.+36     	; 0x33a <EEPROM_Read+0x72>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* release the bus */
   e_state = I2C_Stop(u8_I2C_CH);
 316:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_Stop>
   if(E_I2C_SUCCESS != e_state)
 31a:	88 23       	and	r24, r24
 31c:	81 f0       	breq	.+32     	; 0x33e <EEPROM_Read+0x76>
   {
      return E_EEPROM_I2C_ERROR;
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	0f c0       	rjmp	.+30     	; 0x340 <EEPROM_Read+0x78>
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0d c0       	rjmp	.+26     	; 0x340 <EEPROM_Read+0x78>
   
   /* Set start condition */
   e_state =I2C_Start(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	0b c0       	rjmp	.+22     	; 0x340 <EEPROM_Read+0x78>
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, memoryBlock);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	09 c0       	rjmp	.+18     	; 0x340 <EEPROM_Read+0x78>
   
   /* Set address to read from */
   e_state = I2C_Write(u8_I2C_CH, address);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	07 c0       	rjmp	.+14     	; 0x340 <EEPROM_Read+0x78>

   /* repeated start */
   e_state = I2C_RepeatedStart(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	05 c0       	rjmp	.+10     	; 0x340 <EEPROM_Read+0x78>
   }
   /* Set first memory block address + R */
   e_state= I2C_Write(u8_I2C_CH, memoryBlock | 1 );
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	03 c0       	rjmp	.+6      	; 0x340 <EEPROM_Read+0x78>
   
   /* receive data in the address */
   e_state = I2C_ReadNoAck(u8_I2C_CH, data);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	01 c0       	rjmp	.+2      	; 0x340 <EEPROM_Read+0x78>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 33e:	80 e0       	ldi	r24, 0x00	; 0
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <EEPROM_Write>:
* @param [in]  data        -  Data to write.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_Write(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t address, uint8_t data)
{
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	e9 f4       	brne	.+58     	; 0x38e <EEPROM_Write+0x44>
 354:	12 2f       	mov	r17, r18
 356:	d4 2f       	mov	r29, r20
 358:	c6 2f       	mov	r28, r22
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* Set start condition */
   e_state = I2C_Start(u8_I2C_CH);
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 20 03 	call	0x640	; 0x640 <I2C_Start>
   if(E_I2C_SUCCESS != e_state)
 360:	81 11       	cpse	r24, r1
 362:	17 c0       	rjmp	.+46     	; 0x392 <EEPROM_Write+0x48>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, memoryBlock);
 364:	6c 2f       	mov	r22, r28
 366:	0e 94 39 03 	call	0x672	; 0x672 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 36a:	81 11       	cpse	r24, r1
 36c:	14 c0       	rjmp	.+40     	; 0x396 <EEPROM_Write+0x4c>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* set address to write to */
   e_state = I2C_Write(u8_I2C_CH, address);
 36e:	6d 2f       	mov	r22, r29
 370:	0e 94 39 03 	call	0x672	; 0x672 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 374:	81 11       	cpse	r24, r1
 376:	11 c0       	rjmp	.+34     	; 0x39a <EEPROM_Write+0x50>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* writes data to the address */
   e_state = I2C_Write(u8_I2C_CH, data);
 378:	61 2f       	mov	r22, r17
 37a:	0e 94 39 03 	call	0x672	; 0x672 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 37e:	81 11       	cpse	r24, r1
 380:	0e c0       	rjmp	.+28     	; 0x39e <EEPROM_Write+0x54>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* release the bus */
   e_state = I2C_Stop(u8_I2C_CH);
 382:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <I2C_Stop>
   if(E_I2C_SUCCESS != e_state)
 386:	88 23       	and	r24, r24
 388:	61 f0       	breq	.+24     	; 0x3a2 <EEPROM_Write+0x58>
   {
      return E_EEPROM_I2C_ERROR;
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	0b c0       	rjmp	.+22     	; 0x3a4 <EEPROM_Write+0x5a>
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	09 c0       	rjmp	.+18     	; 0x3a4 <EEPROM_Write+0x5a>
   
   /* Set start condition */
   e_state = I2C_Start(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <EEPROM_Write+0x5a>
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, memoryBlock);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	05 c0       	rjmp	.+10     	; 0x3a4 <EEPROM_Write+0x5a>
   
   /* set address to write to */
   e_state = I2C_Write(u8_I2C_CH, address);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <EEPROM_Write+0x5a>
   
   /* writes data to the address */
   e_state = I2C_Write(u8_I2C_CH, data);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <EEPROM_Write+0x5a>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 3a2:	80 e0       	ldi	r24, 0x00	; 0
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	08 95       	ret

000003ac <EEPROM_ReadBytes>:
* @param [in]  bytes_num   -  number of bytes to read.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_ReadBytes(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
 3ac:	df 92       	push	r13
 3ae:	ef 92       	push	r14
 3b0:	ff 92       	push	r15
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	d8 2e       	mov	r13, r24
 3bc:	16 2f       	mov	r17, r22
 3be:	d4 2f       	mov	r29, r20
 3c0:	79 01       	movw	r14, r18
   I2C_ERROR_state_t e_state;
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
 3c2:	c0 e0       	ldi	r28, 0x00	; 0
 3c4:	0c c0       	rjmp	.+24     	; 0x3de <EEPROM_ReadBytes+0x32>
   {
      e_state = EEPROM_Read(EEPROM_CH, memoryBlock, (start_address + au8_BytesCounter), &data[au8_BytesCounter]);
 3c6:	97 01       	movw	r18, r14
 3c8:	2c 0f       	add	r18, r28
 3ca:	31 1d       	adc	r19, r1
 3cc:	4c 2f       	mov	r20, r28
 3ce:	4d 0f       	add	r20, r29
 3d0:	61 2f       	mov	r22, r17
 3d2:	8d 2d       	mov	r24, r13
 3d4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <EEPROM_Read>
      if(E_I2C_SUCCESS != e_state)
 3d8:	81 11       	cpse	r24, r1
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <EEPROM_ReadBytes+0x3a>
*/
EEPROM_ERROR_state_t EEPROM_ReadBytes(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
   I2C_ERROR_state_t e_state;
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
 3dc:	cf 5f       	subi	r28, 0xFF	; 255
 3de:	c0 17       	cp	r28, r16
 3e0:	90 f3       	brcs	.-28     	; 0x3c6 <EEPROM_ReadBytes+0x1a>
         return E_EEPROM_I2C_ERROR;
      }
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <EEPROM_ReadBytes+0x3c>
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
   {
      e_state = EEPROM_Read(EEPROM_CH, memoryBlock, (start_address + au8_BytesCounter), &data[au8_BytesCounter]);
      if(E_I2C_SUCCESS != e_state)
      {
         return E_EEPROM_I2C_ERROR;
 3e6:	82 e0       	ldi	r24, 0x02	; 2
      }
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	ff 90       	pop	r15
 3f2:	ef 90       	pop	r14
 3f4:	df 90       	pop	r13
 3f6:	08 95       	ret

000003f8 <EEPROM_WriteBytes>:
* @param [in]  bytes_num   -  number of bytes to write.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_WriteBytes(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
 3f8:	df 92       	push	r13
 3fa:	ef 92       	push	r14
 3fc:	ff 92       	push	r15
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	d8 2e       	mov	r13, r24
 408:	16 2f       	mov	r17, r22
 40a:	d4 2f       	mov	r29, r20
 40c:	79 01       	movw	r14, r18
   I2C_ERROR_state_t e_state;
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
 40e:	c0 e0       	ldi	r28, 0x00	; 0
 410:	0f c0       	rjmp	.+30     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
   {
      e_state = EEPROM_Write(EEPROM_CH, memoryBlock, (start_address + au8_BytesCounter), data[au8_BytesCounter]);
 412:	f7 01       	movw	r30, r14
 414:	ec 0f       	add	r30, r28
 416:	f1 1d       	adc	r31, r1
 418:	20 81       	ld	r18, Z
 41a:	4c 2f       	mov	r20, r28
 41c:	4d 0f       	add	r20, r29
 41e:	61 2f       	mov	r22, r17
 420:	8d 2d       	mov	r24, r13
 422:	0e 94 a5 01 	call	0x34a	; 0x34a <EEPROM_Write>
      if(E_I2C_SUCCESS != e_state)
 426:	81 11       	cpse	r24, r1
 428:	07 c0       	rjmp	.+14     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
      {
         return E_EEPROM_I2C_ERROR;
      }
      dummy_delay();
 42a:	0e 94 25 02 	call	0x44a	; 0x44a <dummy_delay>
*/
EEPROM_ERROR_state_t EEPROM_WriteBytes(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
   I2C_ERROR_state_t e_state;
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
 42e:	cf 5f       	subi	r28, 0xFF	; 255
 430:	c0 17       	cp	r28, r16
 432:	78 f3       	brcs	.-34     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
      }
      dummy_delay();
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	01 c0       	rjmp	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
   {
      e_state = EEPROM_Write(EEPROM_CH, memoryBlock, (start_address + au8_BytesCounter), data[au8_BytesCounter]);
      if(E_I2C_SUCCESS != e_state)
      {
         return E_EEPROM_I2C_ERROR;
 438:	82 e0       	ldi	r24, 0x02	; 2
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
   
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	ff 90       	pop	r15
 444:	ef 90       	pop	r14
 446:	df 90       	pop	r13
 448:	08 95       	ret

0000044a <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	00 d0       	rcall	.+0      	; 0x450 <dummy_delay+0x6>
 450:	00 d0       	rcall	.+0      	; 0x452 <dummy_delay+0x8>
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
 456:	1a 82       	std	Y+2, r1	; 0x02
 458:	19 82       	std	Y+1, r1	; 0x01
 45a:	15 c0       	rjmp	.+42     	; 0x486 <dummy_delay+0x3c>
   {
      for(volatile uint8_t j=0; j<32; j++)
 45c:	1c 82       	std	Y+4, r1	; 0x04
 45e:	0b c0       	rjmp	.+22     	; 0x476 <dummy_delay+0x2c>
      {
         for(volatile uint8_t k=0; k<2; k++)
 460:	1b 82       	std	Y+3, r1	; 0x03
 462:	03 c0       	rjmp	.+6      	; 0x46a <dummy_delay+0x20>
 464:	8b 81       	ldd	r24, Y+3	; 0x03
 466:	8f 5f       	subi	r24, 0xFF	; 255
 468:	8b 83       	std	Y+3, r24	; 0x03
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	82 30       	cpi	r24, 0x02	; 2
 46e:	d0 f3       	brcs	.-12     	; 0x464 <dummy_delay+0x1a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
 470:	8c 81       	ldd	r24, Y+4	; 0x04
 472:	8f 5f       	subi	r24, 0xFF	; 255
 474:	8c 83       	std	Y+4, r24	; 0x04
 476:	8c 81       	ldd	r24, Y+4	; 0x04
 478:	80 32       	cpi	r24, 0x20	; 32
 47a:	90 f3       	brcs	.-28     	; 0x460 <dummy_delay+0x16>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	9a 81       	ldd	r25, Y+2	; 0x02
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	9a 83       	std	Y+2, r25	; 0x02
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	9a 81       	ldd	r25, Y+2	; 0x02
 48a:	84 36       	cpi	r24, 0x64	; 100
 48c:	91 05       	cpc	r25, r1
 48e:	30 f3       	brcs	.-52     	; 0x45c <dummy_delay+0x12>
         {
            
         }
      }
   }
}
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <StringCompare>:
* @param [in]  str2   -  pointer to the second string.
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
 49e:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
 4a0:	40 e0       	ldi	r20, 0x00	; 0
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
 4a2:	0a c0       	rjmp	.+20     	; 0x4b8 <StringCompare+0x1a>
   {
      if(str1[u8_counter] != str2[u8_counter])
 4a4:	fb 01       	movw	r30, r22
 4a6:	e2 0f       	add	r30, r18
 4a8:	f3 1f       	adc	r31, r19
 4aa:	20 81       	ld	r18, Z
 4ac:	92 17       	cp	r25, r18
 4ae:	19 f0       	breq	.+6      	; 0x4b6 <StringCompare+0x18>
      {
         u8_isEqual = FALSE;
         u8_counter++;
 4b0:	4f 5f       	subi	r20, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
 4b2:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
 4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <StringCompare+0x34>
      }
      u8_counter++;
 4b6:	4f 5f       	subi	r20, 0xFF	; 255
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
 4b8:	24 2f       	mov	r18, r20
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	fd 01       	movw	r30, r26
 4be:	e2 0f       	add	r30, r18
 4c0:	f3 1f       	adc	r31, r19
 4c2:	90 81       	ld	r25, Z
 4c4:	99 23       	and	r25, r25
 4c6:	21 f0       	breq	.+8      	; 0x4d0 <StringCompare+0x32>
 4c8:	9d 30       	cpi	r25, 0x0D	; 13
 4ca:	61 f7       	brne	.-40     	; 0x4a4 <StringCompare+0x6>
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <StringCompare+0x34>
 4d0:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
 4d2:	fb 01       	movw	r30, r22
 4d4:	e4 0f       	add	r30, r20
 4d6:	f1 1d       	adc	r31, r1
 4d8:	90 81       	ld	r25, Z
 4da:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
 4dc:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
}
 4de:	08 95       	ret

000004e0 <StringLength>:
* @param [in]  string   -  pointer to the string.
*
* @return function error state.
*/
uint8_t StringLength(uint8_t * string)
{
 4e0:	9c 01       	movw	r18, r24
   uint8_t u8_counter = 0;
 4e2:	80 e0       	ldi	r24, 0x00	; 0
  
   while(string[u8_counter] != END_OF_STRING && string[u8_counter] != NEW_LINE)
 4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <StringLength+0x8>
   {
      u8_counter++;
 4e6:	8f 5f       	subi	r24, 0xFF	; 255
*/
uint8_t StringLength(uint8_t * string)
{
   uint8_t u8_counter = 0;
  
   while(string[u8_counter] != END_OF_STRING && string[u8_counter] != NEW_LINE)
 4e8:	f9 01       	movw	r30, r18
 4ea:	e8 0f       	add	r30, r24
 4ec:	f1 1d       	adc	r31, r1
 4ee:	90 81       	ld	r25, Z
 4f0:	99 23       	and	r25, r25
 4f2:	11 f0       	breq	.+4      	; 0x4f8 <StringLength+0x18>
 4f4:	9d 30       	cpi	r25, 0x0D	; 13
 4f6:	b9 f7       	brne	.-18     	; 0x4e6 <StringLength+0x6>
   {
      u8_counter++;
   }
   
   return u8_counter;
 4f8:	08 95       	ret

000004fa <main>:

#include "App/Card/Card.h"

int main(void)
{
   CARD_Init();
 4fa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <CARD_Init>
 4fe:	ff cf       	rjmp	.-2      	; 0x4fe <main+0x4>

00000500 <DIO_SetPinDirection>:
			BIT_TOGGLE(PORTD,PinNo);
			break;
		default:
			break;	
	}	
}
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	d1 f0       	breq	.+52     	; 0x538 <DIO_SetPinDirection+0x38>
 504:	28 f0       	brcs	.+10     	; 0x510 <DIO_SetPinDirection+0x10>
 506:	82 30       	cpi	r24, 0x02	; 2
 508:	59 f1       	breq	.+86     	; 0x560 <DIO_SetPinDirection+0x60>
 50a:	83 30       	cpi	r24, 0x03	; 3
 50c:	e9 f1       	breq	.+122    	; 0x588 <DIO_SetPinDirection+0x88>
 50e:	08 95       	ret
 510:	2a b3       	in	r18, 0x1a	; 26
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	06 2e       	mov	r0, r22
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_SetPinDirection+0x1e>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	0a 94       	dec	r0
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_SetPinDirection+0x1a>
 522:	50 e0       	ldi	r21, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_SetPinDirection+0x2a>
 526:	44 0f       	add	r20, r20
 528:	55 1f       	adc	r21, r21
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_SetPinDirection+0x26>
 52e:	80 95       	com	r24
 530:	82 23       	and	r24, r18
 532:	48 2b       	or	r20, r24
 534:	4a bb       	out	0x1a, r20	; 26
 536:	08 95       	ret
 538:	27 b3       	in	r18, 0x17	; 23
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	06 2e       	mov	r0, r22
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_SetPinDirection+0x46>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	0a 94       	dec	r0
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_SetPinDirection+0x42>
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_SetPinDirection+0x52>
 54e:	44 0f       	add	r20, r20
 550:	55 1f       	adc	r21, r21
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_SetPinDirection+0x4e>
 556:	80 95       	com	r24
 558:	82 23       	and	r24, r18
 55a:	48 2b       	or	r20, r24
 55c:	47 bb       	out	0x17, r20	; 23
 55e:	08 95       	ret
 560:	24 b3       	in	r18, 0x14	; 20
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	06 2e       	mov	r0, r22
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_SetPinDirection+0x6e>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	0a 94       	dec	r0
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_SetPinDirection+0x6a>
 572:	50 e0       	ldi	r21, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_SetPinDirection+0x7a>
 576:	44 0f       	add	r20, r20
 578:	55 1f       	adc	r21, r21
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_SetPinDirection+0x76>
 57e:	80 95       	com	r24
 580:	82 23       	and	r24, r18
 582:	48 2b       	or	r20, r24
 584:	44 bb       	out	0x14, r20	; 20
 586:	08 95       	ret
 588:	21 b3       	in	r18, 0x11	; 17
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	06 2e       	mov	r0, r22
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_SetPinDirection+0x96>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	0a 94       	dec	r0
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_SetPinDirection+0x92>
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_SetPinDirection+0xa2>
 59e:	44 0f       	add	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	6a 95       	dec	r22
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_SetPinDirection+0x9e>
 5a6:	80 95       	com	r24
 5a8:	82 23       	and	r24, r18
 5aa:	48 2b       	or	r20, r24
 5ac:	41 bb       	out	0x11, r20	; 17
 5ae:	08 95       	ret

000005b0 <DIO_ReadPin>:
uint8_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	switch(PortName)
 5b0:	81 30       	cpi	r24, 0x01	; 1
 5b2:	89 f0       	breq	.+34     	; 0x5d6 <DIO_ReadPin+0x26>
 5b4:	28 f0       	brcs	.+10     	; 0x5c0 <DIO_ReadPin+0x10>
 5b6:	82 30       	cpi	r24, 0x02	; 2
 5b8:	c9 f0       	breq	.+50     	; 0x5ec <DIO_ReadPin+0x3c>
 5ba:	83 30       	cpi	r24, 0x03	; 3
 5bc:	11 f1       	breq	.+68     	; 0x602 <DIO_ReadPin+0x52>
 5be:	08 95       	ret
	{
		case PORT_A:
			* PinData=BIT_GET(PINA,PinNo);
 5c0:	89 b3       	in	r24, 0x19	; 25
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_ReadPin+0x1a>
 5c6:	95 95       	asr	r25
 5c8:	87 95       	ror	r24
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_ReadPin+0x16>
 5ce:	81 70       	andi	r24, 0x01	; 1
 5d0:	fa 01       	movw	r30, r20
 5d2:	80 83       	st	Z, r24
			break;
 5d4:	08 95       	ret
		case PORT_B:
			* PinData=BIT_GET(PINB,PinNo);
 5d6:	86 b3       	in	r24, 0x16	; 22
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_ReadPin+0x30>
 5dc:	95 95       	asr	r25
 5de:	87 95       	ror	r24
 5e0:	6a 95       	dec	r22
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_ReadPin+0x2c>
 5e4:	81 70       	andi	r24, 0x01	; 1
 5e6:	fa 01       	movw	r30, r20
 5e8:	80 83       	st	Z, r24
			break;
 5ea:	08 95       	ret
		case PORT_C:
			* PinData=BIT_GET(PINC,PinNo);
 5ec:	83 b3       	in	r24, 0x13	; 19
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_ReadPin+0x46>
 5f2:	95 95       	asr	r25
 5f4:	87 95       	ror	r24
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_ReadPin+0x42>
 5fa:	81 70       	andi	r24, 0x01	; 1
 5fc:	fa 01       	movw	r30, r20
 5fe:	80 83       	st	Z, r24
			break;
 600:	08 95       	ret
		case PORT_D:
			* PinData=BIT_GET(PIND,PinNo);
 602:	80 b3       	in	r24, 0x10	; 16
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_ReadPin+0x5c>
 608:	95 95       	asr	r25
 60a:	87 95       	ror	r24
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_ReadPin+0x58>
 610:	81 70       	andi	r24, 0x01	; 1
 612:	fa 01       	movw	r30, r20
 614:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
 616:	08 95       	ret

00000618 <GLOBALINTTERUPTS_Enable>:
/**
* @brief: This function enables global interrupts.
*/
void GLOBALINTTERUPTS_Enable(void)
{
   GLOBAL_INTERRUPTS_CONTROL_R |= GLOBAL_INTERRUPT_BIT;
 618:	8f b7       	in	r24, 0x3f	; 63
 61a:	80 68       	ori	r24, 0x80	; 128
 61c:	8f bf       	out	0x3f, r24	; 63
 61e:	08 95       	ret

00000620 <GLOBALINTTERUPTS_Disable>:
/**
* @brief: This function disables global interrupts.
*/
void GLOBALINTTERUPTS_Disable(void)
{
   GLOBAL_INTERRUPTS_CONTROL_R &= ~(GLOBAL_INTERRUPT_BIT);
 620:	8f b7       	in	r24, 0x3f	; 63
 622:	8f 77       	andi	r24, 0x7F	; 127
 624:	8f bf       	out	0x3f, r24	; 63
 626:	08 95       	ret

00000628 <I2C_Init>:
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
 628:	81 11       	cpse	r24, r1
 62a:	08 c0       	rjmp	.+16     	; 0x63c <I2C_Init+0x14>
 62c:	83 e0       	ldi	r24, 0x03	; 3
 62e:	81 b9       	out	0x01, r24	; 1
 630:	87 e0       	ldi	r24, 0x07	; 7
 632:	80 b9       	out	0x00, r24	; 0
 634:	84 e0       	ldi	r24, 0x04	; 4
 636:	86 bf       	out	0x36, r24	; 54
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	08 95       	ret
 63c:	82 e0       	ldi	r24, 0x02	; 2
 63e:	08 95       	ret

00000640 <I2C_Start>:
 640:	81 11       	cpse	r24, r1
 642:	07 c0       	rjmp	.+14     	; 0x652 <I2C_Start+0x12>
 644:	84 ea       	ldi	r24, 0xA4	; 164
 646:	86 bf       	out	0x36, r24	; 54
 648:	06 b6       	in	r0, 0x36	; 54
 64a:	07 fe       	sbrs	r0, 7
 64c:	fd cf       	rjmp	.-6      	; 0x648 <I2C_Start+0x8>
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	08 95       	ret
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	08 95       	ret

00000656 <I2C_RepeatedStart>:
 656:	81 11       	cpse	r24, r1
 658:	0a c0       	rjmp	.+20     	; 0x66e <I2C_RepeatedStart+0x18>
 65a:	84 e0       	ldi	r24, 0x04	; 4
 65c:	86 bf       	out	0x36, r24	; 54
 65e:	86 b7       	in	r24, 0x36	; 54
 660:	80 6a       	ori	r24, 0xA0	; 160
 662:	86 bf       	out	0x36, r24	; 54
 664:	06 b6       	in	r0, 0x36	; 54
 666:	07 fe       	sbrs	r0, 7
 668:	fd cf       	rjmp	.-6      	; 0x664 <I2C_RepeatedStart+0xe>
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	08 95       	ret
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	08 95       	ret

00000672 <I2C_Write>:
 672:	81 11       	cpse	r24, r1
 674:	09 c0       	rjmp	.+18     	; 0x688 <I2C_Write+0x16>
 676:	63 b9       	out	0x03, r22	; 3
 678:	86 b7       	in	r24, 0x36	; 54
 67a:	84 68       	ori	r24, 0x84	; 132
 67c:	86 bf       	out	0x36, r24	; 54
 67e:	06 b6       	in	r0, 0x36	; 54
 680:	07 fe       	sbrs	r0, 7
 682:	fd cf       	rjmp	.-6      	; 0x67e <I2C_Write+0xc>
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	08 95       	ret
 688:	82 e0       	ldi	r24, 0x02	; 2
 68a:	08 95       	ret

0000068c <I2C_ReadNoAck>:
* @return function error state.
*/
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
 68c:	61 15       	cp	r22, r1
 68e:	71 05       	cpc	r23, r1
 690:	69 f0       	breq	.+26     	; 0x6ac <I2C_ReadNoAck+0x20>
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CDataR;
   
   switch(I2C_CH)
 692:	81 11       	cpse	r24, r1
 694:	0d c0       	rjmp	.+26     	; 0x6b0 <I2C_ReadNoAck+0x24>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* start receiving and don't send ack at end. */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_EN);
 696:	86 b7       	in	r24, 0x36	; 54
 698:	84 68       	ori	r24, 0x84	; 132
 69a:	86 bf       	out	0x36, r24	; 54
   /* loop until interrupt flag is raised */
   while (!(*ptr_I2CControlR & I2C_INTERRUPT_FLAG));
 69c:	06 b6       	in	r0, 0x36	; 54
 69e:	07 fe       	sbrs	r0, 7
 6a0:	fd cf       	rjmp	.-6      	; 0x69c <I2C_ReadNoAck+0x10>
   /* return data received */
   *Data = *ptr_I2CDataR;
 6a2:	83 b1       	in	r24, 0x03	; 3
 6a4:	fb 01       	movw	r30, r22
 6a6:	80 83       	st	Z, r24
   
   /* return success message */
   return E_I2C_SUCCESS;
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	08 95       	ret
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
   {
      return E_I2C_NULL_PTR;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	08 95       	ret
         ptr_I2CDataR = &I2C_DATA_R;
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
 6b0:	82 e0       	ldi	r24, 0x02	; 2
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
 6b2:	08 95       	ret

000006b4 <I2C_Stop>:
I2C_ERROR_state_t I2C_Stop(uint8_t I2C_CH)
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   switch(I2C_CH)
 6b4:	81 11       	cpse	r24, r1
 6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <I2C_Stop+0x14>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set stop condition */
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
 6b8:	84 e9       	ldi	r24, 0x94	; 148
 6ba:	86 bf       	out	0x36, r24	; 54
   
   while (*ptr_I2CControlR & I2C_STOP_BIT);
 6bc:	96 b7       	in	r25, 0x36	; 54
 6be:	89 2f       	mov	r24, r25
 6c0:	80 71       	andi	r24, 0x10	; 16
 6c2:	94 fd       	sbrc	r25, 4
 6c4:	fb cf       	rjmp	.-10     	; 0x6bc <I2C_Stop+0x8>
 6c6:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
 6c8:	82 e0       	ldi	r24, 0x02	; 2
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
   
   while (*ptr_I2CControlR & I2C_STOP_BIT);
   /* return success message */
   return E_I2C_SUCCESS;
}
 6ca:	08 95       	ret

000006cc <SPI_Init>:
{
	uint8_t ErrRetVal = OperationStarted;
	CLEAR_BIT(SPI_ControlReg, InterruptEnable_BIT);
	ErrRetVal = OperationSuccess;
	return ErrRetVal;
}
 6cc:	82 30       	cpi	r24, 0x02	; 2
 6ce:	d8 f4       	brcc	.+54     	; 0x706 <SPI_Init+0x3a>
 6d0:	1d b8       	out	0x0d, r1	; 13
 6d2:	8d b1       	in	r24, 0x0d	; 13
 6d4:	8f 7e       	andi	r24, 0xEF	; 239
 6d6:	8d b9       	out	0x0d, r24	; 13
 6d8:	41 e0       	ldi	r20, 0x01	; 1
 6da:	66 e0       	ldi	r22, 0x06	; 6
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	0e 94 80 02 	call	0x500	; 0x500 <DIO_SetPinDirection>
 6e2:	8d b1       	in	r24, 0x0d	; 13
 6e4:	84 60       	ori	r24, 0x04	; 4
 6e6:	8d b9       	out	0x0d, r24	; 13
 6e8:	8d b1       	in	r24, 0x0d	; 13
 6ea:	87 7f       	andi	r24, 0xF7	; 247
 6ec:	8d b9       	out	0x0d, r24	; 13
 6ee:	8d b1       	in	r24, 0x0d	; 13
 6f0:	8f 7d       	andi	r24, 0xDF	; 223
 6f2:	8d b9       	out	0x0d, r24	; 13
 6f4:	8e b1       	in	r24, 0x0e	; 14
 6f6:	8e b1       	in	r24, 0x0e	; 14
 6f8:	8f b1       	in	r24, 0x0f	; 15
 6fa:	1f b8       	out	0x0f, r1	; 15
 6fc:	8d b1       	in	r24, 0x0d	; 13
 6fe:	80 64       	ori	r24, 0x40	; 64
 700:	8d b9       	out	0x0d, r24	; 13
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	08 95       	ret
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	08 95       	ret

0000070a <SPI_TransmitChar>:
 70a:	1f 93       	push	r17
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	1f 92       	push	r1
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62
 716:	16 2f       	mov	r17, r22
 718:	19 82       	std	Y+1, r1	; 0x01
 71a:	ae 01       	movw	r20, r28
 71c:	4f 5f       	subi	r20, 0xFF	; 255
 71e:	5f 4f       	sbci	r21, 0xFF	; 255
 720:	64 e0       	ldi	r22, 0x04	; 4
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <DIO_ReadPin>
 728:	89 81       	ldd	r24, Y+1	; 0x01
 72a:	88 23       	and	r24, r24
 72c:	31 f0       	breq	.+12     	; 0x73a <SPI_TransmitChar+0x30>
 72e:	1f b9       	out	0x0f, r17	; 15
 730:	76 9b       	sbis	0x0e, 6	; 14
 732:	05 c0       	rjmp	.+10     	; 0x73e <SPI_TransmitChar+0x34>
 734:	8f b1       	in	r24, 0x0f	; 15
 736:	84 e0       	ldi	r24, 0x04	; 4
 738:	03 c0       	rjmp	.+6      	; 0x740 <SPI_TransmitChar+0x36>
 73a:	85 e0       	ldi	r24, 0x05	; 5
 73c:	01 c0       	rjmp	.+2      	; 0x740 <SPI_TransmitChar+0x36>
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	0f 90       	pop	r0
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	08 95       	ret

0000074a <SPI_ReceiveChar>:
 74a:	77 9b       	sbis	0x0e, 7	; 14
 74c:	05 c0       	rjmp	.+10     	; 0x758 <SPI_ReceiveChar+0xe>
 74e:	8f b1       	in	r24, 0x0f	; 15
 750:	fb 01       	movw	r30, r22
 752:	80 83       	st	Z, r24
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	08 95       	ret
 758:	85 e0       	ldi	r24, 0x05	; 5
 75a:	08 95       	ret

0000075c <SPI_DataExchange>:
 75c:	1f 93       	push	r17
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	16 2f       	mov	r17, r22
 764:	ea 01       	movw	r28, r20
 766:	41 e0       	ldi	r20, 0x01	; 1
 768:	61 2f       	mov	r22, r17
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	0e 94 85 03 	call	0x70a	; 0x70a <SPI_TransmitChar>
 770:	81 11       	cpse	r24, r1
 772:	f9 cf       	rjmp	.-14     	; 0x766 <SPI_DataExchange+0xa>
 774:	41 e0       	ldi	r20, 0x01	; 1
 776:	be 01       	movw	r22, r28
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_ReceiveChar>
 77e:	81 11       	cpse	r24, r1
 780:	f9 cf       	rjmp	.-14     	; 0x774 <SPI_DataExchange+0x18>
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	1f 91       	pop	r17
 788:	08 95       	ret

0000078a <SPI_TransmitString>:
 78a:	ef 92       	push	r14
 78c:	ff 92       	push	r15
 78e:	0f 93       	push	r16
 790:	1f 93       	push	r17
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	1f 92       	push	r1
 798:	cd b7       	in	r28, 0x3d	; 61
 79a:	de b7       	in	r29, 0x3e	; 62
 79c:	e8 2e       	mov	r14, r24
 79e:	8b 01       	movw	r16, r22
 7a0:	f4 2e       	mov	r15, r20
 7a2:	19 82       	std	Y+1, r1	; 0x01
 7a4:	f8 01       	movw	r30, r16
 7a6:	80 81       	ld	r24, Z
 7a8:	81 11       	cpse	r24, r1
 7aa:	0b c0       	rjmp	.+22     	; 0x7c2 <SPI_TransmitString+0x38>
 7ac:	2f 2d       	mov	r18, r15
 7ae:	ae 01       	movw	r20, r28
 7b0:	4f 5f       	subi	r20, 0xFF	; 255
 7b2:	5f 4f       	sbci	r21, 0xFF	; 255
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	8e 2d       	mov	r24, r14
 7b8:	0e 94 ae 03 	call	0x75c	; 0x75c <SPI_DataExchange>
 7bc:	81 11       	cpse	r24, r1
 7be:	f6 cf       	rjmp	.-20     	; 0x7ac <SPI_TransmitString+0x22>
 7c0:	0e c0       	rjmp	.+28     	; 0x7de <SPI_TransmitString+0x54>
 7c2:	2f 2d       	mov	r18, r15
 7c4:	ae 01       	movw	r20, r28
 7c6:	4f 5f       	subi	r20, 0xFF	; 255
 7c8:	5f 4f       	sbci	r21, 0xFF	; 255
 7ca:	f8 01       	movw	r30, r16
 7cc:	60 81       	ld	r22, Z
 7ce:	8e 2d       	mov	r24, r14
 7d0:	0e 94 ae 03 	call	0x75c	; 0x75c <SPI_DataExchange>
 7d4:	81 11       	cpse	r24, r1
 7d6:	f5 cf       	rjmp	.-22     	; 0x7c2 <SPI_TransmitString+0x38>
 7d8:	0f 5f       	subi	r16, 0xFF	; 255
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	e3 cf       	rjmp	.-58     	; 0x7a4 <SPI_TransmitString+0x1a>
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	0f 90       	pop	r0
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	1f 91       	pop	r17
 7e8:	0f 91       	pop	r16
 7ea:	ff 90       	pop	r15
 7ec:	ef 90       	pop	r14
 7ee:	08 95       	ret

000007f0 <SPI_EnableInterrupt>:
 7f0:	8f b7       	in	r24, 0x3f	; 63
 7f2:	80 68       	ori	r24, 0x80	; 128
 7f4:	8f bf       	out	0x3f, r24	; 63
 7f6:	8d b1       	in	r24, 0x0d	; 13
 7f8:	80 68       	ori	r24, 0x80	; 128
 7fa:	8d b9       	out	0x0d, r24	; 13
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	08 95       	ret

00000800 <SPI_Set_TX_CompleteCallback>:

uint8_t SPI_Set_TX_CompleteCallback(uint8_t SpiNumber,void(*callBack)(void))
{
	uint8_t ErrRetVal = 0;
		if (callBack != NULL_PTR)
 800:	61 15       	cp	r22, r1
 802:	71 05       	cpc	r23, r1
 804:	21 f0       	breq	.+8      	; 0x80e <SPI_Set_TX_CompleteCallback+0xe>
			SPI_TX_Complete_callback = callBack;
 806:	70 93 5b 02 	sts	0x025B, r23	; 0x80025b <SPI_TX_Complete_callback+0x1>
 80a:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <SPI_TX_Complete_callback>
		return ErrRetVal;
}
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	08 95       	ret

00000812 <__vector_12>:

void __vector_12(void)
{
 812:	1f 92       	push	r1
 814:	0f 92       	push	r0
 816:	0f b6       	in	r0, 0x3f	; 63
 818:	0f 92       	push	r0
 81a:	11 24       	eor	r1, r1
 81c:	2f 93       	push	r18
 81e:	3f 93       	push	r19
 820:	4f 93       	push	r20
 822:	5f 93       	push	r21
 824:	6f 93       	push	r22
 826:	7f 93       	push	r23
 828:	8f 93       	push	r24
 82a:	9f 93       	push	r25
 82c:	af 93       	push	r26
 82e:	bf 93       	push	r27
 830:	ef 93       	push	r30
 832:	ff 93       	push	r31
	if (SPI_TX_Complete_callback != NULL_PTR)
 834:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <SPI_TX_Complete_callback>
 838:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <SPI_TX_Complete_callback+0x1>
 83c:	30 97       	sbiw	r30, 0x00	; 0
 83e:	09 f0       	breq	.+2      	; 0x842 <__vector_12+0x30>
		SPI_TX_Complete_callback();
 840:	09 95       	icall
}
 842:	ff 91       	pop	r31
 844:	ef 91       	pop	r30
 846:	bf 91       	pop	r27
 848:	af 91       	pop	r26
 84a:	9f 91       	pop	r25
 84c:	8f 91       	pop	r24
 84e:	7f 91       	pop	r23
 850:	6f 91       	pop	r22
 852:	5f 91       	pop	r21
 854:	4f 91       	pop	r20
 856:	3f 91       	pop	r19
 858:	2f 91       	pop	r18
 85a:	0f 90       	pop	r0
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	0f 90       	pop	r0
 860:	1f 90       	pop	r1
 862:	18 95       	reti

00000864 <UART_Init>:
		break;
	default:
		break;
	}
	return 0;
}
 864:	8a b1       	in	r24, 0x0a	; 10
 866:	80 61       	ori	r24, 0x10	; 16
 868:	8a b9       	out	0x0a, r24	; 10
 86a:	8a b1       	in	r24, 0x0a	; 10
 86c:	88 60       	ori	r24, 0x08	; 8
 86e:	8a b9       	out	0x0a, r24	; 10
 870:	8b b1       	in	r24, 0x0b	; 11
 872:	8d 7f       	andi	r24, 0xFD	; 253
 874:	8b b9       	out	0x0b, r24	; 11
 876:	8a b1       	in	r24, 0x0a	; 10
 878:	8b 7f       	andi	r24, 0xFB	; 251
 87a:	8a b9       	out	0x0a, r24	; 10
 87c:	80 b5       	in	r24, 0x20	; 32
 87e:	86 68       	ori	r24, 0x86	; 134
 880:	80 bd       	out	0x20, r24	; 32
 882:	83 e3       	ldi	r24, 0x33	; 51
 884:	89 b9       	out	0x09, r24	; 9
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	08 95       	ret

0000088a <UART_TransmitString>:
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	04 c0       	rjmp	.+8      	; 0x896 <UART_TransmitString+0xc>
 88e:	9c b9       	out	0x0c, r25	; 12
 890:	5d 9b       	sbis	0x0b, 5	; 11
 892:	fe cf       	rjmp	.-4      	; 0x890 <UART_TransmitString+0x6>
 894:	8f 5f       	subi	r24, 0xFF	; 255
 896:	fb 01       	movw	r30, r22
 898:	e8 0f       	add	r30, r24
 89a:	f1 1d       	adc	r31, r1
 89c:	90 81       	ld	r25, Z
 89e:	91 11       	cpse	r25, r1
 8a0:	f6 cf       	rjmp	.-20     	; 0x88e <UART_TransmitString+0x4>
 8a2:	8d e0       	ldi	r24, 0x0D	; 13
 8a4:	8c b9       	out	0x0c, r24	; 12
 8a6:	5d 9b       	sbis	0x0b, 5	; 11
 8a8:	fe cf       	rjmp	.-4      	; 0x8a6 <UART_TransmitString+0x1c>
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	08 95       	ret

000008ae <UART_ReceiveString>:
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <UART_ReceiveString+0x8>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	98 2f       	mov	r25, r24
 8b6:	5f 9b       	sbis	0x0b, 7	; 11
 8b8:	fe cf       	rjmp	.-4      	; 0x8b6 <UART_ReceiveString+0x8>
 8ba:	fb 01       	movw	r30, r22
 8bc:	e9 0f       	add	r30, r25
 8be:	f1 1d       	adc	r31, r1
 8c0:	8c b1       	in	r24, 0x0c	; 12
 8c2:	80 83       	st	Z, r24
 8c4:	8d 30       	cpi	r24, 0x0D	; 13
 8c6:	99 f0       	breq	.+38     	; 0x8ee <UART_ReceiveString+0x40>
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	89 0f       	add	r24, r25
 8cc:	fb 01       	movw	r30, r22
 8ce:	e8 0f       	add	r30, r24
 8d0:	f1 1d       	adc	r31, r1
 8d2:	31 97       	sbiw	r30, 0x01	; 1
 8d4:	20 81       	ld	r18, Z
 8d6:	28 30       	cpi	r18, 0x08	; 8
 8d8:	29 f4       	brne	.+10     	; 0x8e4 <UART_ReceiveString+0x36>
 8da:	82 30       	cpi	r24, 0x02	; 2
 8dc:	18 f0       	brcs	.+6      	; 0x8e4 <UART_ReceiveString+0x36>
 8de:	8f ef       	ldi	r24, 0xFF	; 255
 8e0:	89 0f       	add	r24, r25
 8e2:	e8 cf       	rjmp	.-48     	; 0x8b4 <UART_ReceiveString+0x6>
 8e4:	28 30       	cpi	r18, 0x08	; 8
 8e6:	31 f7       	brne	.-52     	; 0x8b4 <UART_ReceiveString+0x6>
 8e8:	82 30       	cpi	r24, 0x02	; 2
 8ea:	20 f7       	brcc	.-56     	; 0x8b4 <UART_ReceiveString+0x6>
 8ec:	e2 cf       	rjmp	.-60     	; 0x8b2 <UART_ReceiveString+0x4>
 8ee:	10 82       	st	Z, r1
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	08 95       	ret

000008f4 <UART_EnableInterrupt>:
 8f4:	81 11       	cpse	r24, r1
 8f6:	11 c0       	rjmp	.+34     	; 0x91a <UART_EnableInterrupt+0x26>
 8f8:	61 30       	cpi	r22, 0x01	; 1
 8fa:	41 f0       	breq	.+16     	; 0x90c <UART_EnableInterrupt+0x18>
 8fc:	18 f0       	brcs	.+6      	; 0x904 <UART_EnableInterrupt+0x10>
 8fe:	62 30       	cpi	r22, 0x02	; 2
 900:	49 f0       	breq	.+18     	; 0x914 <UART_EnableInterrupt+0x20>
 902:	0b c0       	rjmp	.+22     	; 0x91a <UART_EnableInterrupt+0x26>
 904:	8a b1       	in	r24, 0x0a	; 10
 906:	80 68       	ori	r24, 0x80	; 128
 908:	8a b9       	out	0x0a, r24	; 10
 90a:	07 c0       	rjmp	.+14     	; 0x91a <UART_EnableInterrupt+0x26>
 90c:	8a b1       	in	r24, 0x0a	; 10
 90e:	80 64       	ori	r24, 0x40	; 64
 910:	8a b9       	out	0x0a, r24	; 10
 912:	03 c0       	rjmp	.+6      	; 0x91a <UART_EnableInterrupt+0x26>
 914:	8a b1       	in	r24, 0x0a	; 10
 916:	80 62       	ori	r24, 0x20	; 32
 918:	8a b9       	out	0x0a, r24	; 10
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	08 95       	ret

0000091e <UART_SetCallback>:
uint8_t UART_SetCallback(uint8_t UartNumber,uint8_t UartInterruptType,Ptr_VoidFuncVoid_t Callback){
	switch (UartNumber) {
 91e:	81 11       	cpse	r24, r1
 920:	14 c0       	rjmp	.+40     	; 0x94a <UART_SetCallback+0x2c>
	case UART_1 :
		switch (UartInterruptType) {
 922:	61 30       	cpi	r22, 0x01	; 1
 924:	49 f0       	breq	.+18     	; 0x938 <UART_SetCallback+0x1a>
 926:	18 f0       	brcs	.+6      	; 0x92e <UART_SetCallback+0x10>
 928:	62 30       	cpi	r22, 0x02	; 2
 92a:	59 f0       	breq	.+22     	; 0x942 <UART_SetCallback+0x24>
 92c:	0e c0       	rjmp	.+28     	; 0x94a <UART_SetCallback+0x2c>
		case RECIVE_INT :
			Gptr_uartRxInt=Callback;
 92e:	50 93 80 02 	sts	0x0280, r21	; 0x800280 <Gptr_uartRxInt+0x1>
 932:	40 93 7f 02 	sts	0x027F, r20	; 0x80027f <Gptr_uartRxInt>
			break;
 936:	09 c0       	rjmp	.+18     	; 0x94a <UART_SetCallback+0x2c>
		case TRANSMIT_INT :
			Gptr_uartTxInt=Callback;
 938:	50 93 82 02 	sts	0x0282, r21	; 0x800282 <Gptr_uartTxInt+0x1>
 93c:	40 93 81 02 	sts	0x0281, r20	; 0x800281 <Gptr_uartTxInt>
			break;
 940:	04 c0       	rjmp	.+8      	; 0x94a <UART_SetCallback+0x2c>
		case EMPTY_BUFFERR_INT :
			Gptr_uartDataEmptyRegInt=Callback;
 942:	50 93 84 02 	sts	0x0284, r21	; 0x800284 <Gptr_uartDataEmptyRegInt+0x1>
 946:	40 93 83 02 	sts	0x0283, r20	; 0x800283 <Gptr_uartDataEmptyRegInt>
	default:
		break;
	}
	return 0;

}
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	08 95       	ret

0000094e <UART_GetData>:

uint8_t UART_GetData(uint8_t UartNumber, ptr_uint8_t RxChar) {

   *(RxChar) = (uint8_t) UDR;
 94e:	8c b1       	in	r24, 0x0c	; 12
 950:	fb 01       	movw	r30, r22
 952:	80 83       	st	Z, r24

   return 0;
}
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	08 95       	ret

00000958 <__vector_13>:

void __vector_13(void) __attribute__((signal)); // USART, Rx Complete
void __vector_13(void) {
 958:	1f 92       	push	r1
 95a:	0f 92       	push	r0
 95c:	0f b6       	in	r0, 0x3f	; 63
 95e:	0f 92       	push	r0
 960:	11 24       	eor	r1, r1
 962:	2f 93       	push	r18
 964:	3f 93       	push	r19
 966:	4f 93       	push	r20
 968:	5f 93       	push	r21
 96a:	6f 93       	push	r22
 96c:	7f 93       	push	r23
 96e:	8f 93       	push	r24
 970:	9f 93       	push	r25
 972:	af 93       	push	r26
 974:	bf 93       	push	r27
 976:	ef 93       	push	r30
 978:	ff 93       	push	r31
	Gptr_uartRxInt();
 97a:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <Gptr_uartRxInt>
 97e:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <Gptr_uartRxInt+0x1>
 982:	09 95       	icall
}
 984:	ff 91       	pop	r31
 986:	ef 91       	pop	r30
 988:	bf 91       	pop	r27
 98a:	af 91       	pop	r26
 98c:	9f 91       	pop	r25
 98e:	8f 91       	pop	r24
 990:	7f 91       	pop	r23
 992:	6f 91       	pop	r22
 994:	5f 91       	pop	r21
 996:	4f 91       	pop	r20
 998:	3f 91       	pop	r19
 99a:	2f 91       	pop	r18
 99c:	0f 90       	pop	r0
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	0f 90       	pop	r0
 9a2:	1f 90       	pop	r1
 9a4:	18 95       	reti

000009a6 <__vector_14>:
void __vector_14(void) __attribute__((signal)); // USART Data Register Empty
void __vector_14(void) {
 9a6:	1f 92       	push	r1
 9a8:	0f 92       	push	r0
 9aa:	0f b6       	in	r0, 0x3f	; 63
 9ac:	0f 92       	push	r0
 9ae:	11 24       	eor	r1, r1
 9b0:	2f 93       	push	r18
 9b2:	3f 93       	push	r19
 9b4:	4f 93       	push	r20
 9b6:	5f 93       	push	r21
 9b8:	6f 93       	push	r22
 9ba:	7f 93       	push	r23
 9bc:	8f 93       	push	r24
 9be:	9f 93       	push	r25
 9c0:	af 93       	push	r26
 9c2:	bf 93       	push	r27
 9c4:	ef 93       	push	r30
 9c6:	ff 93       	push	r31
	Gptr_uartDataEmptyRegInt();
 9c8:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <Gptr_uartDataEmptyRegInt>
 9cc:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <Gptr_uartDataEmptyRegInt+0x1>
 9d0:	09 95       	icall
}
 9d2:	ff 91       	pop	r31
 9d4:	ef 91       	pop	r30
 9d6:	bf 91       	pop	r27
 9d8:	af 91       	pop	r26
 9da:	9f 91       	pop	r25
 9dc:	8f 91       	pop	r24
 9de:	7f 91       	pop	r23
 9e0:	6f 91       	pop	r22
 9e2:	5f 91       	pop	r21
 9e4:	4f 91       	pop	r20
 9e6:	3f 91       	pop	r19
 9e8:	2f 91       	pop	r18
 9ea:	0f 90       	pop	r0
 9ec:	0f be       	out	0x3f, r0	; 63
 9ee:	0f 90       	pop	r0
 9f0:	1f 90       	pop	r1
 9f2:	18 95       	reti

000009f4 <__vector_15>:
void __vector_15(void) __attribute__((signal)); // USART, Tx Complete
void __vector_15(void) {
 9f4:	1f 92       	push	r1
 9f6:	0f 92       	push	r0
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	0f 92       	push	r0
 9fc:	11 24       	eor	r1, r1
 9fe:	2f 93       	push	r18
 a00:	3f 93       	push	r19
 a02:	4f 93       	push	r20
 a04:	5f 93       	push	r21
 a06:	6f 93       	push	r22
 a08:	7f 93       	push	r23
 a0a:	8f 93       	push	r24
 a0c:	9f 93       	push	r25
 a0e:	af 93       	push	r26
 a10:	bf 93       	push	r27
 a12:	ef 93       	push	r30
 a14:	ff 93       	push	r31
	Gptr_uartTxInt();
 a16:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <Gptr_uartTxInt>
 a1a:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <Gptr_uartTxInt+0x1>
 a1e:	09 95       	icall
}
 a20:	ff 91       	pop	r31
 a22:	ef 91       	pop	r30
 a24:	bf 91       	pop	r27
 a26:	af 91       	pop	r26
 a28:	9f 91       	pop	r25
 a2a:	8f 91       	pop	r24
 a2c:	7f 91       	pop	r23
 a2e:	6f 91       	pop	r22
 a30:	5f 91       	pop	r21
 a32:	4f 91       	pop	r20
 a34:	3f 91       	pop	r19
 a36:	2f 91       	pop	r18
 a38:	0f 90       	pop	r0
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	0f 90       	pop	r0
 a3e:	1f 90       	pop	r1
 a40:	18 95       	reti

00000a42 <_exit>:
 a42:	f8 94       	cli

00000a44 <__stop_program>:
 a44:	ff cf       	rjmp	.-2      	; 0xa44 <__stop_program>
