
Card_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  00000a6a  00000afe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012b  0080015a  0080015a  00000bf8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023f7  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c32  00000000  00000000  000032eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013fd  00000000  00000000  00003f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000065c  00000000  00000000  0000531c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac0  00000000  00000000  00005978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c00  00000000  00000000  00006438  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  00008038  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 1b 04 	jmp	0x836	; 0x836 <__vector_12>
  34:	0c 94 be 04 	jmp	0x97c	; 0x97c <__vector_13>
  38:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__vector_14>
  3c:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 35       	cpi	r26, 0x5A	; 90
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	aa e5       	ldi	r26, 0x5A	; 90
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 38       	cpi	r26, 0x85	; 133
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 02 	call	0x51e	; 0x51e <main>
  8a:	0c 94 33 05 	jmp	0xa66	; 0xa66 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CARD_Send>:

/**
* @brief: This function Sends Card Data to ATM through SPI.
*/
void CARD_Send(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
   uint8_t u8_SSState;
   DIO_ReadPin(SPI_PORT, SPI_SS_PIN, &u8_SSState);
  9c:	ae 01       	movw	r20, r28
  9e:	4f 5f       	subi	r20, 0xFF	; 255
  a0:	5f 4f       	sbci	r21, 0xFF	; 255
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <DIO_ReadPin>
   if(u8_SSState == PIN_LOW)
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	81 11       	cpse	r24, r1
  ae:	12 c0       	rjmp	.+36     	; 0xd4 <CARD_Send+0x42>
   {
      /* Disable Interrupts for critical Section */
      GLOBALINTTERUPTS_Disable();
  b0:	0e 94 22 03 	call	0x644	; 0x644 <GLOBALINTTERUPTS_Disable>
      /* Transmit PAN */
      SPI_TransmitString(SPIChannel_1, gSTR_CardData.au8_PAN, SlaveID_1);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	64 e6       	ldi	r22, 0x64	; 100
  b8:	71 e0       	ldi	r23, 0x01	; 1
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <SPI_TransmitString>
      /* Transmit PIN */
      SPI_TransmitString(SPIChannel_1, gSTR_CardData.au8_PIN, SlaveID_1);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	6e e6       	ldi	r22, 0x6E	; 110
  c4:	71 e0       	ldi	r23, 0x01	; 1
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <SPI_TransmitString>
      /* Small delay to wait for transmission to complete before exiting critical section */
      dummy_delay();
  cc:	0e 94 37 02 	call	0x46e	; 0x46e <dummy_delay>
      /* Enable Interrupts for exiting critical Section */
      GLOBALINTTERUPTS_Enable();
  d0:	0e 94 1e 03 	call	0x63c	; 0x63c <GLOBALINTTERUPTS_Enable>
   }
}
  d4:	0f 90       	pop	r0
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <CARD_GetData>:

/**
* @brief: This function gets card data from EEPROM.
*/
void CARD_GetData(void)
{
  dc:	0f 93       	push	r16
   /* Read Card Holder Name From EEPROM */
   EEPROM_ReadBytes(EEPROM_CH_0, MEMORY_BLOCK_1, CARD_HOLDER_NAME_START_ADDRESS, gSTR_CardData.au8_CardHolderName, CARD_HOLDER_NAME_STRING_SIZE);
  de:	09 e0       	ldi	r16, 0x09	; 9
  e0:	2a e5       	ldi	r18, 0x5A	; 90
  e2:	31 e0       	ldi	r19, 0x01	; 1
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	60 ea       	ldi	r22, 0xA0	; 160
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EEPROM_ReadBytes>
   /* Read PAN From EEPROM */
   EEPROM_ReadBytes(EEPROM_CH_0, MEMORY_BLOCK_1, PAN_START_ADDRESS, gSTR_CardData.au8_PAN, PAN_STRING_SIZE);
  ee:	24 e6       	ldi	r18, 0x64	; 100
  f0:	31 e0       	ldi	r19, 0x01	; 1
  f2:	4a e0       	ldi	r20, 0x0A	; 10
  f4:	60 ea       	ldi	r22, 0xA0	; 160
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EEPROM_ReadBytes>
   /* Read PIN From EEPROM */
   EEPROM_ReadBytes(EEPROM_CH_0, MEMORY_BLOCK_1, PIN_START_ADDRESS, gSTR_CardData.au8_PIN, PIN_STRING_SIZE);
  fc:	04 e0       	ldi	r16, 0x04	; 4
  fe:	2e e6       	ldi	r18, 0x6E	; 110
 100:	31 e0       	ldi	r19, 0x01	; 1
 102:	44 e1       	ldi	r20, 0x14	; 20
 104:	60 ea       	ldi	r22, 0xA0	; 160
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EEPROM_ReadBytes>
}
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <CARD_SetData>:

/**
* @brief: This function Sets Card Data in EEPROM.
*/
void CARD_SetData(void)
{
 110:	0f 93       	push	r16
   /* Disable Interrupts for critical Section */
   GLOBALINTTERUPTS_Disable();
 112:	0e 94 22 03 	call	0x644	; 0x644 <GLOBALINTTERUPTS_Disable>
   
   /* Set Card Holder Name */
   /* Transmit Card holder name message */
   UART_TransmitString(UART_1, gu8_CardHolderNameMessage);
 116:	60 e6       	ldi	r22, 0x60	; 96
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_TransmitString>
   
   /* Receive Card Holder Name from Terminal*/
   UART_ReceiveString(UART_1, gu8_TerminalData);
 120:	63 e7       	ldi	r22, 0x73	; 115
 122:	71 e0       	ldi	r23, 0x01	; 1
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 69 04 	call	0x8d2	; 0x8d2 <UART_ReceiveString>
   /* Check For Valid Card Holder Name Length */
   while (StringLength(gu8_TerminalData) > CARD_HOLDER_NAME_STRING_SIZE || StringLength(gu8_TerminalData) == EMPTY_STRING)
 12a:	0a c0       	rjmp	.+20     	; 0x140 <CARD_SetData+0x30>
   {
      UART_TransmitString(UART_1, gu8_InvalidCardHolderNameMessage);
 12c:	6c e7       	ldi	r22, 0x7C	; 124
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_TransmitString>
      UART_ReceiveString(UART_1, gu8_TerminalData);
 136:	63 e7       	ldi	r22, 0x73	; 115
 138:	71 e0       	ldi	r23, 0x01	; 1
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <UART_ReceiveString>
   UART_TransmitString(UART_1, gu8_CardHolderNameMessage);
   
   /* Receive Card Holder Name from Terminal*/
   UART_ReceiveString(UART_1, gu8_TerminalData);
   /* Check For Valid Card Holder Name Length */
   while (StringLength(gu8_TerminalData) > CARD_HOLDER_NAME_STRING_SIZE || StringLength(gu8_TerminalData) == EMPTY_STRING)
 140:	83 e7       	ldi	r24, 0x73	; 115
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 82 02 	call	0x504	; 0x504 <StringLength>
 148:	8a 30       	cpi	r24, 0x0A	; 10
 14a:	80 f7       	brcc	.-32     	; 0x12c <CARD_SetData+0x1c>
 14c:	83 e7       	ldi	r24, 0x73	; 115
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 82 02 	call	0x504	; 0x504 <StringLength>
 154:	88 23       	and	r24, r24
 156:	51 f3       	breq	.-44     	; 0x12c <CARD_SetData+0x1c>
      UART_TransmitString(UART_1, gu8_InvalidCardHolderNameMessage);
      UART_ReceiveString(UART_1, gu8_TerminalData);
   }
   
   /* Save Card Holder Name in EEPROM */
   EEPROM_WriteBytes(EEPROM_CH_0, MEMORY_BLOCK_1, CARD_HOLDER_NAME_START_ADDRESS, gu8_TerminalData, CARD_HOLDER_NAME_STRING_SIZE);
 158:	09 e0       	ldi	r16, 0x09	; 9
 15a:	23 e7       	ldi	r18, 0x73	; 115
 15c:	31 e0       	ldi	r19, 0x01	; 1
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	60 ea       	ldi	r22, 0xA0	; 160
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 0e 02 	call	0x41c	; 0x41c <EEPROM_WriteBytes>
   
   /* Set PAN */
   /* Transmit PAN message */
   UART_TransmitString(UART_1, gu8_PANMessage);
 168:	6d eb       	ldi	r22, 0xBD	; 189
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_TransmitString>
   
   /* Receive PAN from Terminal */
   UART_ReceiveString(UART_1, gu8_TerminalData);
 172:	63 e7       	ldi	r22, 0x73	; 115
 174:	71 e0       	ldi	r23, 0x01	; 1
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 69 04 	call	0x8d2	; 0x8d2 <UART_ReceiveString>
   /* Check For Valid PAN Length */
   while (StringLength(gu8_TerminalData) != PAN_STRING_SIZE )
 17c:	0a c0       	rjmp	.+20     	; 0x192 <CARD_SetData+0x82>
   {
      UART_TransmitString(UART_1, gu8_InvalidPANMessage);
 17e:	6c ec       	ldi	r22, 0xCC	; 204
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_TransmitString>
      UART_ReceiveString(UART_1, gu8_TerminalData);
 188:	63 e7       	ldi	r22, 0x73	; 115
 18a:	71 e0       	ldi	r23, 0x01	; 1
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <UART_ReceiveString>
   UART_TransmitString(UART_1, gu8_PANMessage);
   
   /* Receive PAN from Terminal */
   UART_ReceiveString(UART_1, gu8_TerminalData);
   /* Check For Valid PAN Length */
   while (StringLength(gu8_TerminalData) != PAN_STRING_SIZE )
 192:	83 e7       	ldi	r24, 0x73	; 115
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 82 02 	call	0x504	; 0x504 <StringLength>
 19a:	89 30       	cpi	r24, 0x09	; 9
 19c:	81 f7       	brne	.-32     	; 0x17e <CARD_SetData+0x6e>
      UART_TransmitString(UART_1, gu8_InvalidPANMessage);
      UART_ReceiveString(UART_1, gu8_TerminalData);
   }
   
   /* Save PAN in EEPROM */
   EEPROM_WriteBytes(EEPROM_CH_0, MEMORY_BLOCK_1, PAN_START_ADDRESS, gu8_TerminalData, PAN_STRING_SIZE);
 19e:	09 e0       	ldi	r16, 0x09	; 9
 1a0:	23 e7       	ldi	r18, 0x73	; 115
 1a2:	31 e0       	ldi	r19, 0x01	; 1
 1a4:	4a e0       	ldi	r20, 0x0A	; 10
 1a6:	60 ea       	ldi	r22, 0xA0	; 160
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 0e 02 	call	0x41c	; 0x41c <EEPROM_WriteBytes>
   
   /* Set PIN */
   /* Transmit PIN message */
   UART_TransmitString(UART_1, gu8_PINMessage);
 1ae:	65 ef       	ldi	r22, 0xF5	; 245
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_TransmitString>
   
   /* Receive PIN from Terminal */
   UART_ReceiveString(UART_1, gu8_TerminalData);
 1b8:	63 e7       	ldi	r22, 0x73	; 115
 1ba:	71 e0       	ldi	r23, 0x01	; 1
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 69 04 	call	0x8d2	; 0x8d2 <UART_ReceiveString>
   /* Check For Valid PIN Length */
   while (StringLength(gu8_TerminalData) != PIN_STRING_SIZE )
 1c2:	0a c0       	rjmp	.+20     	; 0x1d8 <CARD_SetData+0xc8>
   {
      UART_TransmitString(UART_1, gu8_InvalidPINMessage);
 1c4:	64 e0       	ldi	r22, 0x04	; 4
 1c6:	71 e0       	ldi	r23, 0x01	; 1
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_TransmitString>
      UART_ReceiveString(UART_1, gu8_TerminalData);
 1ce:	63 e7       	ldi	r22, 0x73	; 115
 1d0:	71 e0       	ldi	r23, 0x01	; 1
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <UART_ReceiveString>
   UART_TransmitString(UART_1, gu8_PINMessage);
   
   /* Receive PIN from Terminal */
   UART_ReceiveString(UART_1, gu8_TerminalData);
   /* Check For Valid PIN Length */
   while (StringLength(gu8_TerminalData) != PIN_STRING_SIZE )
 1d8:	83 e7       	ldi	r24, 0x73	; 115
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 82 02 	call	0x504	; 0x504 <StringLength>
 1e0:	84 30       	cpi	r24, 0x04	; 4
 1e2:	81 f7       	brne	.-32     	; 0x1c4 <CARD_SetData+0xb4>
      UART_TransmitString(UART_1, gu8_InvalidPINMessage);
      UART_ReceiveString(UART_1, gu8_TerminalData);
   }
   
   /* Save PIN in EEPROM */
   EEPROM_WriteBytes(EEPROM_CH_0, MEMORY_BLOCK_1, PIN_START_ADDRESS, gu8_TerminalData, PIN_STRING_SIZE);
 1e4:	04 e0       	ldi	r16, 0x04	; 4
 1e6:	23 e7       	ldi	r18, 0x73	; 115
 1e8:	31 e0       	ldi	r19, 0x01	; 1
 1ea:	44 e1       	ldi	r20, 0x14	; 20
 1ec:	60 ea       	ldi	r22, 0xA0	; 160
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 0e 02 	call	0x41c	; 0x41c <EEPROM_WriteBytes>
   
   UART_TransmitString(UART_1, gu8_CardDataUpdatedMessage);
 1f4:	6d e2       	ldi	r22, 0x2D	; 45
 1f6:	71 e0       	ldi	r23, 0x01	; 1
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_TransmitString>
   
   /* Update Card Data in the global variable */
   CARD_GetData();
 1fe:	0e 94 6e 00 	call	0xdc	; 0xdc <CARD_GetData>
   
   /* Enable Interrupts for exiting critical Section */
   GLOBALINTTERUPTS_Enable();
 202:	0e 94 1e 03 	call	0x63c	; 0x63c <GLOBALINTTERUPTS_Enable>
}
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <CARD_Init>:
* @brief: This function initializes Card Drivers.
*/
void CARD_Init()
{
   /* Initialize EEPROM driver */
   EEPROM_Init(EEPROM_CH_0);
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <EEPROM_Init>
   
   /* Initialize UART driver */
   UART_Init(UART_1);
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 44 04 	call	0x888	; 0x888 <UART_Init>
   UART_EnableInterrupt(UART_1, RECIVE_INT);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 8c 04 	call	0x918	; 0x918 <UART_EnableInterrupt>
   UART_SetCallback(UART_1, RECIVE_INT, CARD_Receive);
 21e:	4b e2       	ldi	r20, 0x2B	; 43
 220:	51 e0       	ldi	r21, 0x01	; 1
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 a1 04 	call	0x942	; 0x942 <UART_SetCallback>
   
   /* Initialize SPI driver */
   SPI_Init(SPIChannel_1);
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <SPI_Init>
   SPI_Set_TX_CompleteCallback(SPIChannel_1, CARD_Send);
 230:	69 e4       	ldi	r22, 0x49	; 73
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 12 04 	call	0x824	; 0x824 <SPI_Set_TX_CompleteCallback>
   SPI_EnableInterrupt(SPIChannel_1);
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 0a 04 	call	0x814	; 0x814 <SPI_EnableInterrupt>
   
   /* Enable Global Interrupts */
   GLOBALINTTERUPTS_Enable();
 240:	0e 94 1e 03 	call	0x63c	; 0x63c <GLOBALINTTERUPTS_Enable>
   
   /* Get Card Data From EEPROM */
   CARD_GetData();
 244:	0e 94 6e 00 	call	0xdc	; 0xdc <CARD_GetData>
   
   /* Check If Pin is not Set */
   if(gSTR_CardData.au8_PIN[0] == EEPROM_EMPTY_CELL)
 248:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end+0x14>
 24c:	8f 3f       	cpi	r24, 0xFF	; 255
 24e:	11 f4       	brne	.+4      	; 0x254 <CARD_Init+0x4a>
   {
      CARD_SetData();
 250:	0e 94 88 00 	call	0x110	; 0x110 <CARD_SetData>
 254:	08 95       	ret

00000256 <CARD_Receive>:
* @brief: This function Receives ADMIN from Terminal to enter Programming mode.
*/
void CARD_Receive(void)
{
   /* Get Character */
   UART_GetData(UART_1, &gu8_RxBuffer[gu8_Counter]);
 256:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <gu8_Counter>
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	62 58       	subi	r22, 0x82	; 130
 25e:	7e 4f       	sbci	r23, 0xFE	; 254
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 b9 04 	call	0x972	; 0x972 <UART_GetData>
      
   /* enters an end of string character and breaks from the loop on receiving
      a new line character */
   if(gu8_RxBuffer[gu8_Counter] == NEW_LINE)
 266:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <gu8_Counter>
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	e2 58       	subi	r30, 0x82	; 130
 270:	fe 4f       	sbci	r31, 0xFE	; 254
 272:	20 81       	ld	r18, Z
 274:	2d 30       	cpi	r18, 0x0D	; 13
 276:	71 f4       	brne	.+28     	; 0x294 <CARD_Receive+0x3e>
   {
      gu8_RxBuffer[gu8_Counter + STRING_NEXT_CHAR] = END_OF_STRING;
 278:	fc 01       	movw	r30, r24
 27a:	e1 58       	subi	r30, 0x81	; 129
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	10 82       	st	Z, r1
      /* If Received String is "ADMIN" */
      if(StringCompare(gu8_RxBuffer, gu8_AdminCommand) == TRUE)
 280:	64 e5       	ldi	r22, 0x54	; 84
 282:	71 e0       	ldi	r23, 0x01	; 1
 284:	8e e7       	ldi	r24, 0x7E	; 126
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 61 02 	call	0x4c2	; 0x4c2 <StringCompare>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	11 f4       	brne	.+4      	; 0x294 <CARD_Receive+0x3e>
      {
         CARD_SetData();
 290:	0e 94 88 00 	call	0x110	; 0x110 <CARD_SetData>
      }
   }
   gu8_Counter++;
 294:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <gu8_Counter>
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <gu8_Counter>
      
   /* return to the previous character to overwrite if the entered character 
      is backspace */
   if(gu8_RxBuffer[gu8_Counter - STRING_PREV_CHAR] == BACKSPACE)
 29e:	e8 2f       	mov	r30, r24
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	e3 58       	subi	r30, 0x83	; 131
 2a4:	fe 4f       	sbci	r31, 0xFE	; 254
 2a6:	90 81       	ld	r25, Z
 2a8:	98 30       	cpi	r25, 0x08	; 8
 2aa:	41 f4       	brne	.+16     	; 0x2bc <CARD_Receive+0x66>
   {
      if (gu8_Counter - STRING_PREV_CHAR != STRING_COUNTER_START)
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	21 f0       	breq	.+8      	; 0x2b8 <CARD_Receive+0x62>
      {
         gu8_Counter -= STRING_RETURN_TO_PREV_CHAR;
 2b0:	82 50       	subi	r24, 0x02	; 2
 2b2:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <gu8_Counter>
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <CARD_Receive+0x66>
      }
      /* return to the string start if the counter is still at first character */
      else
      {
         gu8_Counter = STRING_COUNTER_START;
 2b8:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <gu8_Counter>
      }
   }
   
   /* Reset Receive Buffer on receiving a new line character. */
   if(gu8_RxBuffer[gu8_Counter - STRING_PREV_CHAR] == NEW_LINE)
 2bc:	e0 91 7d 01 	lds	r30, 0x017D	; 0x80017d <gu8_Counter>
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	e3 58       	subi	r30, 0x83	; 131
 2c4:	fe 4f       	sbci	r31, 0xFE	; 254
 2c6:	80 81       	ld	r24, Z
 2c8:	8d 30       	cpi	r24, 0x0D	; 13
 2ca:	11 f4       	brne	.+4      	; 0x2d0 <CARD_Receive+0x7a>
   {
      gu8_Counter = STRING_COUNTER_START;
 2cc:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <gu8_Counter>
 2d0:	08 95       	ret

000002d2 <EEPROM_Init>:
{
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	39 f4       	brne	.+14     	; 0x2e4 <EEPROM_Init+0x12>
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* configure i2c pins */
   e_state = I2C_Init(u8_I2C_CH);
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_Init>
   /* make sure pin configuration is successful */
   if(E_I2C_SUCCESS != e_state)
 2dc:	88 23       	and	r24, r24
 2de:	21 f0       	breq	.+8      	; 0x2e8 <EEPROM_Init+0x16>
   {
      return E_EEPROM_I2C_ERROR;
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	08 95       	ret
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	08 95       	ret
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 2e8:	80 e0       	ldi	r24, 0x00	; 0
}
 2ea:	08 95       	ret

000002ec <EEPROM_Read>:
* @param [out] data        -  Pointer to where to store received data.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_Read(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t address, uint8_t * data)
{
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	39 f5       	brne	.+78     	; 0x346 <EEPROM_Read+0x5a>
 2f8:	89 01       	movw	r16, r18
 2fa:	d4 2f       	mov	r29, r20
 2fc:	c6 2f       	mov	r28, r22
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* Set start condition */
   e_state =I2C_Start(u8_I2C_CH);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 32 03 	call	0x664	; 0x664 <I2C_Start>
   if(E_I2C_SUCCESS != e_state)
 304:	81 11       	cpse	r24, r1
 306:	21 c0       	rjmp	.+66     	; 0x34a <EEPROM_Read+0x5e>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, memoryBlock);
 308:	6c 2f       	mov	r22, r28
 30a:	0e 94 4b 03 	call	0x696	; 0x696 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 30e:	81 11       	cpse	r24, r1
 310:	1e c0       	rjmp	.+60     	; 0x34e <EEPROM_Read+0x62>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set address to read from */
   e_state = I2C_Write(u8_I2C_CH, address);
 312:	6d 2f       	mov	r22, r29
 314:	0e 94 4b 03 	call	0x696	; 0x696 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 318:	81 11       	cpse	r24, r1
 31a:	1b c0       	rjmp	.+54     	; 0x352 <EEPROM_Read+0x66>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* repeated start */
   e_state = I2C_RepeatedStart(u8_I2C_CH);
 31c:	0e 94 3d 03 	call	0x67a	; 0x67a <I2C_RepeatedStart>
   if(E_I2C_SUCCESS != e_state)
 320:	81 11       	cpse	r24, r1
 322:	19 c0       	rjmp	.+50     	; 0x356 <EEPROM_Read+0x6a>
   {
      return E_EEPROM_I2C_ERROR;
   }
   /* Set first memory block address + R */
   e_state= I2C_Write(u8_I2C_CH, memoryBlock | 1 );
 324:	6c 2f       	mov	r22, r28
 326:	61 60       	ori	r22, 0x01	; 1
 328:	0e 94 4b 03 	call	0x696	; 0x696 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 32c:	81 11       	cpse	r24, r1
 32e:	15 c0       	rjmp	.+42     	; 0x35a <EEPROM_Read+0x6e>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* receive data in the address */
   e_state = I2C_ReadNoAck(u8_I2C_CH, data);
 330:	b8 01       	movw	r22, r16
 332:	0e 94 58 03 	call	0x6b0	; 0x6b0 <I2C_ReadNoAck>
   if(E_I2C_SUCCESS != e_state)
 336:	81 11       	cpse	r24, r1
 338:	12 c0       	rjmp	.+36     	; 0x35e <EEPROM_Read+0x72>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* release the bus */
   e_state = I2C_Stop(u8_I2C_CH);
 33a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <I2C_Stop>
   if(E_I2C_SUCCESS != e_state)
 33e:	88 23       	and	r24, r24
 340:	81 f0       	breq	.+32     	; 0x362 <EEPROM_Read+0x76>
   {
      return E_EEPROM_I2C_ERROR;
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0f c0       	rjmp	.+30     	; 0x364 <EEPROM_Read+0x78>
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0d c0       	rjmp	.+26     	; 0x364 <EEPROM_Read+0x78>
   
   /* Set start condition */
   e_state =I2C_Start(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	0b c0       	rjmp	.+22     	; 0x364 <EEPROM_Read+0x78>
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, memoryBlock);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	09 c0       	rjmp	.+18     	; 0x364 <EEPROM_Read+0x78>
   
   /* Set address to read from */
   e_state = I2C_Write(u8_I2C_CH, address);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	07 c0       	rjmp	.+14     	; 0x364 <EEPROM_Read+0x78>

   /* repeated start */
   e_state = I2C_RepeatedStart(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	05 c0       	rjmp	.+10     	; 0x364 <EEPROM_Read+0x78>
   }
   /* Set first memory block address + R */
   e_state= I2C_Write(u8_I2C_CH, memoryBlock | 1 );
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	03 c0       	rjmp	.+6      	; 0x364 <EEPROM_Read+0x78>
   
   /* receive data in the address */
   e_state = I2C_ReadNoAck(u8_I2C_CH, data);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	01 c0       	rjmp	.+2      	; 0x364 <EEPROM_Read+0x78>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 362:	80 e0       	ldi	r24, 0x00	; 0
}
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	08 95       	ret

0000036e <EEPROM_Write>:
* @param [in]  data        -  Data to write.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_Write(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t address, uint8_t data)
{
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	e9 f4       	brne	.+58     	; 0x3b2 <EEPROM_Write+0x44>
 378:	12 2f       	mov	r17, r18
 37a:	d4 2f       	mov	r29, r20
 37c:	c6 2f       	mov	r28, r22
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* Set start condition */
   e_state = I2C_Start(u8_I2C_CH);
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 32 03 	call	0x664	; 0x664 <I2C_Start>
   if(E_I2C_SUCCESS != e_state)
 384:	81 11       	cpse	r24, r1
 386:	17 c0       	rjmp	.+46     	; 0x3b6 <EEPROM_Write+0x48>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, memoryBlock);
 388:	6c 2f       	mov	r22, r28
 38a:	0e 94 4b 03 	call	0x696	; 0x696 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 38e:	81 11       	cpse	r24, r1
 390:	14 c0       	rjmp	.+40     	; 0x3ba <EEPROM_Write+0x4c>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* set address to write to */
   e_state = I2C_Write(u8_I2C_CH, address);
 392:	6d 2f       	mov	r22, r29
 394:	0e 94 4b 03 	call	0x696	; 0x696 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 398:	81 11       	cpse	r24, r1
 39a:	11 c0       	rjmp	.+34     	; 0x3be <EEPROM_Write+0x50>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* writes data to the address */
   e_state = I2C_Write(u8_I2C_CH, data);
 39c:	61 2f       	mov	r22, r17
 39e:	0e 94 4b 03 	call	0x696	; 0x696 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 3a2:	81 11       	cpse	r24, r1
 3a4:	0e c0       	rjmp	.+28     	; 0x3c2 <EEPROM_Write+0x54>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* release the bus */
   e_state = I2C_Stop(u8_I2C_CH);
 3a6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <I2C_Stop>
   if(E_I2C_SUCCESS != e_state)
 3aa:	88 23       	and	r24, r24
 3ac:	61 f0       	breq	.+24     	; 0x3c6 <EEPROM_Write+0x58>
   {
      return E_EEPROM_I2C_ERROR;
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	0b c0       	rjmp	.+22     	; 0x3c8 <EEPROM_Write+0x5a>
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	09 c0       	rjmp	.+18     	; 0x3c8 <EEPROM_Write+0x5a>
   
   /* Set start condition */
   e_state = I2C_Start(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <EEPROM_Write+0x5a>
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, memoryBlock);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <EEPROM_Write+0x5a>
   
   /* set address to write to */
   e_state = I2C_Write(u8_I2C_CH, address);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <EEPROM_Write+0x5a>
   
   /* writes data to the address */
   e_state = I2C_Write(u8_I2C_CH, data);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <EEPROM_Write+0x5a>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	08 95       	ret

000003d0 <EEPROM_ReadBytes>:
* @param [in]  bytes_num   -  number of bytes to read.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_ReadBytes(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
 3d0:	df 92       	push	r13
 3d2:	ef 92       	push	r14
 3d4:	ff 92       	push	r15
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	d8 2e       	mov	r13, r24
 3e0:	16 2f       	mov	r17, r22
 3e2:	d4 2f       	mov	r29, r20
 3e4:	79 01       	movw	r14, r18
   I2C_ERROR_state_t e_state;
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
 3e6:	c0 e0       	ldi	r28, 0x00	; 0
 3e8:	0c c0       	rjmp	.+24     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
   {
      e_state = EEPROM_Read(EEPROM_CH, memoryBlock, (start_address + au8_BytesCounter), &data[au8_BytesCounter]);
 3ea:	97 01       	movw	r18, r14
 3ec:	2c 0f       	add	r18, r28
 3ee:	31 1d       	adc	r19, r1
 3f0:	4c 2f       	mov	r20, r28
 3f2:	4d 0f       	add	r20, r29
 3f4:	61 2f       	mov	r22, r17
 3f6:	8d 2d       	mov	r24, r13
 3f8:	0e 94 76 01 	call	0x2ec	; 0x2ec <EEPROM_Read>
      if(E_I2C_SUCCESS != e_state)
 3fc:	81 11       	cpse	r24, r1
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
*/
EEPROM_ERROR_state_t EEPROM_ReadBytes(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
   I2C_ERROR_state_t e_state;
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
 400:	cf 5f       	subi	r28, 0xFF	; 255
 402:	c0 17       	cp	r28, r16
 404:	90 f3       	brcs	.-28     	; 0x3ea <EEPROM_ReadBytes+0x1a>
         return E_EEPROM_I2C_ERROR;
      }
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	01 c0       	rjmp	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
   {
      e_state = EEPROM_Read(EEPROM_CH, memoryBlock, (start_address + au8_BytesCounter), &data[au8_BytesCounter]);
      if(E_I2C_SUCCESS != e_state)
      {
         return E_EEPROM_I2C_ERROR;
 40a:	82 e0       	ldi	r24, 0x02	; 2
      }
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	df 90       	pop	r13
 41a:	08 95       	ret

0000041c <EEPROM_WriteBytes>:
* @param [in]  bytes_num   -  number of bytes to write.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_WriteBytes(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	d8 2e       	mov	r13, r24
 42c:	16 2f       	mov	r17, r22
 42e:	d4 2f       	mov	r29, r20
 430:	79 01       	movw	r14, r18
   I2C_ERROR_state_t e_state;
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
 432:	c0 e0       	ldi	r28, 0x00	; 0
 434:	0f c0       	rjmp	.+30     	; 0x454 <EEPROM_WriteBytes+0x38>
   {
      e_state = EEPROM_Write(EEPROM_CH, memoryBlock, (start_address + au8_BytesCounter), data[au8_BytesCounter]);
 436:	f7 01       	movw	r30, r14
 438:	ec 0f       	add	r30, r28
 43a:	f1 1d       	adc	r31, r1
 43c:	20 81       	ld	r18, Z
 43e:	4c 2f       	mov	r20, r28
 440:	4d 0f       	add	r20, r29
 442:	61 2f       	mov	r22, r17
 444:	8d 2d       	mov	r24, r13
 446:	0e 94 b7 01 	call	0x36e	; 0x36e <EEPROM_Write>
      if(E_I2C_SUCCESS != e_state)
 44a:	81 11       	cpse	r24, r1
 44c:	07 c0       	rjmp	.+14     	; 0x45c <EEPROM_WriteBytes+0x40>
      {
         return E_EEPROM_I2C_ERROR;
      }
      dummy_delay();
 44e:	0e 94 37 02 	call	0x46e	; 0x46e <dummy_delay>
*/
EEPROM_ERROR_state_t EEPROM_WriteBytes(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
   I2C_ERROR_state_t e_state;
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
 452:	cf 5f       	subi	r28, 0xFF	; 255
 454:	c0 17       	cp	r28, r16
 456:	78 f3       	brcs	.-34     	; 0x436 <EEPROM_WriteBytes+0x1a>
      }
      dummy_delay();
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	01 c0       	rjmp	.+2      	; 0x45e <EEPROM_WriteBytes+0x42>
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
   {
      e_state = EEPROM_Write(EEPROM_CH, memoryBlock, (start_address + au8_BytesCounter), data[au8_BytesCounter]);
      if(E_I2C_SUCCESS != e_state)
      {
         return E_EEPROM_I2C_ERROR;
 45c:	82 e0       	ldi	r24, 0x02	; 2
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
   
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	ff 90       	pop	r15
 468:	ef 90       	pop	r14
 46a:	df 90       	pop	r13
 46c:	08 95       	ret

0000046e <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	00 d0       	rcall	.+0      	; 0x474 <dummy_delay+0x6>
 474:	00 d0       	rcall	.+0      	; 0x476 <dummy_delay+0x8>
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
 47a:	1a 82       	std	Y+2, r1	; 0x02
 47c:	19 82       	std	Y+1, r1	; 0x01
 47e:	15 c0       	rjmp	.+42     	; 0x4aa <dummy_delay+0x3c>
   {
      for(volatile uint8_t j=0; j<32; j++)
 480:	1c 82       	std	Y+4, r1	; 0x04
 482:	0b c0       	rjmp	.+22     	; 0x49a <dummy_delay+0x2c>
      {
         for(volatile uint8_t k=0; k<2; k++)
 484:	1b 82       	std	Y+3, r1	; 0x03
 486:	03 c0       	rjmp	.+6      	; 0x48e <dummy_delay+0x20>
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	8f 5f       	subi	r24, 0xFF	; 255
 48c:	8b 83       	std	Y+3, r24	; 0x03
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	82 30       	cpi	r24, 0x02	; 2
 492:	d0 f3       	brcs	.-12     	; 0x488 <dummy_delay+0x1a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
 494:	8c 81       	ldd	r24, Y+4	; 0x04
 496:	8f 5f       	subi	r24, 0xFF	; 255
 498:	8c 83       	std	Y+4, r24	; 0x04
 49a:	8c 81       	ldd	r24, Y+4	; 0x04
 49c:	80 32       	cpi	r24, 0x20	; 32
 49e:	90 f3       	brcs	.-28     	; 0x484 <dummy_delay+0x16>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	9a 81       	ldd	r25, Y+2	; 0x02
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	9a 83       	std	Y+2, r25	; 0x02
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	9a 81       	ldd	r25, Y+2	; 0x02
 4ae:	84 36       	cpi	r24, 0x64	; 100
 4b0:	91 05       	cpc	r25, r1
 4b2:	30 f3       	brcs	.-52     	; 0x480 <dummy_delay+0x12>
         {
            
         }
      }
   }
}
 4b4:	0f 90       	pop	r0
 4b6:	0f 90       	pop	r0
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <StringCompare>:
* @param [in]  str2   -  pointer to the second string.
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
 4c2:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
 4c4:	40 e0       	ldi	r20, 0x00	; 0
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
 4c6:	0a c0       	rjmp	.+20     	; 0x4dc <StringCompare+0x1a>
   {
      if(str1[u8_counter] != str2[u8_counter])
 4c8:	fb 01       	movw	r30, r22
 4ca:	e2 0f       	add	r30, r18
 4cc:	f3 1f       	adc	r31, r19
 4ce:	20 81       	ld	r18, Z
 4d0:	92 17       	cp	r25, r18
 4d2:	19 f0       	breq	.+6      	; 0x4da <StringCompare+0x18>
      {
         u8_isEqual = FALSE;
         u8_counter++;
 4d4:	4f 5f       	subi	r20, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
 4d6:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
 4d8:	0e c0       	rjmp	.+28     	; 0x4f6 <StringCompare+0x34>
      }
      u8_counter++;
 4da:	4f 5f       	subi	r20, 0xFF	; 255
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
 4dc:	24 2f       	mov	r18, r20
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	fd 01       	movw	r30, r26
 4e2:	e2 0f       	add	r30, r18
 4e4:	f3 1f       	adc	r31, r19
 4e6:	90 81       	ld	r25, Z
 4e8:	99 23       	and	r25, r25
 4ea:	21 f0       	breq	.+8      	; 0x4f4 <StringCompare+0x32>
 4ec:	9d 30       	cpi	r25, 0x0D	; 13
 4ee:	61 f7       	brne	.-40     	; 0x4c8 <StringCompare+0x6>
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <StringCompare+0x34>
 4f4:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
 4f6:	fb 01       	movw	r30, r22
 4f8:	e4 0f       	add	r30, r20
 4fa:	f1 1d       	adc	r31, r1
 4fc:	90 81       	ld	r25, Z
 4fe:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
 500:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
}
 502:	08 95       	ret

00000504 <StringLength>:
* @param [in]  string   -  pointer to the string.
*
* @return function error state.
*/
uint8_t StringLength(uint8_t * string)
{
 504:	9c 01       	movw	r18, r24
   uint8_t u8_counter = 0;
 506:	80 e0       	ldi	r24, 0x00	; 0
  
   while(string[u8_counter] != END_OF_STRING && string[u8_counter] != NEW_LINE)
 508:	01 c0       	rjmp	.+2      	; 0x50c <StringLength+0x8>
   {
      u8_counter++;
 50a:	8f 5f       	subi	r24, 0xFF	; 255
*/
uint8_t StringLength(uint8_t * string)
{
   uint8_t u8_counter = 0;
  
   while(string[u8_counter] != END_OF_STRING && string[u8_counter] != NEW_LINE)
 50c:	f9 01       	movw	r30, r18
 50e:	e8 0f       	add	r30, r24
 510:	f1 1d       	adc	r31, r1
 512:	90 81       	ld	r25, Z
 514:	99 23       	and	r25, r25
 516:	11 f0       	breq	.+4      	; 0x51c <StringLength+0x18>
 518:	9d 30       	cpi	r25, 0x0D	; 13
 51a:	b9 f7       	brne	.-18     	; 0x50a <StringLength+0x6>
   {
      u8_counter++;
   }
   
   return u8_counter;
 51c:	08 95       	ret

0000051e <main>:
/*- APIs IMPLEMENTATION
-----------------------------------*/
int main(void)
{
   /* Initialize Card Drivers */
   CARD_Init();
 51e:	0e 94 05 01 	call	0x20a	; 0x20a <CARD_Init>
 522:	ff cf       	rjmp	.-2      	; 0x522 <main+0x4>

00000524 <DIO_SetPinDirection>:
			BIT_TOGGLE(PORTD,PinNo);
			break;
		default:
			break;	
	}	
}
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	d1 f0       	breq	.+52     	; 0x55c <DIO_SetPinDirection+0x38>
 528:	28 f0       	brcs	.+10     	; 0x534 <DIO_SetPinDirection+0x10>
 52a:	82 30       	cpi	r24, 0x02	; 2
 52c:	59 f1       	breq	.+86     	; 0x584 <DIO_SetPinDirection+0x60>
 52e:	83 30       	cpi	r24, 0x03	; 3
 530:	e9 f1       	breq	.+122    	; 0x5ac <DIO_SetPinDirection+0x88>
 532:	08 95       	ret
 534:	2a b3       	in	r18, 0x1a	; 26
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	06 2e       	mov	r0, r22
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_SetPinDirection+0x1e>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	0a 94       	dec	r0
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_SetPinDirection+0x1a>
 546:	50 e0       	ldi	r21, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_SetPinDirection+0x2a>
 54a:	44 0f       	add	r20, r20
 54c:	55 1f       	adc	r21, r21
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_SetPinDirection+0x26>
 552:	80 95       	com	r24
 554:	82 23       	and	r24, r18
 556:	48 2b       	or	r20, r24
 558:	4a bb       	out	0x1a, r20	; 26
 55a:	08 95       	ret
 55c:	27 b3       	in	r18, 0x17	; 23
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	06 2e       	mov	r0, r22
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_SetPinDirection+0x46>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	0a 94       	dec	r0
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_SetPinDirection+0x42>
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_SetPinDirection+0x52>
 572:	44 0f       	add	r20, r20
 574:	55 1f       	adc	r21, r21
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_SetPinDirection+0x4e>
 57a:	80 95       	com	r24
 57c:	82 23       	and	r24, r18
 57e:	48 2b       	or	r20, r24
 580:	47 bb       	out	0x17, r20	; 23
 582:	08 95       	ret
 584:	24 b3       	in	r18, 0x14	; 20
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	06 2e       	mov	r0, r22
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_SetPinDirection+0x6e>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	0a 94       	dec	r0
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_SetPinDirection+0x6a>
 596:	50 e0       	ldi	r21, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_SetPinDirection+0x7a>
 59a:	44 0f       	add	r20, r20
 59c:	55 1f       	adc	r21, r21
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_SetPinDirection+0x76>
 5a2:	80 95       	com	r24
 5a4:	82 23       	and	r24, r18
 5a6:	48 2b       	or	r20, r24
 5a8:	44 bb       	out	0x14, r20	; 20
 5aa:	08 95       	ret
 5ac:	21 b3       	in	r18, 0x11	; 17
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	06 2e       	mov	r0, r22
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_SetPinDirection+0x96>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	0a 94       	dec	r0
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_SetPinDirection+0x92>
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_SetPinDirection+0xa2>
 5c2:	44 0f       	add	r20, r20
 5c4:	55 1f       	adc	r21, r21
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_SetPinDirection+0x9e>
 5ca:	80 95       	com	r24
 5cc:	82 23       	and	r24, r18
 5ce:	48 2b       	or	r20, r24
 5d0:	41 bb       	out	0x11, r20	; 17
 5d2:	08 95       	ret

000005d4 <DIO_ReadPin>:
uint8_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
	switch(PortName)
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	89 f0       	breq	.+34     	; 0x5fa <DIO_ReadPin+0x26>
 5d8:	28 f0       	brcs	.+10     	; 0x5e4 <DIO_ReadPin+0x10>
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	c9 f0       	breq	.+50     	; 0x610 <DIO_ReadPin+0x3c>
 5de:	83 30       	cpi	r24, 0x03	; 3
 5e0:	11 f1       	breq	.+68     	; 0x626 <DIO_ReadPin+0x52>
 5e2:	08 95       	ret
	{
		case PORT_A:
			* PinData=BIT_GET(PINA,PinNo);
 5e4:	89 b3       	in	r24, 0x19	; 25
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_ReadPin+0x1a>
 5ea:	95 95       	asr	r25
 5ec:	87 95       	ror	r24
 5ee:	6a 95       	dec	r22
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_ReadPin+0x16>
 5f2:	81 70       	andi	r24, 0x01	; 1
 5f4:	fa 01       	movw	r30, r20
 5f6:	80 83       	st	Z, r24
			break;
 5f8:	08 95       	ret
		case PORT_B:
			* PinData=BIT_GET(PINB,PinNo);
 5fa:	86 b3       	in	r24, 0x16	; 22
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_ReadPin+0x30>
 600:	95 95       	asr	r25
 602:	87 95       	ror	r24
 604:	6a 95       	dec	r22
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_ReadPin+0x2c>
 608:	81 70       	andi	r24, 0x01	; 1
 60a:	fa 01       	movw	r30, r20
 60c:	80 83       	st	Z, r24
			break;
 60e:	08 95       	ret
		case PORT_C:
			* PinData=BIT_GET(PINC,PinNo);
 610:	83 b3       	in	r24, 0x13	; 19
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_ReadPin+0x46>
 616:	95 95       	asr	r25
 618:	87 95       	ror	r24
 61a:	6a 95       	dec	r22
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_ReadPin+0x42>
 61e:	81 70       	andi	r24, 0x01	; 1
 620:	fa 01       	movw	r30, r20
 622:	80 83       	st	Z, r24
			break;
 624:	08 95       	ret
		case PORT_D:
			* PinData=BIT_GET(PIND,PinNo);
 626:	80 b3       	in	r24, 0x10	; 16
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_ReadPin+0x5c>
 62c:	95 95       	asr	r25
 62e:	87 95       	ror	r24
 630:	6a 95       	dec	r22
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_ReadPin+0x58>
 634:	81 70       	andi	r24, 0x01	; 1
 636:	fa 01       	movw	r30, r20
 638:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
 63a:	08 95       	ret

0000063c <GLOBALINTTERUPTS_Enable>:
/**
* @brief: This function enables global interrupts.
*/
void GLOBALINTTERUPTS_Enable(void)
{
   GLOBAL_INTERRUPTS_CONTROL_R |= GLOBAL_INTERRUPT_BIT;
 63c:	8f b7       	in	r24, 0x3f	; 63
 63e:	80 68       	ori	r24, 0x80	; 128
 640:	8f bf       	out	0x3f, r24	; 63
 642:	08 95       	ret

00000644 <GLOBALINTTERUPTS_Disable>:
/**
* @brief: This function disables global interrupts.
*/
void GLOBALINTTERUPTS_Disable(void)
{
   GLOBAL_INTERRUPTS_CONTROL_R &= ~(GLOBAL_INTERRUPT_BIT);
 644:	8f b7       	in	r24, 0x3f	; 63
 646:	8f 77       	andi	r24, 0x7F	; 127
 648:	8f bf       	out	0x3f, r24	; 63
 64a:	08 95       	ret

0000064c <I2C_Init>:
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
 64c:	81 11       	cpse	r24, r1
 64e:	08 c0       	rjmp	.+16     	; 0x660 <I2C_Init+0x14>
 650:	83 e0       	ldi	r24, 0x03	; 3
 652:	81 b9       	out	0x01, r24	; 1
 654:	87 e0       	ldi	r24, 0x07	; 7
 656:	80 b9       	out	0x00, r24	; 0
 658:	84 e0       	ldi	r24, 0x04	; 4
 65a:	86 bf       	out	0x36, r24	; 54
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	08 95       	ret
 660:	82 e0       	ldi	r24, 0x02	; 2
 662:	08 95       	ret

00000664 <I2C_Start>:
 664:	81 11       	cpse	r24, r1
 666:	07 c0       	rjmp	.+14     	; 0x676 <I2C_Start+0x12>
 668:	84 ea       	ldi	r24, 0xA4	; 164
 66a:	86 bf       	out	0x36, r24	; 54
 66c:	06 b6       	in	r0, 0x36	; 54
 66e:	07 fe       	sbrs	r0, 7
 670:	fd cf       	rjmp	.-6      	; 0x66c <I2C_Start+0x8>
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	08 95       	ret
 676:	82 e0       	ldi	r24, 0x02	; 2
 678:	08 95       	ret

0000067a <I2C_RepeatedStart>:
 67a:	81 11       	cpse	r24, r1
 67c:	0a c0       	rjmp	.+20     	; 0x692 <I2C_RepeatedStart+0x18>
 67e:	84 e0       	ldi	r24, 0x04	; 4
 680:	86 bf       	out	0x36, r24	; 54
 682:	86 b7       	in	r24, 0x36	; 54
 684:	80 6a       	ori	r24, 0xA0	; 160
 686:	86 bf       	out	0x36, r24	; 54
 688:	06 b6       	in	r0, 0x36	; 54
 68a:	07 fe       	sbrs	r0, 7
 68c:	fd cf       	rjmp	.-6      	; 0x688 <I2C_RepeatedStart+0xe>
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	08 95       	ret
 692:	82 e0       	ldi	r24, 0x02	; 2
 694:	08 95       	ret

00000696 <I2C_Write>:
 696:	81 11       	cpse	r24, r1
 698:	09 c0       	rjmp	.+18     	; 0x6ac <I2C_Write+0x16>
 69a:	63 b9       	out	0x03, r22	; 3
 69c:	86 b7       	in	r24, 0x36	; 54
 69e:	84 68       	ori	r24, 0x84	; 132
 6a0:	86 bf       	out	0x36, r24	; 54
 6a2:	06 b6       	in	r0, 0x36	; 54
 6a4:	07 fe       	sbrs	r0, 7
 6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <I2C_Write+0xc>
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	08 95       	ret
 6ac:	82 e0       	ldi	r24, 0x02	; 2
 6ae:	08 95       	ret

000006b0 <I2C_ReadNoAck>:
* @return function error state.
*/
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
 6b0:	61 15       	cp	r22, r1
 6b2:	71 05       	cpc	r23, r1
 6b4:	69 f0       	breq	.+26     	; 0x6d0 <I2C_ReadNoAck+0x20>
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CDataR;
   
   switch(I2C_CH)
 6b6:	81 11       	cpse	r24, r1
 6b8:	0d c0       	rjmp	.+26     	; 0x6d4 <I2C_ReadNoAck+0x24>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* start receiving and don't send ack at end. */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_EN);
 6ba:	86 b7       	in	r24, 0x36	; 54
 6bc:	84 68       	ori	r24, 0x84	; 132
 6be:	86 bf       	out	0x36, r24	; 54
   /* loop until interrupt flag is raised */
   while (!(*ptr_I2CControlR & I2C_INTERRUPT_FLAG));
 6c0:	06 b6       	in	r0, 0x36	; 54
 6c2:	07 fe       	sbrs	r0, 7
 6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <I2C_ReadNoAck+0x10>
   /* return data received */
   *Data = *ptr_I2CDataR;
 6c6:	83 b1       	in	r24, 0x03	; 3
 6c8:	fb 01       	movw	r30, r22
 6ca:	80 83       	st	Z, r24
   
   /* return success message */
   return E_I2C_SUCCESS;
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	08 95       	ret
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
   {
      return E_I2C_NULL_PTR;
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	08 95       	ret
         ptr_I2CDataR = &I2C_DATA_R;
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
 6d4:	82 e0       	ldi	r24, 0x02	; 2
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
 6d6:	08 95       	ret

000006d8 <I2C_Stop>:
I2C_ERROR_state_t I2C_Stop(uint8_t I2C_CH)
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   switch(I2C_CH)
 6d8:	81 11       	cpse	r24, r1
 6da:	08 c0       	rjmp	.+16     	; 0x6ec <I2C_Stop+0x14>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set stop condition */
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
 6dc:	84 e9       	ldi	r24, 0x94	; 148
 6de:	86 bf       	out	0x36, r24	; 54
   
   while (*ptr_I2CControlR & I2C_STOP_BIT);
 6e0:	96 b7       	in	r25, 0x36	; 54
 6e2:	89 2f       	mov	r24, r25
 6e4:	80 71       	andi	r24, 0x10	; 16
 6e6:	94 fd       	sbrc	r25, 4
 6e8:	fb cf       	rjmp	.-10     	; 0x6e0 <I2C_Stop+0x8>
 6ea:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
 6ec:	82 e0       	ldi	r24, 0x02	; 2
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
   
   while (*ptr_I2CControlR & I2C_STOP_BIT);
   /* return success message */
   return E_I2C_SUCCESS;
}
 6ee:	08 95       	ret

000006f0 <SPI_Init>:
{
	uint8_t ErrRetVal = OperationStarted;
	CLEAR_BIT(SPI_ControlReg, InterruptEnable_BIT);
	ErrRetVal = OperationSuccess;
	return ErrRetVal;
}
 6f0:	82 30       	cpi	r24, 0x02	; 2
 6f2:	d8 f4       	brcc	.+54     	; 0x72a <SPI_Init+0x3a>
 6f4:	1d b8       	out	0x0d, r1	; 13
 6f6:	8d b1       	in	r24, 0x0d	; 13
 6f8:	8f 7e       	andi	r24, 0xEF	; 239
 6fa:	8d b9       	out	0x0d, r24	; 13
 6fc:	41 e0       	ldi	r20, 0x01	; 1
 6fe:	66 e0       	ldi	r22, 0x06	; 6
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	0e 94 92 02 	call	0x524	; 0x524 <DIO_SetPinDirection>
 706:	8d b1       	in	r24, 0x0d	; 13
 708:	84 60       	ori	r24, 0x04	; 4
 70a:	8d b9       	out	0x0d, r24	; 13
 70c:	8d b1       	in	r24, 0x0d	; 13
 70e:	87 7f       	andi	r24, 0xF7	; 247
 710:	8d b9       	out	0x0d, r24	; 13
 712:	8d b1       	in	r24, 0x0d	; 13
 714:	8f 7d       	andi	r24, 0xDF	; 223
 716:	8d b9       	out	0x0d, r24	; 13
 718:	8e b1       	in	r24, 0x0e	; 14
 71a:	8e b1       	in	r24, 0x0e	; 14
 71c:	8f b1       	in	r24, 0x0f	; 15
 71e:	1f b8       	out	0x0f, r1	; 15
 720:	8d b1       	in	r24, 0x0d	; 13
 722:	80 64       	ori	r24, 0x40	; 64
 724:	8d b9       	out	0x0d, r24	; 13
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	08 95       	ret
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	08 95       	ret

0000072e <SPI_TransmitChar>:
 72e:	1f 93       	push	r17
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	1f 92       	push	r1
 736:	cd b7       	in	r28, 0x3d	; 61
 738:	de b7       	in	r29, 0x3e	; 62
 73a:	16 2f       	mov	r17, r22
 73c:	19 82       	std	Y+1, r1	; 0x01
 73e:	ae 01       	movw	r20, r28
 740:	4f 5f       	subi	r20, 0xFF	; 255
 742:	5f 4f       	sbci	r21, 0xFF	; 255
 744:	64 e0       	ldi	r22, 0x04	; 4
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <DIO_ReadPin>
 74c:	89 81       	ldd	r24, Y+1	; 0x01
 74e:	88 23       	and	r24, r24
 750:	31 f0       	breq	.+12     	; 0x75e <SPI_TransmitChar+0x30>
 752:	1f b9       	out	0x0f, r17	; 15
 754:	76 9b       	sbis	0x0e, 6	; 14
 756:	05 c0       	rjmp	.+10     	; 0x762 <SPI_TransmitChar+0x34>
 758:	8f b1       	in	r24, 0x0f	; 15
 75a:	84 e0       	ldi	r24, 0x04	; 4
 75c:	03 c0       	rjmp	.+6      	; 0x764 <SPI_TransmitChar+0x36>
 75e:	85 e0       	ldi	r24, 0x05	; 5
 760:	01 c0       	rjmp	.+2      	; 0x764 <SPI_TransmitChar+0x36>
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	0f 90       	pop	r0
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	08 95       	ret

0000076e <SPI_ReceiveChar>:
 76e:	77 9b       	sbis	0x0e, 7	; 14
 770:	05 c0       	rjmp	.+10     	; 0x77c <SPI_ReceiveChar+0xe>
 772:	8f b1       	in	r24, 0x0f	; 15
 774:	fb 01       	movw	r30, r22
 776:	80 83       	st	Z, r24
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	08 95       	ret
 77c:	85 e0       	ldi	r24, 0x05	; 5
 77e:	08 95       	ret

00000780 <SPI_DataExchange>:
 780:	1f 93       	push	r17
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	16 2f       	mov	r17, r22
 788:	ea 01       	movw	r28, r20
 78a:	41 e0       	ldi	r20, 0x01	; 1
 78c:	61 2f       	mov	r22, r17
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_TransmitChar>
 794:	81 11       	cpse	r24, r1
 796:	f9 cf       	rjmp	.-14     	; 0x78a <SPI_DataExchange+0xa>
 798:	41 e0       	ldi	r20, 0x01	; 1
 79a:	be 01       	movw	r22, r28
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	0e 94 b7 03 	call	0x76e	; 0x76e <SPI_ReceiveChar>
 7a2:	81 11       	cpse	r24, r1
 7a4:	f9 cf       	rjmp	.-14     	; 0x798 <SPI_DataExchange+0x18>
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	1f 91       	pop	r17
 7ac:	08 95       	ret

000007ae <SPI_TransmitString>:
 7ae:	ef 92       	push	r14
 7b0:	ff 92       	push	r15
 7b2:	0f 93       	push	r16
 7b4:	1f 93       	push	r17
 7b6:	cf 93       	push	r28
 7b8:	df 93       	push	r29
 7ba:	1f 92       	push	r1
 7bc:	cd b7       	in	r28, 0x3d	; 61
 7be:	de b7       	in	r29, 0x3e	; 62
 7c0:	e8 2e       	mov	r14, r24
 7c2:	8b 01       	movw	r16, r22
 7c4:	f4 2e       	mov	r15, r20
 7c6:	19 82       	std	Y+1, r1	; 0x01
 7c8:	f8 01       	movw	r30, r16
 7ca:	80 81       	ld	r24, Z
 7cc:	81 11       	cpse	r24, r1
 7ce:	0b c0       	rjmp	.+22     	; 0x7e6 <SPI_TransmitString+0x38>
 7d0:	2f 2d       	mov	r18, r15
 7d2:	ae 01       	movw	r20, r28
 7d4:	4f 5f       	subi	r20, 0xFF	; 255
 7d6:	5f 4f       	sbci	r21, 0xFF	; 255
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	8e 2d       	mov	r24, r14
 7dc:	0e 94 c0 03 	call	0x780	; 0x780 <SPI_DataExchange>
 7e0:	81 11       	cpse	r24, r1
 7e2:	f6 cf       	rjmp	.-20     	; 0x7d0 <SPI_TransmitString+0x22>
 7e4:	0e c0       	rjmp	.+28     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7e6:	2f 2d       	mov	r18, r15
 7e8:	ae 01       	movw	r20, r28
 7ea:	4f 5f       	subi	r20, 0xFF	; 255
 7ec:	5f 4f       	sbci	r21, 0xFF	; 255
 7ee:	f8 01       	movw	r30, r16
 7f0:	60 81       	ld	r22, Z
 7f2:	8e 2d       	mov	r24, r14
 7f4:	0e 94 c0 03 	call	0x780	; 0x780 <SPI_DataExchange>
 7f8:	81 11       	cpse	r24, r1
 7fa:	f5 cf       	rjmp	.-22     	; 0x7e6 <SPI_TransmitString+0x38>
 7fc:	0f 5f       	subi	r16, 0xFF	; 255
 7fe:	1f 4f       	sbci	r17, 0xFF	; 255
 800:	e3 cf       	rjmp	.-58     	; 0x7c8 <SPI_TransmitString+0x1a>
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	0f 90       	pop	r0
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	ff 90       	pop	r15
 810:	ef 90       	pop	r14
 812:	08 95       	ret

00000814 <SPI_EnableInterrupt>:
 814:	8f b7       	in	r24, 0x3f	; 63
 816:	80 68       	ori	r24, 0x80	; 128
 818:	8f bf       	out	0x3f, r24	; 63
 81a:	8d b1       	in	r24, 0x0d	; 13
 81c:	80 68       	ori	r24, 0x80	; 128
 81e:	8d b9       	out	0x0d, r24	; 13
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	08 95       	ret

00000824 <SPI_Set_TX_CompleteCallback>:

uint8_t SPI_Set_TX_CompleteCallback(uint8_t SpiNumber,void(*callBack)(void))
{
	uint8_t ErrRetVal = 0;
		if (callBack != NULL_PTR)
 824:	61 15       	cp	r22, r1
 826:	71 05       	cpc	r23, r1
 828:	21 f0       	breq	.+8      	; 0x832 <SPI_Set_TX_CompleteCallback+0xe>
			SPI_TX_Complete_callback = callBack;
 82a:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <SPI_TX_Complete_callback+0x1>
 82e:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <SPI_TX_Complete_callback>
		return ErrRetVal;
}
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	08 95       	ret

00000836 <__vector_12>:

void __vector_12(void)
{
 836:	1f 92       	push	r1
 838:	0f 92       	push	r0
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	0f 92       	push	r0
 83e:	11 24       	eor	r1, r1
 840:	2f 93       	push	r18
 842:	3f 93       	push	r19
 844:	4f 93       	push	r20
 846:	5f 93       	push	r21
 848:	6f 93       	push	r22
 84a:	7f 93       	push	r23
 84c:	8f 93       	push	r24
 84e:	9f 93       	push	r25
 850:	af 93       	push	r26
 852:	bf 93       	push	r27
 854:	ef 93       	push	r30
 856:	ff 93       	push	r31
	if (SPI_TX_Complete_callback != NULL_PTR)
 858:	e0 91 7d 02 	lds	r30, 0x027D	; 0x80027d <SPI_TX_Complete_callback>
 85c:	f0 91 7e 02 	lds	r31, 0x027E	; 0x80027e <SPI_TX_Complete_callback+0x1>
 860:	30 97       	sbiw	r30, 0x00	; 0
 862:	09 f0       	breq	.+2      	; 0x866 <__stack+0x7>
		SPI_TX_Complete_callback();
 864:	09 95       	icall
}
 866:	ff 91       	pop	r31
 868:	ef 91       	pop	r30
 86a:	bf 91       	pop	r27
 86c:	af 91       	pop	r26
 86e:	9f 91       	pop	r25
 870:	8f 91       	pop	r24
 872:	7f 91       	pop	r23
 874:	6f 91       	pop	r22
 876:	5f 91       	pop	r21
 878:	4f 91       	pop	r20
 87a:	3f 91       	pop	r19
 87c:	2f 91       	pop	r18
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	0f 90       	pop	r0
 884:	1f 90       	pop	r1
 886:	18 95       	reti

00000888 <UART_Init>:
		break;
	default:
		break;
	}
	return 0;
}
 888:	8a b1       	in	r24, 0x0a	; 10
 88a:	80 61       	ori	r24, 0x10	; 16
 88c:	8a b9       	out	0x0a, r24	; 10
 88e:	8a b1       	in	r24, 0x0a	; 10
 890:	88 60       	ori	r24, 0x08	; 8
 892:	8a b9       	out	0x0a, r24	; 10
 894:	8b b1       	in	r24, 0x0b	; 11
 896:	8d 7f       	andi	r24, 0xFD	; 253
 898:	8b b9       	out	0x0b, r24	; 11
 89a:	8a b1       	in	r24, 0x0a	; 10
 89c:	8b 7f       	andi	r24, 0xFB	; 251
 89e:	8a b9       	out	0x0a, r24	; 10
 8a0:	80 b5       	in	r24, 0x20	; 32
 8a2:	86 68       	ori	r24, 0x86	; 134
 8a4:	80 bd       	out	0x20, r24	; 32
 8a6:	83 e3       	ldi	r24, 0x33	; 51
 8a8:	89 b9       	out	0x09, r24	; 9
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	08 95       	ret

000008ae <UART_TransmitString>:
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	04 c0       	rjmp	.+8      	; 0x8ba <UART_TransmitString+0xc>
 8b2:	9c b9       	out	0x0c, r25	; 12
 8b4:	5d 9b       	sbis	0x0b, 5	; 11
 8b6:	fe cf       	rjmp	.-4      	; 0x8b4 <UART_TransmitString+0x6>
 8b8:	8f 5f       	subi	r24, 0xFF	; 255
 8ba:	fb 01       	movw	r30, r22
 8bc:	e8 0f       	add	r30, r24
 8be:	f1 1d       	adc	r31, r1
 8c0:	90 81       	ld	r25, Z
 8c2:	91 11       	cpse	r25, r1
 8c4:	f6 cf       	rjmp	.-20     	; 0x8b2 <UART_TransmitString+0x4>
 8c6:	8d e0       	ldi	r24, 0x0D	; 13
 8c8:	8c b9       	out	0x0c, r24	; 12
 8ca:	5d 9b       	sbis	0x0b, 5	; 11
 8cc:	fe cf       	rjmp	.-4      	; 0x8ca <UART_TransmitString+0x1c>
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	08 95       	ret

000008d2 <UART_ReceiveString>:
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <UART_ReceiveString+0x8>
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	98 2f       	mov	r25, r24
 8da:	5f 9b       	sbis	0x0b, 7	; 11
 8dc:	fe cf       	rjmp	.-4      	; 0x8da <UART_ReceiveString+0x8>
 8de:	fb 01       	movw	r30, r22
 8e0:	e9 0f       	add	r30, r25
 8e2:	f1 1d       	adc	r31, r1
 8e4:	8c b1       	in	r24, 0x0c	; 12
 8e6:	80 83       	st	Z, r24
 8e8:	8d 30       	cpi	r24, 0x0D	; 13
 8ea:	99 f0       	breq	.+38     	; 0x912 <UART_ReceiveString+0x40>
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	89 0f       	add	r24, r25
 8f0:	fb 01       	movw	r30, r22
 8f2:	e8 0f       	add	r30, r24
 8f4:	f1 1d       	adc	r31, r1
 8f6:	31 97       	sbiw	r30, 0x01	; 1
 8f8:	20 81       	ld	r18, Z
 8fa:	28 30       	cpi	r18, 0x08	; 8
 8fc:	29 f4       	brne	.+10     	; 0x908 <UART_ReceiveString+0x36>
 8fe:	82 30       	cpi	r24, 0x02	; 2
 900:	18 f0       	brcs	.+6      	; 0x908 <UART_ReceiveString+0x36>
 902:	8f ef       	ldi	r24, 0xFF	; 255
 904:	89 0f       	add	r24, r25
 906:	e8 cf       	rjmp	.-48     	; 0x8d8 <UART_ReceiveString+0x6>
 908:	28 30       	cpi	r18, 0x08	; 8
 90a:	31 f7       	brne	.-52     	; 0x8d8 <UART_ReceiveString+0x6>
 90c:	82 30       	cpi	r24, 0x02	; 2
 90e:	20 f7       	brcc	.-56     	; 0x8d8 <UART_ReceiveString+0x6>
 910:	e2 cf       	rjmp	.-60     	; 0x8d6 <UART_ReceiveString+0x4>
 912:	10 82       	st	Z, r1
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	08 95       	ret

00000918 <UART_EnableInterrupt>:
 918:	81 11       	cpse	r24, r1
 91a:	11 c0       	rjmp	.+34     	; 0x93e <UART_EnableInterrupt+0x26>
 91c:	61 30       	cpi	r22, 0x01	; 1
 91e:	41 f0       	breq	.+16     	; 0x930 <UART_EnableInterrupt+0x18>
 920:	18 f0       	brcs	.+6      	; 0x928 <UART_EnableInterrupt+0x10>
 922:	62 30       	cpi	r22, 0x02	; 2
 924:	49 f0       	breq	.+18     	; 0x938 <UART_EnableInterrupt+0x20>
 926:	0b c0       	rjmp	.+22     	; 0x93e <UART_EnableInterrupt+0x26>
 928:	8a b1       	in	r24, 0x0a	; 10
 92a:	80 68       	ori	r24, 0x80	; 128
 92c:	8a b9       	out	0x0a, r24	; 10
 92e:	07 c0       	rjmp	.+14     	; 0x93e <UART_EnableInterrupt+0x26>
 930:	8a b1       	in	r24, 0x0a	; 10
 932:	80 64       	ori	r24, 0x40	; 64
 934:	8a b9       	out	0x0a, r24	; 10
 936:	03 c0       	rjmp	.+6      	; 0x93e <UART_EnableInterrupt+0x26>
 938:	8a b1       	in	r24, 0x0a	; 10
 93a:	80 62       	ori	r24, 0x20	; 32
 93c:	8a b9       	out	0x0a, r24	; 10
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	08 95       	ret

00000942 <UART_SetCallback>:
uint8_t UART_SetCallback(uint8_t UartNumber,uint8_t UartInterruptType,Ptr_VoidFuncVoid_t Callback){
	switch (UartNumber) {
 942:	81 11       	cpse	r24, r1
 944:	14 c0       	rjmp	.+40     	; 0x96e <UART_SetCallback+0x2c>
	case UART_1 :
		switch (UartInterruptType) {
 946:	61 30       	cpi	r22, 0x01	; 1
 948:	49 f0       	breq	.+18     	; 0x95c <UART_SetCallback+0x1a>
 94a:	18 f0       	brcs	.+6      	; 0x952 <UART_SetCallback+0x10>
 94c:	62 30       	cpi	r22, 0x02	; 2
 94e:	59 f0       	breq	.+22     	; 0x966 <UART_SetCallback+0x24>
 950:	0e c0       	rjmp	.+28     	; 0x96e <UART_SetCallback+0x2c>
		case RECIVE_INT :
			Gptr_uartRxInt=Callback;
 952:	50 93 80 02 	sts	0x0280, r21	; 0x800280 <Gptr_uartRxInt+0x1>
 956:	40 93 7f 02 	sts	0x027F, r20	; 0x80027f <Gptr_uartRxInt>
			break;
 95a:	09 c0       	rjmp	.+18     	; 0x96e <UART_SetCallback+0x2c>
		case TRANSMIT_INT :
			Gptr_uartTxInt=Callback;
 95c:	50 93 82 02 	sts	0x0282, r21	; 0x800282 <Gptr_uartTxInt+0x1>
 960:	40 93 81 02 	sts	0x0281, r20	; 0x800281 <Gptr_uartTxInt>
			break;
 964:	04 c0       	rjmp	.+8      	; 0x96e <UART_SetCallback+0x2c>
		case EMPTY_BUFFERR_INT :
			Gptr_uartDataEmptyRegInt=Callback;
 966:	50 93 84 02 	sts	0x0284, r21	; 0x800284 <Gptr_uartDataEmptyRegInt+0x1>
 96a:	40 93 83 02 	sts	0x0283, r20	; 0x800283 <Gptr_uartDataEmptyRegInt>
	default:
		break;
	}
	return 0;

}
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	08 95       	ret

00000972 <UART_GetData>:

uint8_t UART_GetData(uint8_t UartNumber, ptr_uint8_t RxChar) {

   *(RxChar) = (uint8_t) UDR;
 972:	8c b1       	in	r24, 0x0c	; 12
 974:	fb 01       	movw	r30, r22
 976:	80 83       	st	Z, r24

   return 0;
}
 978:	80 e0       	ldi	r24, 0x00	; 0
 97a:	08 95       	ret

0000097c <__vector_13>:

void __vector_13(void) __attribute__((signal)); // USART, Rx Complete
void __vector_13(void) {
 97c:	1f 92       	push	r1
 97e:	0f 92       	push	r0
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	0f 92       	push	r0
 984:	11 24       	eor	r1, r1
 986:	2f 93       	push	r18
 988:	3f 93       	push	r19
 98a:	4f 93       	push	r20
 98c:	5f 93       	push	r21
 98e:	6f 93       	push	r22
 990:	7f 93       	push	r23
 992:	8f 93       	push	r24
 994:	9f 93       	push	r25
 996:	af 93       	push	r26
 998:	bf 93       	push	r27
 99a:	ef 93       	push	r30
 99c:	ff 93       	push	r31
	Gptr_uartRxInt();
 99e:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <Gptr_uartRxInt>
 9a2:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <Gptr_uartRxInt+0x1>
 9a6:	09 95       	icall
}
 9a8:	ff 91       	pop	r31
 9aa:	ef 91       	pop	r30
 9ac:	bf 91       	pop	r27
 9ae:	af 91       	pop	r26
 9b0:	9f 91       	pop	r25
 9b2:	8f 91       	pop	r24
 9b4:	7f 91       	pop	r23
 9b6:	6f 91       	pop	r22
 9b8:	5f 91       	pop	r21
 9ba:	4f 91       	pop	r20
 9bc:	3f 91       	pop	r19
 9be:	2f 91       	pop	r18
 9c0:	0f 90       	pop	r0
 9c2:	0f be       	out	0x3f, r0	; 63
 9c4:	0f 90       	pop	r0
 9c6:	1f 90       	pop	r1
 9c8:	18 95       	reti

000009ca <__vector_14>:
void __vector_14(void) __attribute__((signal)); // USART Data Register Empty
void __vector_14(void) {
 9ca:	1f 92       	push	r1
 9cc:	0f 92       	push	r0
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	0f 92       	push	r0
 9d2:	11 24       	eor	r1, r1
 9d4:	2f 93       	push	r18
 9d6:	3f 93       	push	r19
 9d8:	4f 93       	push	r20
 9da:	5f 93       	push	r21
 9dc:	6f 93       	push	r22
 9de:	7f 93       	push	r23
 9e0:	8f 93       	push	r24
 9e2:	9f 93       	push	r25
 9e4:	af 93       	push	r26
 9e6:	bf 93       	push	r27
 9e8:	ef 93       	push	r30
 9ea:	ff 93       	push	r31
	Gptr_uartDataEmptyRegInt();
 9ec:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <Gptr_uartDataEmptyRegInt>
 9f0:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <Gptr_uartDataEmptyRegInt+0x1>
 9f4:	09 95       	icall
}
 9f6:	ff 91       	pop	r31
 9f8:	ef 91       	pop	r30
 9fa:	bf 91       	pop	r27
 9fc:	af 91       	pop	r26
 9fe:	9f 91       	pop	r25
 a00:	8f 91       	pop	r24
 a02:	7f 91       	pop	r23
 a04:	6f 91       	pop	r22
 a06:	5f 91       	pop	r21
 a08:	4f 91       	pop	r20
 a0a:	3f 91       	pop	r19
 a0c:	2f 91       	pop	r18
 a0e:	0f 90       	pop	r0
 a10:	0f be       	out	0x3f, r0	; 63
 a12:	0f 90       	pop	r0
 a14:	1f 90       	pop	r1
 a16:	18 95       	reti

00000a18 <__vector_15>:
void __vector_15(void) __attribute__((signal)); // USART, Tx Complete
void __vector_15(void) {
 a18:	1f 92       	push	r1
 a1a:	0f 92       	push	r0
 a1c:	0f b6       	in	r0, 0x3f	; 63
 a1e:	0f 92       	push	r0
 a20:	11 24       	eor	r1, r1
 a22:	2f 93       	push	r18
 a24:	3f 93       	push	r19
 a26:	4f 93       	push	r20
 a28:	5f 93       	push	r21
 a2a:	6f 93       	push	r22
 a2c:	7f 93       	push	r23
 a2e:	8f 93       	push	r24
 a30:	9f 93       	push	r25
 a32:	af 93       	push	r26
 a34:	bf 93       	push	r27
 a36:	ef 93       	push	r30
 a38:	ff 93       	push	r31
	Gptr_uartTxInt();
 a3a:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <Gptr_uartTxInt>
 a3e:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <Gptr_uartTxInt+0x1>
 a42:	09 95       	icall
}
 a44:	ff 91       	pop	r31
 a46:	ef 91       	pop	r30
 a48:	bf 91       	pop	r27
 a4a:	af 91       	pop	r26
 a4c:	9f 91       	pop	r25
 a4e:	8f 91       	pop	r24
 a50:	7f 91       	pop	r23
 a52:	6f 91       	pop	r22
 a54:	5f 91       	pop	r21
 a56:	4f 91       	pop	r20
 a58:	3f 91       	pop	r19
 a5a:	2f 91       	pop	r18
 a5c:	0f 90       	pop	r0
 a5e:	0f be       	out	0x3f, r0	; 63
 a60:	0f 90       	pop	r0
 a62:	1f 90       	pop	r1
 a64:	18 95       	reti

00000a66 <_exit>:
 a66:	f8 94       	cli

00000a68 <__stop_program>:
 a68:	ff cf       	rjmp	.-2      	; 0xa68 <__stop_program>
