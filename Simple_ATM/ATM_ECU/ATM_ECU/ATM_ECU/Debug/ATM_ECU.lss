
ATM_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000558  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000558  000005ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800096  00800096  00000622  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f0  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000912  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad0  00000000  00000000  00002502  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00002fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e7  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ffc  00000000  00000000  00003a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004a93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_12>
  34:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_13>
  38:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_14>
  3c:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3a       	cpi	r26, 0xAD	; 173
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8a:	0c 94 aa 02 	jmp	0x554	; 0x554 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <dummy_delay+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <dummy_delay+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
  9e:	1a 82       	std	Y+2, r1	; 0x02
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	15 c0       	rjmp	.+42     	; 0xce <dummy_delay+0x3c>
   {
      for(volatile uint8_t j=0; j<32; j++)
  a4:	1c 82       	std	Y+4, r1	; 0x04
  a6:	0b c0       	rjmp	.+22     	; 0xbe <dummy_delay+0x2c>
      {
         for(volatile uint8_t k=0; k<32; k++)
  a8:	1b 82       	std	Y+3, r1	; 0x03
  aa:	03 c0       	rjmp	.+6      	; 0xb2 <dummy_delay+0x20>
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	8b 83       	std	Y+3, r24	; 0x03
  b2:	8b 81       	ldd	r24, Y+3	; 0x03
  b4:	80 32       	cpi	r24, 0x20	; 32
  b6:	d0 f3       	brcs	.-12     	; 0xac <dummy_delay+0x1a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
  b8:	8c 81       	ldd	r24, Y+4	; 0x04
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	8c 83       	std	Y+4, r24	; 0x04
  be:	8c 81       	ldd	r24, Y+4	; 0x04
  c0:	80 32       	cpi	r24, 0x20	; 32
  c2:	90 f3       	brcs	.-28     	; 0xa8 <dummy_delay+0x16>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	9a 81       	ldd	r25, Y+2	; 0x02
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	9a 83       	std	Y+2, r25	; 0x02
  cc:	89 83       	std	Y+1, r24	; 0x01
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	9a 81       	ldd	r25, Y+2	; 0x02
  d2:	84 36       	cpi	r24, 0x64	; 100
  d4:	91 05       	cpc	r25, r1
  d6:	30 f3       	brcs	.-52     	; 0xa4 <dummy_delay+0x12>
         {
            
         }
      }
   }
}
  d8:	0f 90       	pop	r0
  da:	0f 90       	pop	r0
  dc:	0f 90       	pop	r0
  de:	0f 90       	pop	r0
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <main>:
uint8_t PAN[10];
uint8_t PIN[5];

int main(void)
{
   SPI_Init(SPIChannel_1);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_Init>
   UART_Init(UART_1);
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 10 02 	call	0x420	; 0x420 <UART_Init>
   
   dummy_delay();
  f2:	0e 94 49 00 	call	0x92	; 0x92 <dummy_delay>
   dummy_delay();
  f6:	0e 94 49 00 	call	0x92	; 0x92 <dummy_delay>
   dummy_delay();
  fa:	0e 94 49 00 	call	0x92	; 0x92 <dummy_delay>
   dummy_delay();
  fe:	0e 94 49 00 	call	0x92	; 0x92 <dummy_delay>
   
   UART_TransmitString(UART_1, "Starting SPI Transmission");
 102:	60 e6       	ldi	r22, 0x60	; 96
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 23 02 	call	0x446	; 0x446 <UART_TransmitString>
   
   SPI_ReceiveString(SPIChannel_1, PAN, SlaveID_1);
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	68 e9       	ldi	r22, 0x98	; 152
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 c4 01 	call	0x388	; 0x388 <SPI_ReceiveString>
   SPI_ReceiveString(SPIChannel_1, PIN, SlaveID_1);
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	62 ea       	ldi	r22, 0xA2	; 162
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 c4 01 	call	0x388	; 0x388 <SPI_ReceiveString>

   UART_TransmitString(UART_1, "Received PAN:");
 124:	6a e7       	ldi	r22, 0x7A	; 122
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 23 02 	call	0x446	; 0x446 <UART_TransmitString>
   UART_TransmitString(UART_1, PAN);
 12e:	68 e9       	ldi	r22, 0x98	; 152
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 23 02 	call	0x446	; 0x446 <UART_TransmitString>
   UART_TransmitString(UART_1, "Received PIN:");
 138:	68 e8       	ldi	r22, 0x88	; 136
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 23 02 	call	0x446	; 0x446 <UART_TransmitString>
   UART_TransmitString(UART_1, PIN);
 142:	62 ea       	ldi	r22, 0xA2	; 162
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 23 02 	call	0x446	; 0x446 <UART_TransmitString>
 14c:	ff cf       	rjmp	.-2      	; 0x14c <main+0x66>

0000014e <DIO_SetPinDirection>:

#include "DIO.h"

uint8_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	switch(PortName)
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	d1 f0       	breq	.+52     	; 0x186 <DIO_SetPinDirection+0x38>
 152:	28 f0       	brcs	.+10     	; 0x15e <DIO_SetPinDirection+0x10>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	59 f1       	breq	.+86     	; 0x1ae <DIO_SetPinDirection+0x60>
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	e9 f1       	breq	.+122    	; 0x1d6 <DIO_SetPinDirection+0x88>
 15c:	08 95       	ret
	{
		case PORT_A:
			BIT_WRITE(DDRA,PinNo,PinDirection);
 15e:	2a b3       	in	r18, 0x1a	; 26
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	06 2e       	mov	r0, r22
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_SetPinDirection+0x1e>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_SetPinDirection+0x1a>
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SetPinDirection+0x2a>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_SetPinDirection+0x26>
 17c:	80 95       	com	r24
 17e:	82 23       	and	r24, r18
 180:	48 2b       	or	r20, r24
 182:	4a bb       	out	0x1a, r20	; 26
			break;
 184:	08 95       	ret
		case PORT_B:
			BIT_WRITE(DDRB,PinNo,PinDirection);
 186:	27 b3       	in	r18, 0x17	; 23
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	06 2e       	mov	r0, r22
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_SetPinDirection+0x46>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	0a 94       	dec	r0
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_SetPinDirection+0x42>
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinDirection+0x52>
 19c:	44 0f       	add	r20, r20
 19e:	55 1f       	adc	r21, r21
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinDirection+0x4e>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	48 2b       	or	r20, r24
 1aa:	47 bb       	out	0x17, r20	; 23
			break;
 1ac:	08 95       	ret
		case PORT_C:
			BIT_WRITE(DDRC,PinNo,PinDirection);
 1ae:	24 b3       	in	r18, 0x14	; 20
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	06 2e       	mov	r0, r22
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_SetPinDirection+0x6e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	0a 94       	dec	r0
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_SetPinDirection+0x6a>
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_SetPinDirection+0x7a>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_SetPinDirection+0x76>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	48 2b       	or	r20, r24
 1d2:	44 bb       	out	0x14, r20	; 20
			break;
 1d4:	08 95       	ret
		case PORT_D:
			BIT_WRITE(DDRD,PinNo,PinDirection);
 1d6:	21 b3       	in	r18, 0x11	; 17
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	06 2e       	mov	r0, r22
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPinDirection+0x96>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPinDirection+0x92>
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_SetPinDirection+0xa2>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_SetPinDirection+0x9e>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	48 2b       	or	r20, r24
 1fa:	41 bb       	out	0x11, r20	; 17
			break;
		default:
			break;
	}
}
 1fc:	08 95       	ret

000001fe <DIO_WritePin>:

uint8_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	switch(PortName)
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	d1 f0       	breq	.+52     	; 0x236 <DIO_WritePin+0x38>
 202:	28 f0       	brcs	.+10     	; 0x20e <DIO_WritePin+0x10>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	59 f1       	breq	.+86     	; 0x25e <DIO_WritePin+0x60>
 208:	83 30       	cpi	r24, 0x03	; 3
 20a:	e9 f1       	breq	.+122    	; 0x286 <DIO_WritePin+0x88>
 20c:	08 95       	ret
	{
		case PORT_A:
			BIT_WRITE(PORTA,PinNo,PinValue);
 20e:	2b b3       	in	r18, 0x1b	; 27
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	06 2e       	mov	r0, r22
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_WritePin+0x1e>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_WritePin+0x1a>
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_WritePin+0x2a>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_WritePin+0x26>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	48 2b       	or	r20, r24
 232:	4b bb       	out	0x1b, r20	; 27
			break;
 234:	08 95       	ret
		case PORT_B:
			BIT_WRITE(PORTB,PinNo,PinValue);
 236:	28 b3       	in	r18, 0x18	; 24
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	06 2e       	mov	r0, r22
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_WritePin+0x46>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_WritePin+0x42>
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_WritePin+0x52>
 24c:	44 0f       	add	r20, r20
 24e:	55 1f       	adc	r21, r21
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_WritePin+0x4e>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	48 2b       	or	r20, r24
 25a:	48 bb       	out	0x18, r20	; 24
			break;
 25c:	08 95       	ret
		case PORT_C:
			BIT_WRITE(PORTC,PinNo,PinValue);
 25e:	25 b3       	in	r18, 0x15	; 21
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	06 2e       	mov	r0, r22
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_WritePin+0x6e>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	0a 94       	dec	r0
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_WritePin+0x6a>
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_WritePin+0x7a>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_WritePin+0x76>
 27c:	80 95       	com	r24
 27e:	82 23       	and	r24, r18
 280:	48 2b       	or	r20, r24
 282:	45 bb       	out	0x15, r20	; 21
			break;
 284:	08 95       	ret
		case PORT_D:
			BIT_WRITE(PORTD,PinNo,PinValue);
 286:	22 b3       	in	r18, 0x12	; 18
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	06 2e       	mov	r0, r22
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_WritePin+0x96>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	0a 94       	dec	r0
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_WritePin+0x92>
 298:	50 e0       	ldi	r21, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_WritePin+0xa2>
 29c:	44 0f       	add	r20, r20
 29e:	55 1f       	adc	r21, r21
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_WritePin+0x9e>
 2a4:	80 95       	com	r24
 2a6:	82 23       	and	r24, r18
 2a8:	48 2b       	or	r20, r24
 2aa:	42 bb       	out	0x12, r20	; 18
			break;
		default:
			break;
	}	
}
 2ac:	08 95       	ret

000002ae <SPI_Init>:
{
	uint8_t ErrRetVal = 0;
		if (callBack != NULL_PTR)
			SPI_TX_Complete_callback = callBack;
		return ErrRetVal;
}
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	90 f5       	brcc	.+100    	; 0x316 <SPI_Init+0x68>
 2b2:	1d b8       	out	0x0d, r1	; 13
 2b4:	8d b1       	in	r24, 0x0d	; 13
 2b6:	80 61       	ori	r24, 0x10	; 16
 2b8:	8d b9       	out	0x0d, r24	; 13
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	64 e0       	ldi	r22, 0x04	; 4
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinDirection>
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	64 e0       	ldi	r22, 0x04	; 4
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_WritePin>
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	67 e0       	ldi	r22, 0x07	; 7
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinDirection>
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	65 e0       	ldi	r22, 0x05	; 5
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinDirection>
 2e2:	8d b1       	in	r24, 0x0d	; 13
 2e4:	84 60       	ori	r24, 0x04	; 4
 2e6:	8d b9       	out	0x0d, r24	; 13
 2e8:	8d b1       	in	r24, 0x0d	; 13
 2ea:	87 7f       	andi	r24, 0xF7	; 247
 2ec:	8d b9       	out	0x0d, r24	; 13
 2ee:	8d b1       	in	r24, 0x0d	; 13
 2f0:	8f 7d       	andi	r24, 0xDF	; 223
 2f2:	8d b9       	out	0x0d, r24	; 13
 2f4:	8e b1       	in	r24, 0x0e	; 14
 2f6:	81 60       	ori	r24, 0x01	; 1
 2f8:	8e b9       	out	0x0e, r24	; 14
 2fa:	8d b1       	in	r24, 0x0d	; 13
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	8d b9       	out	0x0d, r24	; 13
 300:	8d b1       	in	r24, 0x0d	; 13
 302:	8e 7f       	andi	r24, 0xFE	; 254
 304:	8d b9       	out	0x0d, r24	; 13
 306:	8e b1       	in	r24, 0x0e	; 14
 308:	8e b1       	in	r24, 0x0e	; 14
 30a:	8f b1       	in	r24, 0x0f	; 15
 30c:	8d b1       	in	r24, 0x0d	; 13
 30e:	80 64       	ori	r24, 0x40	; 64
 310:	8d b9       	out	0x0d, r24	; 13
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	08 95       	ret
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	08 95       	ret

0000031a <SPI_TransmitChar>:
 31a:	cf 93       	push	r28
 31c:	42 30       	cpi	r20, 0x02	; 2
 31e:	60 f4       	brcc	.+24     	; 0x338 <SPI_TransmitChar+0x1e>
 320:	c6 2f       	mov	r28, r22
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	64 e0       	ldi	r22, 0x04	; 4
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_WritePin>
 32c:	cf b9       	out	0x0f, r28	; 15
 32e:	76 9b       	sbis	0x0e, 6	; 14
 330:	05 c0       	rjmp	.+10     	; 0x33c <SPI_TransmitChar+0x22>
 332:	8f b1       	in	r24, 0x0f	; 15
 334:	84 e0       	ldi	r24, 0x04	; 4
 336:	03 c0       	rjmp	.+6      	; 0x33e <SPI_TransmitChar+0x24>
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	01 c0       	rjmp	.+2      	; 0x33e <SPI_TransmitChar+0x24>
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <SPI_ReceiveChar>:
 342:	42 30       	cpi	r20, 0x02	; 2
 344:	60 f4       	brcc	.+24     	; 0x35e <SPI_ReceiveChar+0x1c>
 346:	77 9b       	sbis	0x0e, 7	; 14
 348:	0c c0       	rjmp	.+24     	; 0x362 <SPI_ReceiveChar+0x20>
 34a:	fb 01       	movw	r30, r22
 34c:	8f b1       	in	r24, 0x0f	; 15
 34e:	80 83       	st	Z, r24
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	64 e0       	ldi	r22, 0x04	; 4
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DIO_WritePin>
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	08 95       	ret
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	08 95       	ret
 362:	85 e0       	ldi	r24, 0x05	; 5
 364:	08 95       	ret

00000366 <SPI_DataExchange>:
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	ea 01       	movw	r28, r20
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 8d 01 	call	0x31a	; 0x31a <SPI_TransmitChar>
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	be 01       	movw	r22, r28
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 a1 01 	call	0x342	; 0x342 <SPI_ReceiveChar>
 37e:	81 11       	cpse	r24, r1
 380:	f9 cf       	rjmp	.-14     	; 0x374 <SPI_DataExchange+0xe>
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <SPI_ReceiveString>:
 388:	ef 92       	push	r14
 38a:	ff 92       	push	r15
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	08 2f       	mov	r16, r24
 396:	7b 01       	movw	r14, r22
 398:	14 2f       	mov	r17, r20
 39a:	eb 01       	movw	r28, r22
 39c:	21 2f       	mov	r18, r17
 39e:	ae 01       	movw	r20, r28
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	80 2f       	mov	r24, r16
 3a4:	0e 94 b3 01 	call	0x366	; 0x366 <SPI_DataExchange>
 3a8:	81 11       	cpse	r24, r1
 3aa:	f8 cf       	rjmp	.-16     	; 0x39c <SPI_ReceiveString+0x14>
 3ac:	88 81       	ld	r24, Y
 3ae:	81 11       	cpse	r24, r1
 3b0:	04 c0       	rjmp	.+8      	; 0x3ba <SPI_ReceiveString+0x32>
 3b2:	ce 15       	cp	r28, r14
 3b4:	df 05       	cpc	r29, r15
 3b6:	19 f4       	brne	.+6      	; 0x3be <SPI_ReceiveString+0x36>
 3b8:	f1 cf       	rjmp	.-30     	; 0x39c <SPI_ReceiveString+0x14>
 3ba:	21 96       	adiw	r28, 0x01	; 1
 3bc:	ef cf       	rjmp	.-34     	; 0x39c <SPI_ReceiveString+0x14>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	08 95       	ret

000003ce <__vector_12>:

void __vector_12(void)
{
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	5f 93       	push	r21
 3e0:	6f 93       	push	r22
 3e2:	7f 93       	push	r23
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	af 93       	push	r26
 3ea:	bf 93       	push	r27
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31
	if (SPI_TX_Complete_callback != NULL_PTR)
 3f0:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__data_end>
 3f4:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__data_end+0x1>
 3f8:	30 97       	sbiw	r30, 0x00	; 0
 3fa:	09 f0       	breq	.+2      	; 0x3fe <__vector_12+0x30>
		SPI_TX_Complete_callback();
 3fc:	09 95       	icall
}
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <UART_Init>:
uint8_t UART_GetData(uint8_t UartNumber, ptr_uint8_t RxChar) {

   *(RxChar) = (uint8_t) UDR;

   return 0;
}
 420:	8a b1       	in	r24, 0x0a	; 10
 422:	80 61       	ori	r24, 0x10	; 16
 424:	8a b9       	out	0x0a, r24	; 10
 426:	8a b1       	in	r24, 0x0a	; 10
 428:	88 60       	ori	r24, 0x08	; 8
 42a:	8a b9       	out	0x0a, r24	; 10
 42c:	8b b1       	in	r24, 0x0b	; 11
 42e:	8d 7f       	andi	r24, 0xFD	; 253
 430:	8b b9       	out	0x0b, r24	; 11
 432:	8a b1       	in	r24, 0x0a	; 10
 434:	8b 7f       	andi	r24, 0xFB	; 251
 436:	8a b9       	out	0x0a, r24	; 10
 438:	80 b5       	in	r24, 0x20	; 32
 43a:	86 68       	ori	r24, 0x86	; 134
 43c:	80 bd       	out	0x20, r24	; 32
 43e:	83 e3       	ldi	r24, 0x33	; 51
 440:	89 b9       	out	0x09, r24	; 9
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	08 95       	ret

00000446 <UART_TransmitString>:
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	04 c0       	rjmp	.+8      	; 0x452 <UART_TransmitString+0xc>
 44a:	9c b9       	out	0x0c, r25	; 12
 44c:	5d 9b       	sbis	0x0b, 5	; 11
 44e:	fe cf       	rjmp	.-4      	; 0x44c <UART_TransmitString+0x6>
 450:	8f 5f       	subi	r24, 0xFF	; 255
 452:	fb 01       	movw	r30, r22
 454:	e8 0f       	add	r30, r24
 456:	f1 1d       	adc	r31, r1
 458:	90 81       	ld	r25, Z
 45a:	91 11       	cpse	r25, r1
 45c:	f6 cf       	rjmp	.-20     	; 0x44a <UART_TransmitString+0x4>
 45e:	8d e0       	ldi	r24, 0x0D	; 13
 460:	8c b9       	out	0x0c, r24	; 12
 462:	5d 9b       	sbis	0x0b, 5	; 11
 464:	fe cf       	rjmp	.-4      	; 0x462 <UART_TransmitString+0x1c>
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	08 95       	ret

0000046a <__vector_13>:

void __vector_13(void) __attribute__((signal)); // USART, Rx Complete
void __vector_13(void) {
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
	Gptr_uartRxInt();
 48c:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <Gptr_uartRxInt>
 490:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <Gptr_uartRxInt+0x1>
 494:	09 95       	icall
}
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <__vector_14>:
void __vector_14(void) __attribute__((signal)); // USART Data Register Empty
void __vector_14(void) {
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	2f 93       	push	r18
 4c4:	3f 93       	push	r19
 4c6:	4f 93       	push	r20
 4c8:	5f 93       	push	r21
 4ca:	6f 93       	push	r22
 4cc:	7f 93       	push	r23
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
 4d2:	af 93       	push	r26
 4d4:	bf 93       	push	r27
 4d6:	ef 93       	push	r30
 4d8:	ff 93       	push	r31
	Gptr_uartDataEmptyRegInt();
 4da:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <Gptr_uartDataEmptyRegInt>
 4de:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <Gptr_uartDataEmptyRegInt+0x1>
 4e2:	09 95       	icall
}
 4e4:	ff 91       	pop	r31
 4e6:	ef 91       	pop	r30
 4e8:	bf 91       	pop	r27
 4ea:	af 91       	pop	r26
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	7f 91       	pop	r23
 4f2:	6f 91       	pop	r22
 4f4:	5f 91       	pop	r21
 4f6:	4f 91       	pop	r20
 4f8:	3f 91       	pop	r19
 4fa:	2f 91       	pop	r18
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <__vector_15>:
void __vector_15(void) __attribute__((signal)); // USART, Tx Complete
void __vector_15(void) {
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	2f 93       	push	r18
 512:	3f 93       	push	r19
 514:	4f 93       	push	r20
 516:	5f 93       	push	r21
 518:	6f 93       	push	r22
 51a:	7f 93       	push	r23
 51c:	8f 93       	push	r24
 51e:	9f 93       	push	r25
 520:	af 93       	push	r26
 522:	bf 93       	push	r27
 524:	ef 93       	push	r30
 526:	ff 93       	push	r31
	Gptr_uartTxInt();
 528:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <Gptr_uartTxInt>
 52c:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <Gptr_uartTxInt+0x1>
 530:	09 95       	icall
}
 532:	ff 91       	pop	r31
 534:	ef 91       	pop	r30
 536:	bf 91       	pop	r27
 538:	af 91       	pop	r26
 53a:	9f 91       	pop	r25
 53c:	8f 91       	pop	r24
 53e:	7f 91       	pop	r23
 540:	6f 91       	pop	r22
 542:	5f 91       	pop	r21
 544:	4f 91       	pop	r20
 546:	3f 91       	pop	r19
 548:	2f 91       	pop	r18
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <_exit>:
 554:	f8 94       	cli

00000556 <__stop_program>:
 556:	ff cf       	rjmp	.-2      	; 0x556 <__stop_program>
