
ATM_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000005ac  00000640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080007a  0080007a  0000065a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000065a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e7b  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aba  00000000  00000000  00002763  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001480  00000000  00000000  0000321d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a4  00000000  00000000  000046a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c5  00000000  00000000  00004d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000232f  00000000  00000000  00005709  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00007a38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_4>
  14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_10>
  2c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_11>
  30:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_12>
  34:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_13>
  38:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_14>
  3c:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8a:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <dummy_delay+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <dummy_delay+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
  9e:	1a 82       	std	Y+2, r1	; 0x02
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	15 c0       	rjmp	.+42     	; 0xce <dummy_delay+0x3c>
   {
      for(volatile uint8_t j=0; j<32; j++)
  a4:	1c 82       	std	Y+4, r1	; 0x04
  a6:	0b c0       	rjmp	.+22     	; 0xbe <dummy_delay+0x2c>
      {
         for(volatile uint8_t k=0; k<32; k++)
  a8:	1b 82       	std	Y+3, r1	; 0x03
  aa:	03 c0       	rjmp	.+6      	; 0xb2 <dummy_delay+0x20>
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	8b 83       	std	Y+3, r24	; 0x03
  b2:	8b 81       	ldd	r24, Y+3	; 0x03
  b4:	80 32       	cpi	r24, 0x20	; 32
  b6:	d0 f3       	brcs	.-12     	; 0xac <dummy_delay+0x1a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
  b8:	8c 81       	ldd	r24, Y+4	; 0x04
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	8c 83       	std	Y+4, r24	; 0x04
  be:	8c 81       	ldd	r24, Y+4	; 0x04
  c0:	80 32       	cpi	r24, 0x20	; 32
  c2:	90 f3       	brcs	.-28     	; 0xa8 <dummy_delay+0x16>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	9a 81       	ldd	r25, Y+2	; 0x02
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	9a 83       	std	Y+2, r25	; 0x02
  cc:	89 83       	std	Y+1, r24	; 0x01
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	9a 81       	ldd	r25, Y+2	; 0x02
  d2:	84 36       	cpi	r24, 0x64	; 100
  d4:	91 05       	cpc	r25, r1
  d6:	30 f3       	brcs	.-52     	; 0xa4 <dummy_delay+0x12>
         {
            
         }
      }
   }
}
  d8:	0f 90       	pop	r0
  da:	0f 90       	pop	r0
  dc:	0f 90       	pop	r0
  de:	0f 90       	pop	r0
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <main>:
uint8_t PAN[10];
uint8_t PIN[5];

int main(void)
{
   SPI_Init(SPIChannel_1);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_Init>
   UART_Init(UART_1);
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Init>
   
   dummy_delay();
  f2:	0e 94 49 00 	call	0x92	; 0x92 <dummy_delay>
   dummy_delay();
  f6:	0e 94 49 00 	call	0x92	; 0x92 <dummy_delay>
   dummy_delay();
  fa:	0e 94 49 00 	call	0x92	; 0x92 <dummy_delay>
   dummy_delay();
  fe:	0e 94 49 00 	call	0x92	; 0x92 <dummy_delay>
   
   UART_TransmitString(UART_1, "Starting SPI Transmission");
 102:	60 e6       	ldi	r22, 0x60	; 96
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 4d 02 	call	0x49a	; 0x49a <UART_TransmitString>
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main+0x26>

0000010e <DIO_SetPinDirection>:

#include "DIO.h"

uint8_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	switch(PortName)
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	d1 f0       	breq	.+52     	; 0x146 <DIO_SetPinDirection+0x38>
 112:	28 f0       	brcs	.+10     	; 0x11e <DIO_SetPinDirection+0x10>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	59 f1       	breq	.+86     	; 0x16e <DIO_SetPinDirection+0x60>
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	e9 f1       	breq	.+122    	; 0x196 <DIO_SetPinDirection+0x88>
 11c:	08 95       	ret
	{
		case PORT_A:
			BIT_WRITE(DDRA,PinNo,PinDirection);
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	06 2e       	mov	r0, r22
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_SetPinDirection+0x1e>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_SetPinDirection+0x1a>
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_SetPinDirection+0x2a>
 134:	44 0f       	add	r20, r20
 136:	55 1f       	adc	r21, r21
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_SetPinDirection+0x26>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	48 2b       	or	r20, r24
 142:	4a bb       	out	0x1a, r20	; 26
			break;
 144:	08 95       	ret
		case PORT_B:
			BIT_WRITE(DDRB,PinNo,PinDirection);
 146:	27 b3       	in	r18, 0x17	; 23
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	06 2e       	mov	r0, r22
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPinDirection+0x46>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPinDirection+0x42>
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_SetPinDirection+0x52>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_SetPinDirection+0x4e>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	48 2b       	or	r20, r24
 16a:	47 bb       	out	0x17, r20	; 23
			break;
 16c:	08 95       	ret
		case PORT_C:
			BIT_WRITE(DDRC,PinNo,PinDirection);
 16e:	24 b3       	in	r18, 0x14	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	06 2e       	mov	r0, r22
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SetPinDirection+0x6e>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SetPinDirection+0x6a>
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_SetPinDirection+0x7a>
 184:	44 0f       	add	r20, r20
 186:	55 1f       	adc	r21, r21
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_SetPinDirection+0x76>
 18c:	80 95       	com	r24
 18e:	82 23       	and	r24, r18
 190:	48 2b       	or	r20, r24
 192:	44 bb       	out	0x14, r20	; 20
			break;
 194:	08 95       	ret
		case PORT_D:
			BIT_WRITE(DDRD,PinNo,PinDirection);
 196:	21 b3       	in	r18, 0x11	; 17
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	06 2e       	mov	r0, r22
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPinDirection+0x96>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPinDirection+0x92>
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPinDirection+0xa2>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPinDirection+0x9e>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	48 2b       	or	r20, r24
 1ba:	41 bb       	out	0x11, r20	; 17
			break;
		default:
			break;
	}
}
 1bc:	08 95       	ret

000001be <DIO_WritePin>:

uint8_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	switch(PortName)
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	d1 f0       	breq	.+52     	; 0x1f6 <DIO_WritePin+0x38>
 1c2:	28 f0       	brcs	.+10     	; 0x1ce <DIO_WritePin+0x10>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	59 f1       	breq	.+86     	; 0x21e <DIO_WritePin+0x60>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	e9 f1       	breq	.+122    	; 0x246 <DIO_WritePin+0x88>
 1cc:	08 95       	ret
	{
		case PORT_A:
			BIT_WRITE(PORTA,PinNo,PinValue);
 1ce:	2b b3       	in	r18, 0x1b	; 27
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	06 2e       	mov	r0, r22
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_WritePin+0x1e>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_WritePin+0x1a>
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_WritePin+0x2a>
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_WritePin+0x26>
 1ec:	80 95       	com	r24
 1ee:	82 23       	and	r24, r18
 1f0:	48 2b       	or	r20, r24
 1f2:	4b bb       	out	0x1b, r20	; 27
			break;
 1f4:	08 95       	ret
		case PORT_B:
			BIT_WRITE(PORTB,PinNo,PinValue);
 1f6:	28 b3       	in	r18, 0x18	; 24
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	06 2e       	mov	r0, r22
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_WritePin+0x46>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_WritePin+0x42>
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_WritePin+0x52>
 20c:	44 0f       	add	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_WritePin+0x4e>
 214:	80 95       	com	r24
 216:	82 23       	and	r24, r18
 218:	48 2b       	or	r20, r24
 21a:	48 bb       	out	0x18, r20	; 24
			break;
 21c:	08 95       	ret
		case PORT_C:
			BIT_WRITE(PORTC,PinNo,PinValue);
 21e:	25 b3       	in	r18, 0x15	; 21
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	06 2e       	mov	r0, r22
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_WritePin+0x6e>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_WritePin+0x6a>
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_WritePin+0x7a>
 234:	44 0f       	add	r20, r20
 236:	55 1f       	adc	r21, r21
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_WritePin+0x76>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	48 2b       	or	r20, r24
 242:	45 bb       	out	0x15, r20	; 21
			break;
 244:	08 95       	ret
		case PORT_D:
			BIT_WRITE(PORTD,PinNo,PinValue);
 246:	22 b3       	in	r18, 0x12	; 18
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	06 2e       	mov	r0, r22
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_WritePin+0x96>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_WritePin+0x92>
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_WritePin+0xa2>
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_WritePin+0x9e>
 264:	80 95       	com	r24
 266:	82 23       	and	r24, r18
 268:	48 2b       	or	r20, r24
 26a:	42 bb       	out	0x12, r20	; 18
			break;
		default:
			break;
	}	
}
 26c:	08 95       	ret

0000026e <SPI_Init>:
{
	uint8_t ErrRetVal = 0;
		if (callBack != NULL_PTR)
			SPI_TX_Complete_callback = callBack;
		return ErrRetVal;
}
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	90 f5       	brcc	.+100    	; 0x2d6 <SPI_Init+0x68>
 272:	1d b8       	out	0x0d, r1	; 13
 274:	8d b1       	in	r24, 0x0d	; 13
 276:	80 61       	ori	r24, 0x10	; 16
 278:	8d b9       	out	0x0d, r24	; 13
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	64 e0       	ldi	r22, 0x04	; 4
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_SetPinDirection>
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	64 e0       	ldi	r22, 0x04	; 4
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_WritePin>
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	67 e0       	ldi	r22, 0x07	; 7
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_SetPinDirection>
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	65 e0       	ldi	r22, 0x05	; 5
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_SetPinDirection>
 2a2:	8d b1       	in	r24, 0x0d	; 13
 2a4:	84 60       	ori	r24, 0x04	; 4
 2a6:	8d b9       	out	0x0d, r24	; 13
 2a8:	8d b1       	in	r24, 0x0d	; 13
 2aa:	87 7f       	andi	r24, 0xF7	; 247
 2ac:	8d b9       	out	0x0d, r24	; 13
 2ae:	8d b1       	in	r24, 0x0d	; 13
 2b0:	8f 7d       	andi	r24, 0xDF	; 223
 2b2:	8d b9       	out	0x0d, r24	; 13
 2b4:	8e b1       	in	r24, 0x0e	; 14
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	8e b9       	out	0x0e, r24	; 14
 2ba:	8d b1       	in	r24, 0x0d	; 13
 2bc:	82 60       	ori	r24, 0x02	; 2
 2be:	8d b9       	out	0x0d, r24	; 13
 2c0:	8d b1       	in	r24, 0x0d	; 13
 2c2:	8e 7f       	andi	r24, 0xFE	; 254
 2c4:	8d b9       	out	0x0d, r24	; 13
 2c6:	8e b1       	in	r24, 0x0e	; 14
 2c8:	8e b1       	in	r24, 0x0e	; 14
 2ca:	8f b1       	in	r24, 0x0f	; 15
 2cc:	8d b1       	in	r24, 0x0d	; 13
 2ce:	80 64       	ori	r24, 0x40	; 64
 2d0:	8d b9       	out	0x0d, r24	; 13
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	08 95       	ret
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	08 95       	ret

000002da <__vector_12>:

void __vector_12(void)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
	if (SPI_TX_Complete_callback != NULL_PTR)
 2fc:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
 300:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <__data_end+0x1>
 304:	30 97       	sbiw	r30, 0x00	; 0
 306:	09 f0       	breq	.+2      	; 0x30a <__vector_12+0x30>
		SPI_TX_Complete_callback();
 308:	09 95       	icall
}
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	bf 91       	pop	r27
 310:	af 91       	pop	r26
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__vector_11>:
	default:
		retVal = EXIT_FAILURE;
	}
	return retVal;
}
void __vector_11(void) {
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	2f 93       	push	r18
 338:	3f 93       	push	r19
 33a:	4f 93       	push	r20
 33c:	5f 93       	push	r21
 33e:	6f 93       	push	r22
 340:	7f 93       	push	r23
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
 34a:	ef 93       	push	r30
 34c:	ff 93       	push	r31
	if (TIM0_OVFAction_callback != NULL_PTR)
 34e:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <TIM0_OVFAction_callback>
 352:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <TIM0_OVFAction_callback+0x1>
 356:	30 97       	sbiw	r30, 0x00	; 0
 358:	09 f0       	breq	.+2      	; 0x35c <__vector_11+0x30>
		TIM0_OVFAction_callback();
 35a:	09 95       	icall
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <__vector_10>:
void __vector_10(void) {
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	2f 93       	push	r18
 38a:	3f 93       	push	r19
 38c:	4f 93       	push	r20
 38e:	5f 93       	push	r21
 390:	6f 93       	push	r22
 392:	7f 93       	push	r23
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	af 93       	push	r26
 39a:	bf 93       	push	r27
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
	if (TIM0_OCAction_callback != NULL_PTR)
 3a0:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <TIM0_OCAction_callback>
 3a4:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <TIM0_OCAction_callback+0x1>
 3a8:	30 97       	sbiw	r30, 0x00	; 0
 3aa:	09 f0       	breq	.+2      	; 0x3ae <__vector_10+0x30>
		TIM0_OCAction_callback();
 3ac:	09 95       	icall
}
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <__vector_5>:
void __vector_5(void) {
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	2f 93       	push	r18
 3dc:	3f 93       	push	r19
 3de:	4f 93       	push	r20
 3e0:	5f 93       	push	r21
 3e2:	6f 93       	push	r22
 3e4:	7f 93       	push	r23
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
 3ea:	af 93       	push	r26
 3ec:	bf 93       	push	r27
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	if (TIM2_OVFAction_callback != NULL_PTR)
 3f2:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <TIM2_OVFAction_callback>
 3f6:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <TIM2_OVFAction_callback+0x1>
 3fa:	30 97       	sbiw	r30, 0x00	; 0
 3fc:	09 f0       	breq	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
		TIM2_OVFAction_callback();
 3fe:	09 95       	icall
}
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	bf 91       	pop	r27
 406:	af 91       	pop	r26
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	7f 91       	pop	r23
 40e:	6f 91       	pop	r22
 410:	5f 91       	pop	r21
 412:	4f 91       	pop	r20
 414:	3f 91       	pop	r19
 416:	2f 91       	pop	r18
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_4>:
void __vector_4(void) {
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	2f 93       	push	r18
 42e:	3f 93       	push	r19
 430:	4f 93       	push	r20
 432:	5f 93       	push	r21
 434:	6f 93       	push	r22
 436:	7f 93       	push	r23
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
	if (TIM2_OCAction_callback != NULL_PTR)
 444:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <TIM2_OCAction_callback>
 448:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <TIM2_OCAction_callback+0x1>
 44c:	30 97       	sbiw	r30, 0x00	; 0
 44e:	09 f0       	breq	.+2      	; 0x452 <__vector_4+0x30>
		TIM2_OCAction_callback();
 450:	09 95       	icall
}
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <UART_Init>:
uint8_t UART_GetData(uint8_t UartNumber, ptr_uint8_t RxChar) {

   *(RxChar) = (uint8_t) UDR;

   return 0;
}
 474:	8a b1       	in	r24, 0x0a	; 10
 476:	80 61       	ori	r24, 0x10	; 16
 478:	8a b9       	out	0x0a, r24	; 10
 47a:	8a b1       	in	r24, 0x0a	; 10
 47c:	88 60       	ori	r24, 0x08	; 8
 47e:	8a b9       	out	0x0a, r24	; 10
 480:	8b b1       	in	r24, 0x0b	; 11
 482:	8d 7f       	andi	r24, 0xFD	; 253
 484:	8b b9       	out	0x0b, r24	; 11
 486:	8a b1       	in	r24, 0x0a	; 10
 488:	8b 7f       	andi	r24, 0xFB	; 251
 48a:	8a b9       	out	0x0a, r24	; 10
 48c:	80 b5       	in	r24, 0x20	; 32
 48e:	86 68       	ori	r24, 0x86	; 134
 490:	80 bd       	out	0x20, r24	; 32
 492:	83 e3       	ldi	r24, 0x33	; 51
 494:	89 b9       	out	0x09, r24	; 9
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	08 95       	ret

0000049a <UART_TransmitString>:
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <UART_TransmitString+0xc>
 49e:	9c b9       	out	0x0c, r25	; 12
 4a0:	5d 9b       	sbis	0x0b, 5	; 11
 4a2:	fe cf       	rjmp	.-4      	; 0x4a0 <UART_TransmitString+0x6>
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	fb 01       	movw	r30, r22
 4a8:	e8 0f       	add	r30, r24
 4aa:	f1 1d       	adc	r31, r1
 4ac:	90 81       	ld	r25, Z
 4ae:	91 11       	cpse	r25, r1
 4b0:	f6 cf       	rjmp	.-20     	; 0x49e <UART_TransmitString+0x4>
 4b2:	8d e0       	ldi	r24, 0x0D	; 13
 4b4:	8c b9       	out	0x0c, r24	; 12
 4b6:	5d 9b       	sbis	0x0b, 5	; 11
 4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <UART_TransmitString+0x1c>
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	08 95       	ret

000004be <__vector_13>:

void __vector_13(void) __attribute__((signal)); // USART, Rx Complete
void __vector_13(void) {
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	4f 93       	push	r20
 4ce:	5f 93       	push	r21
 4d0:	6f 93       	push	r22
 4d2:	7f 93       	push	r23
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
	Gptr_uartRxInt();
 4e0:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <Gptr_uartRxInt>
 4e4:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <Gptr_uartRxInt+0x1>
 4e8:	09 95       	icall
}
 4ea:	ff 91       	pop	r31
 4ec:	ef 91       	pop	r30
 4ee:	bf 91       	pop	r27
 4f0:	af 91       	pop	r26
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	7f 91       	pop	r23
 4f8:	6f 91       	pop	r22
 4fa:	5f 91       	pop	r21
 4fc:	4f 91       	pop	r20
 4fe:	3f 91       	pop	r19
 500:	2f 91       	pop	r18
 502:	0f 90       	pop	r0
 504:	0f be       	out	0x3f, r0	; 63
 506:	0f 90       	pop	r0
 508:	1f 90       	pop	r1
 50a:	18 95       	reti

0000050c <__vector_14>:
void __vector_14(void) __attribute__((signal)); // USART Data Register Empty
void __vector_14(void) {
 50c:	1f 92       	push	r1
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
 516:	2f 93       	push	r18
 518:	3f 93       	push	r19
 51a:	4f 93       	push	r20
 51c:	5f 93       	push	r21
 51e:	6f 93       	push	r22
 520:	7f 93       	push	r23
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
 526:	af 93       	push	r26
 528:	bf 93       	push	r27
 52a:	ef 93       	push	r30
 52c:	ff 93       	push	r31
	Gptr_uartDataEmptyRegInt();
 52e:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <Gptr_uartDataEmptyRegInt>
 532:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <Gptr_uartDataEmptyRegInt+0x1>
 536:	09 95       	icall
}
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	7f 91       	pop	r23
 546:	6f 91       	pop	r22
 548:	5f 91       	pop	r21
 54a:	4f 91       	pop	r20
 54c:	3f 91       	pop	r19
 54e:	2f 91       	pop	r18
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <__vector_15>:
void __vector_15(void) __attribute__((signal)); // USART, Tx Complete
void __vector_15(void) {
 55a:	1f 92       	push	r1
 55c:	0f 92       	push	r0
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	0f 92       	push	r0
 562:	11 24       	eor	r1, r1
 564:	2f 93       	push	r18
 566:	3f 93       	push	r19
 568:	4f 93       	push	r20
 56a:	5f 93       	push	r21
 56c:	6f 93       	push	r22
 56e:	7f 93       	push	r23
 570:	8f 93       	push	r24
 572:	9f 93       	push	r25
 574:	af 93       	push	r26
 576:	bf 93       	push	r27
 578:	ef 93       	push	r30
 57a:	ff 93       	push	r31
	Gptr_uartTxInt();
 57c:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <Gptr_uartTxInt>
 580:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <Gptr_uartTxInt+0x1>
 584:	09 95       	icall
}
 586:	ff 91       	pop	r31
 588:	ef 91       	pop	r30
 58a:	bf 91       	pop	r27
 58c:	af 91       	pop	r26
 58e:	9f 91       	pop	r25
 590:	8f 91       	pop	r24
 592:	7f 91       	pop	r23
 594:	6f 91       	pop	r22
 596:	5f 91       	pop	r21
 598:	4f 91       	pop	r20
 59a:	3f 91       	pop	r19
 59c:	2f 91       	pop	r18
 59e:	0f 90       	pop	r0
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	0f 90       	pop	r0
 5a4:	1f 90       	pop	r1
 5a6:	18 95       	reti

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>
