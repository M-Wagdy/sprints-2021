
Timer_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000026a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800066  00800066  00000304  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aab  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000784  00000000  00000000  00000ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a5  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000451  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d9  00000000  00000000  000020e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000025be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
-------------------------------*/
/* variable containing all timers configurations */
extern const STR_TIMER_config_t gastr_TIMER_configurations;

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
   /* set green and red pins to output pins */
   PORTA_DIR |= (RED_LED_PIN|GREEN_LED_PIN);
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	83 60       	ori	r24, 0x03	; 3
  a0:	8a bb       	out	0x1a, r24	; 26
   
   TIMER_ERROR_state_t Timer_error_state;
   /* initialize timers */
   Timer_error_state = TIMER_init(&gastr_TIMER_configurations);
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 8a 00 	call	0x114	; 0x114 <TIMER_init>
   
   if(E_TIMER_SUCCESS != Timer_error_state)
  aa:	81 11       	cpse	r24, r1
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x1a>
      /* super loop for debugging */
      while(1){}
   }
   
   /* start green led timer */
   Timer_error_state = TIMER_start(GREEN_LED_TIMER, GREEN_LED_TIME);
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	10 e0       	ldi	r17, 0x00	; 0
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 ce 00 	call	0x19c	; 0x19c <TIMER_start>
  c4:	f8 2e       	mov	r15, r24
   /* start red led timer */
   Timer_error_state |= TIMER_start(RED_LED_TIMER, RED_LED_TIME);
  c6:	04 e6       	ldi	r16, 0x64	; 100
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 ce 00 	call	0x19c	; 0x19c <TIMER_start>
  da:	8f 29       	or	r24, r15
   if(E_TIMER_SUCCESS != Timer_error_state)
  dc:	09 f0       	breq	.+2      	; 0xe0 <main+0x4e>
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0x4c>
   while(1)
   {
      uint8_t timer_status;
      
      /* check timer status of the red led */
      TIMER_checkStatus(RED_LED_TIMER, &timer_status);
  e0:	be 01       	movw	r22, r28
  e2:	6f 5f       	subi	r22, 0xFF	; 255
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TIMER_checkStatus>
      /* toggles pin if timer overflowed */
      if(TIMER_OVERFLOW_FLAG == timer_status)
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	19 f4       	brne	.+6      	; 0xf8 <main+0x66>
      {
         PORTA_DATA ^= RED_LED_PIN;
  f2:	9b b3       	in	r25, 0x1b	; 27
  f4:	89 27       	eor	r24, r25
  f6:	8b bb       	out	0x1b, r24	; 27
      }
      
      /* check timer status of the green led */
      TIMER_checkStatus(GREEN_LED_TIMER, &timer_status);
  f8:	be 01       	movw	r22, r28
  fa:	6f 5f       	subi	r22, 0xFF	; 255
  fc:	7f 4f       	sbci	r23, 0xFF	; 255
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TIMER_checkStatus>
      /* toggles pin if timer overflowed */
      if(TIMER_OVERFLOW_FLAG == timer_status)
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	59 f7       	brne	.-42     	; 0xe0 <main+0x4e>
      {
         PORTA_DATA ^= GREEN_LED_PIN;
 10a:	9b b3       	in	r25, 0x1b	; 27
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	89 27       	eor	r24, r25
 110:	8b bb       	out	0x1b, r24	; 27
      }
   }
 112:	e6 cf       	rjmp	.-52     	; 0xe0 <main+0x4e>

00000114 <TIMER_init>:
   
   *ptr_TimerData = value;
   
   /* return success message. */
   return E_TIMER_SUCCESS;
}
 114:	bc 01       	movw	r22, r24
 116:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	f1 f1       	breq	.+124    	; 0x19a <TIMER_init+0x86>
 11e:	61 15       	cp	r22, r1
 120:	71 05       	cpc	r23, r1
 122:	c1 f1       	breq	.+112    	; 0x194 <TIMER_init+0x80>
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	2f c0       	rjmp	.+94     	; 0x186 <TIMER_init+0x72>
 128:	e4 2f       	mov	r30, r20
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	cf 01       	movw	r24, r30
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	e8 0f       	add	r30, r24
 134:	f9 1f       	adc	r31, r25
 136:	e6 0f       	add	r30, r22
 138:	f7 1f       	adc	r31, r23
 13a:	80 81       	ld	r24, Z
 13c:	88 23       	and	r24, r24
 13e:	19 f0       	breq	.+6      	; 0x146 <TIMER_init+0x32>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	29 f0       	breq	.+10     	; 0x14e <TIMER_init+0x3a>
 144:	29 c0       	rjmp	.+82     	; 0x198 <TIMER_init+0x84>
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	a3 e5       	ldi	r26, 0x53	; 83
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	03 c0       	rjmp	.+6      	; 0x154 <TIMER_init+0x40>
 14e:	56 e0       	ldi	r21, 0x06	; 6
 150:	a5 e4       	ldi	r26, 0x45	; 69
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	8c 91       	ld	r24, X
 156:	88 7f       	andi	r24, 0xF8	; 248
 158:	8c 93       	st	X, r24
 15a:	8c 91       	ld	r24, X
 15c:	87 7b       	andi	r24, 0xB7	; 183
 15e:	8c 93       	st	X, r24
 160:	9c 91       	ld	r25, X
 162:	81 81       	ldd	r24, Z+1	; 0x01
 164:	89 2b       	or	r24, r25
 166:	8c 93       	st	X, r24
 168:	89 b7       	in	r24, 0x39	; 57
 16a:	8c 7f       	andi	r24, 0xFC	; 252
 16c:	89 bf       	out	0x39, r24	; 57
 16e:	89 b7       	in	r24, 0x39	; 57
 170:	92 81       	ldd	r25, Z+2	; 0x02
 172:	29 2f       	mov	r18, r25
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <TIMER_init+0x68>
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	5a 95       	dec	r21
 17e:	e2 f7       	brpl	.-8      	; 0x178 <TIMER_init+0x64>
 180:	28 2b       	or	r18, r24
 182:	29 bf       	out	0x39, r18	; 57
 184:	4f 5f       	subi	r20, 0xFF	; 255
 186:	42 30       	cpi	r20, 0x02	; 2
 188:	78 f2       	brcs	.-98     	; 0x128 <TIMER_init+0x14>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	08 95       	ret
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	08 95       	ret
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	08 95       	ret

0000019c <TIMER_start>:
 19c:	0f 93       	push	r16
 19e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <__data_end>
 1a2:	99 23       	and	r25, r25
 1a4:	a1 f0       	breq	.+40     	; 0x1ce <TIMER_start+0x32>
 1a6:	88 23       	and	r24, r24
 1a8:	19 f0       	breq	.+6      	; 0x1b0 <TIMER_start+0x14>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	31 f0       	breq	.+12     	; 0x1ba <TIMER_start+0x1e>
 1ae:	11 c0       	rjmp	.+34     	; 0x1d2 <TIMER_start+0x36>
 1b0:	a2 e5       	ldi	r26, 0x52	; 82
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e3 e5       	ldi	r30, 0x53	; 83
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <TIMER_start+0x26>
 1ba:	a4 e4       	ldi	r26, 0x44	; 68
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	e5 e4       	ldi	r30, 0x45	; 69
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	0c 93       	st	X, r16
 1c4:	80 81       	ld	r24, Z
 1c6:	85 60       	ori	r24, 0x05	; 5
 1c8:	80 83       	st	Z, r24
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <TIMER_start+0x38>
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <TIMER_start+0x38>
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	0f 91       	pop	r16
 1d6:	08 95       	ret

000001d8 <TIMER_checkStatus>:
{
   /* variable to carry the required timer interrupt shift bits value. */
   uint8_t u8_IntShiftBits;
   
   /* check if timers are not initialized before. */
   if(NOT_INIT == gu8_IsTimerInit)
 1d8:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <__data_end>
 1dc:	99 23       	and	r25, r25
 1de:	e9 f1       	breq	.+122    	; 0x25a <TIMER_checkStatus+0x82>
   {
      return E_TIMER_NOT_INIT;
   }
   else if(NULL_PTR == status)
 1e0:	61 15       	cp	r22, r1
 1e2:	71 05       	cpc	r23, r1
 1e4:	e1 f1       	breq	.+120    	; 0x25e <TIMER_checkStatus+0x86>
   {
      /* do nothing */
   }
   
   /* sets the registers pointers according to the required timer. */
   switch(timer_no)
 1e6:	88 23       	and	r24, r24
 1e8:	19 f0       	breq	.+6      	; 0x1f0 <TIMER_checkStatus+0x18>
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	19 f0       	breq	.+6      	; 0x1f4 <TIMER_checkStatus+0x1c>
 1ee:	39 c0       	rjmp	.+114    	; 0x262 <TIMER_checkStatus+0x8a>
   {
      case TIMER_0:
         u8_IntShiftBits = TIMER_0_INT_BITS;
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <TIMER_checkStatus+0x1e>
         break;
      case TIMER_2:
         u8_IntShiftBits = TIMER_2_INT_BITS;
 1f4:	46 e0       	ldi	r20, 0x06	; 6
         break;
      default:
         return E_INVALID_TIMER_NUMBER;
   }
   
   if( TIMER_INT_FLAG & (TIMER_OVERFLOW_FLAG << u8_IntShiftBits) )
 1f6:	88 b7       	in	r24, 0x38	; 56
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	04 2e       	mov	r0, r20
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <TIMER_checkStatus+0x2a>
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <TIMER_checkStatus+0x26>
 206:	80 ff       	sbrs	r24, 0
 208:	0f c0       	rjmp	.+30     	; 0x228 <TIMER_checkStatus+0x50>
   {
      *status = TIMER_OVERFLOW_FLAG;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	fb 01       	movw	r30, r22
 20e:	80 83       	st	Z, r24
      TIMER_INT_FLAG |= (TIMER_OVERFLOW_FLAG << u8_IntShiftBits);
 210:	28 b7       	in	r18, 0x38	; 56
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <TIMER_checkStatus+0x44>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	4a 95       	dec	r20
 21e:	e2 f7       	brpl	.-8      	; 0x218 <TIMER_checkStatus+0x40>
 220:	82 2b       	or	r24, r18
 222:	88 bf       	out	0x38, r24	; 56
   {
      *status = TIMER_NOT_FINISHED;
   }
   
   /* return success message. */
   return E_TIMER_SUCCESS;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret
   if( TIMER_INT_FLAG & (TIMER_OVERFLOW_FLAG << u8_IntShiftBits) )
   {
      *status = TIMER_OVERFLOW_FLAG;
      TIMER_INT_FLAG |= (TIMER_OVERFLOW_FLAG << u8_IntShiftBits);
   }
   else if(TIMER_INT_FLAG & (TIMER_COMPARE_FLAG << u8_IntShiftBits))
 228:	88 b7       	in	r24, 0x38	; 56
 22a:	22 e0       	ldi	r18, 0x02	; 2
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <TIMER_checkStatus+0x5c>
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	4a 95       	dec	r20
 236:	e2 f7       	brpl	.-8      	; 0x230 <TIMER_checkStatus+0x58>
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	82 23       	and	r24, r18
 23c:	93 23       	and	r25, r19
 23e:	89 2b       	or	r24, r25
 240:	41 f0       	breq	.+16     	; 0x252 <TIMER_checkStatus+0x7a>
   {
      *status = TIMER_COMPARE_FLAG;
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	fb 01       	movw	r30, r22
 246:	80 83       	st	Z, r24
      TIMER_INT_FLAG |= (TIMER_COMPARE_FLAG << u8_IntShiftBits);
 248:	88 b7       	in	r24, 0x38	; 56
 24a:	28 2b       	or	r18, r24
 24c:	28 bf       	out	0x38, r18	; 56
   {
      *status = TIMER_NOT_FINISHED;
   }
   
   /* return success message. */
   return E_TIMER_SUCCESS;
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	08 95       	ret
      *status = TIMER_COMPARE_FLAG;
      TIMER_INT_FLAG |= (TIMER_COMPARE_FLAG << u8_IntShiftBits);
   }
   else
   {
      *status = TIMER_NOT_FINISHED;
 252:	fb 01       	movw	r30, r22
 254:	10 82       	st	Z, r1
   }
   
   /* return success message. */
   return E_TIMER_SUCCESS;
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 95       	ret
   uint8_t u8_IntShiftBits;
   
   /* check if timers are not initialized before. */
   if(NOT_INIT == gu8_IsTimerInit)
   {
      return E_TIMER_NOT_INIT;
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	08 95       	ret
   }
   else if(NULL_PTR == status)
   {
      return E_TIMER_NULL_PTR;
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	08 95       	ret
         break;
      case TIMER_2:
         u8_IntShiftBits = TIMER_2_INT_BITS;
         break;
      default:
         return E_INVALID_TIMER_NUMBER;
 262:	84 e0       	ldi	r24, 0x04	; 4
      *status = TIMER_NOT_FINISHED;
   }
   
   /* return success message. */
   return E_TIMER_SUCCESS;
}
 264:	08 95       	ret

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
