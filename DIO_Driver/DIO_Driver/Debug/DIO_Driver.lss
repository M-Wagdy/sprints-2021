
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ce  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000731  00000000  00000000  00000d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000687  00000000  00000000  00001453  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000489  00000000  00000000  00001fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BUTTON_get_state>:
* @brief: This function gets the button state
*
* @return button state.
*/
uint8_t BUTTON_get_state(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
   
   /* variable to get error status of the DIO API. */
   DIO_ERROR_state_t e_status;
   
   /* read DIO pin. */
   e_status = DIO_ReadPin(BTN_PORT, BTN_PIN, &data);
  76:	ae 01       	movw	r20, r28
  78:	4f 5f       	subi	r20, 0xFF	; 255
  7a:	5f 4f       	sbci	r21, 0xFF	; 255
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	0e 94 a3 00 	call	0x146	; 0x146 <DIO_ReadPin>
   
   /* return data if DIO API returns success. */
   if(E_DIO_SUCCESS == e_status)
  84:	81 11       	cpse	r24, r1
  86:	02 c0       	rjmp	.+4      	; 0x8c <BUTTON_get_state+0x20>
   {
      return data;
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	01 c0       	rjmp	.+2      	; 0x8e <BUTTON_get_state+0x22>
  8c:	ff cf       	rjmp	.-2      	; 0x8c <BUTTON_get_state+0x20>
      while(1)
      {
         /* do nothing */
      }
   }
  8e:	0f 90       	pop	r0
  90:	df 91       	pop	r29
  92:	cf 91       	pop	r28
  94:	08 95       	ret

00000096 <LED_toggle>:
{
   /* variable to get error status of the DIO API. */
   DIO_ERROR_state_t e_status;
   
   /* toggle DIO pin. */
   e_status = DIO_TogglePin(LED_PORT,LED_PIN);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_TogglePin>
   
   /* if DIO returned error make the program stuck in super loop for debugging. */
   if(E_DIO_SUCCESS != e_status)
  9e:	81 11       	cpse	r24, r1
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <LED_toggle+0xa>
  a2:	08 95       	ret

000000a4 <main>:
   /* Initialization */
   
   /* variable to get error status of the DIO API. */
   DIO_ERROR_state_t DIO_init_state;
   /* initialize DIO pin. */
   DIO_init_state = DIO_SetPinDirection(PORTA, PIN_0, OUTPUT);
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_SetPinDirection>
  ae:	c8 2f       	mov	r28, r24
   DIO_init_state |= DIO_SetPinDirection(PORTC, PIN_0, INPUT);
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_SetPinDirection>
  ba:	8c 2b       	or	r24, r28
   
   /* if DIO init returned error make the program stuck in super loop for debugging. */
   if(E_DIO_SUCCESS != DIO_init_state)
  bc:	09 f0       	breq	.+2      	; 0xc0 <main+0x1c>
  be:	ff cf       	rjmp	.-2      	; 0xbe <main+0x1a>
   
   /* main loop. */
   while(1)
   {
      /* check if button is pressed */
      if(PRESSED == BUTTON_get_state())
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <BUTTON_get_state>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x1c>
      {
         /* toggle LED. */
         LED_toggle();
  c8:	0e 94 4b 00 	call	0x96	; 0x96 <LED_toggle>
         /* loop in empty loop until button is unpressed */
         while(PRESSED == BUTTON_get_state()){}
  cc:	0e 94 36 00 	call	0x6c	; 0x6c <BUTTON_get_state>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	e1 f3       	breq	.-8      	; 0xcc <main+0x28>
  d4:	f5 cf       	rjmp	.-22     	; 0xc0 <main+0x1c>

000000d6 <DIO_SetPinDirection>:
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
  d6:	68 30       	cpi	r22, 0x08	; 8
  d8:	80 f5       	brcc	.+96     	; 0x13a <DIO_SetPinDirection+0x64>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	79 f0       	breq	.+30     	; 0xfc <DIO_SetPinDirection+0x26>
  de:	28 f0       	brcs	.+10     	; 0xea <DIO_SetPinDirection+0x14>
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	31 f0       	breq	.+12     	; 0xf0 <DIO_SetPinDirection+0x1a>
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	39 f0       	breq	.+14     	; 0xf6 <DIO_SetPinDirection+0x20>
  e8:	2a c0       	rjmp	.+84     	; 0x13e <DIO_SetPinDirection+0x68>
  ea:	ea e3       	ldi	r30, 0x3A	; 58
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	08 c0       	rjmp	.+16     	; 0x100 <DIO_SetPinDirection+0x2a>
  f0:	e4 e3       	ldi	r30, 0x34	; 52
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	05 c0       	rjmp	.+10     	; 0x100 <DIO_SetPinDirection+0x2a>
  f6:	e1 e3       	ldi	r30, 0x31	; 49
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_SetPinDirection+0x2a>
  fc:	e7 e3       	ldi	r30, 0x37	; 55
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	41 30       	cpi	r20, 0x01	; 1
 102:	61 f4       	brne	.+24     	; 0x11c <DIO_SetPinDirection+0x46>
 104:	20 81       	ld	r18, Z
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinDirection+0x3a>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinDirection+0x36>
 114:	82 2b       	or	r24, r18
 116:	80 83       	st	Z, r24
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
 11c:	41 11       	cpse	r20, r1
 11e:	11 c0       	rjmp	.+34     	; 0x142 <DIO_SetPinDirection+0x6c>
 120:	20 81       	ld	r18, Z
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_SetPinDirection+0x56>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_SetPinDirection+0x52>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	80 83       	st	Z, r24
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	08 95       	ret
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	08 95       	ret
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	08 95       	ret
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	08 95       	ret

00000146 <DIO_ReadPin>:
{
   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
 146:	41 15       	cp	r20, r1
 148:	51 05       	cpc	r21, r1
 14a:	39 f1       	breq	.+78     	; 0x19a <DIO_ReadPin+0x54>
   {
      return E_DIO_NULL_PTR;
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
 14c:	68 30       	cpi	r22, 0x08	; 8
 14e:	38 f5       	brcc	.+78     	; 0x19e <DIO_ReadPin+0x58>
   {
      /* do nothing */
   }
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	79 f0       	breq	.+30     	; 0x172 <DIO_ReadPin+0x2c>
 154:	28 f0       	brcs	.+10     	; 0x160 <DIO_ReadPin+0x1a>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	31 f0       	breq	.+12     	; 0x166 <DIO_ReadPin+0x20>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	39 f0       	breq	.+14     	; 0x16c <DIO_ReadPin+0x26>
 15e:	21 c0       	rjmp	.+66     	; 0x1a2 <DIO_ReadPin+0x5c>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
 160:	e9 e3       	ldi	r30, 0x39	; 57
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	08 c0       	rjmp	.+16     	; 0x176 <DIO_ReadPin+0x30>
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
         break;
      case PORTC:
         prt_port_stat = &PORTC_STAT;
 166:	e3 e3       	ldi	r30, 0x33	; 51
 168:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 16a:	05 c0       	rjmp	.+10     	; 0x176 <DIO_ReadPin+0x30>
      case PORTD:
         prt_port_stat = &PORTD_STAT;
 16c:	e0 e3       	ldi	r30, 0x30	; 48
 16e:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_ReadPin+0x30>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
 172:	e6 e3       	ldi	r30, 0x36	; 54
 174:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* read the pin value and put it in the data. */
   if(BIT_IS_SET(*prt_port_stat,pin))
 176:	80 81       	ld	r24, Z
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_ReadPin+0x3a>
 17c:	95 95       	asr	r25
 17e:	87 95       	ror	r24
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_ReadPin+0x36>
 184:	80 ff       	sbrs	r24, 0
 186:	05 c0       	rjmp	.+10     	; 0x192 <DIO_ReadPin+0x4c>
   {
      *data = HIGH;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	fa 01       	movw	r30, r20
 18c:	80 83       	st	Z, r24
   {
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	08 95       	ret
   {
      *data = HIGH;
   }
   else
   {
      *data = LOW;
 192:	fa 01       	movw	r30, r20
 194:	10 82       	st	Z, r1
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
   {
      return E_DIO_NULL_PTR;
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	08 95       	ret
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	08 95       	ret
         break;
      case PORTD:
         prt_port_stat = &PORTD_STAT;
         break;
      default:
         return E_DIO_INVALID_PORT;
 1a2:	83 e0       	ldi	r24, 0x03	; 3
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 1a4:	08 95       	ret

000001a6 <DIO_TogglePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 1a6:	68 30       	cpi	r22, 0x08	; 8
 1a8:	f8 f4       	brcc	.+62     	; 0x1e8 <DIO_TogglePin+0x42>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	79 f0       	breq	.+30     	; 0x1cc <DIO_TogglePin+0x26>
 1ae:	28 f0       	brcs	.+10     	; 0x1ba <DIO_TogglePin+0x14>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <DIO_TogglePin+0x1a>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	39 f0       	breq	.+14     	; 0x1c6 <DIO_TogglePin+0x20>
 1b8:	19 c0       	rjmp	.+50     	; 0x1ec <DIO_TogglePin+0x46>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 1ba:	eb e3       	ldi	r30, 0x3B	; 59
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <DIO_TogglePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 1c0:	e5 e3       	ldi	r30, 0x35	; 53
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <DIO_TogglePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 1c6:	e2 e3       	ldi	r30, 0x32	; 50
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_TogglePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 1cc:	e8 e3       	ldi	r30, 0x38	; 56
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
 1d0:	20 81       	ld	r18, Z
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_TogglePin+0x36>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_TogglePin+0x32>
 1e0:	82 27       	eor	r24, r18
 1e2:	80 83       	st	Z, r24
   
   /* return success message. */
   return E_DIO_SUCCESS;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	08 95       	ret
DIO_ERROR_state_t DIO_TogglePin(uint8_t port, uint8_t pin)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 1ec:	83 e0       	ldi	r24, 0x03	; 3
   /* toggles the pin value. */
   TOGGLE_BIT(*prt_port_data, pin);
   
   /* return success message. */
   return E_DIO_SUCCESS;
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
