
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800100  00800100  0000040e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1b  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084e  00000000  00000000  00001147  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000719  00000000  00000000  00001995  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e8  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 30       	cpi	r26, 0x00	; 0
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 30       	cpi	r26, 0x01	; 1
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 65 00 	call	0xca	; 0xca <main>
  8a:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON_get_state>:
* @brief: This function gets the button state
*
* @return button state.
*/
uint8_t BUTTON_get_state(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
   uint8_t data;
   DIO_ERROR_state_t e_status;
   e_status = DIO_read(BTN_PORT, BTN_PIN, &data);
  9c:	ae 01       	movw	r20, r28
  9e:	4f 5f       	subi	r20, 0xFF	; 255
  a0:	5f 4f       	sbci	r21, 0xFF	; 255
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 12 01 	call	0x224	; 0x224 <DIO_read>
         
   if(E_DIO_SUCCESS == e_status)
  aa:	81 11       	cpse	r24, r1
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <BUTTON_get_state+0x20>
   {
      return data;
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <BUTTON_get_state+0x22>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <BUTTON_get_state+0x20>
      while(1)
      {
         /* stuck in case of error */
      }
   }
  b4:	0f 90       	pop	r0
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <LED_toggle>:
* @brief: This function toggles the led
*/
void LED_toggle(void)
{
   DIO_ERROR_state_t e_status;
   e_status = DIO_toggle(LED_PORT,LED_PIN);
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 44 01 	call	0x288	; 0x288 <DIO_toggle>
   if(E_DIO_SUCCESS != e_status)
  c4:	81 11       	cpse	r24, r1
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <LED_toggle+0xa>
  c8:	08 95       	ret

000000ca <main>:


int main(void)
{
   DIO_ERROR_state_t DIO_init_state;
   DIO_init_state = DIO_init(&gastr_DIO_configurations);
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 77 00 	call	0xee	; 0xee <DIO_init>
   if(E_DIO_SUCCESS != DIO_init_state)
  d2:	81 11       	cpse	r24, r1
   {
      LED_toggle();
  d4:	0e 94 5e 00 	call	0xbc	; 0xbc <LED_toggle>
   }
   while(1)
   {
      if(PRESSED == BUTTON_get_state())
  d8:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_get_state>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0xe>
      {
         LED_toggle();
  e0:	0e 94 5e 00 	call	0xbc	; 0xbc <LED_toggle>
         while(PRESSED == BUTTON_get_state()){}
  e4:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_get_state>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	e1 f3       	breq	.-8      	; 0xe4 <main+0x1a>
  ec:	f5 cf       	rjmp	.-22     	; 0xd8 <main+0xe>

000000ee <DIO_init>:
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   return E_DIO_SUCCESS;
}
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ac 01       	movw	r20, r24
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	09 f4       	brne	.+2      	; 0xfe <DIO_init+0x10>
  fc:	90 c0       	rjmp	.+288    	; 0x21e <DIO_init+0x130>
  fe:	41 15       	cp	r20, r1
 100:	51 05       	cpc	r21, r1
 102:	09 f4       	brne	.+2      	; 0x106 <DIO_init+0x18>
 104:	89 c0       	rjmp	.+274    	; 0x218 <DIO_init+0x12a>
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	7f c0       	rjmp	.+254    	; 0x208 <DIO_init+0x11a>
 10a:	e9 2f       	mov	r30, r25
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	9f 01       	movw	r18, r30
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	e2 0f       	add	r30, r18
 11a:	f3 1f       	adc	r31, r19
 11c:	e4 0f       	add	r30, r20
 11e:	f5 1f       	adc	r31, r21
 120:	20 81       	ld	r18, Z
 122:	21 30       	cpi	r18, 0x01	; 1
 124:	a9 f0       	breq	.+42     	; 0x150 <DIO_init+0x62>
 126:	28 f0       	brcs	.+10     	; 0x132 <DIO_init+0x44>
 128:	22 30       	cpi	r18, 0x02	; 2
 12a:	41 f0       	breq	.+16     	; 0x13c <DIO_init+0x4e>
 12c:	23 30       	cpi	r18, 0x03	; 3
 12e:	59 f0       	breq	.+22     	; 0x146 <DIO_init+0x58>
 130:	75 c0       	rjmp	.+234    	; 0x21c <DIO_init+0x12e>
 132:	aa e3       	ldi	r26, 0x3A	; 58
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	cb e3       	ldi	r28, 0x3B	; 59
 138:	d0 e0       	ldi	r29, 0x00	; 0
 13a:	0e c0       	rjmp	.+28     	; 0x158 <DIO_init+0x6a>
 13c:	a4 e3       	ldi	r26, 0x34	; 52
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	c5 e3       	ldi	r28, 0x35	; 53
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	09 c0       	rjmp	.+18     	; 0x158 <DIO_init+0x6a>
 146:	a1 e3       	ldi	r26, 0x31	; 49
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	c2 e3       	ldi	r28, 0x32	; 50
 14c:	d0 e0       	ldi	r29, 0x00	; 0
 14e:	04 c0       	rjmp	.+8      	; 0x158 <DIO_init+0x6a>
 150:	a7 e3       	ldi	r26, 0x37	; 55
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	c8 e3       	ldi	r28, 0x38	; 56
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	22 81       	ldd	r18, Z+2	; 0x02
 15a:	21 30       	cpi	r18, 0x01	; 1
 15c:	49 f5       	brne	.+82     	; 0x1b0 <DIO_init+0xc2>
 15e:	8c 91       	ld	r24, X
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	01 80       	ldd	r0, Z+1	; 0x01
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_init+0x7e>
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_init+0x7a>
 170:	28 2b       	or	r18, r24
 172:	2c 93       	st	X, r18
 174:	84 81       	ldd	r24, Z+4	; 0x04
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	61 f4       	brne	.+24     	; 0x192 <DIO_init+0xa4>
 17a:	88 81       	ld	r24, Y
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	01 80       	ldd	r0, Z+1	; 0x01
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_init+0x9a>
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_init+0x96>
 18c:	28 2b       	or	r18, r24
 18e:	28 83       	st	Y, r18
 190:	3a c0       	rjmp	.+116    	; 0x206 <DIO_init+0x118>
 192:	81 11       	cpse	r24, r1
 194:	38 c0       	rjmp	.+112    	; 0x206 <DIO_init+0x118>
 196:	88 81       	ld	r24, Y
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	01 80       	ldd	r0, Z+1	; 0x01
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_init+0xb6>
 1a0:	22 0f       	add	r18, r18
 1a2:	33 1f       	adc	r19, r19
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_init+0xb2>
 1a8:	20 95       	com	r18
 1aa:	28 23       	and	r18, r24
 1ac:	28 83       	st	Y, r18
 1ae:	2b c0       	rjmp	.+86     	; 0x206 <DIO_init+0x118>
 1b0:	21 11       	cpse	r18, r1
 1b2:	29 c0       	rjmp	.+82     	; 0x206 <DIO_init+0x118>
 1b4:	8c 91       	ld	r24, X
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	01 80       	ldd	r0, Z+1	; 0x01
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_init+0xd4>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_init+0xd0>
 1c6:	20 95       	com	r18
 1c8:	28 23       	and	r18, r24
 1ca:	2c 93       	st	X, r18
 1cc:	83 81       	ldd	r24, Z+3	; 0x03
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	61 f4       	brne	.+24     	; 0x1ea <DIO_init+0xfc>
 1d2:	88 81       	ld	r24, Y
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	01 80       	ldd	r0, Z+1	; 0x01
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_init+0xf2>
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_init+0xee>
 1e4:	28 2b       	or	r18, r24
 1e6:	28 83       	st	Y, r18
 1e8:	0e c0       	rjmp	.+28     	; 0x206 <DIO_init+0x118>
 1ea:	81 11       	cpse	r24, r1
 1ec:	0c c0       	rjmp	.+24     	; 0x206 <DIO_init+0x118>
 1ee:	88 81       	ld	r24, Y
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	01 80       	ldd	r0, Z+1	; 0x01
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_init+0x10e>
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_init+0x10a>
 200:	20 95       	com	r18
 202:	28 23       	and	r18, r24
 204:	28 83       	st	Y, r18
 206:	9f 5f       	subi	r25, 0xFF	; 255
 208:	90 32       	cpi	r25, 0x20	; 32
 20a:	08 f4       	brcc	.+2      	; 0x20e <DIO_init+0x120>
 20c:	7e cf       	rjmp	.-260    	; 0x10a <DIO_init+0x1c>
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	03 c0       	rjmp	.+6      	; 0x21e <DIO_init+0x130>
 218:	85 e0       	ldi	r24, 0x05	; 5
 21a:	01 c0       	rjmp	.+2      	; 0x21e <DIO_init+0x130>
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <DIO_read>:
*/
DIO_ERROR_state_t DIO_read(uint8_t port, ENU_pins pin, uint8_t * data)
{
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   if(NOT_INIT == gu8_is_DIO_init)
 224:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_end>
 228:	99 23       	and	r25, r25
 22a:	41 f1       	breq	.+80     	; 0x27c <DIO_read+0x58>
   {
      return E_DIO_NOT_INIT;
   }
   else if(NULL_PTR == data)
 22c:	41 15       	cp	r20, r1
 22e:	51 05       	cpc	r21, r1
 230:	39 f1       	breq	.+78     	; 0x280 <DIO_read+0x5c>
   else
   {
      /* do nothing */
   }
   
   switch(port)
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	79 f0       	breq	.+30     	; 0x254 <DIO_read+0x30>
 236:	28 f0       	brcs	.+10     	; 0x242 <DIO_read+0x1e>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	31 f0       	breq	.+12     	; 0x248 <DIO_read+0x24>
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	39 f0       	breq	.+14     	; 0x24e <DIO_read+0x2a>
 240:	21 c0       	rjmp	.+66     	; 0x284 <DIO_read+0x60>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
 242:	e9 e3       	ldi	r30, 0x39	; 57
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	08 c0       	rjmp	.+16     	; 0x258 <DIO_read+0x34>
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
         break;
      case PORTC:
         prt_port_stat = &PORTC_STAT;
 248:	e3 e3       	ldi	r30, 0x33	; 51
 24a:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 24c:	05 c0       	rjmp	.+10     	; 0x258 <DIO_read+0x34>
      case PORTD:
         prt_port_stat = &PORTD_STAT;
 24e:	e0 e3       	ldi	r30, 0x30	; 48
 250:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_read+0x34>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
 254:	e6 e3       	ldi	r30, 0x36	; 54
 256:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   
   if(BIT_IS_SET(*prt_port_stat,pin))
 258:	80 81       	ld	r24, Z
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_read+0x3e>
 25e:	95 95       	asr	r25
 260:	87 95       	ror	r24
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_read+0x3a>
 266:	80 ff       	sbrs	r24, 0
 268:	05 c0       	rjmp	.+10     	; 0x274 <DIO_read+0x50>
   {
      *data = HIGH;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	fa 01       	movw	r30, r20
 26e:	80 83       	st	Z, r24
   }
   else
   {
      *data = LOW;
   }
   return E_DIO_SUCCESS;
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	08 95       	ret
   {
      *data = HIGH;
   }
   else
   {
      *data = LOW;
 274:	fa 01       	movw	r30, r20
 276:	10 82       	st	Z, r1
   }
   return E_DIO_SUCCESS;
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	08 95       	ret
{
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   if(NOT_INIT == gu8_is_DIO_init)
   {
      return E_DIO_NOT_INIT;
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	08 95       	ret
   }
   else if(NULL_PTR == data)
   {
      return E_DIO_NULL_PTR;
 280:	85 e0       	ldi	r24, 0x05	; 5
 282:	08 95       	ret
         break;
      case PORTD:
         prt_port_stat = &PORTD_STAT;
         break;
      default:
         return E_DIO_INVALID_PORT;
 284:	83 e0       	ldi	r24, 0x03	; 3
   else
   {
      *data = LOW;
   }
   return E_DIO_SUCCESS;
}
 286:	08 95       	ret

00000288 <DIO_toggle>:
*/
DIO_ERROR_state_t DIO_toggle(uint8_t port, ENU_pins pin)
{
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   if(NOT_INIT == gu8_is_DIO_init)
 288:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_end>
 28c:	99 23       	and	r25, r25
 28e:	f9 f0       	breq	.+62     	; 0x2ce <DIO_toggle+0x46>
   else
   {
      /* do nothing */
   }
   
   switch(port)
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	79 f0       	breq	.+30     	; 0x2b2 <DIO_toggle+0x2a>
 294:	28 f0       	brcs	.+10     	; 0x2a0 <DIO_toggle+0x18>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	31 f0       	breq	.+12     	; 0x2a6 <DIO_toggle+0x1e>
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	39 f0       	breq	.+14     	; 0x2ac <DIO_toggle+0x24>
 29e:	19 c0       	rjmp	.+50     	; 0x2d2 <DIO_toggle+0x4a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 2a0:	eb e3       	ldi	r30, 0x3B	; 59
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	08 c0       	rjmp	.+16     	; 0x2b6 <DIO_toggle+0x2e>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 2a6:	e5 e3       	ldi	r30, 0x35	; 53
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <DIO_toggle+0x2e>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 2ac:	e2 e3       	ldi	r30, 0x32	; 50
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_toggle+0x2e>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 2b2:	e8 e3       	ldi	r30, 0x38	; 56
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   
   TOGGLE_BIT(*prt_port_data, pin);
 2b6:	20 81       	ld	r18, Z
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_toggle+0x3a>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_toggle+0x36>
 2c6:	82 27       	eor	r24, r18
 2c8:	80 83       	st	Z, r24
   
   return E_DIO_SUCCESS;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 95       	ret
{
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   if(NOT_INIT == gu8_is_DIO_init)
   {
      return E_DIO_NOT_INIT;
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 2d2:	83 e0       	ldi	r24, 0x03	; 3
   }
   
   TOGGLE_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
 2d4:	08 95       	ret

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
