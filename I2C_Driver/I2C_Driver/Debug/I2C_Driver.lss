
I2C_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bee  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068e  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000577  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000464  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000052b  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000258f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  64:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <master>:
   {
      return;
   }
   /* set portA pins to the received data */
   PORTA_DATA = data;
}
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Init>
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	0e 94 7b 00 	call	0xf6	; 0xf6 <I2C_Start>
  82:	be 01       	movw	r22, r28
  84:	6f 5f       	subi	r22, 0xFF	; 255
  86:	7f 4f       	sbci	r23, 0xFF	; 255
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	0e 94 9d 00 	call	0x13a	; 0x13a <I2C_Status>
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	88 30       	cpi	r24, 0x08	; 8
  92:	e9 f4       	brne	.+58     	; 0xce <master+0x62>
  94:	60 ea       	ldi	r22, 0xA0	; 160
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Write>
  9c:	be 01       	movw	r22, r28
  9e:	6f 5f       	subi	r22, 0xFF	; 255
  a0:	7f 4f       	sbci	r23, 0xFF	; 255
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 9d 00 	call	0x13a	; 0x13a <I2C_Status>
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	88 31       	cpi	r24, 0x18	; 24
  ac:	81 f4       	brne	.+32     	; 0xce <master+0x62>
  ae:	67 e9       	ldi	r22, 0x97	; 151
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Write>
  b6:	be 01       	movw	r22, r28
  b8:	6f 5f       	subi	r22, 0xFF	; 255
  ba:	7f 4f       	sbci	r23, 0xFF	; 255
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 9d 00 	call	0x13a	; 0x13a <I2C_Status>
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	88 32       	cpi	r24, 0x28	; 40
  c6:	19 f4       	brne	.+6      	; 0xce <master+0x62>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 94 00 	call	0x128	; 0x128 <I2C_Stop>
  ce:	0f 90       	pop	r0
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <main>:

int main(void)
{
   master();
  d6:	0e 94 36 00 	call	0x6c	; 0x6c <master>
}
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	08 95       	ret

000000e0 <I2C_Init>:
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
  e0:	81 11       	cpse	r24, r1
  e2:	07 c0       	rjmp	.+14     	; 0xf2 <I2C_Init+0x12>
  e4:	11 b8       	out	0x01, r1	; 1
  e6:	87 e0       	ldi	r24, 0x07	; 7
  e8:	80 b9       	out	0x00, r24	; 0
  ea:	84 e4       	ldi	r24, 0x44	; 68
  ec:	86 bf       	out	0x36, r24	; 54
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 95       	ret
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	08 95       	ret

000000f6 <I2C_Start>:
  f6:	81 11       	cpse	r24, r1
  f8:	08 c0       	rjmp	.+16     	; 0x10a <I2C_Start+0x14>
  fa:	86 b7       	in	r24, 0x36	; 54
  fc:	84 6a       	ori	r24, 0xA4	; 164
  fe:	86 bf       	out	0x36, r24	; 54
 100:	06 b6       	in	r0, 0x36	; 54
 102:	07 fe       	sbrs	r0, 7
 104:	fd cf       	rjmp	.-6      	; 0x100 <I2C_Start+0xa>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	08 95       	ret

0000010e <I2C_Write>:
 10e:	81 11       	cpse	r24, r1
 110:	09 c0       	rjmp	.+18     	; 0x124 <I2C_Write+0x16>
 112:	63 b9       	out	0x03, r22	; 3
 114:	86 b7       	in	r24, 0x36	; 54
 116:	84 68       	ori	r24, 0x84	; 132
 118:	86 bf       	out	0x36, r24	; 54
 11a:	06 b6       	in	r0, 0x36	; 54
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <I2C_Write+0xc>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	08 95       	ret

00000128 <I2C_Stop>:
I2C_ERROR_state_t I2C_Stop(uint8_t I2C_CH)
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   switch(I2C_CH)
 128:	81 11       	cpse	r24, r1
 12a:	05 c0       	rjmp	.+10     	; 0x136 <I2C_Stop+0xe>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set stop condition */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
 12c:	86 b7       	in	r24, 0x36	; 54
 12e:	84 69       	ori	r24, 0x94	; 148
 130:	86 bf       	out	0x36, r24	; 54
         
   /* return success message */
   return E_I2C_SUCCESS;
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
 136:	82 e0       	ldi	r24, 0x02	; 2
   /* set stop condition */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
         
   /* return success message */
   return E_I2C_SUCCESS;
}
 138:	08 95       	ret

0000013a <I2C_Status>:
* @return function error state.
*/
I2C_ERROR_state_t I2C_Status(uint8_t I2C_CH, uint8_t * Status)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Status)
 13a:	61 15       	cp	r22, r1
 13c:	71 05       	cpc	r23, r1
 13e:	41 f0       	breq	.+16     	; 0x150 <I2C_Status+0x16>
   }
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CStatusR;
   
   switch(I2C_CH)
 140:	81 11       	cpse	r24, r1
 142:	08 c0       	rjmp	.+16     	; 0x154 <I2C_Status+0x1a>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* return status */
   *Status = (*ptr_I2CStatusR & I2C_STATUS_BITS);
 144:	81 b1       	in	r24, 0x01	; 1
 146:	88 7f       	andi	r24, 0xF8	; 248
 148:	fb 01       	movw	r30, r22
 14a:	80 83       	st	Z, r24
         
   /* return success message */
   return E_I2C_SUCCESS;
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	08 95       	ret
I2C_ERROR_state_t I2C_Status(uint8_t I2C_CH, uint8_t * Status)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Status)
   {
      return E_I2C_NULL_PTR;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CStatusR = &I2C_STATUS_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
 154:	82 e0       	ldi	r24, 0x02	; 2
   /* return status */
   *Status = (*ptr_I2CStatusR & I2C_STATUS_BITS);
         
   /* return success message */
   return E_I2C_SUCCESS;
}
 156:	08 95       	ret

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
