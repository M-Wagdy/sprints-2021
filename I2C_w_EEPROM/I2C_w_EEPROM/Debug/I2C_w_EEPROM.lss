
I2C_w_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  0000040a  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001514  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000953  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b87  00000000  00000000  000024eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000284  00000000  00000000  00003074  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000714  00000000  00000000  000032f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d7a  00000000  00000000  00003a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00004786  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  7a:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <EEPROM_Init>:
{
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	39 f4       	brne	.+14     	; 0x94 <EEPROM_Init+0x12>
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* configure i2c pins */
   e_state = I2C_Init(u8_I2C_CH);
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 49 01 	call	0x292	; 0x292 <I2C_Init>
   /* make sure pin configuration is successful */
   if(E_I2C_SUCCESS != e_state)
  8c:	88 23       	and	r24, r24
  8e:	21 f0       	breq	.+8      	; 0x98 <EEPROM_Init+0x16>
   {
      return E_EEPROM_I2C_ERROR;
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	08 95       	ret
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	08 95       	ret
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
  98:	80 e0       	ldi	r24, 0x00	; 0
}
  9a:	08 95       	ret

0000009c <EEPROM_Read>:
* @param [in]  data        -  Pointer to where to store received data.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_Read(uint8_t EEPROM_CH, uint8_t address, uint8_t * data)
{
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	49 f5       	brne	.+82     	; 0xf8 <EEPROM_Read+0x5c>
  a6:	8a 01       	movw	r16, r20
  a8:	c6 2f       	mov	r28, r22
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* Set start condition */
   e_state =I2C_Start(u8_I2C_CH);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 55 01 	call	0x2aa	; 0x2aa <I2C_Start>
   if(E_I2C_SUCCESS != e_state)
  b0:	81 11       	cpse	r24, r1
  b2:	24 c0       	rjmp	.+72     	; 0xfc <EEPROM_Read+0x60>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_WRITE);
  b4:	60 ea       	ldi	r22, 0xA0	; 160
  b6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
  ba:	81 11       	cpse	r24, r1
  bc:	21 c0       	rjmp	.+66     	; 0x100 <EEPROM_Read+0x64>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set address to read from */
   e_state = I2C_Write(u8_I2C_CH, address);
  be:	6c 2f       	mov	r22, r28
  c0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
  c4:	81 11       	cpse	r24, r1
  c6:	1e c0       	rjmp	.+60     	; 0x104 <EEPROM_Read+0x68>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* repeated start */
   e_state = I2C_Stop(u8_I2C_CH);
  c8:	0e 94 8c 01 	call	0x318	; 0x318 <I2C_Stop>
   if(E_I2C_SUCCESS != e_state)
  cc:	81 11       	cpse	r24, r1
  ce:	1c c0       	rjmp	.+56     	; 0x108 <EEPROM_Read+0x6c>
   {
      return E_EEPROM_I2C_ERROR;
   }
   e_state = I2C_RepeatedStart(u8_I2C_CH);
  d0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <I2C_RepeatedStart>
   if(E_I2C_SUCCESS != e_state)
  d4:	81 11       	cpse	r24, r1
  d6:	1a c0       	rjmp	.+52     	; 0x10c <EEPROM_Read+0x70>
   {
      return E_EEPROM_I2C_ERROR;
   }
   /* Set first memory block address + R */
   e_state= I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_READ );
  d8:	61 ea       	ldi	r22, 0xA1	; 161
  da:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
  de:	81 11       	cpse	r24, r1
  e0:	17 c0       	rjmp	.+46     	; 0x110 <EEPROM_Read+0x74>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* receive data in the address */
   e_state = I2C_ReadNoAck(u8_I2C_CH, data);
  e2:	b8 01       	movw	r22, r16
  e4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <I2C_ReadNoAck>
   if(E_I2C_SUCCESS != e_state)
  e8:	81 11       	cpse	r24, r1
  ea:	14 c0       	rjmp	.+40     	; 0x114 <EEPROM_Read+0x78>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* release the bus */
   e_state = I2C_Stop(u8_I2C_CH);
  ec:	0e 94 8c 01 	call	0x318	; 0x318 <I2C_Stop>
   if(E_I2C_SUCCESS != e_state)
  f0:	88 23       	and	r24, r24
  f2:	91 f0       	breq	.+36     	; 0x118 <EEPROM_Read+0x7c>
   {
      return E_EEPROM_I2C_ERROR;
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	11 c0       	rjmp	.+34     	; 0x11a <EEPROM_Read+0x7e>
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0f c0       	rjmp	.+30     	; 0x11a <EEPROM_Read+0x7e>
   
   /* Set start condition */
   e_state =I2C_Start(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	0d c0       	rjmp	.+26     	; 0x11a <EEPROM_Read+0x7e>
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_WRITE);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0b c0       	rjmp	.+22     	; 0x11a <EEPROM_Read+0x7e>
   
   /* Set address to read from */
   e_state = I2C_Write(u8_I2C_CH, address);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	09 c0       	rjmp	.+18     	; 0x11a <EEPROM_Read+0x7e>

   /* repeated start */
   e_state = I2C_Stop(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	07 c0       	rjmp	.+14     	; 0x11a <EEPROM_Read+0x7e>
   }
   e_state = I2C_RepeatedStart(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	05 c0       	rjmp	.+10     	; 0x11a <EEPROM_Read+0x7e>
   }
   /* Set first memory block address + R */
   e_state= I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_READ );
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	03 c0       	rjmp	.+6      	; 0x11a <EEPROM_Read+0x7e>
   
   /* receive data in the address */
   e_state = I2C_ReadNoAck(u8_I2C_CH, data);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <EEPROM_Read+0x7e>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 118:	80 e0       	ldi	r24, 0x00	; 0
}
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <EEPROM_Write>:
* @param [in]  data        -  Data to write.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_Write(uint8_t EEPROM_CH, uint8_t address, uint8_t data)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	e1 f4       	brne	.+56     	; 0x162 <EEPROM_Write+0x40>
 12a:	d4 2f       	mov	r29, r20
 12c:	c6 2f       	mov	r28, r22
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* Set start condition */
   e_state = I2C_Start(u8_I2C_CH);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 55 01 	call	0x2aa	; 0x2aa <I2C_Start>
   if(E_I2C_SUCCESS != e_state)
 134:	81 11       	cpse	r24, r1
 136:	17 c0       	rjmp	.+46     	; 0x166 <EEPROM_Write+0x44>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_WRITE);
 138:	60 ea       	ldi	r22, 0xA0	; 160
 13a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 13e:	81 11       	cpse	r24, r1
 140:	14 c0       	rjmp	.+40     	; 0x16a <EEPROM_Write+0x48>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* set address to write to */
   e_state = I2C_Write(u8_I2C_CH, address);
 142:	6c 2f       	mov	r22, r28
 144:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 148:	81 11       	cpse	r24, r1
 14a:	11 c0       	rjmp	.+34     	; 0x16e <EEPROM_Write+0x4c>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* writes data to the address */
   e_state = I2C_Write(u8_I2C_CH, data);
 14c:	6d 2f       	mov	r22, r29
 14e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
 152:	81 11       	cpse	r24, r1
 154:	0e c0       	rjmp	.+28     	; 0x172 <EEPROM_Write+0x50>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* release the bus */
   e_state = I2C_Stop(u8_I2C_CH);
 156:	0e 94 8c 01 	call	0x318	; 0x318 <I2C_Stop>
   if(E_I2C_SUCCESS != e_state)
 15a:	88 23       	and	r24, r24
 15c:	61 f0       	breq	.+24     	; 0x176 <EEPROM_Write+0x54>
   {
      return E_EEPROM_I2C_ERROR;
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0b c0       	rjmp	.+22     	; 0x178 <EEPROM_Write+0x56>
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	09 c0       	rjmp	.+18     	; 0x178 <EEPROM_Write+0x56>
   
   /* Set start condition */
   e_state = I2C_Start(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	07 c0       	rjmp	.+14     	; 0x178 <EEPROM_Write+0x56>
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_WRITE);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	05 c0       	rjmp	.+10     	; 0x178 <EEPROM_Write+0x56>
   
   /* set address to write to */
   e_state = I2C_Write(u8_I2C_CH, address);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	03 c0       	rjmp	.+6      	; 0x178 <EEPROM_Write+0x56>
   
   /* writes data to the address */
   e_state = I2C_Write(u8_I2C_CH, data);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	01 c0       	rjmp	.+2      	; 0x178 <EEPROM_Write+0x56>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <StringCompare>:
* @param [in]  str2   -  pointer to the second string.
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
 17e:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
 180:	40 e0       	ldi	r20, 0x00	; 0
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
 182:	0a c0       	rjmp	.+20     	; 0x198 <StringCompare+0x1a>
   {
      if(str1[u8_counter] != str2[u8_counter])
 184:	fb 01       	movw	r30, r22
 186:	e2 0f       	add	r30, r18
 188:	f3 1f       	adc	r31, r19
 18a:	20 81       	ld	r18, Z
 18c:	92 17       	cp	r25, r18
 18e:	19 f0       	breq	.+6      	; 0x196 <StringCompare+0x18>
      {
         u8_isEqual = FALSE;
         u8_counter++;
 190:	4f 5f       	subi	r20, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
 192:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
 194:	0e c0       	rjmp	.+28     	; 0x1b2 <StringCompare+0x34>
      }
      u8_counter++;
 196:	4f 5f       	subi	r20, 0xFF	; 255
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
 198:	24 2f       	mov	r18, r20
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	fd 01       	movw	r30, r26
 19e:	e2 0f       	add	r30, r18
 1a0:	f3 1f       	adc	r31, r19
 1a2:	90 81       	ld	r25, Z
 1a4:	99 23       	and	r25, r25
 1a6:	21 f0       	breq	.+8      	; 0x1b0 <StringCompare+0x32>
 1a8:	9d 30       	cpi	r25, 0x0D	; 13
 1aa:	61 f7       	brne	.-40     	; 0x184 <StringCompare+0x6>
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <StringCompare+0x34>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
 1b2:	fb 01       	movw	r30, r22
 1b4:	e4 0f       	add	r30, r20
 1b6:	f1 1d       	adc	r31, r1
 1b8:	90 81       	ld	r25, Z
 1ba:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
 1be:	08 95       	ret

000001c0 <main>:
static uint8_t * gu8_UARTMessageReply = "\rOK \r";
static uint8_t * gu8_ReadMessageReply = "the data stored is: \r";
static uint8_t * gu8_InvalidMessageReply = "Invalid Command \r";

int main(void)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	ca 5c       	subi	r28, 0xCA	; 202
 1ca:	d1 09       	sbc	r29, r1
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	cd bf       	out	0x3d, r28	; 61
   EEPROM_Init(EEPROM_CH_0);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 41 00 	call	0x82	; 0x82 <EEPROM_Init>
   UART_Init(UART_CH_0);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 98 01 	call	0x330	; 0x330 <UART_Init>
   while(1)
   {
      uint8_t string[MAX_STRING_SIZE];
      uint8_t data;
      uint8_t address;
      UART_ReceiveString(UART_CH_0, string);
 1e2:	be 01       	movw	r22, r28
 1e4:	6f 5f       	subi	r22, 0xFF	; 255
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <UART_ReceiveString>
      
      UART_ReceiveChar(UART_CH_0, &address);
 1ee:	be 01       	movw	r22, r28
 1f0:	67 53       	subi	r22, 0x37	; 55
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 ad 01 	call	0x35a	; 0x35a <UART_ReceiveChar>
      
      UART_TransmitString(UART_CH_0, gu8_UARTMessageReply);
 1fa:	60 e6       	ldi	r22, 0x60	; 96
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_TransmitString>
      
      if (StringCompare(string,gu8_WriteMessage) == TRUE)
 204:	66 e6       	ldi	r22, 0x66	; 102
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	ce 01       	movw	r24, r28
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	0e 94 bf 00 	call	0x17e	; 0x17e <StringCompare>
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	c9 f4       	brne	.+50     	; 0x246 <main+0x86>
      {
         UART_ReceiveChar(UART_CH_0, &data);
 214:	be 01       	movw	r22, r28
 216:	66 53       	subi	r22, 0x36	; 54
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 ad 01 	call	0x35a	; 0x35a <UART_ReceiveChar>
         
         EEPROM_Write(EEPROM_CH_0, address, data);
 220:	c6 53       	subi	r28, 0x36	; 54
 222:	df 4f       	sbci	r29, 0xFF	; 255
 224:	48 81       	ld	r20, Y
 226:	ca 5c       	subi	r28, 0xCA	; 202
 228:	d0 40       	sbci	r29, 0x00	; 0
 22a:	c7 53       	subi	r28, 0x37	; 55
 22c:	df 4f       	sbci	r29, 0xFF	; 255
 22e:	68 81       	ld	r22, Y
 230:	c9 5c       	subi	r28, 0xC9	; 201
 232:	d0 40       	sbci	r29, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 91 00 	call	0x122	; 0x122 <EEPROM_Write>
         
         UART_TransmitString(UART_CH_0, gu8_UARTMessageReply);
 23a:	60 e6       	ldi	r22, 0x60	; 96
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_TransmitString>
 244:	ce cf       	rjmp	.-100    	; 0x1e2 <main+0x22>
      }
      else if(StringCompare(string,gu8_ReadMessage) == TRUE)
 246:	6c e6       	ldi	r22, 0x6C	; 108
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	ce 01       	movw	r24, r28
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	0e 94 bf 00 	call	0x17e	; 0x17e <StringCompare>
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	c1 f4       	brne	.+48     	; 0x286 <main+0xc6>
      {
         EEPROM_Read(EEPROM_CH_0, address, &data);
 256:	ae 01       	movw	r20, r28
 258:	46 53       	subi	r20, 0x36	; 54
 25a:	5f 4f       	sbci	r21, 0xFF	; 255
 25c:	c7 53       	subi	r28, 0x37	; 55
 25e:	df 4f       	sbci	r29, 0xFF	; 255
 260:	68 81       	ld	r22, Y
 262:	c9 5c       	subi	r28, 0xC9	; 201
 264:	d0 40       	sbci	r29, 0x00	; 0
 266:	0e 94 4e 00 	call	0x9c	; 0x9c <EEPROM_Read>
         
         UART_TransmitString(UART_CH_0, gu8_ReadMessageReply);
 26a:	61 e7       	ldi	r22, 0x71	; 113
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_TransmitString>
         
         UART_TransmitChar(UART_CH_0, data);
 274:	c6 53       	subi	r28, 0x36	; 54
 276:	df 4f       	sbci	r29, 0xFF	; 255
 278:	68 81       	ld	r22, Y
 27a:	ca 5c       	subi	r28, 0xCA	; 202
 27c:	d0 40       	sbci	r29, 0x00	; 0
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 a4 01 	call	0x348	; 0x348 <UART_TransmitChar>
 284:	ae cf       	rjmp	.-164    	; 0x1e2 <main+0x22>
      }
      else
      {
         UART_TransmitString(UART_CH_0, gu8_InvalidMessageReply);
 286:	67 e8       	ldi	r22, 0x87	; 135
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_TransmitString>
      }
   }
 290:	a8 cf       	rjmp	.-176    	; 0x1e2 <main+0x22>

00000292 <I2C_Init>:
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
 292:	81 11       	cpse	r24, r1
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <I2C_Init+0x14>
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	81 b9       	out	0x01, r24	; 1
 29a:	87 e0       	ldi	r24, 0x07	; 7
 29c:	80 b9       	out	0x00, r24	; 0
 29e:	84 e0       	ldi	r24, 0x04	; 4
 2a0:	86 bf       	out	0x36, r24	; 54
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	08 95       	ret

000002aa <I2C_Start>:
 2aa:	81 11       	cpse	r24, r1
 2ac:	07 c0       	rjmp	.+14     	; 0x2bc <I2C_Start+0x12>
 2ae:	84 ea       	ldi	r24, 0xA4	; 164
 2b0:	86 bf       	out	0x36, r24	; 54
 2b2:	06 b6       	in	r0, 0x36	; 54
 2b4:	07 fe       	sbrs	r0, 7
 2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <I2C_Start+0x8>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	08 95       	ret

000002c0 <I2C_RepeatedStart>:
 2c0:	81 11       	cpse	r24, r1
 2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <I2C_RepeatedStart+0x12>
 2c4:	84 ea       	ldi	r24, 0xA4	; 164
 2c6:	86 bf       	out	0x36, r24	; 54
 2c8:	06 b6       	in	r0, 0x36	; 54
 2ca:	07 fe       	sbrs	r0, 7
 2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <I2C_RepeatedStart+0x8>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 95       	ret
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	08 95       	ret

000002d6 <I2C_Write>:
 2d6:	81 11       	cpse	r24, r1
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <I2C_Write+0x16>
 2da:	63 b9       	out	0x03, r22	; 3
 2dc:	86 b7       	in	r24, 0x36	; 54
 2de:	84 68       	ori	r24, 0x84	; 132
 2e0:	86 bf       	out	0x36, r24	; 54
 2e2:	06 b6       	in	r0, 0x36	; 54
 2e4:	07 fe       	sbrs	r0, 7
 2e6:	fd cf       	rjmp	.-6      	; 0x2e2 <I2C_Write+0xc>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	08 95       	ret

000002f0 <I2C_ReadNoAck>:
* @return function error state.
*/
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
 2f0:	61 15       	cp	r22, r1
 2f2:	71 05       	cpc	r23, r1
 2f4:	69 f0       	breq	.+26     	; 0x310 <I2C_ReadNoAck+0x20>
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CDataR;
   
   switch(I2C_CH)
 2f6:	81 11       	cpse	r24, r1
 2f8:	0d c0       	rjmp	.+26     	; 0x314 <I2C_ReadNoAck+0x24>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* start receiving and don't send ack at end. */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG | I2C_EN);
 2fa:	86 b7       	in	r24, 0x36	; 54
 2fc:	84 68       	ori	r24, 0x84	; 132
 2fe:	86 bf       	out	0x36, r24	; 54
   /* loop until interrupt flag is raised */
   while (!(*ptr_I2CControlR & I2C_INTERRUPT_FLAG));
 300:	06 b6       	in	r0, 0x36	; 54
 302:	07 fe       	sbrs	r0, 7
 304:	fd cf       	rjmp	.-6      	; 0x300 <I2C_ReadNoAck+0x10>
   /* return data received */
   *Data = *ptr_I2CDataR;
 306:	83 b1       	in	r24, 0x03	; 3
 308:	fb 01       	movw	r30, r22
 30a:	80 83       	st	Z, r24
   
   /* return success message */
   return E_I2C_SUCCESS;
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	08 95       	ret
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
   {
      return E_I2C_NULL_PTR;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	08 95       	ret
         ptr_I2CDataR = &I2C_DATA_R;
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
 314:	82 e0       	ldi	r24, 0x02	; 2
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
 316:	08 95       	ret

00000318 <I2C_Stop>:
I2C_ERROR_state_t I2C_Stop(uint8_t I2C_CH)
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   switch(I2C_CH)
 318:	81 11       	cpse	r24, r1
 31a:	08 c0       	rjmp	.+16     	; 0x32c <I2C_Stop+0x14>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set stop condition */
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
 31c:	84 e9       	ldi	r24, 0x94	; 148
 31e:	86 bf       	out	0x36, r24	; 54
   
   while (*ptr_I2CControlR & I2C_STOP_BIT);
 320:	96 b7       	in	r25, 0x36	; 54
 322:	89 2f       	mov	r24, r25
 324:	80 71       	andi	r24, 0x10	; 16
 326:	94 fd       	sbrc	r25, 4
 328:	fb cf       	rjmp	.-10     	; 0x320 <I2C_Stop+0x8>
 32a:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
 32c:	82 e0       	ldi	r24, 0x02	; 2
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
   
   while (*ptr_I2CControlR & I2C_STOP_BIT);
   /* return success message */
   return E_I2C_SUCCESS;
}
 32e:	08 95       	ret

00000330 <UART_Init>:
*
* @return function error state.
*/
UART_ERROR_state_t UART_Init(uint8_t UartNumber)
{
   switch(UartNumber)
 330:	81 11       	cpse	r24, r1
 332:	08 c0       	rjmp	.+16     	; 0x344 <UART_Init+0x14>
         {
            return E_UART_INVALID_BAUD_RATE;
         }
      
         /* Enable Receiver and Transmitter */
         UART_CONTROL_R = UART_CH_0_CONTROL;
 334:	88 e1       	ldi	r24, 0x18	; 24
 336:	8a b9       	out	0x0a, r24	; 10
         /* Set Odd parity, 2 stop bits and 8 bits data size */
         UART_CONTROL_2_R = UART_CH_0_CONTROL_2;
 338:	86 e8       	ldi	r24, 0x86	; 134
 33a:	80 bd       	out	0x20, r24	; 32
      
         /* Set Baud Rate low bits */
         UART_BAUDRATE_LOW_R = (uint8_t)UART_CH_0_BaudRate;
 33c:	83 e3       	ldi	r24, 0x33	; 51
 33e:	89 b9       	out	0x09, r24	; 9
      default:
         return E_UART_INVALID_CH;
   }

   /* return success status */
   return E_UART_SUCCESS;
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	08 95       	ret
         }
         
         break;
      #endif
      default:
         return E_UART_INVALID_CH;
 344:	86 e0       	ldi	r24, 0x06	; 6
   }

   /* return success status */
   return E_UART_SUCCESS;
}
 346:	08 95       	ret

00000348 <UART_TransmitChar>:
UART_ERROR_state_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar)
{
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 348:	81 11       	cpse	r24, r1
 34a:	05 c0       	rjmp	.+10     	; 0x356 <UART_TransmitChar+0xe>
      default:
         return E_UART_INVALID_CH;
   }

   /* Wait for empty transmit buffer */
   while ( !( *ptru8_UARTStatusR & EMPTY_BUFFER_BIT) );
 34c:	5d 9b       	sbis	0x0b, 5	; 11
 34e:	fe cf       	rjmp	.-4      	; 0x34c <UART_TransmitChar+0x4>
   
   /* Put data into buffer, sends the data */
   *ptru8_UARTDataR = TxChar;
 350:	6c b9       	out	0x0c, r22	; 12
   
   /* return success status */
   return E_UART_SUCCESS;
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
 356:	86 e0       	ldi	r24, 0x06	; 6
   /* Put data into buffer, sends the data */
   *ptru8_UARTDataR = TxChar;
   
   /* return success status */
   return E_UART_SUCCESS;
}
 358:	08 95       	ret

0000035a <UART_ReceiveChar>:
* @return function error state.
*/
UART_ERROR_state_t UART_ReceiveChar(uint8_t UartNumber,uint8_t * RxChar)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxChar)
 35a:	61 15       	cp	r22, r1
 35c:	71 05       	cpc	r23, r1
 35e:	49 f0       	breq	.+18     	; 0x372 <UART_ReceiveChar+0x18>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 360:	81 11       	cpse	r24, r1
 362:	09 c0       	rjmp	.+18     	; 0x376 <UART_ReceiveChar+0x1c>
      default:
         return E_UART_INVALID_CH;
   }
   
   /* Wait for data to be received */
   while ( !(*ptru8_UARTStatusR & RECEIVE_COMPLETE_BIT) );
 364:	5f 9b       	sbis	0x0b, 7	; 11
 366:	fe cf       	rjmp	.-4      	; 0x364 <UART_ReceiveChar+0xa>
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
 368:	8c b1       	in	r24, 0x0c	; 12
 36a:	fb 01       	movw	r30, r22
 36c:	80 83       	st	Z, r24
   
   /* return success status */
   return E_UART_SUCCESS;
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	08 95       	ret
UART_ERROR_state_t UART_ReceiveChar(uint8_t UartNumber,uint8_t * RxChar)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxChar)
   {
      return E_UART_NULL_PTR;
 372:	84 e0       	ldi	r24, 0x04	; 4
 374:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
 376:	86 e0       	ldi	r24, 0x06	; 6
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
   
   /* return success status */
   return E_UART_SUCCESS;
}
 378:	08 95       	ret

0000037a <UART_TransmitString>:
UART_ERROR_state_t UART_TransmitString(uint8_t UartNumber,uint8_t * TxString)
{
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
 37a:	61 15       	cp	r22, r1
 37c:	71 05       	cpc	r23, r1
 37e:	81 f0       	breq	.+32     	; 0x3a0 <UART_TransmitString+0x26>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 380:	81 11       	cpse	r24, r1
 382:	10 c0       	rjmp	.+32     	; 0x3a4 <UART_TransmitString+0x2a>
 384:	05 c0       	rjmp	.+10     	; 0x390 <UART_TransmitString+0x16>
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
   {
      /* Wait for empty transmit buffer */
      while ( !( *ptru8_UARTStatusR & EMPTY_BUFFER_BIT) );
 386:	5d 9b       	sbis	0x0b, 5	; 11
 388:	fe cf       	rjmp	.-4      	; 0x386 <UART_TransmitString+0xc>
      
      /* Put data into buffer, sends the data */
      *ptru8_UARTDataR = TxString[counter];
 38a:	8c b9       	out	0x0c, r24	; 12
      counter++;
 38c:	9f 5f       	subi	r25, 0xFF	; 255
 38e:	01 c0       	rjmp	.+2      	; 0x392 <UART_TransmitString+0x18>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 390:	90 e0       	ldi	r25, 0x00	; 0
      default:
         return E_UART_INVALID_CH;
   }
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
 392:	fb 01       	movw	r30, r22
 394:	e9 0f       	add	r30, r25
 396:	f1 1d       	adc	r31, r1
 398:	80 81       	ld	r24, Z
 39a:	81 11       	cpse	r24, r1
 39c:	f4 cf       	rjmp	.-24     	; 0x386 <UART_TransmitString+0xc>
 39e:	08 95       	ret
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
   {
      return E_UART_NULL_PTR;
 3a0:	84 e0       	ldi	r24, 0x04	; 4
 3a2:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
 3a4:	86 e0       	ldi	r24, 0x06	; 6
      counter++;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 3a6:	08 95       	ret

000003a8 <UART_ReceiveString>:
UART_ERROR_state_t UART_ReceiveString(uint8_t UartNumber, uint8_t * RxString)
{
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
 3a8:	61 15       	cp	r22, r1
 3aa:	71 05       	cpc	r23, r1
 3ac:	41 f1       	breq	.+80     	; 0x3fe <UART_ReceiveString+0x56>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 3ae:	81 11       	cpse	r24, r1
 3b0:	28 c0       	rjmp	.+80     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <UART_ReceiveString+0x12>
            counter -= STRING_RETURN_TO_PREV_CHAR;
         }
         /* return to the string start if the counter is still at first character */
         else
         {
            counter = STRING_COUNTER_START;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 3b6:	98 2f       	mov	r25, r24
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <UART_ReceiveString+0x14>
 3ba:	90 e0       	ldi	r25, 0x00	; 0
   }
   
   while(1)
   {
      /* Wait for data to be received */
      while ( !(*ptru8_UARTStatusR & RECEIVE_COMPLETE_BIT) );
 3bc:	5f 9b       	sbis	0x0b, 7	; 11
 3be:	fe cf       	rjmp	.-4      	; 0x3bc <UART_ReceiveString+0x14>
      /* Get and return received data from buffer */
      RxString[counter] = *ptru8_UARTDataR;
 3c0:	29 2f       	mov	r18, r25
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	fb 01       	movw	r30, r22
 3c6:	e2 0f       	add	r30, r18
 3c8:	f3 1f       	adc	r31, r19
 3ca:	8c b1       	in	r24, 0x0c	; 12
 3cc:	80 83       	st	Z, r24
      
      /* enters an end of string character and breaks from the loop on receiving
         a new line character */
      if(RxString[counter] == NEW_LINE)
 3ce:	8d 30       	cpi	r24, 0x0D	; 13
 3d0:	41 f4       	brne	.+16     	; 0x3e2 <UART_ReceiveString+0x3a>
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
 3d2:	2f 5f       	subi	r18, 0xFF	; 255
 3d4:	3f 4f       	sbci	r19, 0xFF	; 255
 3d6:	fb 01       	movw	r30, r22
 3d8:	e2 0f       	add	r30, r18
 3da:	f3 1f       	adc	r31, r19
 3dc:	10 82       	st	Z, r1
         }
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	08 95       	ret
      if(RxString[counter] == NEW_LINE)
      {
         RxString[counter + STRING_NEXT_CHAR] = END_OF_STRING;
         break;
      }
      counter++;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	89 0f       	add	r24, r25
      
      /* return to the previous character to overwrite if the entered character 
         is backspace */
      if(RxString[counter - STRING_PREV_CHAR] == BACKSPACE)
 3e6:	fb 01       	movw	r30, r22
 3e8:	e8 0f       	add	r30, r24
 3ea:	f1 1d       	adc	r31, r1
 3ec:	31 97       	sbiw	r30, 0x01	; 1
 3ee:	20 81       	ld	r18, Z
 3f0:	28 30       	cpi	r18, 0x08	; 8
 3f2:	09 f7       	brne	.-62     	; 0x3b6 <UART_ReceiveString+0xe>
      {
         if (counter - STRING_PREV_CHAR != STRING_COUNTER_START)
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	f1 f2       	breq	.-68     	; 0x3b4 <UART_ReceiveString+0xc>
         {
            counter -= STRING_RETURN_TO_PREV_CHAR;
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	89 0f       	add	r24, r25
 3fc:	dc cf       	rjmp	.-72     	; 0x3b6 <UART_ReceiveString+0xe>
   uint8_t counter = STRING_COUNTER_START;
   
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == RxString)
   {
      return E_UART_NULL_PTR;
 3fe:	84 e0       	ldi	r24, 0x04	; 4
 400:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
 402:	86 e0       	ldi	r24, 0x06	; 6
      }
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 404:	08 95       	ret

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
