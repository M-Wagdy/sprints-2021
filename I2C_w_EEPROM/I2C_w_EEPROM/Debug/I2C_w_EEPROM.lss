
I2C_w_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000214  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014ab  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b4  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b05  00000000  00000000  000021a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000294  00000000  00000000  00002ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000742  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fcc  00000000  00000000  0000367e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  0000464a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  7a:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <EEPROM_Init>:
      }
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
}
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	39 f4       	brne	.+14     	; 0x94 <EEPROM_Init+0x12>
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_Init>
  8c:	88 23       	and	r24, r24
  8e:	21 f0       	breq	.+8      	; 0x98 <EEPROM_Init+0x16>
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	08 95       	ret
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	08 95       	ret
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	08 95       	ret

0000009c <EEPROM_WriteBytes>:
* @param [in]  bytes_num   -  number of bytes to write.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_WriteBytes(uint8_t EEPROM_CH, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	39 f5       	brne	.+78     	; 0xf6 <EEPROM_WriteBytes+0x5a>
  a8:	c2 2f       	mov	r28, r18
  aa:	8a 01       	movw	r16, r20
  ac:	d6 2f       	mov	r29, r22
      default:
      return E_EEPROM_INVALID_CH_NO;
   }
   
   /* Set start condition */
   e_state = I2C_Start(u8_I2C_CH);
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 c1 00 	call	0x182	; 0x182 <I2C_Start>
   if(E_I2C_SUCCESS != e_state)
  b4:	81 11       	cpse	r24, r1
  b6:	21 c0       	rjmp	.+66     	; 0xfa <EEPROM_WriteBytes+0x5e>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_WRITE);
  b8:	60 ea       	ldi	r22, 0xA0	; 160
  ba:	0e 94 cc 00 	call	0x198	; 0x198 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
  be:	81 11       	cpse	r24, r1
  c0:	1e c0       	rjmp	.+60     	; 0xfe <EEPROM_WriteBytes+0x62>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* set address to write to */
   e_state = I2C_Write(u8_I2C_CH, start_address);
  c2:	6d 2f       	mov	r22, r29
  c4:	0e 94 cc 00 	call	0x198	; 0x198 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
  c8:	81 11       	cpse	r24, r1
  ca:	1b c0       	rjmp	.+54     	; 0x102 <EEPROM_WriteBytes+0x66>
  cc:	d0 e0       	ldi	r29, 0x00	; 0
  ce:	0a c0       	rjmp	.+20     	; 0xe4 <EEPROM_WriteBytes+0x48>
   }
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter< bytes_num; au8_BytesCounter++)
   {
      /* writes data to the address */
      e_state = I2C_Write(u8_I2C_CH, data[au8_BytesCounter]);
  d0:	f8 01       	movw	r30, r16
  d2:	ed 0f       	add	r30, r29
  d4:	f1 1d       	adc	r31, r1
  d6:	60 81       	ld	r22, Z
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 cc 00 	call	0x198	; 0x198 <I2C_Write>
      if(E_I2C_SUCCESS != e_state)
  de:	81 11       	cpse	r24, r1
  e0:	12 c0       	rjmp	.+36     	; 0x106 <EEPROM_WriteBytes+0x6a>
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter< bytes_num; au8_BytesCounter++)
  e2:	df 5f       	subi	r29, 0xFF	; 255
  e4:	dc 17       	cp	r29, r28
  e6:	a0 f3       	brcs	.-24     	; 0xd0 <EEPROM_WriteBytes+0x34>
         return E_EEPROM_I2C_ERROR;
      }
   }
   
   /* release the bus */
   e_state = I2C_Stop(u8_I2C_CH);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Stop>
   if(E_I2C_SUCCESS != e_state)
  ee:	88 23       	and	r24, r24
  f0:	61 f0       	breq	.+24     	; 0x10a <EEPROM_WriteBytes+0x6e>
   {
      return E_EEPROM_I2C_ERROR;
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0b c0       	rjmp	.+22     	; 0x10c <EEPROM_WriteBytes+0x70>
      case EEPROM_CH_0:
      u8_I2C_CH = EEPROM_CH_0_I2C_CH;
      break;
      #endif
      default:
      return E_EEPROM_INVALID_CH_NO;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	09 c0       	rjmp	.+18     	; 0x10c <EEPROM_WriteBytes+0x70>
   
   /* Set start condition */
   e_state = I2C_Start(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	07 c0       	rjmp	.+14     	; 0x10c <EEPROM_WriteBytes+0x70>
   
   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, MEMORY_BLOCK_1_WRITE);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	05 c0       	rjmp	.+10     	; 0x10c <EEPROM_WriteBytes+0x70>
   
   /* set address to write to */
   e_state = I2C_Write(u8_I2C_CH, start_address);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	03 c0       	rjmp	.+6      	; 0x10c <EEPROM_WriteBytes+0x70>
   {
      /* writes data to the address */
      e_state = I2C_Write(u8_I2C_CH, data[au8_BytesCounter]);
      if(E_I2C_SUCCESS != e_state)
      {
         return E_EEPROM_I2C_ERROR;
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	01 c0       	rjmp	.+2      	; 0x10c <EEPROM_WriteBytes+0x70>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <main>:
static uint8_t * gu8_UARTMessageReply = "\rOK \r";
static uint8_t * gu8_ReadMessageReply = "the data stored is: \r";
static uint8_t * gu8_InvalidMessageReply = "Invalid Command \r";

int main(void)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	c8 5c       	subi	r28, 0xC8	; 200
 120:	d1 09       	sbc	r29, r1
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
   /* initialize needed drivers */
   EEPROM_Init(EEPROM_CH_0);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 41 00 	call	0x82	; 0x82 <EEPROM_Init>
   UART_Init(UART_CH_0);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_Init>
   
   uint8_t string[MAX_STRING_SIZE];
   uint8_t data;
   uint8_t address;
   
   EEPROM_WriteBytes(EEPROM_CH_0, 0x00, gu8_WriteMessage, 5);
 138:	25 e0       	ldi	r18, 0x05	; 5
 13a:	40 e6       	ldi	r20, 0x60	; 96
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 4e 00 	call	0x9c	; 0x9c <EEPROM_WriteBytes>
   
   UART_TransmitString(UART_CH_0, string);
 146:	be 01       	movw	r22, r28
 148:	6f 5f       	subi	r22, 0xFF	; 255
 14a:	7f 4f       	sbci	r23, 0xFF	; 255
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_TransmitString>
      {
         / * transmit "Invalid Command" message * /
         UART_TransmitString(UART_CH_0, gu8_InvalidMessageReply);
      }
   }*/
}
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	c8 53       	subi	r28, 0x38	; 56
 158:	df 4f       	sbci	r29, 0xFF	; 255
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <I2C_Init>:
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
 16a:	81 11       	cpse	r24, r1
 16c:	08 c0       	rjmp	.+16     	; 0x17e <I2C_Init+0x14>
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	81 b9       	out	0x01, r24	; 1
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	80 b9       	out	0x00, r24	; 0
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	86 bf       	out	0x36, r24	; 54
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	08 95       	ret

00000182 <I2C_Start>:
 182:	81 11       	cpse	r24, r1
 184:	07 c0       	rjmp	.+14     	; 0x194 <I2C_Start+0x12>
 186:	84 ea       	ldi	r24, 0xA4	; 164
 188:	86 bf       	out	0x36, r24	; 54
 18a:	06 b6       	in	r0, 0x36	; 54
 18c:	07 fe       	sbrs	r0, 7
 18e:	fd cf       	rjmp	.-6      	; 0x18a <I2C_Start+0x8>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	08 95       	ret
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	08 95       	ret

00000198 <I2C_Write>:
 198:	81 11       	cpse	r24, r1
 19a:	09 c0       	rjmp	.+18     	; 0x1ae <I2C_Write+0x16>
 19c:	63 b9       	out	0x03, r22	; 3
 19e:	86 b7       	in	r24, 0x36	; 54
 1a0:	84 68       	ori	r24, 0x84	; 132
 1a2:	86 bf       	out	0x36, r24	; 54
 1a4:	06 b6       	in	r0, 0x36	; 54
 1a6:	07 fe       	sbrs	r0, 7
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <I2C_Write+0xc>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	08 95       	ret

000001b2 <I2C_Stop>:
I2C_ERROR_state_t I2C_Stop(uint8_t I2C_CH)
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   switch(I2C_CH)
 1b2:	81 11       	cpse	r24, r1
 1b4:	08 c0       	rjmp	.+16     	; 0x1c6 <I2C_Stop+0x14>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set stop condition */
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
 1b6:	84 e9       	ldi	r24, 0x94	; 148
 1b8:	86 bf       	out	0x36, r24	; 54
   
   while (*ptr_I2CControlR & I2C_STOP_BIT);
 1ba:	96 b7       	in	r25, 0x36	; 54
 1bc:	89 2f       	mov	r24, r25
 1be:	80 71       	andi	r24, 0x10	; 16
 1c0:	94 fd       	sbrc	r25, 4
 1c2:	fb cf       	rjmp	.-10     	; 0x1ba <I2C_Stop+0x8>
 1c4:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
   
   while (*ptr_I2CControlR & I2C_STOP_BIT);
   /* return success message */
   return E_I2C_SUCCESS;
}
 1c8:	08 95       	ret

000001ca <UART_Init>:
   /* Get and return received data from buffer */
   *RxChar = *ptru8_UARTDataR;
   
   /* return success status */
   return E_UART_SUCCESS;
}
 1ca:	81 11       	cpse	r24, r1
 1cc:	08 c0       	rjmp	.+16     	; 0x1de <UART_Init+0x14>
 1ce:	88 e1       	ldi	r24, 0x18	; 24
 1d0:	8a b9       	out	0x0a, r24	; 10
 1d2:	86 e8       	ldi	r24, 0x86	; 134
 1d4:	80 bd       	out	0x20, r24	; 32
 1d6:	83 e3       	ldi	r24, 0x33	; 51
 1d8:	89 b9       	out	0x09, r24	; 9
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	08 95       	ret

000001e2 <UART_TransmitString>:
UART_ERROR_state_t UART_TransmitString(uint8_t UartNumber,uint8_t * TxString)
{
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
 1e2:	61 15       	cp	r22, r1
 1e4:	71 05       	cpc	r23, r1
 1e6:	81 f0       	breq	.+32     	; 0x208 <UART_TransmitString+0x26>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 1e8:	81 11       	cpse	r24, r1
 1ea:	10 c0       	rjmp	.+32     	; 0x20c <UART_TransmitString+0x2a>
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <UART_TransmitString+0x16>
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
   {
      /* Wait for empty transmit buffer */
      while ( !( *ptru8_UARTStatusR & EMPTY_BUFFER_BIT) );
 1ee:	5d 9b       	sbis	0x0b, 5	; 11
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <UART_TransmitString+0xc>
      
      /* Put data into buffer, sends the data */
      *ptru8_UARTDataR = TxString[counter];
 1f2:	8c b9       	out	0x0c, r24	; 12
      counter++;
 1f4:	9f 5f       	subi	r25, 0xFF	; 255
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <UART_TransmitString+0x18>
   }
   
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 1f8:	90 e0       	ldi	r25, 0x00	; 0
      default:
         return E_UART_INVALID_CH;
   }
   
   /* keeps sending data until it finds an end of string character in the string */
   while(TxString[counter] != END_OF_STRING)
 1fa:	fb 01       	movw	r30, r22
 1fc:	e9 0f       	add	r30, r25
 1fe:	f1 1d       	adc	r31, r1
 200:	80 81       	ld	r24, Z
 202:	81 11       	cpse	r24, r1
 204:	f4 cf       	rjmp	.-24     	; 0x1ee <UART_TransmitString+0xc>
 206:	08 95       	ret
   uint8_t counter = STRING_COUNTER_START;

   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == TxString)
   {
      return E_UART_NULL_PTR;
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
 20c:	86 e0       	ldi	r24, 0x06	; 6
      counter++;
   }
   
   /* return success status */
   return E_UART_SUCCESS;
}
 20e:	08 95       	ret

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
