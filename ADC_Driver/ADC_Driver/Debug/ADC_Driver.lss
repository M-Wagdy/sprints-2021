
ADC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000088c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000088c  00000920  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800082  00800082  00000942  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a71  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a69  00000000  00000000  00002581  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e77  00000000  00000000  00002fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00003e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e6  00000000  00000000  000040fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001003  00000000  00000000  000048e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000058e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 78 02 	call	0x4f0	; 0x4f0 <main>
  8a:	0c 94 44 04 	jmp	0x888	; 0x888 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KP_Init>:
* @param [in]  KP_CH   -  Keypad channel number.
*
* @return function error state.
*/
KEYPAD_ERROR_state_t KP_Init(uint8_t KP_CH)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
   uint8_t u8_KPColsNum;
   uint8_t u8_KPRowPort;
   uint8_t u8_KPRowPin;
   uint8_t u8_KPRowsNum;
   
   switch(KP_CH)
  96:	81 11       	cpse	r24, r1
  98:	23 c0       	rjmp	.+70     	; 0xe0 <KP_Init+0x4e>
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <KP_Init+0x22>
   }
   
   /* Set columns pins to output initially High */
   for(uint8_t u8_Counter = 0; u8_Counter < u8_KPColsNum; u8_Counter++)
   {
      DIO_SetPinDirection(u8_KPColPort, (u8_KPColPin + u8_Counter) , OUTPUT);
  9c:	cf 5f       	subi	r28, 0xFF	; 255
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	6c 2f       	mov	r22, r28
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 95 03 	call	0x72a	; 0x72a <DIO_SetPinDirection>
      DIO_WritePin(u8_KPColPort, (u8_KPColPin + u8_Counter) , HIGH);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	6c 2f       	mov	r22, r28
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <KP_Init+0x24>
   uint8_t u8_KPColsNum;
   uint8_t u8_KPRowPort;
   uint8_t u8_KPRowPin;
   uint8_t u8_KPRowsNum;
   
   switch(KP_CH)
  b4:	c0 e0       	ldi	r28, 0x00	; 0
      default:
         return E_KEYPAD_INVALID_CH;
   }
   
   /* Set columns pins to output initially High */
   for(uint8_t u8_Counter = 0; u8_Counter < u8_KPColsNum; u8_Counter++)
  b6:	c3 30       	cpi	r28, 0x03	; 3
  b8:	88 f3       	brcs	.-30     	; 0x9c <KP_Init+0xa>
  ba:	c0 e0       	ldi	r28, 0x00	; 0
  bc:	0d c0       	rjmp	.+26     	; 0xd8 <KP_Init+0x46>
   }
   
   /* Set rows pins to input and set pull up resistors */
   for(uint8_t u8_Counter = 0; u8_Counter < u8_KPRowsNum; u8_Counter++)
   {
      DIO_SetPinDirection(u8_KPRowPort, (u8_KPRowPin + u8_Counter) , INPUT);
  be:	d4 e0       	ldi	r29, 0x04	; 4
  c0:	dc 0f       	add	r29, r28
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	6d 2f       	mov	r22, r29
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 95 03 	call	0x72a	; 0x72a <DIO_SetPinDirection>
      DIO_WritePin(u8_KPRowPort, (u8_KPRowPin + u8_Counter) , HIGH);
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	6d 2f       	mov	r22, r29
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
      DIO_SetPinDirection(u8_KPColPort, (u8_KPColPin + u8_Counter) , OUTPUT);
      DIO_WritePin(u8_KPColPort, (u8_KPColPin + u8_Counter) , HIGH);
   }
   
   /* Set rows pins to input and set pull up resistors */
   for(uint8_t u8_Counter = 0; u8_Counter < u8_KPRowsNum; u8_Counter++)
  d6:	cf 5f       	subi	r28, 0xFF	; 255
  d8:	c4 30       	cpi	r28, 0x04	; 4
  da:	88 f3       	brcs	.-30     	; 0xbe <KP_Init+0x2c>
      DIO_SetPinDirection(u8_KPRowPort, (u8_KPRowPin + u8_Counter) , INPUT);
      DIO_WritePin(u8_KPRowPort, (u8_KPRowPin + u8_Counter) , HIGH);
   }
   
   /* return success status */
   return E_KEYPAD_SUCCESS;
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	01 c0       	rjmp	.+2      	; 0xe2 <KP_Init+0x50>
         u8_KPRowPin = KP_CH_0_ROW_START_PIN;
         u8_KPRowsNum = KP_CH_0_ROWS;
         break;
      #endif
      default:
         return E_KEYPAD_INVALID_CH;
  e0:	82 e0       	ldi	r24, 0x02	; 2
      DIO_WritePin(u8_KPRowPort, (u8_KPRowPin + u8_Counter) , HIGH);
   }
   
   /* return success status */
   return E_KEYPAD_SUCCESS;
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <KP_GetPressedValue>:
* @param [out] Data     -  Pressed Key Value.
*
* @return function error state.
*/
KEYPAD_ERROR_state_t KP_GetPressedValue(uint8_t KP_CH, uint8_t * Data)
{
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
   /* Make sure the function didn't get an uninitialized pointer */
   if(NULL_PTR == Data)
  fe:	61 15       	cp	r22, r1
 100:	71 05       	cpc	r23, r1
 102:	09 f4       	brne	.+2      	; 0x106 <KP_GetPressedValue+0x1e>
 104:	41 c0       	rjmp	.+130    	; 0x188 <KP_GetPressedValue+0xa0>
   uint8_t u8_KPColsNum;
   uint8_t u8_KPRowPort;
   uint8_t u8_KPRowPin;
   uint8_t u8_KPRowsNum;
   
   switch(KP_CH)
 106:	81 11       	cpse	r24, r1
 108:	41 c0       	rjmp	.+130    	; 0x18c <KP_GetPressedValue+0xa4>
 10a:	31 c0       	rjmp	.+98     	; 0x16e <KP_GetPressedValue+0x86>
   
   /* loops on every column */
   for(uint8_t u8_ColCounter = 0; u8_ColCounter < u8_KPColsNum; u8_ColCounter++)
   {
      /* set column value to low */
      DIO_WritePin(u8_KPColPort, (u8_KPColPin + u8_ColCounter) , LOW);
 10c:	ee 24       	eor	r14, r14
 10e:	e3 94       	inc	r14
 110:	e0 0e       	add	r14, r16
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	6e 2d       	mov	r22, r14
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
      
      /* loops on every row */
      for(uint8_t u8_RowCounter = 0; u8_RowCounter < u8_KPRowsNum; u8_RowCounter++)
 11c:	10 e0       	ldi	r17, 0x00	; 0
 11e:	1c c0       	rjmp	.+56     	; 0x158 <KP_GetPressedValue+0x70>
      {
         /* read row value */
         DIO_ReadPin(u8_KPRowPort, (u8_KPRowPin + u8_RowCounter), &u8_KeyState);
 120:	ae 01       	movw	r20, r28
 122:	4f 5f       	subi	r20, 0xFF	; 255
 124:	5f 4f       	sbci	r21, 0xFF	; 255
 126:	64 e0       	ldi	r22, 0x04	; 4
 128:	61 0f       	add	r22, r17
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 05 04 	call	0x80a	; 0x80a <DIO_ReadPin>
         /* check if row is pressed */
         if(u8_KeyState == PRESSED)
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	81 11       	cpse	r24, r1
 134:	10 c0       	rjmp	.+32     	; 0x156 <KP_GetPressedValue+0x6e>
         {
            u8_Flag = PRESSED;
            *Data = KP_CH_0_MAP[u8_RowCounter][u8_ColCounter];
 136:	81 2f       	mov	r24, r17
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	e8 0f       	add	r30, r24
 142:	f9 1f       	adc	r31, r25
 144:	e0 5a       	subi	r30, 0xA0	; 160
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	e0 0f       	add	r30, r16
 14a:	f1 1d       	adc	r31, r1
 14c:	80 81       	ld	r24, Z
 14e:	f6 01       	movw	r30, r12
 150:	80 83       	st	Z, r24
         /* read row value */
         DIO_ReadPin(u8_KPRowPort, (u8_KPRowPin + u8_RowCounter), &u8_KeyState);
         /* check if row is pressed */
         if(u8_KeyState == PRESSED)
         {
            u8_Flag = PRESSED;
 152:	f1 2c       	mov	r15, r1
            *Data = KP_CH_0_MAP[u8_RowCounter][u8_ColCounter];
            break;
 154:	03 c0       	rjmp	.+6      	; 0x15c <KP_GetPressedValue+0x74>
   {
      /* set column value to low */
      DIO_WritePin(u8_KPColPort, (u8_KPColPin + u8_ColCounter) , LOW);
      
      /* loops on every row */
      for(uint8_t u8_RowCounter = 0; u8_RowCounter < u8_KPRowsNum; u8_RowCounter++)
 156:	1f 5f       	subi	r17, 0xFF	; 255
 158:	14 30       	cpi	r17, 0x04	; 4
 15a:	10 f3       	brcs	.-60     	; 0x120 <KP_GetPressedValue+0x38>
            break;
         }
      }
      
      /* return column value to HIGH */
      DIO_WritePin(u8_KPColPort, (u8_KPColPin + u8_ColCounter) , HIGH);
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	6e 2d       	mov	r22, r14
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
      
      if(PRESSED == u8_Flag)
 166:	ff 20       	and	r15, r15
 168:	41 f0       	breq	.+16     	; 0x17a <KP_GetPressedValue+0x92>
   
   uint8_t u8_KeyState;
   uint8_t u8_Flag = NOT_PRESSED;
   
   /* loops on every column */
   for(uint8_t u8_ColCounter = 0; u8_ColCounter < u8_KPColsNum; u8_ColCounter++)
 16a:	0e 2d       	mov	r16, r14
 16c:	04 c0       	rjmp	.+8      	; 0x176 <KP_GetPressedValue+0x8e>
 16e:	6b 01       	movw	r12, r22
   uint8_t u8_KPColsNum;
   uint8_t u8_KPRowPort;
   uint8_t u8_KPRowPin;
   uint8_t u8_KPRowsNum;
   
   switch(KP_CH)
 170:	00 e0       	ldi	r16, 0x00	; 0
 172:	ff 24       	eor	r15, r15
 174:	f3 94       	inc	r15
   
   uint8_t u8_KeyState;
   uint8_t u8_Flag = NOT_PRESSED;
   
   /* loops on every column */
   for(uint8_t u8_ColCounter = 0; u8_ColCounter < u8_KPColsNum; u8_ColCounter++)
 176:	03 30       	cpi	r16, 0x03	; 3
 178:	48 f2       	brcs	.-110    	; 0x10c <KP_GetPressedValue+0x24>
         break;
      }
   }
   
   /* return value 0 if it didn't find any pressed button */
   if(NOT_PRESSED == u8_Flag)
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	ff 12       	cpse	r15, r31
 17e:	08 c0       	rjmp	.+16     	; 0x190 <KP_GetPressedValue+0xa8>
   {
      *Data = 0;
 180:	f6 01       	movw	r30, r12
 182:	10 82       	st	Z, r1
   }
   
   /* return success status */
   return E_KEYPAD_SUCCESS;
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	05 c0       	rjmp	.+10     	; 0x192 <KP_GetPressedValue+0xaa>
KEYPAD_ERROR_state_t KP_GetPressedValue(uint8_t KP_CH, uint8_t * Data)
{
   /* Make sure the function didn't get an uninitialized pointer */
   if(NULL_PTR == Data)
   {
      return E_KEYPAD_NULL_PTR;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	03 c0       	rjmp	.+6      	; 0x192 <KP_GetPressedValue+0xaa>
         u8_KPRowPin = KP_CH_0_ROW_START_PIN;
         u8_KPRowsNum = KP_CH_0_ROWS;
         break;
      #endif
      default:
         return E_KEYPAD_INVALID_CH;
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	01 c0       	rjmp	.+2      	; 0x192 <KP_GetPressedValue+0xaa>
   {
      *Data = 0;
   }
   
   /* return success status */
   return E_KEYPAD_SUCCESS;
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0f 90       	pop	r0
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	08 95       	ret

000001a6 <LCD_SendCommand>:
* @param [in]  Command  -  Command to send to LCD.
*
* @return function error state.
*/
LCD_ERROR_state_t LCD_SendCommand(uint8_t LCD_CH, uint8_t Command)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
   uint8_t u8_LCDEPort;
   uint8_t u8_LCDEPin;
   uint8_t u8_LCDDataPort;
   uint8_t u8_LCDDataPin;
   
   switch(LCD_CH)
 1aa:	81 11       	cpse	r24, r1
 1ac:	4d c0       	rjmp	.+154    	; 0x248 <LCD_SendCommand+0xa2>
 1ae:	d6 2f       	mov	r29, r22
      default:
         return E_LCD_INVALID_CH;
   }
   
   /* select control register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, LOW);
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	65 e0       	ldi	r22, 0x05	; 5
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	66 e0       	ldi	r22, 0x06	; 6
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   
   /* Send HIGH bits of the Command */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <LCD_SendCommand+0x44>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Command >> (4 + u8_DataCounter)) & HIGH) );
 1c8:	8c 2f       	mov	r24, r28
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	04 96       	adiw	r24, 0x04	; 4
 1ce:	4d 2f       	mov	r20, r29
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <LCD_SendCommand+0x32>
 1d4:	55 95       	asr	r21
 1d6:	47 95       	ror	r20
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <LCD_SendCommand+0x2e>
 1dc:	41 70       	andi	r20, 0x01	; 1
 1de:	64 e0       	ldi	r22, 0x04	; 4
 1e0:	6c 0f       	add	r22, r28
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   /* select control register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, LOW);
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
   
   /* Send HIGH bits of the Command */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 1e8:	cf 5f       	subi	r28, 0xFF	; 255
 1ea:	c4 30       	cpi	r28, 0x04	; 4
 1ec:	68 f3       	brcs	.-38     	; 0x1c8 <LCD_SendCommand+0x22>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Command >> (4 + u8_DataCounter)) & HIGH) );
   }
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	67 e0       	ldi	r22, 0x07	; 7
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   dummy_delay();
 1f8:	0e 94 4e 02 	call	0x49c	; 0x49c <dummy_delay>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	67 e0       	ldi	r22, 0x07	; 7
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   
   /* Send LOW bits of the Command  */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	0f c0       	rjmp	.+30     	; 0x228 <LCD_SendCommand+0x82>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Command >> (u8_DataCounter)) & HIGH) );
 20a:	4d 2f       	mov	r20, r29
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	0c 2e       	mov	r0, r28
 210:	02 c0       	rjmp	.+4      	; 0x216 <LCD_SendCommand+0x70>
 212:	55 95       	asr	r21
 214:	47 95       	ror	r20
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <LCD_SendCommand+0x6c>
 21a:	41 70       	andi	r20, 0x01	; 1
 21c:	64 e0       	ldi	r22, 0x04	; 4
 21e:	6c 0f       	add	r22, r28
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
   dummy_delay();
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
   
   /* Send LOW bits of the Command  */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 226:	cf 5f       	subi	r28, 0xFF	; 255
 228:	c4 30       	cpi	r28, 0x04	; 4
 22a:	78 f3       	brcs	.-34     	; 0x20a <LCD_SendCommand+0x64>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Command >> (u8_DataCounter)) & HIGH) );
   }
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	67 e0       	ldi	r22, 0x07	; 7
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   dummy_delay();
 236:	0e 94 4e 02 	call	0x49c	; 0x49c <dummy_delay>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	67 e0       	ldi	r22, 0x07	; 7
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   
   
   /* return success status */
   return E_LCD_SUCCESS;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	01 c0       	rjmp	.+2      	; 0x24a <LCD_SendCommand+0xa4>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 248:	82 e0       	ldi	r24, 0x02	; 2
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
   
   
   /* return success status */
   return E_LCD_SUCCESS;
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <LCD_Init>:
* @param [in]  LCD_CH   -  LCD channel number.
*
* @return function error state.
*/
LCD_ERROR_state_t LCD_Init(uint8_t LCD_CH)
{
 250:	cf 93       	push	r28
   uint8_t u8_LCDEPort;
   uint8_t u8_LCDEPin;
   uint8_t u8_LCDDataPort;
   uint8_t u8_LCDDataPin;
   
   switch(LCD_CH)
 252:	81 11       	cpse	r24, r1
 254:	2c c0       	rjmp	.+88     	; 0x2ae <LCD_Init+0x5e>
      default:
         return E_LCD_INVALID_CH;
   }
   
   /* Set control pins to output */
   DIO_SetPinDirection(u8_LCDRSPort, u8_LCDRSPin, OUTPUT);
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	65 e0       	ldi	r22, 0x05	; 5
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	0e 94 95 03 	call	0x72a	; 0x72a <DIO_SetPinDirection>
   DIO_SetPinDirection(u8_LCDRWPort, u8_LCDRWPin, OUTPUT);
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	66 e0       	ldi	r22, 0x06	; 6
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 95 03 	call	0x72a	; 0x72a <DIO_SetPinDirection>
   DIO_SetPinDirection(u8_LCDEPort, u8_LCDEPin, OUTPUT);
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	67 e0       	ldi	r22, 0x07	; 7
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0e 94 95 03 	call	0x72a	; 0x72a <DIO_SetPinDirection>
   
   /* Set data pins to output */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	07 c0       	rjmp	.+14     	; 0x286 <LCD_Init+0x36>
   {
      DIO_SetPinDirection(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , OUTPUT);
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	6c 0f       	add	r22, r28
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	0e 94 95 03 	call	0x72a	; 0x72a <DIO_SetPinDirection>
   DIO_SetPinDirection(u8_LCDRSPort, u8_LCDRSPin, OUTPUT);
   DIO_SetPinDirection(u8_LCDRWPort, u8_LCDRWPin, OUTPUT);
   DIO_SetPinDirection(u8_LCDEPort, u8_LCDEPin, OUTPUT);
   
   /* Set data pins to output */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 284:	cf 5f       	subi	r28, 0xFF	; 255
 286:	c4 30       	cpi	r28, 0x04	; 4
 288:	b8 f3       	brcs	.-18     	; 0x278 <LCD_Init+0x28>
   {
      DIO_SetPinDirection(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , OUTPUT);
   }
   
   /* Initialize LCD Commands */
   LCD_SendCommand(LCD_CH_0, LCD_4_BIT_MODE);
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_SendCommand>
   LCD_SendCommand(LCD_CH_0, LCD_ENABLE_2_ROWS);
 292:	68 e2       	ldi	r22, 0x28	; 40
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_SendCommand>
   LCD_SendCommand(LCD_CH_0, LCD_CURSOR_OFF);
 29a:	6c e0       	ldi	r22, 0x0C	; 12
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_SendCommand>
   LCD_SendCommand(LCD_CH_0, LCD_CLEAR);
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_SendCommand>
   
   /* return success status */
   return E_LCD_SUCCESS;
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <LCD_Init+0x60>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 2ae:	82 e0       	ldi	r24, 0x02	; 2
   LCD_SendCommand(LCD_CH_0, LCD_CURSOR_OFF);
   LCD_SendCommand(LCD_CH_0, LCD_CLEAR);
   
   /* return success status */
   return E_LCD_SUCCESS;
}
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <LCD_SendCharacter>:
* @param [in]  Data     -  Character to send to LCD.
*
* @return function error state.
*/
LCD_ERROR_state_t LCD_SendCharacter(uint8_t LCD_CH, uint8_t Data)
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
   uint8_t u8_LCDEPort;
   uint8_t u8_LCDEPin;
   uint8_t u8_LCDDataPort;
   uint8_t u8_LCDDataPin;
   
   switch(LCD_CH)
 2b8:	81 11       	cpse	r24, r1
 2ba:	4d c0       	rjmp	.+154    	; 0x356 <LCD_SendCharacter+0xa2>
 2bc:	d6 2f       	mov	r29, r22
      default:
         return E_LCD_INVALID_CH;
   }
   
   /* select data register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, HIGH);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	65 e0       	ldi	r22, 0x05	; 5
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	66 e0       	ldi	r22, 0x06	; 6
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   
   /* Send HIGH bits of the Data */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 2d2:	c0 e0       	ldi	r28, 0x00	; 0
 2d4:	11 c0       	rjmp	.+34     	; 0x2f8 <LCD_SendCharacter+0x44>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data >> (4 + u8_DataCounter)) & HIGH) );
 2d6:	8c 2f       	mov	r24, r28
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	04 96       	adiw	r24, 0x04	; 4
 2dc:	4d 2f       	mov	r20, r29
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <LCD_SendCharacter+0x32>
 2e2:	55 95       	asr	r21
 2e4:	47 95       	ror	r20
 2e6:	8a 95       	dec	r24
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <LCD_SendCharacter+0x2e>
 2ea:	41 70       	andi	r20, 0x01	; 1
 2ec:	64 e0       	ldi	r22, 0x04	; 4
 2ee:	6c 0f       	add	r22, r28
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   /* select data register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, HIGH);
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
   
   /* Send HIGH bits of the Data */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 2f6:	cf 5f       	subi	r28, 0xFF	; 255
 2f8:	c4 30       	cpi	r28, 0x04	; 4
 2fa:	68 f3       	brcs	.-38     	; 0x2d6 <LCD_SendCharacter+0x22>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data >> (4 + u8_DataCounter)) & HIGH) );
   }
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	67 e0       	ldi	r22, 0x07	; 7
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   dummy_delay();
 306:	0e 94 4e 02 	call	0x49c	; 0x49c <dummy_delay>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	67 e0       	ldi	r22, 0x07	; 7
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   
   /* Send LOW bits of the Data */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 314:	c0 e0       	ldi	r28, 0x00	; 0
 316:	0f c0       	rjmp	.+30     	; 0x336 <LCD_SendCharacter+0x82>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data >> (u8_DataCounter)) & HIGH) );
 318:	4d 2f       	mov	r20, r29
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	0c 2e       	mov	r0, r28
 31e:	02 c0       	rjmp	.+4      	; 0x324 <LCD_SendCharacter+0x70>
 320:	55 95       	asr	r21
 322:	47 95       	ror	r20
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <LCD_SendCharacter+0x6c>
 328:	41 70       	andi	r20, 0x01	; 1
 32a:	64 e0       	ldi	r22, 0x04	; 4
 32c:	6c 0f       	add	r22, r28
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
   dummy_delay();
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
   
   /* Send LOW bits of the Data */
   for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 334:	cf 5f       	subi	r28, 0xFF	; 255
 336:	c4 30       	cpi	r28, 0x04	; 4
 338:	78 f3       	brcs	.-34     	; 0x318 <LCD_SendCharacter+0x64>
   {
      DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data >> (u8_DataCounter)) & HIGH) );
   }
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	67 e0       	ldi	r22, 0x07	; 7
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   dummy_delay();
 344:	0e 94 4e 02 	call	0x49c	; 0x49c <dummy_delay>
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	67 e0       	ldi	r22, 0x07	; 7
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   
   /* return success status */
   return E_LCD_SUCCESS;
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	01 c0       	rjmp	.+2      	; 0x358 <LCD_SendCharacter+0xa4>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 356:	82 e0       	ldi	r24, 0x02	; 2
   dummy_delay();
   DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
   
   /* return success status */
   return E_LCD_SUCCESS;
}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <LCD_SendString>:
* @param [in]  Data     -  String to send to LCD.
*
* @return function error state.
*/
LCD_ERROR_state_t LCD_SendString(uint8_t LCD_CH, uint8_t * Data)
{
 35e:	cf 92       	push	r12
 360:	df 92       	push	r13
 362:	ef 92       	push	r14
 364:	1f 93       	push	r17
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
   if(NULL_PTR == Data)
 36a:	61 15       	cp	r22, r1
 36c:	71 05       	cpc	r23, r1
 36e:	09 f4       	brne	.+2      	; 0x372 <LCD_SendString+0x14>
 370:	57 c0       	rjmp	.+174    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
   uint8_t u8_LCDEPort;
   uint8_t u8_LCDEPin;
   uint8_t u8_LCDDataPort;
   uint8_t u8_LCDDataPin;
   
   switch(LCD_CH)
 372:	81 11       	cpse	r24, r1
 374:	57 c0       	rjmp	.+174    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 376:	6b 01       	movw	r12, r22
      default:
         return E_LCD_INVALID_CH;
   }
   
   /* select data register */
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, HIGH);
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	65 e0       	ldi	r22, 0x05	; 5
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	66 e0       	ldi	r22, 0x06	; 6
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   
   uint8_t u8_StringCounter = 0;
 38c:	e1 2c       	mov	r14, r1
   
   while (Data[u8_StringCounter] != END_OF_STRING)
 38e:	41 c0       	rjmp	.+130    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
   {
      /* Send HIGH bits of the Data */
      for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
      {
         DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data[u8_StringCounter] >> (4 + u8_DataCounter)) & HIGH) );
 390:	48 81       	ld	r20, Y
 392:	81 2f       	mov	r24, r17
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	04 96       	adiw	r24, 0x04	; 4
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <LCD_SendString+0x42>
 39c:	55 95       	asr	r21
 39e:	47 95       	ror	r20
 3a0:	8a 95       	dec	r24
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <LCD_SendString+0x3e>
 3a4:	41 70       	andi	r20, 0x01	; 1
 3a6:	64 e0       	ldi	r22, 0x04	; 4
 3a8:	61 0f       	add	r22, r17
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   uint8_t u8_StringCounter = 0;
   
   while (Data[u8_StringCounter] != END_OF_STRING)
   {
      /* Send HIGH bits of the Data */
      for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 3b0:	1f 5f       	subi	r17, 0xFF	; 255
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <LCD_SendString+0x58>
 3b4:	10 e0       	ldi	r17, 0x00	; 0
 3b6:	14 30       	cpi	r17, 0x04	; 4
 3b8:	58 f3       	brcs	.-42     	; 0x390 <LCD_SendString+0x32>
      {
         DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data[u8_StringCounter] >> (4 + u8_DataCounter)) & HIGH) );
      }
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	67 e0       	ldi	r22, 0x07	; 7
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
      dummy_delay();
 3c4:	0e 94 4e 02 	call	0x49c	; 0x49c <dummy_delay>
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	67 e0       	ldi	r22, 0x07	; 7
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
      
      /* Send LOW bits of the Data */
      for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 3d2:	10 e0       	ldi	r17, 0x00	; 0
 3d4:	0f c0       	rjmp	.+30     	; 0x3f4 <LCD_SendString+0x96>
      {
         DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data[u8_StringCounter] >> (u8_DataCounter)) & HIGH) );
 3d6:	48 81       	ld	r20, Y
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	01 2e       	mov	r0, r17
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <LCD_SendString+0x84>
 3de:	55 95       	asr	r21
 3e0:	47 95       	ror	r20
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <LCD_SendString+0x80>
 3e6:	41 70       	andi	r20, 0x01	; 1
 3e8:	64 e0       	ldi	r22, 0x04	; 4
 3ea:	61 0f       	add	r22, r17
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
      dummy_delay();
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
      
      /* Send LOW bits of the Data */
      for(uint8_t u8_DataCounter = 0; u8_DataCounter < DATA_PINS_NUM; u8_DataCounter++)
 3f2:	1f 5f       	subi	r17, 0xFF	; 255
 3f4:	14 30       	cpi	r17, 0x04	; 4
 3f6:	78 f3       	brcs	.-34     	; 0x3d6 <LCD_SendString+0x78>
      {
         DIO_WritePin(u8_LCDDataPort, (u8_LCDDataPin + u8_DataCounter) , ((Data[u8_StringCounter] >> (u8_DataCounter)) & HIGH) );
      }
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, HIGH);
 3f8:	41 e0       	ldi	r20, 0x01	; 1
 3fa:	67 e0       	ldi	r22, 0x07	; 7
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
      dummy_delay();
 402:	0e 94 4e 02 	call	0x49c	; 0x49c <dummy_delay>
      DIO_WritePin(u8_LCDEPort, u8_LCDEPin, LOW);
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	67 e0       	ldi	r22, 0x07	; 7
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
      
      u8_StringCounter++;
 410:	e3 94       	inc	r14
   DIO_WritePin(u8_LCDRSPort, u8_LCDRSPin, HIGH);
   DIO_WritePin(u8_LCDRWPort, u8_LCDRWPin, LOW);
   
   uint8_t u8_StringCounter = 0;
   
   while (Data[u8_StringCounter] != END_OF_STRING)
 412:	e6 01       	movw	r28, r12
 414:	ce 0d       	add	r28, r14
 416:	d1 1d       	adc	r29, r1
 418:	88 81       	ld	r24, Y
 41a:	81 11       	cpse	r24, r1
 41c:	cb cf       	rjmp	.-106    	; 0x3b4 <LCD_SendString+0x56>
 41e:	03 c0       	rjmp	.+6      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
*/
LCD_ERROR_state_t LCD_SendString(uint8_t LCD_CH, uint8_t * Data)
{
   if(NULL_PTR == Data)
   {
      return E_LCD_NULL_PTR;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	01 c0       	rjmp	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
         u8_LCDDataPort = LCD_CH_0_DATA_PORT;
         u8_LCDDataPin = LCD_CH_0_DATA_START_PIN;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 424:	82 e0       	ldi	r24, 0x02	; 2
   }
   
   
   /* return success status */
   return E_LCD_SUCCESS;
}
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	ef 90       	pop	r14
 42e:	df 90       	pop	r13
 430:	cf 90       	pop	r12
 432:	08 95       	ret

00000434 <LCD_SetToRowCol>:
*/
LCD_ERROR_state_t LCD_SetToRowCol(uint8_t LCD_CH, uint8_t Row, uint8_t Col)
{
   uint8_t u8_LCDChannel;
   
   switch(LCD_CH)
 434:	81 11       	cpse	r24, r1
 436:	0f c0       	rjmp	.+30     	; 0x456 <LCD_SetToRowCol+0x22>
         return E_LCD_INVALID_CH;
   }
   
   uint8_t u8_Address;
   /* set required address */
   switch (Row)
 438:	66 23       	and	r22, r22
 43a:	29 f0       	breq	.+10     	; 0x446 <LCD_SetToRowCol+0x12>
 43c:	61 30       	cpi	r22, 0x01	; 1
 43e:	21 f4       	brne	.+8      	; 0x448 <LCD_SetToRowCol+0x14>
   {
      case 0:
         u8_Address = Col;
         break;
      case 1:
         u8_Address = Col + 0x40;
 440:	90 e4       	ldi	r25, 0x40	; 64
 442:	94 0f       	add	r25, r20
         break;
 444:	01 c0       	rjmp	.+2      	; 0x448 <LCD_SetToRowCol+0x14>
   uint8_t u8_Address;
   /* set required address */
   switch (Row)
   {
      case 0:
         u8_Address = Col;
 446:	94 2f       	mov	r25, r20
         u8_Address = Col + 0x40;
         break;
   }
   
   /* Send command with the required address */
   LCD_SendCommand(u8_LCDChannel , u8_Address | LDC_SET_CURSOR_LOCATION);
 448:	69 2f       	mov	r22, r25
 44a:	60 68       	ori	r22, 0x80	; 128
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_SendCommand>
   
   /* return success status */
   return E_LCD_SUCCESS;
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	08 95       	ret
      case LCD_CH_0:
         u8_LCDChannel = LCD_CH_0;
         break;
      #endif
      default:
         return E_LCD_INVALID_CH;
 456:	82 e0       	ldi	r24, 0x02	; 2
   /* Send command with the required address */
   LCD_SendCommand(u8_LCDChannel , u8_Address | LDC_SET_CURSOR_LOCATION);
   
   /* return success status */
   return E_LCD_SUCCESS;
 458:	08 95       	ret

0000045a <MOTOR_Init>:
MOTOR_ERROR_state_t MOTOR_Init(uint8_t MOTOR_CH)
{
   uint8_t u8_MotorPort;
   uint8_t u8_MotorPin;
   
   switch(MOTOR_CH)
 45a:	81 11       	cpse	r24, r1
 45c:	07 c0       	rjmp	.+14     	; 0x46c <MOTOR_Init+0x12>
      default:
         return E_MOTOR_INVALID_CH;
   }   
   
   /* Initialize motor pin */
   DIO_SetPinDirection(u8_MotorPort, u8_MotorPin, OUTPUT);
 45e:	41 e0       	ldi	r20, 0x01	; 1
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 95 03 	call	0x72a	; 0x72a <DIO_SetPinDirection>
   
   /* return success status */
   return E_MOTOR_SUCCESS;
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	08 95       	ret
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
         break;
      #endif
      default:
         return E_MOTOR_INVALID_CH;
 46c:	81 e0       	ldi	r24, 0x01	; 1
   /* Initialize motor pin */
   DIO_SetPinDirection(u8_MotorPort, u8_MotorPin, OUTPUT);
   
   /* return success status */
   return E_MOTOR_SUCCESS;
}
 46e:	08 95       	ret

00000470 <MOTOR_Start>:
MOTOR_ERROR_state_t MOTOR_Start(uint8_t MOTOR_CH)
{
   uint8_t u8_MotorPort;
   uint8_t u8_MotorPin;
   
   switch(MOTOR_CH)
 470:	81 11       	cpse	r24, r1
 472:	07 c0       	rjmp	.+14     	; 0x482 <MOTOR_Start+0x12>
      default:
         return E_MOTOR_INVALID_CH;
   }
   
   /* Start motor */
   DIO_WritePin(u8_MotorPort, u8_MotorPin, HIGH);
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   
   /* return success status */
   return E_MOTOR_SUCCESS;
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	08 95       	ret
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
         break;
      #endif
      default:
         return E_MOTOR_INVALID_CH;
 482:	81 e0       	ldi	r24, 0x01	; 1
   /* Start motor */
   DIO_WritePin(u8_MotorPort, u8_MotorPin, HIGH);
   
   /* return success status */
   return E_MOTOR_SUCCESS;
}
 484:	08 95       	ret

00000486 <MOTOR_Stop>:
MOTOR_ERROR_state_t MOTOR_Stop(uint8_t MOTOR_CH)
{
   uint8_t u8_MotorPort;
   uint8_t u8_MotorPin;
   
   switch(MOTOR_CH)
 486:	81 11       	cpse	r24, r1
 488:	07 c0       	rjmp	.+14     	; 0x498 <MOTOR_Stop+0x12>
      default:
         return E_MOTOR_INVALID_CH;
   }
   
   /* stop motor */
   DIO_WritePin(u8_MotorPort, u8_MotorPin, LOW);
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_WritePin>
   
   /* return success status */
   return E_MOTOR_SUCCESS;
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	08 95       	ret
         u8_MotorPort = MOTOR_CH_0_PORT;
         u8_MotorPin = MOTOR_CH_0_PIN;
         break;
      #endif
      default:
         return E_MOTOR_INVALID_CH;
 498:	81 e0       	ldi	r24, 0x01	; 1
   /* stop motor */
   DIO_WritePin(u8_MotorPort, u8_MotorPin, LOW);
   
   /* return success status */
   return E_MOTOR_SUCCESS;
 49a:	08 95       	ret

0000049c <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <dummy_delay+0x6>
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <dummy_delay+0x8>
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
 4a8:	1a 82       	std	Y+2, r1	; 0x02
 4aa:	19 82       	std	Y+1, r1	; 0x01
 4ac:	15 c0       	rjmp	.+42     	; 0x4d8 <dummy_delay+0x3c>
   {
      for(volatile uint8_t j=0; j<32; j++)
 4ae:	1c 82       	std	Y+4, r1	; 0x04
 4b0:	0b c0       	rjmp	.+22     	; 0x4c8 <dummy_delay+0x2c>
      {
         for(volatile uint8_t k=0; k<2; k++)
 4b2:	1b 82       	std	Y+3, r1	; 0x03
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc <dummy_delay+0x20>
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	8f 5f       	subi	r24, 0xFF	; 255
 4ba:	8b 83       	std	Y+3, r24	; 0x03
 4bc:	8b 81       	ldd	r24, Y+3	; 0x03
 4be:	82 30       	cpi	r24, 0x02	; 2
 4c0:	d0 f3       	brcs	.-12     	; 0x4b6 <dummy_delay+0x1a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
 4c2:	8c 81       	ldd	r24, Y+4	; 0x04
 4c4:	8f 5f       	subi	r24, 0xFF	; 255
 4c6:	8c 83       	std	Y+4, r24	; 0x04
 4c8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ca:	80 32       	cpi	r24, 0x20	; 32
 4cc:	90 f3       	brcs	.-28     	; 0x4b2 <dummy_delay+0x16>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	9a 81       	ldd	r25, Y+2	; 0x02
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	9a 83       	std	Y+2, r25	; 0x02
 4d6:	89 83       	std	Y+1, r24	; 0x01
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	9a 81       	ldd	r25, Y+2	; 0x02
 4dc:	84 36       	cpi	r24, 0x64	; 100
 4de:	91 05       	cpc	r25, r1
 4e0:	30 f3       	brcs	.-52     	; 0x4ae <dummy_delay+0x12>
         {
            
         }
      }
   }
}
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <main>:
-------------------------------*/
static uint8_t * gau8_CurrentTempMessage = "Current: ";
static uint8_t * gau8_RequiredTempMessage = "Required: ";

int main(void)
{
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	00 d0       	rcall	.+0      	; 0x4f6 <main+0x6>
 4f6:	1f 92       	push	r1
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
   uint8_t u8_RequiredTempDigit1;
   uint8_t u8_RequiredTempDigit2;
   uint8_t u8_RequiredTempDigit3;
      
   /* initialize drivers */
   ADC_Init();
 4fc:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <ADC_Init>
   MOTOR_Init(MOTOR_CH_0);
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 2d 02 	call	0x45a	; 0x45a <MOTOR_Init>
   KP_Init(KP_CH_0);
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 49 00 	call	0x92	; 0x92 <KP_Init>
   LCD_Init(LCD_CH_0);
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Init>
   
   /* Print static strings */
   LCD_SendString(LCD_CH_0, gau8_CurrentTempMessage);
 512:	6c e6       	ldi	r22, 0x6C	; 108
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_SendString>
   LCD_SetToRowCol(LCD_CH_0, ROW_1, COL_0);
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_SetToRowCol>
   LCD_SendString(LCD_CH_0, gau8_RequiredTempMessage);
 526:	66 e7       	ldi	r22, 0x76	; 118
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_SendString>
   uint16_t u8_CurrentTemp;
   uint8_t u8_CurrentTempDigit1;
   uint8_t u8_CurrentTempDigit2;
   uint8_t u8_CurrentTempDigit3;

   uint16_t u8_RequiredTemp = 0;
 530:	00 e0       	ldi	r16, 0x00	; 0
 532:	10 e0       	ldi	r17, 0x00	; 0
   LCD_SendString(LCD_CH_0, gau8_RequiredTempMessage);
   
   while (1)
   {
      /* get pressed button on keypad */
      KP_GetPressedValue(KP_CH_0, &u8_KPValue);
 534:	be 01       	movw	r22, r28
 536:	6f 5f       	subi	r22, 0xFF	; 255
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	0e 94 74 00 	call	0xe8	; 0xe8 <KP_GetPressedValue>
      
      /* if a button is pressed */
      if(u8_KPValue != 0)
 540:	89 81       	ldd	r24, Y+1	; 0x01
 542:	88 23       	and	r24, r24
 544:	a1 f0       	breq	.+40     	; 0x56e <main+0x7e>
      {
         /* add it to the current required temprature */
         u8_RequiredTemp = (u8_RequiredTemp*10)+ (u8_KPValue - ZERO_ASCII);
 546:	98 01       	movw	r18, r16
 548:	22 0f       	add	r18, r18
 54a:	33 1f       	adc	r19, r19
 54c:	00 0f       	add	r16, r16
 54e:	11 1f       	adc	r17, r17
 550:	00 0f       	add	r16, r16
 552:	11 1f       	adc	r17, r17
 554:	00 0f       	add	r16, r16
 556:	11 1f       	adc	r17, r17
 558:	02 0f       	add	r16, r18
 55a:	13 1f       	adc	r17, r19
 55c:	08 0f       	add	r16, r24
 55e:	11 1d       	adc	r17, r1
 560:	00 53       	subi	r16, 0x30	; 48
 562:	11 09       	sbc	r17, r1
         
         /* set required temp to zero if it exceeds 150 */
         if(u8_RequiredTemp > 150)
 564:	07 39       	cpi	r16, 0x97	; 151
 566:	11 05       	cpc	r17, r1
 568:	10 f0       	brcs	.+4      	; 0x56e <main+0x7e>
         {
            u8_RequiredTemp = 0;
 56a:	00 e0       	ldi	r16, 0x00	; 0
 56c:	10 e0       	ldi	r17, 0x00	; 0
         }   
      }
      
      /* get ADC readings */
      ADC_Read(ADC_CH_0, &u8_CurrentTemp);
 56e:	be 01       	movw	r22, r28
 570:	6e 5f       	subi	r22, 0xFE	; 254
 572:	7f 4f       	sbci	r23, 0xFF	; 255
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <ADC_Read>
      
      /* map ADC resolution to the current temprature */
      u8_CurrentTemp = (u8_CurrentTemp * 150 / 308);
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	9b 81       	ldd	r25, Y+3	; 0x03
 57e:	46 e9       	ldi	r20, 0x96	; 150
 580:	48 9f       	mul	r20, r24
 582:	90 01       	movw	r18, r0
 584:	49 9f       	mul	r20, r25
 586:	30 0d       	add	r19, r0
 588:	11 24       	eor	r1, r1
 58a:	a9 e9       	ldi	r26, 0x99	; 153
 58c:	ba e1       	ldi	r27, 0x1A	; 26
 58e:	0e 94 35 04 	call	0x86a	; 0x86a <__umulhisi3>
 592:	96 95       	lsr	r25
 594:	87 95       	ror	r24
 596:	92 95       	swap	r25
 598:	82 95       	swap	r24
 59a:	8f 70       	andi	r24, 0x0F	; 15
 59c:	89 27       	eor	r24, r25
 59e:	9f 70       	andi	r25, 0x0F	; 15
 5a0:	89 27       	eor	r24, r25
 5a2:	9b 83       	std	Y+3, r25	; 0x03
 5a4:	8a 83       	std	Y+2, r24	; 0x02
      
      /* check if current is higher or equal required temp for motor to start */
      if(u8_CurrentTemp >= u8_RequiredTemp)
 5a6:	80 17       	cp	r24, r16
 5a8:	91 07       	cpc	r25, r17
 5aa:	20 f0       	brcs	.+8      	; 0x5b4 <main+0xc4>
      {
         MOTOR_Start(MOTOR_CH_0);
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	0e 94 38 02 	call	0x470	; 0x470 <MOTOR_Start>
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <main+0xca>
      }
      else
      {
         MOTOR_Stop(MOTOR_CH_0);
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	0e 94 43 02 	call	0x486	; 0x486 <MOTOR_Stop>
      }
      
      /* get each number of current temp in single character */
      u8_CurrentTempDigit1 = (u8_CurrentTemp/100);
 5ba:	ea 81       	ldd	r30, Y+2	; 0x02
 5bc:	fb 81       	ldd	r31, Y+3	; 0x03
 5be:	9f 01       	movw	r18, r30
 5c0:	36 95       	lsr	r19
 5c2:	27 95       	ror	r18
 5c4:	36 95       	lsr	r19
 5c6:	27 95       	ror	r18
 5c8:	ab e7       	ldi	r26, 0x7B	; 123
 5ca:	b4 e1       	ldi	r27, 0x14	; 20
 5cc:	0e 94 35 04 	call	0x86a	; 0x86a <__umulhisi3>
 5d0:	7c 01       	movw	r14, r24
 5d2:	f6 94       	lsr	r15
 5d4:	e7 94       	ror	r14
      u8_CurrentTempDigit2 = ((u8_CurrentTemp - (u8_CurrentTempDigit1*100)) / 10);
 5d6:	4c e9       	ldi	r20, 0x9C	; 156
 5d8:	5e 2d       	mov	r21, r14
 5da:	45 03       	mulsu	r20, r21
 5dc:	90 01       	movw	r18, r0
 5de:	11 24       	eor	r1, r1
 5e0:	2e 0f       	add	r18, r30
 5e2:	3f 1f       	adc	r19, r31
 5e4:	ad ec       	ldi	r26, 0xCD	; 205
 5e6:	bc ec       	ldi	r27, 0xCC	; 204
 5e8:	0e 94 35 04 	call	0x86a	; 0x86a <__umulhisi3>
 5ec:	5c 01       	movw	r10, r24
 5ee:	b6 94       	lsr	r11
 5f0:	a7 94       	ror	r10
 5f2:	b6 94       	lsr	r11
 5f4:	a7 94       	ror	r10
 5f6:	b6 94       	lsr	r11
 5f8:	a7 94       	ror	r10
      u8_CurrentTempDigit3 = (u8_CurrentTemp - (u8_CurrentTempDigit1*100+u8_CurrentTempDigit2*10));
 5fa:	54 e6       	ldi	r21, 0x64	; 100
 5fc:	9a 2d       	mov	r25, r10
 5fe:	99 0f       	add	r25, r25
 600:	89 2f       	mov	r24, r25
 602:	88 0f       	add	r24, r24
 604:	88 0f       	add	r24, r24
 606:	89 0f       	add	r24, r25
 608:	5e 9d       	mul	r21, r14
 60a:	80 0d       	add	r24, r0
 60c:	11 24       	eor	r1, r1
 60e:	fe 2e       	mov	r15, r30
 610:	f8 1a       	sub	r15, r24
      
      /* get each number of required temp in single character */
      u8_RequiredTempDigit1 = (u8_RequiredTemp/100);
 612:	98 01       	movw	r18, r16
 614:	36 95       	lsr	r19
 616:	27 95       	ror	r18
 618:	36 95       	lsr	r19
 61a:	27 95       	ror	r18
 61c:	ab e7       	ldi	r26, 0x7B	; 123
 61e:	b4 e1       	ldi	r27, 0x14	; 20
 620:	0e 94 35 04 	call	0x86a	; 0x86a <__umulhisi3>
 624:	6c 01       	movw	r12, r24
 626:	d6 94       	lsr	r13
 628:	c7 94       	ror	r12
      u8_RequiredTempDigit2 = ((u8_RequiredTemp - (u8_RequiredTempDigit1*100)) / 10);
 62a:	6c 2d       	mov	r22, r12
 62c:	46 03       	mulsu	r20, r22
 62e:	90 01       	movw	r18, r0
 630:	11 24       	eor	r1, r1
 632:	20 0f       	add	r18, r16
 634:	31 1f       	adc	r19, r17
 636:	ad ec       	ldi	r26, 0xCD	; 205
 638:	bc ec       	ldi	r27, 0xCC	; 204
 63a:	0e 94 35 04 	call	0x86a	; 0x86a <__umulhisi3>
 63e:	4c 01       	movw	r8, r24
 640:	96 94       	lsr	r9
 642:	87 94       	ror	r8
 644:	96 94       	lsr	r9
 646:	87 94       	ror	r8
 648:	96 94       	lsr	r9
 64a:	87 94       	ror	r8
      u8_RequiredTempDigit3 = (u8_RequiredTemp - (u8_RequiredTempDigit1*100+u8_RequiredTempDigit2*10));
 64c:	98 2d       	mov	r25, r8
 64e:	99 0f       	add	r25, r25
 650:	89 2f       	mov	r24, r25
 652:	88 0f       	add	r24, r24
 654:	88 0f       	add	r24, r24
 656:	89 0f       	add	r24, r25
 658:	5c 9d       	mul	r21, r12
 65a:	80 0d       	add	r24, r0
 65c:	11 24       	eor	r1, r1
 65e:	d0 2e       	mov	r13, r16
 660:	d8 1a       	sub	r13, r24
      
      /* print current temp on LCD */
      LCD_SetToRowCol(LCD_CH_0, ROW_0, NUMBER_START_COL);
 662:	4a e0       	ldi	r20, 0x0A	; 10
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_SetToRowCol>
      LCD_SendCharacter(LCD_CH_0, u8_CurrentTempDigit1 + ZERO_ASCII);
 66c:	60 e3       	ldi	r22, 0x30	; 48
 66e:	6e 0d       	add	r22, r14
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_SendCharacter>
      LCD_SendCharacter(LCD_CH_0, u8_CurrentTempDigit2 + ZERO_ASCII);
 676:	60 e3       	ldi	r22, 0x30	; 48
 678:	6a 0d       	add	r22, r10
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_SendCharacter>
      LCD_SendCharacter(LCD_CH_0, u8_CurrentTempDigit3 + ZERO_ASCII);
 680:	60 e3       	ldi	r22, 0x30	; 48
 682:	6f 0d       	add	r22, r15
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_SendCharacter>
      
      /* print required temp on LCD */
      LCD_SetToRowCol(LCD_CH_0, ROW_1, NUMBER_START_COL);
 68a:	4a e0       	ldi	r20, 0x0A	; 10
 68c:	61 e0       	ldi	r22, 0x01	; 1
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_SetToRowCol>
      LCD_SendCharacter(LCD_CH_0, u8_RequiredTempDigit1 + ZERO_ASCII);
 694:	60 e3       	ldi	r22, 0x30	; 48
 696:	6c 0d       	add	r22, r12
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_SendCharacter>
      LCD_SendCharacter(LCD_CH_0, u8_RequiredTempDigit2 + ZERO_ASCII);
 69e:	60 e3       	ldi	r22, 0x30	; 48
 6a0:	68 0d       	add	r22, r8
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_SendCharacter>
      LCD_SendCharacter(LCD_CH_0, u8_RequiredTempDigit3 + ZERO_ASCII);
 6a8:	60 e3       	ldi	r22, 0x30	; 48
 6aa:	6d 0d       	add	r22, r13
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_SendCharacter>
   }
 6b2:	40 cf       	rjmp	.-384    	; 0x534 <main+0x44>

000006b4 <ADC_Init>:
* @return function error state.
*/
ADC_ERROR_state_t ADC_Init(void)
{
   /* making sure ADC was initialized before calling this function */
   if(INIT == gu8_IsInit)
 6b4:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 6b8:	81 30       	cpi	r24, 0x01	; 1
 6ba:	59 f0       	breq	.+22     	; 0x6d2 <ADC_Init+0x1e>
   {
      return E_ADC_INIT_BEFORE;
   }
   
   /* Set VRef Selection */
   ADC_MUX_R |= ADC_REFERENCE_SELECTION;
 6bc:	87 b1       	in	r24, 0x07	; 7
 6be:	80 64       	ori	r24, 0x40	; 64
 6c0:	87 b9       	out	0x07, r24	; 7
   
   /* Configure ADC */
   ADC_CONTROL_AND_STATUS_R |= ADC_CONTROL_MASK;
 6c2:	86 b1       	in	r24, 0x06	; 6
 6c4:	81 68       	ori	r24, 0x81	; 129
 6c6:	86 b9       	out	0x06, r24	; 6
   
   /* Set Driver State to Initialized */
   gu8_IsInit = INIT;
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
   
   /* return success status */
   return E_ADC_SUCCESS;
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	08 95       	ret
ADC_ERROR_state_t ADC_Init(void)
{
   /* making sure ADC was initialized before calling this function */
   if(INIT == gu8_IsInit)
   {
      return E_ADC_INIT_BEFORE;
 6d2:	83 e0       	ldi	r24, 0x03	; 3
   /* Set Driver State to Initialized */
   gu8_IsInit = INIT;
   
   /* return success status */
   return E_ADC_SUCCESS;
}
 6d4:	08 95       	ret

000006d6 <ADC_Read>:
*
* @return function error state.
*/
ADC_ERROR_state_t ADC_Read(uint8_t ADC_CH, uint16_t * Data)
{
   /* making sure ADC was initialized before calling this function */
 6d6:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <__data_end>
 6da:	99 23       	and	r25, r25
 6dc:	01 f1       	breq	.+64     	; 0x71e <ADC_Read+0x48>
   if(NOT_INIT == gu8_IsInit)
   {
      return E_ADC_NOT_INIT;
   }
   /* making sure an initialized pointer is sent to the function */
 6de:	61 15       	cp	r22, r1
 6e0:	71 05       	cpc	r23, r1
 6e2:	f9 f0       	breq	.+62     	; 0x722 <ADC_Read+0x4c>
   else if(NULL_PTR == Data)
   {
      return E_ADC_NULL_PTR;
   }
 6e4:	88 30       	cpi	r24, 0x08	; 8
 6e6:	f8 f4       	brcc	.+62     	; 0x726 <ADC_Read+0x50>
   else if(ADC_CH_7 < ADC_CH)
   {
      return E_ADC_INVALID_CH;
   }
   
   /* Select the required ADC channel */
 6e8:	97 b1       	in	r25, 0x07	; 7
 6ea:	8f 71       	andi	r24, 0x1F	; 31
 6ec:	89 2b       	or	r24, r25
 6ee:	87 b9       	out	0x07, r24	; 7
   ADC_MUX_R |= (ADC_CH & 0x1F);
   
   /* Start Conversion */
 6f0:	86 b1       	in	r24, 0x06	; 6
 6f2:	80 64       	ori	r24, 0x40	; 64
 6f4:	86 b9       	out	0x06, r24	; 6
   ADC_CONTROL_AND_STATUS_R |= ADC_START_CONVERSION;
   
   /* Wait for Interrupt Flag */
 6f6:	34 9b       	sbis	0x06, 4	; 6
 6f8:	fe cf       	rjmp	.-4      	; 0x6f6 <ADC_Read+0x20>
   while(!(ADC_CONTROL_AND_STATUS_R & ADC_INTERRUPT_FLAG));
   
   /* clear interrupt flag */
 6fa:	86 b1       	in	r24, 0x06	; 6
 6fc:	80 61       	ori	r24, 0x10	; 16
 6fe:	86 b9       	out	0x06, r24	; 6
   ADC_CONTROL_AND_STATUS_R |= ADC_INTERRUPT_FLAG;
   
   /* return ADC conversion data */
 700:	84 b1       	in	r24, 0x04	; 4
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	fb 01       	movw	r30, r22
 706:	91 83       	std	Z+1, r25	; 0x01
 708:	80 83       	st	Z, r24
   *Data = (ADC_DATA_LOW_R);
 70a:	25 b1       	in	r18, 0x05	; 5
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	32 2f       	mov	r19, r18
 710:	22 27       	eor	r18, r18
 712:	82 0f       	add	r24, r18
 714:	93 1f       	adc	r25, r19
 716:	91 83       	std	Z+1, r25	; 0x01
 718:	80 83       	st	Z, r24
   *Data += (ADC_DATA_HIGH_R << 8);
   
   /* return success status */
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	08 95       	ret
*/
ADC_ERROR_state_t ADC_Read(uint8_t ADC_CH, uint16_t * Data)
{
   /* making sure ADC was initialized before calling this function */
   if(NOT_INIT == gu8_IsInit)
   {
 71e:	84 e0       	ldi	r24, 0x04	; 4
 720:	08 95       	ret
      return E_ADC_NOT_INIT;
   }
   /* making sure an initialized pointer is sent to the function */
   else if(NULL_PTR == Data)
   {
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	08 95       	ret
      return E_ADC_NULL_PTR;
   }
   else if(ADC_CH_7 < ADC_CH)
   {
 726:	82 e0       	ldi	r24, 0x02	; 2
   /* return ADC conversion data */
   *Data = (ADC_DATA_LOW_R);
   *Data += (ADC_DATA_HIGH_R << 8);
   
   /* return success status */
   return E_ADC_SUCCESS;
 728:	08 95       	ret

0000072a <DIO_SetPinDirection>:
   
   /* set pin resistor to pull up. */
   SET_BIT(*prt_port_data, pin);
   
   return E_DIO_SUCCESS;
}
 72a:	68 30       	cpi	r22, 0x08	; 8
 72c:	80 f5       	brcc	.+96     	; 0x78e <DIO_SetPinDirection+0x64>
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	79 f0       	breq	.+30     	; 0x750 <DIO_SetPinDirection+0x26>
 732:	28 f0       	brcs	.+10     	; 0x73e <DIO_SetPinDirection+0x14>
 734:	82 30       	cpi	r24, 0x02	; 2
 736:	31 f0       	breq	.+12     	; 0x744 <DIO_SetPinDirection+0x1a>
 738:	83 30       	cpi	r24, 0x03	; 3
 73a:	39 f0       	breq	.+14     	; 0x74a <DIO_SetPinDirection+0x20>
 73c:	2a c0       	rjmp	.+84     	; 0x792 <DIO_SetPinDirection+0x68>
 73e:	ea e3       	ldi	r30, 0x3A	; 58
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	08 c0       	rjmp	.+16     	; 0x754 <DIO_SetPinDirection+0x2a>
 744:	e4 e3       	ldi	r30, 0x34	; 52
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	05 c0       	rjmp	.+10     	; 0x754 <DIO_SetPinDirection+0x2a>
 74a:	e1 e3       	ldi	r30, 0x31	; 49
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <DIO_SetPinDirection+0x2a>
 750:	e7 e3       	ldi	r30, 0x37	; 55
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	41 30       	cpi	r20, 0x01	; 1
 756:	61 f4       	brne	.+24     	; 0x770 <DIO_SetPinDirection+0x46>
 758:	20 81       	ld	r18, Z
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	02 c0       	rjmp	.+4      	; 0x764 <DIO_SetPinDirection+0x3a>
 760:	88 0f       	add	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	6a 95       	dec	r22
 766:	e2 f7       	brpl	.-8      	; 0x760 <DIO_SetPinDirection+0x36>
 768:	82 2b       	or	r24, r18
 76a:	80 83       	st	Z, r24
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	08 95       	ret
 770:	41 11       	cpse	r20, r1
 772:	11 c0       	rjmp	.+34     	; 0x796 <DIO_SetPinDirection+0x6c>
 774:	20 81       	ld	r18, Z
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	02 c0       	rjmp	.+4      	; 0x780 <DIO_SetPinDirection+0x56>
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	6a 95       	dec	r22
 782:	e2 f7       	brpl	.-8      	; 0x77c <DIO_SetPinDirection+0x52>
 784:	80 95       	com	r24
 786:	82 23       	and	r24, r18
 788:	80 83       	st	Z, r24
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	08 95       	ret
 78e:	82 e0       	ldi	r24, 0x02	; 2
 790:	08 95       	ret
 792:	83 e0       	ldi	r24, 0x03	; 3
 794:	08 95       	ret
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	08 95       	ret

0000079a <DIO_WritePin>:
* @return function error state.
*/
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
 79a:	68 30       	cpi	r22, 0x08	; 8
 79c:	80 f5       	brcc	.+96     	; 0x7fe <DIO_WritePin+0x64>

   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_data = NULL_PTR;
   
   /* sets the data pointer according to the required port. */
   switch(port)
 79e:	81 30       	cpi	r24, 0x01	; 1
 7a0:	79 f0       	breq	.+30     	; 0x7c0 <DIO_WritePin+0x26>
 7a2:	28 f0       	brcs	.+10     	; 0x7ae <DIO_WritePin+0x14>
 7a4:	82 30       	cpi	r24, 0x02	; 2
 7a6:	31 f0       	breq	.+12     	; 0x7b4 <DIO_WritePin+0x1a>
 7a8:	83 30       	cpi	r24, 0x03	; 3
 7aa:	39 f0       	breq	.+14     	; 0x7ba <DIO_WritePin+0x20>
 7ac:	2a c0       	rjmp	.+84     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
 7ae:	eb e3       	ldi	r30, 0x3B	; 59
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	08 c0       	rjmp	.+16     	; 0x7c4 <DIO_WritePin+0x2a>
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
         break;
      case PORTC:
         prt_port_data = &PORTC_DATA;
 7b4:	e5 e3       	ldi	r30, 0x35	; 53
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 7b8:	05 c0       	rjmp	.+10     	; 0x7c4 <DIO_WritePin+0x2a>
      case PORTD:
         prt_port_data = &PORTD_DATA;
 7ba:	e2 e3       	ldi	r30, 0x32	; 50
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_WritePin+0x2a>
   {
      case PORTA:
         prt_port_data = &PORTA_DATA;
         break;
      case PORTB:
         prt_port_data = &PORTB_DATA;
 7c0:	e8 e3       	ldi	r30, 0x38	; 56
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
         break;
      default:
         return E_DIO_INVALID_PORT;
   }
   /* set or clear value in the pin. */
   if(HIGH == data)
 7c4:	41 30       	cpi	r20, 0x01	; 1
 7c6:	61 f4       	brne	.+24     	; 0x7e0 <DIO_WritePin+0x46>
   {
      SET_BIT(*prt_port_data,pin);
 7c8:	20 81       	ld	r18, Z
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <DIO_WritePin+0x3a>
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	6a 95       	dec	r22
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <DIO_WritePin+0x36>
 7d8:	82 2b       	or	r24, r18
 7da:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	08 95       	ret
   /* set or clear value in the pin. */
   if(HIGH == data)
   {
      SET_BIT(*prt_port_data,pin);
   }
   else if(LOW == data)
 7e0:	41 11       	cpse	r20, r1
 7e2:	11 c0       	rjmp	.+34     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
   {
      CLEAR_BIT(*prt_port_data,pin);
 7e4:	20 81       	ld	r18, Z
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_WritePin+0x56>
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	6a 95       	dec	r22
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_WritePin+0x52>
 7f4:	80 95       	com	r24
 7f6:	82 23       	and	r24, r18
 7f8:	80 83       	st	Z, r24
   {
      return E_DIO_INVALID_WRITE_DATA;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	08 95       	ret
DIO_ERROR_state_t DIO_WritePin(uint8_t port, uint8_t pin, uint8_t data)
{
   /* check if invalid pin is given. */
   if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 7fe:	82 e0       	ldi	r24, 0x02	; 2
 800:	08 95       	ret
         break;
      case PORTD:
         prt_port_data = &PORTD_DATA;
         break;
      default:
         return E_DIO_INVALID_PORT;
 802:	83 e0       	ldi	r24, 0x03	; 3
 804:	08 95       	ret
      CLEAR_BIT(*prt_port_data,pin);
   }
   /* if data is invalid. */
   else
   {
      return E_DIO_INVALID_WRITE_DATA;
 806:	84 e0       	ldi	r24, 0x04	; 4
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 808:	08 95       	ret

0000080a <DIO_ReadPin>:
{
   /* pointers to carry the required port registers address. */
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
 80a:	41 15       	cp	r20, r1
 80c:	51 05       	cpc	r21, r1
 80e:	39 f1       	breq	.+78     	; 0x85e <DIO_ReadPin+0x54>
   {
      return E_DIO_NULL_PTR;
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
 810:	68 30       	cpi	r22, 0x08	; 8
 812:	38 f5       	brcc	.+78     	; 0x862 <__stack+0x3>
   {
      /* do nothing */
   }
   
   /* sets the stat pointer according to the required port. */
   switch(port)
 814:	81 30       	cpi	r24, 0x01	; 1
 816:	79 f0       	breq	.+30     	; 0x836 <DIO_ReadPin+0x2c>
 818:	28 f0       	brcs	.+10     	; 0x824 <DIO_ReadPin+0x1a>
 81a:	82 30       	cpi	r24, 0x02	; 2
 81c:	31 f0       	breq	.+12     	; 0x82a <DIO_ReadPin+0x20>
 81e:	83 30       	cpi	r24, 0x03	; 3
 820:	39 f0       	breq	.+14     	; 0x830 <DIO_ReadPin+0x26>
 822:	21 c0       	rjmp	.+66     	; 0x866 <__stack+0x7>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
 824:	e9 e3       	ldi	r30, 0x39	; 57
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	08 c0       	rjmp	.+16     	; 0x83a <DIO_ReadPin+0x30>
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
         break;
      case PORTC:
         prt_port_stat = &PORTC_STAT;
 82a:	e3 e3       	ldi	r30, 0x33	; 51
 82c:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 82e:	05 c0       	rjmp	.+10     	; 0x83a <DIO_ReadPin+0x30>
      case PORTD:
         prt_port_stat = &PORTD_STAT;
 830:	e0 e3       	ldi	r30, 0x30	; 48
 832:	f0 e0       	ldi	r31, 0x00	; 0
         break;
 834:	02 c0       	rjmp	.+4      	; 0x83a <DIO_ReadPin+0x30>
   {
      case PORTA:
         prt_port_stat = &PORTA_STAT;
         break;
      case PORTB:
         prt_port_stat = &PORTB_STAT;
 836:	e6 e3       	ldi	r30, 0x36	; 54
 838:	f0 e0       	ldi	r31, 0x00	; 0
      default:
         return E_DIO_INVALID_PORT;
   }
   
   /* read the pin value and put it in the data. */
   if(BIT_IS_SET(*prt_port_stat,pin))
 83a:	80 81       	ld	r24, Z
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	02 c0       	rjmp	.+4      	; 0x844 <DIO_ReadPin+0x3a>
 840:	95 95       	asr	r25
 842:	87 95       	ror	r24
 844:	6a 95       	dec	r22
 846:	e2 f7       	brpl	.-8      	; 0x840 <DIO_ReadPin+0x36>
 848:	80 ff       	sbrs	r24, 0
 84a:	05 c0       	rjmp	.+10     	; 0x856 <DIO_ReadPin+0x4c>
   {
      *data = HIGH;
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	fa 01       	movw	r30, r20
 850:	80 83       	st	Z, r24
   {
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	08 95       	ret
   {
      *data = HIGH;
   }
   else
   {
      *data = LOW;
 856:	fa 01       	movw	r30, r20
 858:	10 82       	st	Z, r1
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	08 95       	ret
   volatile uint8_t * prt_port_stat = NULL_PTR;
   
   /* check if address of data to put the read value in is not null pointer. */
   if(NULL_PTR == data)
   {
      return E_DIO_NULL_PTR;
 85e:	85 e0       	ldi	r24, 0x05	; 5
 860:	08 95       	ret
   }
   /* check if invalid pin is given. */
   else if(PIN_7 < pin)
   {
      return E_DIO_INVALID_PIN;
 862:	82 e0       	ldi	r24, 0x02	; 2
 864:	08 95       	ret
         break;
      case PORTD:
         prt_port_stat = &PORTD_STAT;
         break;
      default:
         return E_DIO_INVALID_PORT;
 866:	83 e0       	ldi	r24, 0x03	; 3
      *data = LOW;
   }
   
   /* return success message. */
   return E_DIO_SUCCESS;
}
 868:	08 95       	ret

0000086a <__umulhisi3>:
 86a:	a2 9f       	mul	r26, r18
 86c:	b0 01       	movw	r22, r0
 86e:	b3 9f       	mul	r27, r19
 870:	c0 01       	movw	r24, r0
 872:	a3 9f       	mul	r26, r19
 874:	70 0d       	add	r23, r0
 876:	81 1d       	adc	r24, r1
 878:	11 24       	eor	r1, r1
 87a:	91 1d       	adc	r25, r1
 87c:	b2 9f       	mul	r27, r18
 87e:	70 0d       	add	r23, r0
 880:	81 1d       	adc	r24, r1
 882:	11 24       	eor	r1, r1
 884:	91 1d       	adc	r25, r1
 886:	08 95       	ret

00000888 <_exit>:
 888:	f8 94       	cli

0000088a <__stop_program>:
 88a:	ff cf       	rjmp	.-2      	; 0x88a <__stop_program>
