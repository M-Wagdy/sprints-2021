
ADC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da8  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e9  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007eb  00000000  00000000  000019c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000021b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a5  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002e95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  74:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <dummy_delay+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <dummy_delay+0x8>
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
  88:	1a 82       	std	Y+2, r1	; 0x02
  8a:	19 82       	std	Y+1, r1	; 0x01
  8c:	15 c0       	rjmp	.+42     	; 0xb8 <dummy_delay+0x3c>
   {
      for(volatile uint8_t j=0; j<32; j++)
  8e:	1c 82       	std	Y+4, r1	; 0x04
  90:	0b c0       	rjmp	.+22     	; 0xa8 <dummy_delay+0x2c>
      {
         for(volatile uint8_t k=0; k<2; k++)
  92:	1b 82       	std	Y+3, r1	; 0x03
  94:	03 c0       	rjmp	.+6      	; 0x9c <dummy_delay+0x20>
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	8b 83       	std	Y+3, r24	; 0x03
  9c:	8b 81       	ldd	r24, Y+3	; 0x03
  9e:	82 30       	cpi	r24, 0x02	; 2
  a0:	d0 f3       	brcs	.-12     	; 0x96 <dummy_delay+0x1a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
  a2:	8c 81       	ldd	r24, Y+4	; 0x04
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	8c 83       	std	Y+4, r24	; 0x04
  a8:	8c 81       	ldd	r24, Y+4	; 0x04
  aa:	80 32       	cpi	r24, 0x20	; 32
  ac:	90 f3       	brcs	.-28     	; 0x92 <dummy_delay+0x16>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	9a 81       	ldd	r25, Y+2	; 0x02
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	9a 83       	std	Y+2, r25	; 0x02
  b6:	89 83       	std	Y+1, r24	; 0x01
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	9a 81       	ldd	r25, Y+2	; 0x02
  bc:	84 36       	cpi	r24, 0x64	; 100
  be:	91 05       	cpc	r25, r1
  c0:	30 f3       	brcs	.-52     	; 0x8e <dummy_delay+0x12>
         {
            
         }
      }
   }
}
  c2:	0f 90       	pop	r0
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <main>:
/*- LOCAL MACROS
------------------------------------------*/
#define ZERO_ASCII         (uint8_t)(0x30)

int main(void)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	00 d0       	rcall	.+0      	; 0xd6 <main+0x6>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
   uint8_t u8_digit1;
   uint8_t u8_digit2;
   uint8_t u8_digit3;
   
   /* initialize drivers */
   ADC_Init();
  da:	0e 94 ce 00 	call	0x19c	; 0x19c <ADC_Init>
   UART_Init(UART_CH_0);
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 09 01 	call	0x212	; 0x212 <UART_Init>
   
   /* Replace with your application code */
   while (1) 
   {
      /* get ADC readings */
      ADC_Read(ADC_CH_0, &u8_data);
  e4:	be 01       	movw	r22, r28
  e6:	6f 5f       	subi	r22, 0xFF	; 255
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 df 00 	call	0x1be	; 0x1be <ADC_Read>
      
      /* map ADC resolution to the current temprature */
      u8_data = (u8_data * 150 / 308);
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	9a 81       	ldd	r25, Y+2	; 0x02
  f4:	46 e9       	ldi	r20, 0x96	; 150
  f6:	48 9f       	mul	r20, r24
  f8:	90 01       	movw	r18, r0
  fa:	49 9f       	mul	r20, r25
  fc:	30 0d       	add	r19, r0
  fe:	11 24       	eor	r1, r1
 100:	a9 e9       	ldi	r26, 0x99	; 153
 102:	ba e1       	ldi	r27, 0x1A	; 26
 104:	0e 94 1e 01 	call	0x23c	; 0x23c <__umulhisi3>
 108:	ac 01       	movw	r20, r24
 10a:	56 95       	lsr	r21
 10c:	47 95       	ror	r20
 10e:	52 95       	swap	r21
 110:	42 95       	swap	r20
 112:	4f 70       	andi	r20, 0x0F	; 15
 114:	45 27       	eor	r20, r21
 116:	5f 70       	andi	r21, 0x0F	; 15
 118:	45 27       	eor	r20, r21
 11a:	5a 83       	std	Y+2, r21	; 0x02
 11c:	49 83       	std	Y+1, r20	; 0x01
      
      /* get each number in single character */
      u8_digit1 = (u8_data/100);
 11e:	9a 01       	movw	r18, r20
 120:	36 95       	lsr	r19
 122:	27 95       	ror	r18
 124:	36 95       	lsr	r19
 126:	27 95       	ror	r18
 128:	ab e7       	ldi	r26, 0x7B	; 123
 12a:	b4 e1       	ldi	r27, 0x14	; 20
 12c:	0e 94 1e 01 	call	0x23c	; 0x23c <__umulhisi3>
 130:	fc 01       	movw	r30, r24
 132:	f6 95       	lsr	r31
 134:	e7 95       	ror	r30
      u8_digit2 = ((u8_data - (u8_digit1*100)) / 10);
 136:	9a 01       	movw	r18, r20
 138:	84 e6       	ldi	r24, 0x64	; 100
 13a:	e8 9f       	mul	r30, r24
 13c:	20 19       	sub	r18, r0
 13e:	31 09       	sbc	r19, r1
 140:	11 24       	eor	r1, r1
 142:	ad ec       	ldi	r26, 0xCD	; 205
 144:	bc ec       	ldi	r27, 0xCC	; 204
 146:	0e 94 1e 01 	call	0x23c	; 0x23c <__umulhisi3>
 14a:	8c 01       	movw	r16, r24
 14c:	16 95       	lsr	r17
 14e:	07 95       	ror	r16
 150:	16 95       	lsr	r17
 152:	07 95       	ror	r16
 154:	16 95       	lsr	r17
 156:	07 95       	ror	r16
      u8_digit3 = (u8_data - (u8_digit1*100+u8_digit2*10));
 158:	90 2f       	mov	r25, r16
 15a:	99 0f       	add	r25, r25
 15c:	89 2f       	mov	r24, r25
 15e:	88 0f       	add	r24, r24
 160:	88 0f       	add	r24, r24
 162:	89 0f       	add	r24, r25
 164:	94 e6       	ldi	r25, 0x64	; 100
 166:	e9 9f       	mul	r30, r25
 168:	80 0d       	add	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	14 2f       	mov	r17, r20
 16e:	18 1b       	sub	r17, r24
      
      /* transmit the numbers ASCII through uart */
      UART_TransmitChar(UART_CH_0,  u8_digit1 + ZERO_ASCII);
 170:	60 e3       	ldi	r22, 0x30	; 48
 172:	6e 0f       	add	r22, r30
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 15 01 	call	0x22a	; 0x22a <UART_TransmitChar>
      UART_TransmitChar(UART_CH_0,  u8_digit2 + ZERO_ASCII);
 17a:	60 e3       	ldi	r22, 0x30	; 48
 17c:	60 0f       	add	r22, r16
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 15 01 	call	0x22a	; 0x22a <UART_TransmitChar>
      UART_TransmitChar(UART_CH_0,  u8_digit3 + ZERO_ASCII);
 184:	60 e3       	ldi	r22, 0x30	; 48
 186:	61 0f       	add	r22, r17
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 15 01 	call	0x22a	; 0x22a <UART_TransmitChar>
      UART_TransmitChar(UART_CH_0,  '\r');
 18e:	6d e0       	ldi	r22, 0x0D	; 13
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 15 01 	call	0x22a	; 0x22a <UART_TransmitChar>
      
      /* small delay */
      dummy_delay();
 196:	0e 94 3e 00 	call	0x7c	; 0x7c <dummy_delay>
 19a:	a4 cf       	rjmp	.-184    	; 0xe4 <main+0x14>

0000019c <ADC_Init>:
* @return function error state.
*/
ADC_ERROR_state_t ADC_Init(void)
{
   /* making sure ADC was initialized before calling this function */
   if(INIT == gu8_IsInit)
 19c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	59 f0       	breq	.+22     	; 0x1ba <ADC_Init+0x1e>
   {
      return E_ADC_INIT_BEFORE;
   }
   
   /* Set VRef Selection */
   ADC_MUX_R |= ADC_REFERENCE_SELECTION;
 1a4:	87 b1       	in	r24, 0x07	; 7
 1a6:	80 64       	ori	r24, 0x40	; 64
 1a8:	87 b9       	out	0x07, r24	; 7
   
   /* Configure ADC */
   ADC_CONTROL_AND_STATUS_R |= ADC_CONTROL_MASK;
 1aa:	86 b1       	in	r24, 0x06	; 6
 1ac:	81 68       	ori	r24, 0x81	; 129
 1ae:	86 b9       	out	0x06, r24	; 6
   
   /* Set Driver State to Initialized */
   gu8_IsInit = INIT;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
   
   /* return success status */
   return E_ADC_SUCCESS;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret
ADC_ERROR_state_t ADC_Init(void)
{
   /* making sure ADC was initialized before calling this function */
   if(INIT == gu8_IsInit)
   {
      return E_ADC_INIT_BEFORE;
 1ba:	83 e0       	ldi	r24, 0x03	; 3
   /* Set Driver State to Initialized */
   gu8_IsInit = INIT;
   
   /* return success status */
   return E_ADC_SUCCESS;
}
 1bc:	08 95       	ret

000001be <ADC_Read>:
* @return function error state.
*/
ADC_ERROR_state_t ADC_Read(uint8_t ADC_CH, uint16_t * Data)
{
   /* making sure ADC was initialized before calling this function */
   if(NOT_INIT == gu8_IsInit)
 1be:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c2:	99 23       	and	r25, r25
 1c4:	01 f1       	breq	.+64     	; 0x206 <ADC_Read+0x48>
   {
      return E_ADC_NOT_INIT;
   }
   /* making sure an initialized pointer is sent to the function */
   else if(NULL_PTR == Data)
 1c6:	61 15       	cp	r22, r1
 1c8:	71 05       	cpc	r23, r1
 1ca:	f9 f0       	breq	.+62     	; 0x20a <ADC_Read+0x4c>
   {
      return E_ADC_NULL_PTR;
   }
   else if(ADC_CH_7 < ADC_CH)
 1cc:	88 30       	cpi	r24, 0x08	; 8
 1ce:	f8 f4       	brcc	.+62     	; 0x20e <ADC_Read+0x50>
   {
      return E_ADC_INVALID_CH;
   }
   
   /* Select the required ADC channel */
   ADC_MUX_R |= (ADC_CH & 0x1F);
 1d0:	97 b1       	in	r25, 0x07	; 7
 1d2:	8f 71       	andi	r24, 0x1F	; 31
 1d4:	89 2b       	or	r24, r25
 1d6:	87 b9       	out	0x07, r24	; 7
   
   /* Start Conversion */
   ADC_CONTROL_AND_STATUS_R |= ADC_START_CONVERSION;
 1d8:	86 b1       	in	r24, 0x06	; 6
 1da:	80 64       	ori	r24, 0x40	; 64
 1dc:	86 b9       	out	0x06, r24	; 6
   
   /* Wait for Interrupt Flag */
   while(!(ADC_CONTROL_AND_STATUS_R & ADC_INTERRUPT_FLAG));
 1de:	34 9b       	sbis	0x06, 4	; 6
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <ADC_Read+0x20>
   
   /* clear interrupt flag */
   ADC_CONTROL_AND_STATUS_R |= ADC_INTERRUPT_FLAG;
 1e2:	86 b1       	in	r24, 0x06	; 6
 1e4:	80 61       	ori	r24, 0x10	; 16
 1e6:	86 b9       	out	0x06, r24	; 6
   
   /* return ADC conversion data */
   *Data = (ADC_DATA_LOW_R);
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fb 01       	movw	r30, r22
 1ee:	91 83       	std	Z+1, r25	; 0x01
 1f0:	80 83       	st	Z, r24
   *Data += (ADC_DATA_HIGH_R << 8);
 1f2:	25 b1       	in	r18, 0x05	; 5
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	32 2f       	mov	r19, r18
 1f8:	22 27       	eor	r18, r18
 1fa:	82 0f       	add	r24, r18
 1fc:	93 1f       	adc	r25, r19
 1fe:	91 83       	std	Z+1, r25	; 0x01
 200:	80 83       	st	Z, r24
   
   /* return success status */
   return E_ADC_SUCCESS;
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
ADC_ERROR_state_t ADC_Read(uint8_t ADC_CH, uint16_t * Data)
{
   /* making sure ADC was initialized before calling this function */
   if(NOT_INIT == gu8_IsInit)
   {
      return E_ADC_NOT_INIT;
 206:	84 e0       	ldi	r24, 0x04	; 4
 208:	08 95       	ret
   }
   /* making sure an initialized pointer is sent to the function */
   else if(NULL_PTR == Data)
   {
      return E_ADC_NULL_PTR;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	08 95       	ret
   }
   else if(ADC_CH_7 < ADC_CH)
   {
      return E_ADC_INVALID_CH;
 20e:	82 e0       	ldi	r24, 0x02	; 2
   *Data = (ADC_DATA_LOW_R);
   *Data += (ADC_DATA_HIGH_R << 8);
   
   /* return success status */
   return E_ADC_SUCCESS;
}
 210:	08 95       	ret

00000212 <UART_Init>:
*
* @return function error state.
*/
UART_ERROR_state_t UART_Init(uint8_t UartNumber)
{
   switch(UartNumber)
 212:	81 11       	cpse	r24, r1
 214:	08 c0       	rjmp	.+16     	; 0x226 <UART_Init+0x14>
         {
            return E_UART_INVALID_BAUD_RATE;
         }
      
         /* Enable Receiver and Transmitter */
         UART_CONTROL_R = UART_CH_0_CONTROL;
 216:	88 e1       	ldi	r24, 0x18	; 24
 218:	8a b9       	out	0x0a, r24	; 10
         /* Set Odd parity, 2 stop bits and 8 bits data size */
         UART_CONTROL_2_R = UART_CH_0_CONTROL_2;
 21a:	86 e8       	ldi	r24, 0x86	; 134
 21c:	80 bd       	out	0x20, r24	; 32
      
         /* Set Baud Rate low bits */
         UART_BAUDRATE_LOW_R = (uint8_t)UART_CH_0_BaudRate;
 21e:	83 e3       	ldi	r24, 0x33	; 51
 220:	89 b9       	out	0x09, r24	; 9
      default:
         return E_UART_INVALID_CH;
   }

   /* return success status */
   return E_UART_SUCCESS;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret
         }
         
         break;
      #endif
      default:
         return E_UART_INVALID_CH;
 226:	86 e0       	ldi	r24, 0x06	; 6
   }

   /* return success status */
   return E_UART_SUCCESS;
}
 228:	08 95       	ret

0000022a <UART_TransmitChar>:
UART_ERROR_state_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar)
{
   volatile uint8_t * ptru8_UARTStatusR;
   volatile uint8_t * ptru8_UARTDataR;
   
   switch(UartNumber)
 22a:	81 11       	cpse	r24, r1
 22c:	05 c0       	rjmp	.+10     	; 0x238 <UART_TransmitChar+0xe>
      default:
         return E_UART_INVALID_CH;
   }

   /* Wait for empty transmit buffer */
   while ( !( *ptru8_UARTStatusR & EMPTY_BUFFER_BIT) );
 22e:	5d 9b       	sbis	0x0b, 5	; 11
 230:	fe cf       	rjmp	.-4      	; 0x22e <UART_TransmitChar+0x4>
   
   /* Put data into buffer, sends the data */
   *ptru8_UARTDataR = TxChar;
 232:	6c b9       	out	0x0c, r22	; 12
   
   /* return success status */
   return E_UART_SUCCESS;
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret
      case UART_CH_0:
         ptru8_UARTStatusR = &UART_STATUS_R;
         ptru8_UARTDataR = &UART_DATA_R;
         break;
      default:
         return E_UART_INVALID_CH;
 238:	86 e0       	ldi	r24, 0x06	; 6
   /* Put data into buffer, sends the data */
   *ptru8_UARTDataR = TxChar;
   
   /* return success status */
   return E_UART_SUCCESS;
}
 23a:	08 95       	ret

0000023c <__umulhisi3>:
 23c:	a2 9f       	mul	r26, r18
 23e:	b0 01       	movw	r22, r0
 240:	b3 9f       	mul	r27, r19
 242:	c0 01       	movw	r24, r0
 244:	a3 9f       	mul	r26, r19
 246:	70 0d       	add	r23, r0
 248:	81 1d       	adc	r24, r1
 24a:	11 24       	eor	r1, r1
 24c:	91 1d       	adc	r25, r1
 24e:	b2 9f       	mul	r27, r18
 250:	70 0d       	add	r23, r0
 252:	81 1d       	adc	r24, r1
 254:	11 24       	eor	r1, r1
 256:	91 1d       	adc	r25, r1
 258:	08 95       	ret

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
